
Seguidor_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  0800a798  0800a798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d4  0800a9d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9dc  0800a9dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  20000078  0800aa5c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  0800aa5c  00021ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d57  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8b  00000000  00000000  00040dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00044d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  00046690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029695  00000000  00000000  00047e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d1bf  00000000  00000000  0007149d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106f34  00000000  00000000  0008e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f3c  00000000  00000000  001955e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a780 	.word	0x0800a780

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800a780 	.word	0x0800a780

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000da4:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_FREERTOS_Init+0x78>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	2001      	movs	r0, #1
 8000daa:	f005 fe20 	bl	80069ee <osSemaphoreNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <MX_FREERTOS_Init+0x7c>)
 8000db2:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000db4:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <MX_FREERTOS_Init+0x80>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2001      	movs	r0, #1
 8000dba:	f005 fe18 	bl	80069ee <osSemaphoreNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <MX_FREERTOS_Init+0x84>)
 8000dc2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <MX_FREERTOS_Init+0x88>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_FREERTOS_Init+0x8c>)
 8000dca:	f005 fd63 	bl	8006894 <osThreadNew>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <MX_FREERTOS_Init+0x90>)
 8000dd2:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000dd4:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <MX_FREERTOS_Init+0x94>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <MX_FREERTOS_Init+0x98>)
 8000dda:	f005 fd5b 	bl	8006894 <osThreadNew>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <MX_FREERTOS_Init+0x9c>)
 8000de2:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000de4:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <MX_FREERTOS_Init+0xa0>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4816      	ldr	r0, [pc, #88]	; (8000e44 <MX_FREERTOS_Init+0xa4>)
 8000dea:	f005 fd53 	bl	8006894 <osThreadNew>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <MX_FREERTOS_Init+0xa8>)
 8000df2:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000df4:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <MX_FREERTOS_Init+0xac>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_FREERTOS_Init+0xb0>)
 8000dfa:	f005 fd4b 	bl	8006894 <osThreadNew>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <MX_FREERTOS_Init+0xb4>)
 8000e02:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <MX_FREERTOS_Init+0xb8>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4814      	ldr	r0, [pc, #80]	; (8000e5c <MX_FREERTOS_Init+0xbc>)
 8000e0a:	f005 fd43 	bl	8006894 <osThreadNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <MX_FREERTOS_Init+0xc0>)
 8000e12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	0800a8e0 	.word	0x0800a8e0
 8000e1c:	20000128 	.word	0x20000128
 8000e20:	0800a8f0 	.word	0x0800a8f0
 8000e24:	2000012c 	.word	0x2000012c
 8000e28:	0800a82c 	.word	0x0800a82c
 8000e2c:	08000e65 	.word	0x08000e65
 8000e30:	20000114 	.word	0x20000114
 8000e34:	0800a850 	.word	0x0800a850
 8000e38:	08000ea5 	.word	0x08000ea5
 8000e3c:	20000118 	.word	0x20000118
 8000e40:	0800a874 	.word	0x0800a874
 8000e44:	08000ef5 	.word	0x08000ef5
 8000e48:	2000011c 	.word	0x2000011c
 8000e4c:	0800a898 	.word	0x0800a898
 8000e50:	080010f1 	.word	0x080010f1
 8000e54:	20000120 	.word	0x20000120
 8000e58:	0800a8bc 	.word	0x0800a8bc
 8000e5c:	080011ad 	.word	0x080011ad
 8000e60:	20000124 	.word	0x20000124

08000e64 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <FunctionUltrassom+0x38>)
 8000e70:	f002 fd5e 	bl	8003930 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <FunctionUltrassom+0x3c>)
 8000e78:	f002 fbf0 	bl	800365c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <FunctionUltrassom+0x38>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <FunctionUltrassom+0x38>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0202 	orr.w	r2, r2, #2
 8000e8a:	60da      	str	r2, [r3, #12]
	  htim2.Instance->CCR1 = 5;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <FunctionUltrassom+0x3c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2205      	movs	r2, #5
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
	  osDelay(10);
 8000e94:	200a      	movs	r0, #10
 8000e96:	f005 fd8f 	bl	80069b8 <osDelay>
    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000e9a:	e7ef      	b.n	8000e7c <FunctionUltrassom+0x18>
 8000e9c:	20000134 	.word	0x20000134
 8000ea0:	20000180 	.word	0x20000180

08000ea4 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
  /* Infinite loop */
  for(;;)
  {
    //sprintf(mostrar,"D: %d, V1: %d, V2: %d, DIF: %d \r \n ",(int)distancia,(int)valor1,(int)valor2,(int)diferenca);
	  sprintf(cMostrar,"S2: %d, S3: %d, S4: %d \r \n ",(int)uiIN1,(int)uiIN2,(int)uiIN3);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <FunctionComunica+0x38>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <FunctionComunica+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <FunctionComunica+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <FunctionComunica+0x44>)
 8000ec2:	480a      	ldr	r0, [pc, #40]	; (8000eec <FunctionComunica+0x48>)
 8000ec4:	f009 f8a2 	bl	800a00c <siprintf>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	2264      	movs	r2, #100	; 0x64
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <FunctionComunica+0x48>)
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <FunctionComunica+0x4c>)
 8000ed0:	f004 fa1a 	bl	8005308 <HAL_UART_Transmit>
	  osDelay(100);
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f005 fd6f 	bl	80069b8 <osDelay>
	  sprintf(cMostrar,"S2: %d, S3: %d, S4: %d \r \n ",(int)uiIN1,(int)uiIN2,(int)uiIN3);
 8000eda:	e7e7      	b.n	8000eac <FunctionComunica+0x8>
 8000edc:	20000098 	.word	0x20000098
 8000ee0:	2000009c 	.word	0x2000009c
 8000ee4:	200000a0 	.word	0x200000a0
 8000ee8:	0800a7f8 	.word	0x0800a7f8
 8000eec:	200000b0 	.word	0x200000b0
 8000ef0:	20000218 	.word	0x20000218

08000ef4 <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f001 fa9c 	bl	8002440 <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	486f      	ldr	r0, [pc, #444]	; (80010cc <FunctionSeguidor+0x1d8>)
 8000f10:	f001 fa96 	bl	8002440 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8000f18:	2140      	movs	r1, #64	; 0x40
 8000f1a:	486c      	ldr	r0, [pc, #432]	; (80010cc <FunctionSeguidor+0x1d8>)
 8000f1c:	f001 fa90 	bl	8002440 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	737b      	strb	r3, [r7, #13]
    uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	4868      	ldr	r0, [pc, #416]	; (80010cc <FunctionSeguidor+0x1d8>)
 8000f2a:	f001 fa89 	bl	8002440 <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	733b      	strb	r3, [r7, #12]
    uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
 8000f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f36:	4865      	ldr	r0, [pc, #404]	; (80010cc <FunctionSeguidor+0x1d8>)
 8000f38:	f001 fa82 	bl	8002440 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	72fb      	strb	r3, [r7, #11]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 8000f40:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <FunctionSeguidor+0x1dc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	21c8      	movs	r1, #200	; 0xc8
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fdda 	bl	8006b00 <osSemaphoreAcquire>

    if(uiCLP){
 8000f4c:	7afb      	ldrb	r3, [r7, #11]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d016      	beq.n	8000f80 <FunctionSeguidor+0x8c>
    	uiIN1 = 0;
 8000f52:	4b60      	ldr	r3, [pc, #384]	; (80010d4 <FunctionSeguidor+0x1e0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
      uiIN2 = 0;
 8000f58:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <FunctionSeguidor+0x1e4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

      uiIN3 = 0;
 8000f5e:	4b5f      	ldr	r3, [pc, #380]	; (80010dc <FunctionSeguidor+0x1e8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
      uiIN4 = 0;
 8000f64:	4b5e      	ldr	r3, [pc, #376]	; (80010e0 <FunctionSeguidor+0x1ec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
      uiStart = uiStart?0:1;
 8000f6a:	4b5e      	ldr	r3, [pc, #376]	; (80010e4 <FunctionSeguidor+0x1f0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf0c      	ite	eq
 8000f72:	2301      	moveq	r3, #1
 8000f74:	2300      	movne	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <FunctionSeguidor+0x1f0>)
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e098      	b.n	80010b2 <FunctionSeguidor+0x1be>
    }else if(uiS2 && !uiS3 && uiS4 && uiStart){
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d016      	beq.n	8000fb4 <FunctionSeguidor+0xc0>
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d113      	bne.n	8000fb4 <FunctionSeguidor+0xc0>
 8000f8c:	7b7b      	ldrb	r3, [r7, #13]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d010      	beq.n	8000fb4 <FunctionSeguidor+0xc0>
 8000f92:	4b54      	ldr	r3, [pc, #336]	; (80010e4 <FunctionSeguidor+0x1f0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00c      	beq.n	8000fb4 <FunctionSeguidor+0xc0>
    	uiIN1 = 1;
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <FunctionSeguidor+0x1e0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
    	uiIN2 = 0;
 8000fa0:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <FunctionSeguidor+0x1e4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]

    	uiIN3 = 0;
 8000fa6:	4b4d      	ldr	r3, [pc, #308]	; (80010dc <FunctionSeguidor+0x1e8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
    	uiIN4 = 1;
 8000fac:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <FunctionSeguidor+0x1ec>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e07e      	b.n	80010b2 <FunctionSeguidor+0x1be>
    }else if(uiS2 && uiS3 && !uiS4 && uiStart){
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d016      	beq.n	8000fe8 <FunctionSeguidor+0xf4>
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <FunctionSeguidor+0xf4>
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d110      	bne.n	8000fe8 <FunctionSeguidor+0xf4>
 8000fc6:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <FunctionSeguidor+0x1f0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00c      	beq.n	8000fe8 <FunctionSeguidor+0xf4>
    	uiIN1 = 1;
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <FunctionSeguidor+0x1e0>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
      uiIN2 = 0;
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <FunctionSeguidor+0x1e4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]

      uiIN3 = 0;
 8000fda:	4b40      	ldr	r3, [pc, #256]	; (80010dc <FunctionSeguidor+0x1e8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
      uiIN4 = 0;
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <FunctionSeguidor+0x1ec>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e064      	b.n	80010b2 <FunctionSeguidor+0x1be>
    }else if(!uiS2 && uiS3 && uiS4 && uiStart){
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <FunctionSeguidor+0x128>
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <FunctionSeguidor+0x128>
 8000ff4:	7b7b      	ldrb	r3, [r7, #13]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d010      	beq.n	800101c <FunctionSeguidor+0x128>
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <FunctionSeguidor+0x1f0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00c      	beq.n	800101c <FunctionSeguidor+0x128>
    	uiIN1 = 0;
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <FunctionSeguidor+0x1e0>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
      uiIN2 = 0;
 8001008:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <FunctionSeguidor+0x1e4>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]

      uiIN3 = 0;
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <FunctionSeguidor+0x1e8>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
      uiIN4 = 1;
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <FunctionSeguidor+0x1ec>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e04a      	b.n	80010b2 <FunctionSeguidor+0x1be>
    }else if(uiS2 && uiS3 && uiS4 && uiStart){
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d028      	beq.n	8001074 <FunctionSeguidor+0x180>
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d025      	beq.n	8001074 <FunctionSeguidor+0x180>
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d022      	beq.n	8001074 <FunctionSeguidor+0x180>
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <FunctionSeguidor+0x1f0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d01e      	beq.n	8001074 <FunctionSeguidor+0x180>
      //IN2 = 0;

      //IN3 = 0;
      //IN4 = 0;

      uiIN1 = 1;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <FunctionSeguidor+0x1e0>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
      uiIN2 = 0;
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <FunctionSeguidor+0x1e4>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

      uiIN3 = 0;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <FunctionSeguidor+0x1e8>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
      uiIN4 = 1;
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <FunctionSeguidor+0x1ec>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]

    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2104      	movs	r1, #4
 8001052:	4825      	ldr	r0, [pc, #148]	; (80010e8 <FunctionSeguidor+0x1f4>)
 8001054:	f001 fa0c 	bl	8002470 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105c:	f005 fcac 	bl	80069b8 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2104      	movs	r1, #4
 8001064:	4820      	ldr	r0, [pc, #128]	; (80010e8 <FunctionSeguidor+0x1f4>)
 8001066:	f001 fa03 	bl	8002470 <HAL_GPIO_WritePin>
    	osDelay(500);
 800106a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106e:	f005 fca3 	bl	80069b8 <osDelay>
 8001072:	e01e      	b.n	80010b2 <FunctionSeguidor+0x1be>
    } else if(!uiS2 && !uiS3 && !uiS4 && uiStart){
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11b      	bne.n	80010b2 <FunctionSeguidor+0x1be>
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d118      	bne.n	80010b2 <FunctionSeguidor+0x1be>
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d115      	bne.n	80010b2 <FunctionSeguidor+0x1be>
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <FunctionSeguidor+0x1f0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d011      	beq.n	80010b2 <FunctionSeguidor+0x1be>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2104      	movs	r1, #4
 8001092:	4815      	ldr	r0, [pc, #84]	; (80010e8 <FunctionSeguidor+0x1f4>)
 8001094:	f001 f9ec 	bl	8002470 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109c:	f005 fc8c 	bl	80069b8 <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2104      	movs	r1, #4
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <FunctionSeguidor+0x1f4>)
 80010a6:	f001 f9e3 	bl	8002470 <HAL_GPIO_WritePin>
    	osDelay(500);
 80010aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ae:	f005 fc83 	bl	80069b8 <osDelay>
    }
    uiVelocidadeRef = 80;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <FunctionSeguidor+0x1f8>)
 80010b4:	2250      	movs	r2, #80	; 0x50
 80010b6:	701a      	strb	r2, [r3, #0]

    osSemaphoreRelease(SemaphoreMovimentaHandle);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <FunctionSeguidor+0x1dc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f005 fd71 	bl	8006ba4 <osSemaphoreRelease>
    osDelay(200);
 80010c2:	20c8      	movs	r0, #200	; 0xc8
 80010c4:	f005 fc78 	bl	80069b8 <osDelay>
  {
 80010c8:	e718      	b.n	8000efc <FunctionSeguidor+0x8>
 80010ca:	bf00      	nop
 80010cc:	48000800 	.word	0x48000800
 80010d0:	20000128 	.word	0x20000128
 80010d4:	20000098 	.word	0x20000098
 80010d8:	2000009c 	.word	0x2000009c
 80010dc:	200000a0 	.word	0x200000a0
 80010e0:	200000a4 	.word	0x200000a4
 80010e4:	200000ac 	.word	0x200000ac
 80010e8:	48000c00 	.word	0x48000c00
 80010ec:	200000a8 	.word	0x200000a8

080010f0 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f8:	2100      	movs	r1, #0
 80010fa:	4823      	ldr	r0, [pc, #140]	; (8001188 <FunctionAtivarMotores+0x98>)
 80010fc:	f002 faae 	bl	800365c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001100:	2104      	movs	r1, #4
 8001102:	4821      	ldr	r0, [pc, #132]	; (8001188 <FunctionAtivarMotores+0x98>)
 8001104:	f002 faaa 	bl	800365c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <FunctionAtivarMotores+0x9c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	21c8      	movs	r1, #200	; 0xc8
 800110e:	4618      	mov	r0, r3
 8001110:	f005 fcf6 	bl	8006b00 <osSemaphoreAcquire>

	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, uiIN1);
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <FunctionAtivarMotores+0xa0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f001 f9a4 	bl	8002470 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, uiIN2);
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <FunctionAtivarMotores+0xa4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f001 f99a 	bl	8002470 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, uiIN3);
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <FunctionAtivarMotores+0xa8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4815      	ldr	r0, [pc, #84]	; (800119c <FunctionAtivarMotores+0xac>)
 8001148:	f001 f992 	bl	8002470 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, uiIN4);
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <FunctionAtivarMotores+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	2140      	movs	r1, #64	; 0x40
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <FunctionAtivarMotores+0xb4>)
 8001158:	f001 f98a 	bl	8002470 <HAL_GPIO_WritePin>
	  htim3.Instance->CCR1 = uiVelocidadeRef;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <FunctionAtivarMotores+0xb8>)
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <FunctionAtivarMotores+0x98>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = uiVelocidadeRef+30;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <FunctionAtivarMotores+0xb8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f103 021e 	add.w	r2, r3, #30
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <FunctionAtivarMotores+0x98>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38

	  //htim3.Instance->CCR1 = 85;
	  //htim3.Instance->CCR2 = 85;
	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <FunctionAtivarMotores+0x9c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fd13 	bl	8006ba4 <osSemaphoreRelease>
	  osDelay(200);
 800117e:	20c8      	movs	r0, #200	; 0xc8
 8001180:	f005 fc1a 	bl	80069b8 <osDelay>
    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 8001184:	e7c0      	b.n	8001108 <FunctionAtivarMotores+0x18>
 8001186:	bf00      	nop
 8001188:	200001cc 	.word	0x200001cc
 800118c:	20000128 	.word	0x20000128
 8001190:	20000098 	.word	0x20000098
 8001194:	2000009c 	.word	0x2000009c
 8001198:	200000a0 	.word	0x200000a0
 800119c:	48000800 	.word	0x48000800
 80011a0:	200000a4 	.word	0x200000a4
 80011a4:	48000400 	.word	0x48000400
 80011a8:	200000a8 	.word	0x200000a8

080011ac <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
  /* Infinite loop */
  for(;;)
  {
    
    osDelay(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f005 fbff 	bl	80069b8 <osDelay>
 80011ba:	e7fb      	b.n	80011b4 <FunctionOdometria+0x8>
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a43      	ldr	r2, [pc, #268]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d17b      	bne.n	80012c8 <HAL_TIM_IC_CaptureCallback+0x108>
		if (uiIs_First) {
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01b      	beq.n	8001210 <HAL_TIM_IC_CaptureCallback+0x50>
			uiValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f003 f93e 	bl	800445c <HAL_TIM_ReadCapturedValue>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011e6:	701a      	strb	r2, [r3, #0]
			uiIs_First = 0;
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 020a 	bic.w	r2, r2, #10
 80011fc:	621a      	str	r2, [r3, #32]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0202 	orr.w	r2, r2, #2
 800120c:	621a      	str	r2, [r3, #32]
			uiIs_First = 1;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 800120e:	e05b      	b.n	80012c8 <HAL_TIM_IC_CaptureCallback+0x108>
		} else if(!uiIs_First){
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d157      	bne.n	80012c8 <HAL_TIM_IC_CaptureCallback+0x108>
			uiValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f003 f91e 	bl	800445c <HAL_TIM_ReadCapturedValue>
 8001220:	4603      	mov	r3, r0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001226:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
			uiDiferenca = uiValor2>uiValor1?uiValor2-uiValor1:uiValor1-uiValor2;
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d906      	bls.n	800124a <HAL_TIM_IC_CaptureCallback+0x8a>
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	e005      	b.n	8001256 <HAL_TIM_IC_CaptureCallback+0x96>
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001258:	7013      	strb	r3, [r2, #0]
			uiDistancia = uiDiferenca * .034/2;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f980 	bl	8000564 <__aeabi_i2d>
 8001264:	a31a      	add	r3, pc, #104	; (adr r3, 80012d0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9e5 	bl	8000638 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127e:	f7ff fb05 	bl	800088c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fbe7 	bl	8000a5c <__aeabi_d2uiz>
 800128e:	4603      	mov	r3, r0
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001294:	701a      	strb	r2, [r3, #0]
			uiIs_First = 1;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a1a      	ldr	r2, [r3, #32]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020a 	bic.w	r2, r2, #10
 80012aa:	621a      	str	r2, [r3, #32]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a12      	ldr	r2, [r2, #32]
 80012b6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0202 	bic.w	r2, r2, #2
 80012c6:	60da      	str	r2, [r3, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	b020c49c 	.word	0xb020c49c
 80012d4:	3fa16872 	.word	0x3fa16872
 80012d8:	20000134 	.word	0x20000134
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000094 	.word	0x20000094
 80012e4:	20000095 	.word	0x20000095
 80012e8:	20000096 	.word	0x20000096
 80012ec:	20000097 	.word	0x20000097

080012f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <MX_GPIO_Init+0x154>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a4e      	ldr	r2, [pc, #312]	; (8001444 <MX_GPIO_Init+0x154>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <MX_GPIO_Init+0x154>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <MX_GPIO_Init+0x154>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a48      	ldr	r2, [pc, #288]	; (8001444 <MX_GPIO_Init+0x154>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <MX_GPIO_Init+0x154>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <MX_GPIO_Init+0x154>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a42      	ldr	r2, [pc, #264]	; (8001444 <MX_GPIO_Init+0x154>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <MX_GPIO_Init+0x154>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_GPIO_Init+0x154>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <MX_GPIO_Init+0x154>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <MX_GPIO_Init+0x154>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <MX_GPIO_Init+0x158>)
 800136c:	f001 f880 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137a:	f001 f879 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2104      	movs	r1, #4
 8001382:	4832      	ldr	r0, [pc, #200]	; (800144c <MX_GPIO_Init+0x15c>)
 8001384:	f001 f874 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2140      	movs	r1, #64	; 0x40
 800138c:	4830      	ldr	r0, [pc, #192]	; (8001450 <MX_GPIO_Init+0x160>)
 800138e:	f001 f86f 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S3_Pin|S4_Pin|CLP_Pin|NEAR_Pin;
 8001392:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4828      	ldr	r0, [pc, #160]	; (8001448 <MX_GPIO_Init+0x158>)
 80013a8:	f000 fec8 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4821      	ldr	r0, [pc, #132]	; (8001448 <MX_GPIO_Init+0x158>)
 80013c4:	f000 feba 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 80013c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f000 feaa 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f000 fe9c 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001404:	2304      	movs	r3, #4
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_GPIO_Init+0x15c>)
 800141c:	f000 fe8e 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN4_Pin;
 8001420:	2340      	movs	r3, #64	; 0x40
 8001422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_GPIO_Init+0x160>)
 8001438:	f000 fe80 	bl	800213c <HAL_GPIO_Init>

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48000400 	.word	0x48000400

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001458:	f000 fc2f 	bl	8001cba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145c:	f000 f811 	bl	8001482 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001460:	f7ff ff46 	bl	80012f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001464:	f000 f91c 	bl	80016a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001468:	f000 f974 	bl	8001754 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 800146c:	f000 fb52 	bl	8001b14 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8001470:	f000 f9e6 	bl	8001840 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001474:	f005 f9c4 	bl	8006800 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001478:	f7ff fc92 	bl	8000da0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800147c:	f005 f9e4 	bl	8006848 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001480:	e7fe      	b.n	8001480 <main+0x2c>

08001482 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b094      	sub	sp, #80	; 0x50
 8001486:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	2238      	movs	r2, #56	; 0x38
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f008 fca5 	bl	8009de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014a8:	f000 fffa 	bl	80024a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014be:	2302      	movs	r3, #2
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80014c6:	2319      	movs	r3, #25
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 f884 	bl	80025e8 <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x68>
  {
    Error_Handler();
 80014e6:	f000 f819 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2303      	movs	r3, #3
 80014f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2103      	movs	r1, #3
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fb87 	bl	8002c18 <HAL_RCC_ClockConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001510:	f000 f804 	bl	800151c <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	3750      	adds	r7, #80	; 0x50
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_MspInit+0x4c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_MspInit+0x4c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_MspInit+0x4c>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_MspInit+0x4c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_MspInit+0x4c>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_MspInit+0x4c>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	210f      	movs	r1, #15
 8001562:	f06f 0001 	mvn.w	r0, #1
 8001566:	f000 fcf4 	bl	8001f52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a8:	f000 fbda 	bl	8001d60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015ac:	f007 fa7c 	bl	8008aa8 <xTaskGetSchedulerState>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015b6:	f008 f95f 	bl	8009878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM1_CC_IRQHandler+0x10>)
 80015c6:	f002 fb03 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000134 	.word	0x20000134

080015d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM2_IRQHandler+0x10>)
 80015da:	f002 faf9 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000180 	.word	0x20000180

080015e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM3_IRQHandler+0x10>)
 80015ee:	f002 faef 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200001cc 	.word	0x200001cc

080015fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <LPUART1_IRQHandler+0x10>)
 8001602:	f003 ff17 	bl	8005434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000218 	.word	0x20000218

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f008 fb94 	bl	8009d6c <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20020000 	.word	0x20020000
 8001670:	00000400 	.word	0x00000400
 8001674:	20000130 	.word	0x20000130
 8001678:	20001cd0 	.word	0x20001cd0

0800167c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <MX_TIM1_Init+0xac>)
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <MX_TIM1_Init+0xb0>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 125-1;
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_TIM1_Init+0xac>)
 80016c6:	227c      	movs	r2, #124	; 0x7c
 80016c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_TIM1_Init+0xac>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_TIM1_Init+0xac>)
 80016d2:	f240 128f 	movw	r2, #399	; 0x18f
 80016d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_TIM1_Init+0xac>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_TIM1_Init+0xac>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_TIM1_Init+0xac>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_TIM1_Init+0xac>)
 80016ec:	f002 f8c8 	bl	8003880 <HAL_TIM_IC_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016f6:	f7ff ff11 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	480f      	ldr	r0, [pc, #60]	; (800174c <MX_TIM1_Init+0xac>)
 800170e:	f003 fccf 	bl	80050b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001718:	f7ff ff00 	bl	800151c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001720:	2301      	movs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_TIM1_Init+0xac>)
 8001734:	f002 fbcb 	bl	8003ece <HAL_TIM_IC_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800173e:	f7ff feed 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000134 	.word	0x20000134
 8001750:	40012c00 	.word	0x40012c00

08001754 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_TIM2_Init+0xe8>)
 8001788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 125-1;
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <MX_TIM2_Init+0xe8>)
 8001790:	227c      	movs	r2, #124	; 0x7c
 8001792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <MX_TIM2_Init+0xe8>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <MX_TIM2_Init+0xe8>)
 800179c:	f240 128f 	movw	r2, #399	; 0x18f
 80017a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <MX_TIM2_Init+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <MX_TIM2_Init+0xe8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_TIM2_Init+0xe8>)
 80017b0:	f001 fe9c 	bl	80034ec <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017ba:	f7ff feaf 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_TIM2_Init+0xe8>)
 80017cc:	f002 fd30 	bl	8004230 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017d6:	f7ff fea1 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_TIM2_Init+0xe8>)
 80017dc:	f001 fedd 	bl	800359a <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017e6:	f7ff fe99 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <MX_TIM2_Init+0xe8>)
 80017fa:	f003 fc59 	bl	80050b0 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001804:	f7ff fe8a 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM2_Init+0xe8>)
 8001820:	f002 fbf2 	bl	8004008 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800182a:	f7ff fe77 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM2_Init+0xe8>)
 8001830:	f000 f914 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000180 	.word	0x20000180

08001840 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <MX_TIM3_Init+0xfc>)
 8001874:	4a32      	ldr	r2, [pc, #200]	; (8001940 <MX_TIM3_Init+0x100>)
 8001876:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 125-1;
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_TIM3_Init+0xfc>)
 800187a:	227c      	movs	r2, #124	; 0x7c
 800187c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <MX_TIM3_Init+0xfc>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_TIM3_Init+0xfc>)
 8001886:	22c7      	movs	r2, #199	; 0xc7
 8001888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b2c      	ldr	r3, [pc, #176]	; (800193c <MX_TIM3_Init+0xfc>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_TIM3_Init+0xfc>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001896:	4829      	ldr	r0, [pc, #164]	; (800193c <MX_TIM3_Init+0xfc>)
 8001898:	f001 fe28 	bl	80034ec <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018a2:	f7ff fe3b 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4822      	ldr	r0, [pc, #136]	; (800193c <MX_TIM3_Init+0xfc>)
 80018b4:	f002 fcbc 	bl	8004230 <HAL_TIM_ConfigClockSource>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018be:	f7ff fe2d 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018c2:	481e      	ldr	r0, [pc, #120]	; (800193c <MX_TIM3_Init+0xfc>)
 80018c4:	f001 fe69 	bl	800359a <HAL_TIM_PWM_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018ce:	f7ff fe25 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4816      	ldr	r0, [pc, #88]	; (800193c <MX_TIM3_Init+0xfc>)
 80018e2:	f003 fbe5 	bl	80050b0 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018ec:	f7ff fe16 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	2360      	movs	r3, #96	; 0x60
 80018f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM3_Init+0xfc>)
 8001908:	f002 fb7e 	bl	8004008 <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001912:	f7ff fe03 	bl	800151c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	2204      	movs	r2, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM3_Init+0xfc>)
 800191e:	f002 fb73 	bl	8004008 <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001928:	f7ff fdf8 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM3_Init+0xfc>)
 800192e:	f000 f895 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 8001932:	bf00      	nop
 8001934:	3738      	adds	r7, #56	; 0x38
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200001cc 	.word	0x200001cc
 8001940:	40000400 	.word	0x40000400

08001944 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_TIM_IC_MspInit+0x8c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d12f      	bne.n	80019c6 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_TIM_IC_MspInit+0x90>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <HAL_TIM_IC_MspInit+0x90>)
 800196c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001970:	6613      	str	r3, [r2, #96]	; 0x60
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_TIM_IC_MspInit+0x90>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_TIM_IC_MspInit+0x90>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_TIM_IC_MspInit+0x90>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_TIM_IC_MspInit+0x90>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001996:	2301      	movs	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019a6:	2302      	movs	r3, #2
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_TIM_IC_MspInit+0x94>)
 80019b2:	f000 fbc3 	bl	800213c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	201b      	movs	r0, #27
 80019bc:	f000 fac9 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019c0:	201b      	movs	r0, #27
 80019c2:	f000 fae0 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	; 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000800 	.word	0x48000800

080019dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d114      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_TIM_Base_MspInit+0x78>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_TIM_Base_MspInit+0x78>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_TIM_Base_MspInit+0x78>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2105      	movs	r1, #5
 8001a0a:	201c      	movs	r0, #28
 8001a0c:	f000 faa1 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a10:	201c      	movs	r0, #28
 8001a12:	f000 fab8 	bl	8001f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a16:	e018      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_TIM_Base_MspInit+0x7c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d113      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_TIM_Base_MspInit+0x78>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_TIM_Base_MspInit+0x78>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_TIM_Base_MspInit+0x78>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	201d      	movs	r0, #29
 8001a40:	f000 fa87 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a44:	201d      	movs	r0, #29
 8001a46:	f000 fa9e 	bl	8001f86 <HAL_NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40000400 	.word	0x40000400

08001a5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d11e      	bne.n	8001abc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 8001a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f000 fb41 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001aba:	e020      	b.n	8001afe <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d11b      	bne.n	8001afe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8001ade:	2330      	movs	r3, #48	; 0x30
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aee:	2302      	movs	r3, #2
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_MspPostInit+0xb4>)
 8001afa:	f000 fb1f 	bl	800213c <HAL_GPIO_Init>
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	48000400 	.word	0x48000400

08001b14 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b1a:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <MX_LPUART1_UART_Init+0x90>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b56:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b58:	f003 fb86 	bl	8005268 <HAL_UART_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b62:	f7ff fcdb 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b6a:	f004 fd4a 	bl	8006602 <HAL_UARTEx_SetTxFifoThreshold>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b74:	f7ff fcd2 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b7c:	f004 fd7f 	bl	800667e <HAL_UARTEx_SetRxFifoThreshold>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b86:	f7ff fcc9 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b8c:	f004 fd00 	bl	8006590 <HAL_UARTEx_DisableFifoMode>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b96:	f7ff fcc1 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000218 	.word	0x20000218
 8001ba4:	40008000 	.word	0x40008000

08001ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09e      	sub	sp, #120	; 0x78
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2254      	movs	r2, #84	; 0x54
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f008 f909 	bl	8009de0 <memset>
  if(uartHandle->Instance==LPUART1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <HAL_UART_MspInit+0xb8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d13e      	bne.n	8001c56 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 fa33 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf0:	f7ff fc94 	bl	800151c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_UART_MspInit+0xbc>)
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <HAL_UART_MspInit+0xbc>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_UART_MspInit+0xbc>)
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_UART_MspInit+0xbc>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_UART_MspInit+0xbc>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_UART_MspInit+0xbc>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c24:	230c      	movs	r3, #12
 8001c26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c34:	230c      	movs	r3, #12
 8001c36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c42:	f000 fa7b 	bl	800213c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2105      	movs	r1, #5
 8001c4a:	205b      	movs	r0, #91	; 0x5b
 8001c4c:	f000 f981 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001c50:	205b      	movs	r0, #91	; 0x5b
 8001c52:	f000 f998 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	3778      	adds	r7, #120	; 0x78
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40008000 	.word	0x40008000
 8001c64:	40021000 	.word	0x40021000

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6e:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c84:	4c0b      	ldr	r4, [pc, #44]	; (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c92:	f7ff fcf3 	bl	800167c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f008 f86f 	bl	8009d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7ff fbdb 	bl	8001454 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   r0, =_estack
 8001ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cac:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 8001cb0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001cb4:	20001ccc 	.word	0x20001ccc

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>

08001cba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 f939 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f80e 	bl	8001cec <HAL_InitTick>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	71fb      	strb	r3, [r7, #7]
 8001cda:	e001      	b.n	8001ce0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cdc:	f7ff fc24 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_InitTick+0x68>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d022      	beq.n	8001d46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_InitTick+0x6c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_InitTick+0x68>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 f944 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	d809      	bhi.n	8001d3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d26:	2200      	movs	r2, #0
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2e:	f000 f910 	bl	8001f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_InitTick+0x70>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e007      	b.n	8001d4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e004      	b.n	8001d4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000000c 	.word	0x2000000c
 8001d58:	20000004 	.word	0x20000004
 8001d5c:	20000008 	.word	0x20000008

08001d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_IncTick+0x1c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_IncTick+0x20>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <HAL_IncTick+0x1c>)
 8001d70:	6013      	str	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200002a8 	.word	0x200002a8
 8001d80:	2000000c 	.word	0x2000000c

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200002a8 	.word	0x200002a8

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff40 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff90 	bl	8001e90 <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5f 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff33 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa4 	bl	8001ef8 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d005      	beq.n	8001fde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e037      	b.n	800204e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 020e 	bic.w	r2, r2, #14
 8001fec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ffc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f003 021f 	and.w	r2, r3, #31
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800202a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00c      	beq.n	800204e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002042:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800204c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d00d      	beq.n	80020a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2204      	movs	r2, #4
 8002088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e047      	b.n	8002130 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 020e 	bic.w	r2, r2, #14
 80020ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00c      	beq.n	8002110 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002104:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800210e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
    }
  }
  return status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800214a:	e15a      	b.n	8002402 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2101      	movs	r1, #1
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 814c 	beq.w	80023fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d005      	beq.n	800217c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002178:	2b02      	cmp	r3, #2
 800217a:	d130      	bne.n	80021de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b2:	2201      	movs	r2, #1
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 0201 	and.w	r2, r3, #1
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d017      	beq.n	800221a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d123      	bne.n	800226e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	6939      	ldr	r1, [r7, #16]
 800226a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0203 	and.w	r2, r3, #3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80a6 	beq.w	80023fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b0:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_GPIO_Init+0x2e4>)
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <HAL_GPIO_Init+0x2e4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6613      	str	r3, [r2, #96]	; 0x60
 80022bc:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HAL_GPIO_Init+0x2e4>)
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022c8:	4a56      	ldr	r2, [pc, #344]	; (8002424 <HAL_GPIO_Init+0x2e8>)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022f2:	d01f      	beq.n	8002334 <HAL_GPIO_Init+0x1f8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_GPIO_Init+0x2ec>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d019      	beq.n	8002330 <HAL_GPIO_Init+0x1f4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a4b      	ldr	r2, [pc, #300]	; (800242c <HAL_GPIO_Init+0x2f0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <HAL_GPIO_Init+0x1f0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a4a      	ldr	r2, [pc, #296]	; (8002430 <HAL_GPIO_Init+0x2f4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00d      	beq.n	8002328 <HAL_GPIO_Init+0x1ec>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a49      	ldr	r2, [pc, #292]	; (8002434 <HAL_GPIO_Init+0x2f8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d007      	beq.n	8002324 <HAL_GPIO_Init+0x1e8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a48      	ldr	r2, [pc, #288]	; (8002438 <HAL_GPIO_Init+0x2fc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d101      	bne.n	8002320 <HAL_GPIO_Init+0x1e4>
 800231c:	2305      	movs	r3, #5
 800231e:	e00a      	b.n	8002336 <HAL_GPIO_Init+0x1fa>
 8002320:	2306      	movs	r3, #6
 8002322:	e008      	b.n	8002336 <HAL_GPIO_Init+0x1fa>
 8002324:	2304      	movs	r3, #4
 8002326:	e006      	b.n	8002336 <HAL_GPIO_Init+0x1fa>
 8002328:	2303      	movs	r3, #3
 800232a:	e004      	b.n	8002336 <HAL_GPIO_Init+0x1fa>
 800232c:	2302      	movs	r3, #2
 800232e:	e002      	b.n	8002336 <HAL_GPIO_Init+0x1fa>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_GPIO_Init+0x1fa>
 8002334:	2300      	movs	r3, #0
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002346:	4937      	ldr	r1, [pc, #220]	; (8002424 <HAL_GPIO_Init+0x2e8>)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_GPIO_Init+0x300>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002378:	4a30      	ldr	r2, [pc, #192]	; (800243c <HAL_GPIO_Init+0x300>)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_GPIO_Init+0x300>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_GPIO_Init+0x300>)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_GPIO_Init+0x300>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_GPIO_Init+0x300>)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_GPIO_Init+0x300>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <HAL_GPIO_Init+0x300>)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	f47f ae9d 	bne.w	800214c <HAL_GPIO_Init+0x10>
  }
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	48000c00 	.word	0x48000c00
 8002434:	48001000 	.word	0x48001000
 8002438:	48001400 	.word	0x48001400
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e001      	b.n	8002462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800248c:	e002      	b.n	8002494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d141      	bne.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ae:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ba:	d131      	bne.n	8002520 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024bc:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c2:	4a46      	ldr	r2, [pc, #280]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d4:	4a41      	ldr	r2, [pc, #260]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2232      	movs	r2, #50	; 0x32
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	4a3f      	ldr	r2, [pc, #252]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024f2:	e002      	b.n	80024fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d102      	bne.n	800250e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f2      	bne.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800250e:	4b33      	ldr	r3, [pc, #204]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251a:	d158      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e057      	b.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002526:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800252c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002530:	e04d      	b.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002538:	d141      	bne.n	80025be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d131      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002560:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2232      	movs	r2, #50	; 0x32
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257e:	e002      	b.n	8002586 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3b01      	subs	r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002592:	d102      	bne.n	800259a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f2      	bne.n	8002580 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d112      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e011      	b.n	80025d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025bc:	e007      	b.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40007000 	.word	0x40007000
 80025e0:	20000004 	.word	0x20000004
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e306      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002606:	4b97      	ldr	r3, [pc, #604]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002610:	4b94      	ldr	r3, [pc, #592]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x3e>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d002      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b8d      	ldr	r3, [pc, #564]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e2e1      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b85      	ldr	r3, [pc, #532]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a84      	ldr	r2, [pc, #528]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b7f      	ldr	r3, [pc, #508]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7e      	ldr	r2, [pc, #504]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b7c      	ldr	r3, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7b      	ldr	r2, [pc, #492]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b78      	ldr	r3, [pc, #480]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a77      	ldr	r2, [pc, #476]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b75      	ldr	r3, [pc, #468]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a74      	ldr	r2, [pc, #464]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7ff fb70 	bl	8001d84 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff fb6c 	bl	8001d84 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e2a6      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7ff fb5c 	bl	8001d84 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff fb58 	bl	8001d84 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e292      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	4b60      	ldr	r3, [pc, #384]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d075      	beq.n	80027ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002708:	4b56      	ldr	r3, [pc, #344]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0x136>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d002      	beq.n	8002724 <HAL_RCC_OscConfig+0x13c>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11f      	bne.n	8002764 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x154>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e265      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	4946      	ldr	r1, [pc, #280]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_RCC_OscConfig+0x280>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fac9 	bl	8001cec <HAL_InitTick>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d043      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e251      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7ff fb04 	bl	8001d84 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7ff fb00 	bl	8001d84 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e23a      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	492d      	ldr	r1, [pc, #180]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	e01a      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b4:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff fae0 	bl	8001d84 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7ff fadc 	bl	8001d84 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e216      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1e0>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01c      	beq.n	8002838 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002804:	4a17      	ldr	r2, [pc, #92]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7ff fab9 	bl	8001d84 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002816:	f7ff fab5 	bl	8001d84 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e1ef      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ef      	beq.n	8002816 <HAL_RCC_OscConfig+0x22e>
 8002836:	e020      	b.n	800287a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7ff fa9c 	bl	8001d84 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284e:	e00d      	b.n	800286c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7ff fa98 	bl	8001d84 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d906      	bls.n	800286c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1d2      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800286c:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800286e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ea      	bne.n	8002850 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a6 	beq.w	80029d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800288c:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x2b4>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x2b6>
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4b7f      	ldr	r3, [pc, #508]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a7e      	ldr	r2, [pc, #504]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
 80028ae:	4b7c      	ldr	r3, [pc, #496]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7ff fa55 	bl	8001d84 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7ff fa51 	bl	8001d84 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e18b      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f0:	4b6c      	ldr	r3, [pc, #432]	; (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <HAL_RCC_OscConfig+0x32e>
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002914:	e024      	b.n	8002960 <HAL_RCC_OscConfig+0x378>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d110      	bne.n	8002940 <HAL_RCC_OscConfig+0x358>
 800291e:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	4a5e      	ldr	r2, [pc, #376]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293e:	e00f      	b.n	8002960 <HAL_RCC_OscConfig+0x378>
 8002940:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d016      	beq.n	8002996 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff fa0c 	bl	8001d84 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7ff fa08 	bl	8001d84 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e140      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ed      	beq.n	8002970 <HAL_RCC_OscConfig+0x388>
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7ff f9f5 	bl	8001d84 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7ff f9f1 	bl	8001d84 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e129      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ed      	bne.n	800299e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029c2:	7ffb      	ldrb	r3, [r7, #31]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d03c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ee:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff f9c4 	bl	8001d84 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a00:	f7ff f9c0 	bl	8001d84 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0fa      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCC_OscConfig+0x418>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7ff f9a7 	bl	8001d84 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3a:	f7ff f9a3 	bl	8001d84 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0dd      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80d1 	beq.w	8002c06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	f000 808b 	beq.w	8002b88 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d15e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7ff f97d 	bl	8001d84 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7ff f979 	bl	8001d84 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d905      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0b3      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ec      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab4:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <HAL_RCC_OscConfig+0x62c>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6a11      	ldr	r1, [r2, #32]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ace:	0212      	lsls	r2, r2, #8
 8002ad0:	4311      	orrs	r1, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0552      	lsls	r2, r2, #21
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0652      	lsls	r2, r2, #25
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002aee:	06d2      	lsls	r2, r2, #27
 8002af0:	430a      	orrs	r2, r1
 8002af2:	4947      	ldr	r1, [pc, #284]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b45      	ldr	r3, [pc, #276]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a44      	ldr	r2, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a41      	ldr	r2, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7ff f938 	bl	8001d84 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7ff f934 	bl	8001d84 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e06e      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x530>
 8002b36:	e066      	b.n	8002c06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a31      	ldr	r2, [pc, #196]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b4a:	f023 0303 	bic.w	r3, r3, #3
 8002b4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a2e      	ldr	r2, [pc, #184]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7ff f910 	bl	8001d84 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7ff f90c 	bl	8001d84 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e046      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x580>
 8002b86:	e03e      	b.n	8002c06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e039      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d12c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d123      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d11b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d113      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	019f800c 	.word	0x019f800c

08002c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e11e      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b91      	ldr	r3, [pc, #580]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b8e      	ldr	r3, [pc, #568]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	498c      	ldr	r1, [pc, #560]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b8a      	ldr	r3, [pc, #552]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e106      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d073      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d129      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c74:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0f4      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c84:	f000 f99e 	bl	8002fc4 <RCC_GetSysClockFreqFromPLLSource>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_RCC_ClockConfig+0x268>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d93f      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c92:	4b7a      	ldr	r3, [pc, #488]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d033      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d12f      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cb2:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cba:	4a70      	ldr	r2, [pc, #448]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e024      	b.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0c6      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce0:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0be      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cf0:	f000 f8ce 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_RCC_ClockConfig+0x268>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d909      	bls.n	8002d12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d06:	4a5d      	ldr	r2, [pc, #372]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b5a      	ldr	r3, [pc, #360]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4957      	ldr	r1, [pc, #348]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d24:	f7ff f82e 	bl	8001d84 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7ff f82a 	bl	8001d84 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e095      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a42      	ldr	r2, [pc, #264]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d8c:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4936      	ldr	r1, [pc, #216]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
 8002da6:	e008      	b.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d21d      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 020f 	bic.w	r2, r3, #15
 8002dd0:	4929      	ldr	r1, [pc, #164]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dd8:	f7fe ffd4 	bl	8001d84 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7fe ffd0 	bl	8001d84 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e03b      	b.n	8002e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x260>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1ed      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4917      	ldr	r1, [pc, #92]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490f      	ldr	r1, [pc, #60]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e42:	f000 f825 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_ClockConfig+0x264>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490c      	ldr	r1, [pc, #48]	; (8002e84 <HAL_RCC_ClockConfig+0x26c>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x270>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe ff40 	bl	8001cec <HAL_InitTick>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	04c4b400 	.word	0x04c4b400
 8002e84:	0800a900 	.word	0x0800a900
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	20000008 	.word	0x20000008

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e047      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e03e      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d136      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3301      	adds	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d10c      	bne.n	8002efe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eee:	68d2      	ldr	r2, [r2, #12]
 8002ef0:	0a12      	lsrs	r2, r2, #8
 8002ef2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	0a12      	lsrs	r2, r2, #8
 8002f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f10:	fb02 f303 	mul.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
      break;
 8002f16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	0e5b      	lsrs	r3, r3, #25
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e001      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f38:	693b      	ldr	r3, [r7, #16]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200

08002f54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4904      	ldr	r1, [pc, #16]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	0800a910 	.word	0x0800a910

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f9c:	f7ff ffda 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0adb      	lsrs	r3, r3, #11
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	0800a910 	.word	0x0800a910

08002fc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d10c      	bne.n	8003002 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ff2:	68d2      	ldr	r2, [r2, #12]
 8002ff4:	0a12      	lsrs	r2, r2, #8
 8002ff6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	617b      	str	r3, [r7, #20]
    break;
 8003000:	e00c      	b.n	800301c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003002:	4a12      	ldr	r2, [pc, #72]	; (800304c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	4a0e      	ldr	r2, [pc, #56]	; (8003044 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800300c:	68d2      	ldr	r2, [r2, #12]
 800300e:	0a12      	lsrs	r2, r2, #8
 8003010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    break;
 800301a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0e5b      	lsrs	r3, r3, #25
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	3301      	adds	r3, #1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003036:	687b      	ldr	r3, [r7, #4]
}
 8003038:	4618      	mov	r0, r3
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40021000 	.word	0x40021000
 8003048:	007a1200 	.word	0x007a1200
 800304c:	00f42400 	.word	0x00f42400

08003050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003058:	2300      	movs	r3, #0
 800305a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800305c:	2300      	movs	r3, #0
 800305e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8098 	beq.w	800319e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10d      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	4b40      	ldr	r3, [pc, #256]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	; 0x58
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	2301      	movs	r3, #1
 8003098:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800309a:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a39      	ldr	r2, [pc, #228]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a6:	f7fe fe6d 	bl	8001d84 <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ac:	e009      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fe fe69 	bl	8001d84 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d902      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	74fb      	strb	r3, [r7, #19]
        break;
 80030c0:	e005      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c2:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ef      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d159      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01e      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d019      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800310c:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800311c:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe fe29 	bl	8001d84 <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003134:	e00b      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fe fe25 	bl	8001d84 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d902      	bls.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	74fb      	strb	r3, [r7, #19]
            break;
 800314c:	e006      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ec      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003178:	e008      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	74bb      	strb	r3, [r7, #18]
 800317e:	e005      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003180:	40021000 	.word	0x40021000
 8003184:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800318c:	7c7b      	ldrb	r3, [r7, #17]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4ba7      	ldr	r3, [pc, #668]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	4aa6      	ldr	r2, [pc, #664]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031aa:	4ba1      	ldr	r3, [pc, #644]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 0203 	bic.w	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	499d      	ldr	r1, [pc, #628]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031cc:	4b98      	ldr	r3, [pc, #608]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 020c 	bic.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	4995      	ldr	r1, [pc, #596]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ee:	4b90      	ldr	r3, [pc, #576]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	498c      	ldr	r1, [pc, #560]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003210:	4b87      	ldr	r3, [pc, #540]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	4984      	ldr	r1, [pc, #528]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	497b      	ldr	r1, [pc, #492]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003254:	4b76      	ldr	r3, [pc, #472]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	4973      	ldr	r1, [pc, #460]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003276:	4b6e      	ldr	r3, [pc, #440]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	496a      	ldr	r1, [pc, #424]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003298:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4962      	ldr	r1, [pc, #392]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ba:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	4959      	ldr	r1, [pc, #356]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032dc:	4b54      	ldr	r3, [pc, #336]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	4951      	ldr	r1, [pc, #324]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fe:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	4948      	ldr	r1, [pc, #288]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003320:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4940      	ldr	r1, [pc, #256]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d015      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003358:	4b35      	ldr	r3, [pc, #212]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	4932      	ldr	r1, [pc, #200]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003376:	d105      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	4924      	ldr	r1, [pc, #144]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	4916      	ldr	r1, [pc, #88]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e6:	d105      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a10      	ldr	r2, [pc, #64]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341e:	d109      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a02      	ldr	r2, [pc, #8]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342a:	60d3      	str	r3, [r2, #12]
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4926      	ldr	r1, [pc, #152]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003486:	4918      	ldr	r1, [pc, #96]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d105      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a12      	ldr	r2, [pc, #72]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800349e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	490a      	ldr	r1, [pc, #40]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ce:	d105      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80034dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e049      	b.n	8003592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe fa62 	bl	80019dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f001 f802 	bl	8004534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e049      	b.n	8003640 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f841 	bl	8003648 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f000 ffab 	bl	8004534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_TIM_PWM_Start+0x24>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e03c      	b.n	80036fa <HAL_TIM_PWM_Start+0x9e>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d109      	bne.n	800369a <HAL_TIM_PWM_Start+0x3e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e02f      	b.n	80036fa <HAL_TIM_PWM_Start+0x9e>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d109      	bne.n	80036b4 <HAL_TIM_PWM_Start+0x58>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e022      	b.n	80036fa <HAL_TIM_PWM_Start+0x9e>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d109      	bne.n	80036ce <HAL_TIM_PWM_Start+0x72>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	e015      	b.n	80036fa <HAL_TIM_PWM_Start+0x9e>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d109      	bne.n	80036e8 <HAL_TIM_PWM_Start+0x8c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e008      	b.n	80036fa <HAL_TIM_PWM_Start+0x9e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0a6      	b.n	8003850 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Start+0xb6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	e023      	b.n	800375a <HAL_TIM_PWM_Start+0xfe>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d104      	bne.n	8003722 <HAL_TIM_PWM_Start+0xc6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	e01b      	b.n	800375a <HAL_TIM_PWM_Start+0xfe>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d104      	bne.n	8003732 <HAL_TIM_PWM_Start+0xd6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003730:	e013      	b.n	800375a <HAL_TIM_PWM_Start+0xfe>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d104      	bne.n	8003742 <HAL_TIM_PWM_Start+0xe6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003740:	e00b      	b.n	800375a <HAL_TIM_PWM_Start+0xfe>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b10      	cmp	r3, #16
 8003746:	d104      	bne.n	8003752 <HAL_TIM_PWM_Start+0xf6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	e003      	b.n	800375a <HAL_TIM_PWM_Start+0xfe>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2201      	movs	r2, #1
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fc7e 	bl	8005064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3a      	ldr	r2, [pc, #232]	; (8003858 <HAL_TIM_PWM_Start+0x1fc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d018      	beq.n	80037a4 <HAL_TIM_PWM_Start+0x148>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a39      	ldr	r2, [pc, #228]	; (800385c <HAL_TIM_PWM_Start+0x200>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_TIM_PWM_Start+0x148>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a37      	ldr	r2, [pc, #220]	; (8003860 <HAL_TIM_PWM_Start+0x204>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_TIM_PWM_Start+0x148>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a36      	ldr	r2, [pc, #216]	; (8003864 <HAL_TIM_PWM_Start+0x208>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_TIM_PWM_Start+0x148>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a34      	ldr	r2, [pc, #208]	; (8003868 <HAL_TIM_PWM_Start+0x20c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Start+0x148>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a33      	ldr	r2, [pc, #204]	; (800386c <HAL_TIM_PWM_Start+0x210>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x14c>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Start+0x14e>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a25      	ldr	r2, [pc, #148]	; (8003858 <HAL_TIM_PWM_Start+0x1fc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <HAL_TIM_PWM_Start+0x1b2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d01d      	beq.n	800380e <HAL_TIM_PWM_Start+0x1b2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a26      	ldr	r2, [pc, #152]	; (8003870 <HAL_TIM_PWM_Start+0x214>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIM_PWM_Start+0x1b2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <HAL_TIM_PWM_Start+0x218>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_TIM_PWM_Start+0x1b2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a23      	ldr	r2, [pc, #140]	; (8003878 <HAL_TIM_PWM_Start+0x21c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIM_PWM_Start+0x1b2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <HAL_TIM_PWM_Start+0x200>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIM_PWM_Start+0x1b2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_TIM_PWM_Start+0x204>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIM_PWM_Start+0x1b2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_TIM_PWM_Start+0x210>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d115      	bne.n	800383a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_TIM_PWM_Start+0x220>)
 8003816:	4013      	ands	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b06      	cmp	r3, #6
 800381e:	d015      	beq.n	800384c <HAL_TIM_PWM_Start+0x1f0>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003826:	d011      	beq.n	800384c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003838:	e008      	b.n	800384c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e000      	b.n	800384e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40013400 	.word	0x40013400
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800
 800386c:	40015000 	.word	0x40015000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	00010007 	.word	0x00010007

08003880 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e049      	b.n	8003926 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe f84c 	bl	8001944 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f000 fe38 	bl	8004534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <HAL_TIM_IC_Start_IT+0x1e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e023      	b.n	8003996 <HAL_TIM_IC_Start_IT+0x66>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d104      	bne.n	800395e <HAL_TIM_IC_Start_IT+0x2e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e01b      	b.n	8003996 <HAL_TIM_IC_Start_IT+0x66>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d104      	bne.n	800396e <HAL_TIM_IC_Start_IT+0x3e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e013      	b.n	8003996 <HAL_TIM_IC_Start_IT+0x66>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d104      	bne.n	800397e <HAL_TIM_IC_Start_IT+0x4e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e00b      	b.n	8003996 <HAL_TIM_IC_Start_IT+0x66>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b10      	cmp	r3, #16
 8003982:	d104      	bne.n	800398e <HAL_TIM_IC_Start_IT+0x5e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800398a:	b2db      	uxtb	r3, r3
 800398c:	e003      	b.n	8003996 <HAL_TIM_IC_Start_IT+0x66>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003994:	b2db      	uxtb	r3, r3
 8003996:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_TIM_IC_Start_IT+0x78>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e013      	b.n	80039d0 <HAL_TIM_IC_Start_IT+0xa0>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d104      	bne.n	80039b8 <HAL_TIM_IC_Start_IT+0x88>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e00b      	b.n	80039d0 <HAL_TIM_IC_Start_IT+0xa0>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d104      	bne.n	80039c8 <HAL_TIM_IC_Start_IT+0x98>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e003      	b.n	80039d0 <HAL_TIM_IC_Start_IT+0xa0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80039d2:	7bbb      	ldrb	r3, [r7, #14]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80039d8:	7b7b      	ldrb	r3, [r7, #13]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d001      	beq.n	80039e2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0e2      	b.n	8003ba8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_IC_Start_IT+0xc2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	e023      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x10a>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start_IT+0xd2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	e01b      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x10a>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_IC_Start_IT+0xe2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a10:	e013      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x10a>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_IC_Start_IT+0xf2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a20:	e00b      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x10a>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_IC_Start_IT+0x102>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a30:	e003      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x10a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_TIM_IC_Start_IT+0x11a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	e013      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x142>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d104      	bne.n	8003a5a <HAL_TIM_IC_Start_IT+0x12a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a58:	e00b      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x142>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_IC_Start_IT+0x13a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a68:	e003      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x142>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d841      	bhi.n	8003afc <HAL_TIM_IC_Start_IT+0x1cc>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_TIM_IC_Start_IT+0x150>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003afd 	.word	0x08003afd
 8003a88:	08003afd 	.word	0x08003afd
 8003a8c:	08003afd 	.word	0x08003afd
 8003a90:	08003ac7 	.word	0x08003ac7
 8003a94:	08003afd 	.word	0x08003afd
 8003a98:	08003afd 	.word	0x08003afd
 8003a9c:	08003afd 	.word	0x08003afd
 8003aa0:	08003ad9 	.word	0x08003ad9
 8003aa4:	08003afd 	.word	0x08003afd
 8003aa8:	08003afd 	.word	0x08003afd
 8003aac:	08003afd 	.word	0x08003afd
 8003ab0:	08003aeb 	.word	0x08003aeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0202 	orr.w	r2, r2, #2
 8003ac2:	60da      	str	r2, [r3, #12]
      break;
 8003ac4:	e01d      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0204 	orr.w	r2, r2, #4
 8003ad4:	60da      	str	r2, [r3, #12]
      break;
 8003ad6:	e014      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0208 	orr.w	r2, r2, #8
 8003ae6:	60da      	str	r2, [r3, #12]
      break;
 8003ae8:	e00b      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0210 	orr.w	r2, r2, #16
 8003af8:	60da      	str	r2, [r3, #12]
      break;
 8003afa:	e002      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      break;
 8003b00:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d14e      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 faa7 	bl	8005064 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a25      	ldr	r2, [pc, #148]	; (8003bb0 <HAL_TIM_IC_Start_IT+0x280>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_TIM_IC_Start_IT+0x236>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b28:	d01d      	beq.n	8003b66 <HAL_TIM_IC_Start_IT+0x236>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_TIM_IC_Start_IT+0x284>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_TIM_IC_Start_IT+0x236>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_TIM_IC_Start_IT+0x288>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_TIM_IC_Start_IT+0x236>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_TIM_IC_Start_IT+0x28c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_TIM_IC_Start_IT+0x236>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_TIM_IC_Start_IT+0x290>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_TIM_IC_Start_IT+0x236>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_TIM_IC_Start_IT+0x294>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_TIM_IC_Start_IT+0x236>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_TIM_IC_Start_IT+0x298>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d115      	bne.n	8003b92 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <HAL_TIM_IC_Start_IT+0x29c>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b06      	cmp	r3, #6
 8003b76:	d015      	beq.n	8003ba4 <HAL_TIM_IC_Start_IT+0x274>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7e:	d011      	beq.n	8003ba4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	e008      	b.n	8003ba4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e000      	b.n	8003ba6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40013400 	.word	0x40013400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40015000 	.word	0x40015000
 8003bcc:	00010007 	.word	0x00010007

08003bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0202 	mvn.w	r2, #2
 8003bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fad4 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fc6c 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fc73 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0204 	mvn.w	r2, #4
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd faaa 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fc42 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fc49 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0208 	mvn.w	r2, #8
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fa80 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fc18 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fc1f 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fa56 	bl	80011c0 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fbee 	bl	80044f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fbf5 	bl	800450c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0201 	mvn.w	r2, #1
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fbc8 	bl	80044e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f001 fa38 	bl	80051f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d10e      	bne.n	8003dae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f001 fa2b 	bl	8005204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d10e      	bne.n	8003dda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d107      	bne.n	8003dda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fba3 	bl	8004520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d10e      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d107      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f06f 0220 	mvn.w	r2, #32
 8003dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f001 f9eb 	bl	80051dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e14:	d10f      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e24:	d107      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f001 f9f1 	bl	8005218 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e44:	d10f      	bne.n	8003e66 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e54:	d107      	bne.n	8003e66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 f9e3 	bl	800522c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e74:	d10f      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e84:	d107      	bne.n	8003e96 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 f9d5 	bl	8005240 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f001 f9c7 	bl	8005254 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e088      	b.n	8003ffe <HAL_TIM_IC_ConfigChannel+0x130>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d11b      	bne.n	8003f32 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f000 fee5 	bl	8004cd8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 020c 	bic.w	r2, r2, #12
 8003f1c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6999      	ldr	r1, [r3, #24]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	619a      	str	r2, [r3, #24]
 8003f30:	e060      	b.n	8003ff4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d11c      	bne.n	8003f72 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f000 ff69 	bl	8004e1e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f5a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6999      	ldr	r1, [r3, #24]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	021a      	lsls	r2, r3, #8
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	619a      	str	r2, [r3, #24]
 8003f70:	e040      	b.n	8003ff4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f000 ffb6 	bl	8004ef8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 020c 	bic.w	r2, r2, #12
 8003f9a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69d9      	ldr	r1, [r3, #28]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	61da      	str	r2, [r3, #28]
 8003fae:	e021      	b.n	8003ff4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f000 ffd3 	bl	8004f70 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fd8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69d9      	ldr	r1, [r3, #28]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	021a      	lsls	r2, r3, #8
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	61da      	str	r2, [r3, #28]
 8003fee:	e001      	b.n	8003ff4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004022:	2302      	movs	r3, #2
 8004024:	e0ff      	b.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b14      	cmp	r3, #20
 8004032:	f200 80f0 	bhi.w	8004216 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	08004091 	.word	0x08004091
 8004040:	08004217 	.word	0x08004217
 8004044:	08004217 	.word	0x08004217
 8004048:	08004217 	.word	0x08004217
 800404c:	080040d1 	.word	0x080040d1
 8004050:	08004217 	.word	0x08004217
 8004054:	08004217 	.word	0x08004217
 8004058:	08004217 	.word	0x08004217
 800405c:	08004113 	.word	0x08004113
 8004060:	08004217 	.word	0x08004217
 8004064:	08004217 	.word	0x08004217
 8004068:	08004217 	.word	0x08004217
 800406c:	08004153 	.word	0x08004153
 8004070:	08004217 	.word	0x08004217
 8004074:	08004217 	.word	0x08004217
 8004078:	08004217 	.word	0x08004217
 800407c:	08004195 	.word	0x08004195
 8004080:	08004217 	.word	0x08004217
 8004084:	08004217 	.word	0x08004217
 8004088:	08004217 	.word	0x08004217
 800408c:	080041d5 	.word	0x080041d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 faf4 	bl	8004684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0208 	orr.w	r2, r2, #8
 80040aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0204 	bic.w	r2, r2, #4
 80040ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6999      	ldr	r1, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	619a      	str	r2, [r3, #24]
      break;
 80040ce:	e0a5      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fb6e 	bl	80047b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6999      	ldr	r1, [r3, #24]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	619a      	str	r2, [r3, #24]
      break;
 8004110:	e084      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fbe1 	bl	80048e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0208 	orr.w	r2, r2, #8
 800412c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0204 	bic.w	r2, r2, #4
 800413c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	61da      	str	r2, [r3, #28]
      break;
 8004150:	e064      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fc53 	bl	8004a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69d9      	ldr	r1, [r3, #28]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	021a      	lsls	r2, r3, #8
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	61da      	str	r2, [r3, #28]
      break;
 8004192:	e043      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fcc6 	bl	8004b2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0208 	orr.w	r2, r2, #8
 80041ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80041d2:	e023      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fd10 	bl	8004c00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004214:	e002      	b.n	800421c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
      break;
 800421a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop

08004230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIM_ConfigClockSource+0x1c>
 8004248:	2302      	movs	r3, #2
 800424a:	e0f6      	b.n	800443a <HAL_TIM_ConfigClockSource+0x20a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800426a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800426e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6f      	ldr	r2, [pc, #444]	; (8004444 <HAL_TIM_ConfigClockSource+0x214>)
 8004286:	4293      	cmp	r3, r2
 8004288:	f000 80c1 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 800428c:	4a6d      	ldr	r2, [pc, #436]	; (8004444 <HAL_TIM_ConfigClockSource+0x214>)
 800428e:	4293      	cmp	r3, r2
 8004290:	f200 80c6 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004294:	4a6c      	ldr	r2, [pc, #432]	; (8004448 <HAL_TIM_ConfigClockSource+0x218>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f000 80b9 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 800429c:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_TIM_ConfigClockSource+0x218>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	f200 80be 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 80042a4:	4a69      	ldr	r2, [pc, #420]	; (800444c <HAL_TIM_ConfigClockSource+0x21c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	f000 80b1 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 80042ac:	4a67      	ldr	r2, [pc, #412]	; (800444c <HAL_TIM_ConfigClockSource+0x21c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	f200 80b6 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 80042b4:	4a66      	ldr	r2, [pc, #408]	; (8004450 <HAL_TIM_ConfigClockSource+0x220>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f000 80a9 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 80042bc:	4a64      	ldr	r2, [pc, #400]	; (8004450 <HAL_TIM_ConfigClockSource+0x220>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f200 80ae 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 80042c4:	4a63      	ldr	r2, [pc, #396]	; (8004454 <HAL_TIM_ConfigClockSource+0x224>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f000 80a1 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 80042cc:	4a61      	ldr	r2, [pc, #388]	; (8004454 <HAL_TIM_ConfigClockSource+0x224>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	f200 80a6 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 80042d4:	4a60      	ldr	r2, [pc, #384]	; (8004458 <HAL_TIM_ConfigClockSource+0x228>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	f000 8099 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 80042dc:	4a5e      	ldr	r2, [pc, #376]	; (8004458 <HAL_TIM_ConfigClockSource+0x228>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	f200 809e 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 80042e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042e8:	f000 8091 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 80042ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80042f0:	f200 8096 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 80042f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f8:	f000 8089 	beq.w	800440e <HAL_TIM_ConfigClockSource+0x1de>
 80042fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004300:	f200 808e 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	d03e      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x158>
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430e:	f200 8087 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	f000 8086 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x1f6>
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d87f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d01a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x12a>
 8004324:	2b70      	cmp	r3, #112	; 0x70
 8004326:	d87b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d050      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x19e>
 800432c:	2b60      	cmp	r3, #96	; 0x60
 800432e:	d877      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d03c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x17e>
 8004334:	2b50      	cmp	r3, #80	; 0x50
 8004336:	d873      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d058      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x1be>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d86f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d064      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x1de>
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d86b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d060      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x1de>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d867      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d05c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x1de>
 8004354:	2b10      	cmp	r3, #16
 8004356:	d05a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x1de>
 8004358:	e062      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f000 fe5b 	bl	8005024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800437c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
      break;
 8004386:	e04f      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f000 fe44 	bl	8005024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043aa:	609a      	str	r2, [r3, #8]
      break;
 80043ac:	e03c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 fd00 	bl	8004dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2150      	movs	r1, #80	; 0x50
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fe0f 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 80043cc:	e02c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 fd5c 	bl	8004e98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2160      	movs	r1, #96	; 0x60
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fdff 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 80043ec:	e01c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 fce0 	bl	8004dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fdef 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 800440c:	e00c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 fde6 	bl	8004fea <TIM_ITRx_SetConfig>
      break;
 800441e:	e003      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e000      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	00100070 	.word	0x00100070
 8004448:	00100060 	.word	0x00100060
 800444c:	00100050 	.word	0x00100050
 8004450:	00100040 	.word	0x00100040
 8004454:	00100030 	.word	0x00100030
 8004458:	00100020 	.word	0x00100020

0800445c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d831      	bhi.n	80044d4 <HAL_TIM_ReadCapturedValue+0x78>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044d5 	.word	0x080044d5
 8004480:	080044d5 	.word	0x080044d5
 8004484:	080044d5 	.word	0x080044d5
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044d5 	.word	0x080044d5
 8004490:	080044d5 	.word	0x080044d5
 8004494:	080044d5 	.word	0x080044d5
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044d5 	.word	0x080044d5
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044d5 	.word	0x080044d5
 80044a8:	080044cb 	.word	0x080044cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	60fb      	str	r3, [r7, #12]

      break;
 80044b4:	e00f      	b.n	80044d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	60fb      	str	r3, [r7, #12]

      break;
 80044be:	e00a      	b.n	80044d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	60fb      	str	r3, [r7, #12]

      break;
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	60fb      	str	r3, [r7, #12]

      break;
 80044d2:	e000      	b.n	80044d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044d4:	bf00      	nop
  }

  return tmpreg;
 80044d6:	68fb      	ldr	r3, [r7, #12]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a46      	ldr	r2, [pc, #280]	; (8004660 <TIM_Base_SetConfig+0x12c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d017      	beq.n	800457c <TIM_Base_SetConfig+0x48>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004552:	d013      	beq.n	800457c <TIM_Base_SetConfig+0x48>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a43      	ldr	r2, [pc, #268]	; (8004664 <TIM_Base_SetConfig+0x130>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0x48>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a42      	ldr	r2, [pc, #264]	; (8004668 <TIM_Base_SetConfig+0x134>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x48>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a41      	ldr	r2, [pc, #260]	; (800466c <TIM_Base_SetConfig+0x138>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x48>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a40      	ldr	r2, [pc, #256]	; (8004670 <TIM_Base_SetConfig+0x13c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x48>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3f      	ldr	r2, [pc, #252]	; (8004674 <TIM_Base_SetConfig+0x140>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a33      	ldr	r2, [pc, #204]	; (8004660 <TIM_Base_SetConfig+0x12c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d023      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d01f      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a30      	ldr	r2, [pc, #192]	; (8004664 <TIM_Base_SetConfig+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01b      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2f      	ldr	r2, [pc, #188]	; (8004668 <TIM_Base_SetConfig+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d017      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2e      	ldr	r2, [pc, #184]	; (800466c <TIM_Base_SetConfig+0x138>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2d      	ldr	r2, [pc, #180]	; (8004670 <TIM_Base_SetConfig+0x13c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00f      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <TIM_Base_SetConfig+0x144>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2c      	ldr	r2, [pc, #176]	; (800467c <TIM_Base_SetConfig+0x148>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a2b      	ldr	r2, [pc, #172]	; (8004680 <TIM_Base_SetConfig+0x14c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_Base_SetConfig+0xaa>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a26      	ldr	r2, [pc, #152]	; (8004674 <TIM_Base_SetConfig+0x140>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d108      	bne.n	80045f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a12      	ldr	r2, [pc, #72]	; (8004660 <TIM_Base_SetConfig+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <TIM_Base_SetConfig+0x110>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a14      	ldr	r2, [pc, #80]	; (8004670 <TIM_Base_SetConfig+0x13c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00f      	beq.n	8004644 <TIM_Base_SetConfig+0x110>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a14      	ldr	r2, [pc, #80]	; (8004678 <TIM_Base_SetConfig+0x144>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00b      	beq.n	8004644 <TIM_Base_SetConfig+0x110>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a13      	ldr	r2, [pc, #76]	; (800467c <TIM_Base_SetConfig+0x148>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0x110>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <TIM_Base_SetConfig+0x14c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0x110>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a0d      	ldr	r2, [pc, #52]	; (8004674 <TIM_Base_SetConfig+0x140>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d103      	bne.n	800464c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	615a      	str	r2, [r3, #20]
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40013400 	.word	0x40013400
 8004674:	40015000 	.word	0x40015000
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800

08004684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0302 	bic.w	r3, r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a30      	ldr	r2, [pc, #192]	; (80047a0 <TIM_OC1_SetConfig+0x11c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <TIM_OC1_SetConfig+0x88>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <TIM_OC1_SetConfig+0x120>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00f      	beq.n	800470c <TIM_OC1_SetConfig+0x88>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a2e      	ldr	r2, [pc, #184]	; (80047a8 <TIM_OC1_SetConfig+0x124>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00b      	beq.n	800470c <TIM_OC1_SetConfig+0x88>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <TIM_OC1_SetConfig+0x128>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <TIM_OC1_SetConfig+0x88>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <TIM_OC1_SetConfig+0x12c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_OC1_SetConfig+0x88>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <TIM_OC1_SetConfig+0x130>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10c      	bne.n	8004726 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f023 0308 	bic.w	r3, r3, #8
 8004712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <TIM_OC1_SetConfig+0x11c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <TIM_OC1_SetConfig+0xd2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <TIM_OC1_SetConfig+0x120>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00f      	beq.n	8004756 <TIM_OC1_SetConfig+0xd2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <TIM_OC1_SetConfig+0x124>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00b      	beq.n	8004756 <TIM_OC1_SetConfig+0xd2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <TIM_OC1_SetConfig+0x128>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d007      	beq.n	8004756 <TIM_OC1_SetConfig+0xd2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <TIM_OC1_SetConfig+0x12c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_OC1_SetConfig+0xd2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <TIM_OC1_SetConfig+0x130>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d111      	bne.n	800477a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800475c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40013400 	.word	0x40013400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800
 80047b4:	40015000 	.word	0x40015000

080047b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f023 0210 	bic.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0320 	bic.w	r3, r3, #32
 8004806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <TIM_OC2_SetConfig+0x110>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_OC2_SetConfig+0x74>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <TIM_OC2_SetConfig+0x114>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_OC2_SetConfig+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <TIM_OC2_SetConfig+0x118>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d10d      	bne.n	8004848 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <TIM_OC2_SetConfig+0x110>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <TIM_OC2_SetConfig+0xc0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <TIM_OC2_SetConfig+0x114>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00f      	beq.n	8004878 <TIM_OC2_SetConfig+0xc0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <TIM_OC2_SetConfig+0x11c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_OC2_SetConfig+0xc0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <TIM_OC2_SetConfig+0x120>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_OC2_SetConfig+0xc0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <TIM_OC2_SetConfig+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_OC2_SetConfig+0xc0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <TIM_OC2_SetConfig+0x118>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d113      	bne.n	80048a0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800487e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40013400 	.word	0x40013400
 80048d0:	40015000 	.word	0x40015000
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800

080048e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <TIM_OC3_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <TIM_OC3_SetConfig+0x72>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2a      	ldr	r2, [pc, #168]	; (80049f0 <TIM_OC3_SetConfig+0x110>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <TIM_OC3_SetConfig+0x72>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <TIM_OC3_SetConfig+0x114>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10d      	bne.n	800496e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800496c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <TIM_OC3_SetConfig+0x10c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <TIM_OC3_SetConfig+0xbe>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <TIM_OC3_SetConfig+0x110>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00f      	beq.n	800499e <TIM_OC3_SetConfig+0xbe>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <TIM_OC3_SetConfig+0x118>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00b      	beq.n	800499e <TIM_OC3_SetConfig+0xbe>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <TIM_OC3_SetConfig+0x11c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <TIM_OC3_SetConfig+0xbe>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <TIM_OC3_SetConfig+0x120>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_OC3_SetConfig+0xbe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <TIM_OC3_SetConfig+0x114>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d113      	bne.n	80049c6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40013400 	.word	0x40013400
 80049f4:	40015000 	.word	0x40015000
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800

08004a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <TIM_OC4_SetConfig+0x110>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_OC4_SetConfig+0x74>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <TIM_OC4_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC4_SetConfig+0x74>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <TIM_OC4_SetConfig+0x118>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10d      	bne.n	8004a94 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	031b      	lsls	r3, r3, #12
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <TIM_OC4_SetConfig+0x110>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <TIM_OC4_SetConfig+0xc0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <TIM_OC4_SetConfig+0x114>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_OC4_SetConfig+0xc0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <TIM_OC4_SetConfig+0x11c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_OC4_SetConfig+0xc0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <TIM_OC4_SetConfig+0x120>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_OC4_SetConfig+0xc0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <TIM_OC4_SetConfig+0x124>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC4_SetConfig+0xc0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <TIM_OC4_SetConfig+0x118>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d113      	bne.n	8004aec <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ad2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40013400 	.word	0x40013400
 8004b1c:	40015000 	.word	0x40015000
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800

08004b2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <TIM_OC5_SetConfig+0xbc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <TIM_OC5_SetConfig+0x82>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a18      	ldr	r2, [pc, #96]	; (8004bec <TIM_OC5_SetConfig+0xc0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_OC5_SetConfig+0x82>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <TIM_OC5_SetConfig+0xc4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_OC5_SetConfig+0x82>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <TIM_OC5_SetConfig+0xc8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_OC5_SetConfig+0x82>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <TIM_OC5_SetConfig+0xcc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC5_SetConfig+0x82>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <TIM_OC5_SetConfig+0xd0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d109      	bne.n	8004bc2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40013400 	.word	0x40013400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800
 8004bfc:	40015000 	.word	0x40015000

08004c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	051b      	lsls	r3, r3, #20
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <TIM_OC6_SetConfig+0xc0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <TIM_OC6_SetConfig+0x84>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <TIM_OC6_SetConfig+0xc4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00f      	beq.n	8004c84 <TIM_OC6_SetConfig+0x84>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <TIM_OC6_SetConfig+0xc8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <TIM_OC6_SetConfig+0x84>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <TIM_OC6_SetConfig+0xcc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_OC6_SetConfig+0x84>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <TIM_OC6_SetConfig+0xd0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_OC6_SetConfig+0x84>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <TIM_OC6_SetConfig+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d109      	bne.n	8004c98 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40012c00 	.word	0x40012c00
 8004cc4:	40013400 	.word	0x40013400
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800
 8004cd4:	40015000 	.word	0x40015000

08004cd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <TIM_TI1_SetConfig+0xcc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01b      	beq.n	8004d3e <TIM_TI1_SetConfig+0x66>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d017      	beq.n	8004d3e <TIM_TI1_SetConfig+0x66>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <TIM_TI1_SetConfig+0xd0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <TIM_TI1_SetConfig+0x66>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a24      	ldr	r2, [pc, #144]	; (8004dac <TIM_TI1_SetConfig+0xd4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00f      	beq.n	8004d3e <TIM_TI1_SetConfig+0x66>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <TIM_TI1_SetConfig+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <TIM_TI1_SetConfig+0x66>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <TIM_TI1_SetConfig+0xdc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <TIM_TI1_SetConfig+0x66>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <TIM_TI1_SetConfig+0xe0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_TI1_SetConfig+0x66>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <TIM_TI1_SetConfig+0xe4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d101      	bne.n	8004d42 <TIM_TI1_SetConfig+0x6a>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <TIM_TI1_SetConfig+0x6c>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	e003      	b.n	8004d62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f023 030a 	bic.w	r3, r3, #10
 8004d7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f003 030a 	and.w	r3, r3, #10
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40015000 	.word	0x40015000

08004dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 030a 	bic.w	r3, r3, #10
 8004dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b087      	sub	sp, #28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
 8004e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f023 0210 	bic.w	r2, r3, #16
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	621a      	str	r2, [r3, #32]
}
 8004e8c:	bf00      	nop
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 0210 	bic.w	r2, r3, #16
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ec2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	031b      	lsls	r3, r3, #12
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	621a      	str	r2, [r3, #32]
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 0303 	bic.w	r3, r3, #3
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	621a      	str	r2, [r3, #32]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	031b      	lsls	r3, r3, #12
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	031b      	lsls	r3, r3, #12
 8004fc8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	f043 0307 	orr.w	r3, r3, #7
 8005010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800503e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	021a      	lsls	r2, r3, #8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	431a      	orrs	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2201      	movs	r2, #1
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	43db      	mvns	r3, r3
 8005086:	401a      	ands	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1a      	ldr	r2, [r3, #32]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e074      	b.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a33      	ldr	r2, [pc, #204]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a31      	ldr	r2, [pc, #196]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d108      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800510c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d022      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005148:	d01d      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d018      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00e      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d009      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a11      	ldr	r2, [pc, #68]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d10c      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800518c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4313      	orrs	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40013400 	.word	0x40013400
 80051c8:	40015000 	.word	0x40015000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000

080051dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e042      	b.n	8005300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fc fc8b 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2224      	movs	r2, #36	; 0x24
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fbfa 	bl	8005aa4 <UART_SetConfig>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e022      	b.n	8005300 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 feea 	bl	800609c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 ff71 	bl	80061e0 <UART_CheckIdleState>
 80052fe:	4603      	mov	r3, r0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531e:	2b20      	cmp	r3, #32
 8005320:	f040 8083 	bne.w	800542a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Transmit+0x28>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e07b      	b.n	800542c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_UART_Transmit+0x3a>
 800533e:	2302      	movs	r3, #2
 8005340:	e074      	b.n	800542c <HAL_UART_Transmit+0x124>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535a:	f7fc fd13 	bl	8001d84 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005378:	d108      	bne.n	800538c <HAL_UART_Transmit+0x84>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e003      	b.n	8005394 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800539c:	e02c      	b.n	80053f8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 ff64 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e039      	b.n	800542c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3302      	adds	r3, #2
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e007      	b.n	80053e6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1cc      	bne.n	800539e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	2140      	movs	r1, #64	; 0x40
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 ff31 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e006      	b.n	800542c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e000      	b.n	800542c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
  }
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b0ba      	sub	sp, #232	; 0xe8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800545a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800545e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005462:	4013      	ands	r3, r2
 8005464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11b      	bne.n	80054a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d015      	beq.n	80054a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d105      	bne.n	8005494 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800548c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 82d6 	beq.w	8005a4a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
      }
      return;
 80054a6:	e2d0      	b.n	8005a4a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 811f 	beq.w	80056f0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80054b6:	4b8b      	ldr	r3, [pc, #556]	; (80056e4 <HAL_UART_IRQHandler+0x2b0>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80054be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054c2:	4b89      	ldr	r3, [pc, #548]	; (80056e8 <HAL_UART_IRQHandler+0x2b4>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8112 	beq.w	80056f0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d011      	beq.n	80054fc <HAL_UART_IRQHandler+0xc8>
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f2:	f043 0201 	orr.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d011      	beq.n	800552c <HAL_UART_IRQHandler+0xf8>
 8005508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2202      	movs	r2, #2
 800551a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005522:	f043 0204 	orr.w	r2, r3, #4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800552c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d011      	beq.n	800555c <HAL_UART_IRQHandler+0x128>
 8005538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2204      	movs	r2, #4
 800554a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005552:	f043 0202 	orr.w	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800555c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d017      	beq.n	8005598 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005574:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005578:	4b5a      	ldr	r3, [pc, #360]	; (80056e4 <HAL_UART_IRQHandler+0x2b0>)
 800557a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2208      	movs	r2, #8
 8005586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558e:	f043 0208 	orr.w	r2, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d012      	beq.n	80055ca <HAL_UART_IRQHandler+0x196>
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 823c 	beq.w	8005a4e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d013      	beq.n	800560a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d105      	bne.n	80055fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d005      	beq.n	800562e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005626:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	d04f      	beq.n	80056ce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fee9 	bl	8006406 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d141      	bne.n	80056c6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800565c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800566e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800567a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1d9      	bne.n	8005642 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569a:	4a14      	ldr	r2, [pc, #80]	; (80056ec <HAL_UART_IRQHandler+0x2b8>)
 800569c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fc fce2 	bl	800206c <HAL_DMA_Abort_IT>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d017      	beq.n	80056de <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	e00f      	b.n	80056de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f9da 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	e00b      	b.n	80056de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d6 	bl	8005a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	e007      	b.n	80056de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9d2 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80056dc:	e1b7      	b.n	8005a4e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056de:	bf00      	nop
    return;
 80056e0:	e1b5      	b.n	8005a4e <HAL_UART_IRQHandler+0x61a>
 80056e2:	bf00      	nop
 80056e4:	10000001 	.word	0x10000001
 80056e8:	04000120 	.word	0x04000120
 80056ec:	080064d3 	.word	0x080064d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	f040 814a 	bne.w	800598e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8143 	beq.w	800598e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 813c 	beq.w	800598e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2210      	movs	r2, #16
 800571c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	f040 80b5 	bne.w	8005898 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800573a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8187 	beq.w	8005a52 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800574a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800574e:	429a      	cmp	r2, r3
 8005750:	f080 817f 	bcs.w	8005a52 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800575a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 8086 	bne.w	800587c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800578c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800579a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800579e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1da      	bne.n	8005770 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e1      	bne.n	80057ba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800581a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800581c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e3      	bne.n	80057f6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800584a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584c:	f023 0310 	bic.w	r3, r3, #16
 8005850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800585e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005860:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800586c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e4      	bne.n	800583c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005876:	4618      	mov	r0, r3
 8005878:	f7fc fb9f 	bl	8001fba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005888:	b29b      	uxth	r3, r3
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	b29b      	uxth	r3, r3
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f8fb 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005896:	e0dc      	b.n	8005a52 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80ce 	beq.w	8005a56 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80058ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80c9 	beq.w	8005a56 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058e6:	647b      	str	r3, [r7, #68]	; 0x44
 80058e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e4      	bne.n	80058c4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3308      	adds	r3, #8
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	623b      	str	r3, [r7, #32]
   return(result);
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3308      	adds	r3, #8
 800591e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005922:	633a      	str	r2, [r7, #48]	; 0x30
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e1      	bne.n	80058fa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	60fb      	str	r3, [r7, #12]
   return(result);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0310 	bic.w	r3, r3, #16
 800595e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	69b9      	ldr	r1, [r7, #24]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	617b      	str	r3, [r7, #20]
   return(result);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e4      	bne.n	800594a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f880 	bl	8005a8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800598c:	e063      	b.n	8005a56 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <HAL_UART_IRQHandler+0x584>
 800599a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fdcf 	bl	8006554 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059b6:	e051      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d014      	beq.n	80059ee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80059c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80059d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d03a      	beq.n	8005a5a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
    }
    return;
 80059ec:	e035      	b.n	8005a5a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_UART_IRQHandler+0x5da>
 80059fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fd79 	bl	80064fe <UART_EndTransmit_IT>
    return;
 8005a0c:	e026      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_UART_IRQHandler+0x5fa>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fda8 	bl	800657c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a2c:	e016      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d010      	beq.n	8005a5c <HAL_UART_IRQHandler+0x628>
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da0c      	bge.n	8005a5c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fd90 	bl	8006568 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a48:	e008      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
      return;
 8005a4a:	bf00      	nop
 8005a4c:	e006      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
    return;
 8005a4e:	bf00      	nop
 8005a50:	e004      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
      return;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
      return;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_UART_IRQHandler+0x628>
    return;
 8005a5a:	bf00      	nop
  }
}
 8005a5c:	37e8      	adds	r7, #232	; 0xe8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop

08005a64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa8:	b08c      	sub	sp, #48	; 0x30
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4baa      	ldr	r3, [pc, #680]	; (8005d7c <UART_SetConfig+0x2d8>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a9f      	ldr	r2, [pc, #636]	; (8005d80 <UART_SetConfig+0x2dc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	f023 010f 	bic.w	r1, r3, #15
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a90      	ldr	r2, [pc, #576]	; (8005d84 <UART_SetConfig+0x2e0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d125      	bne.n	8005b94 <UART_SetConfig+0xf0>
 8005b48:	4b8f      	ldr	r3, [pc, #572]	; (8005d88 <UART_SetConfig+0x2e4>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d81a      	bhi.n	8005b8c <UART_SetConfig+0xe8>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0xb8>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b7d 	.word	0x08005b7d
 8005b64:	08005b75 	.word	0x08005b75
 8005b68:	08005b85 	.word	0x08005b85
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b72:	e116      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005b74:	2302      	movs	r3, #2
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7a:	e112      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b82:	e10e      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005b84:	2308      	movs	r3, #8
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8a:	e10a      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b92:	e106      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a7c      	ldr	r2, [pc, #496]	; (8005d8c <UART_SetConfig+0x2e8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d138      	bne.n	8005c10 <UART_SetConfig+0x16c>
 8005b9e:	4b7a      	ldr	r3, [pc, #488]	; (8005d88 <UART_SetConfig+0x2e4>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba4:	f003 030c 	and.w	r3, r3, #12
 8005ba8:	2b0c      	cmp	r3, #12
 8005baa:	d82d      	bhi.n	8005c08 <UART_SetConfig+0x164>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <UART_SetConfig+0x110>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005be9 	.word	0x08005be9
 8005bb8:	08005c09 	.word	0x08005c09
 8005bbc:	08005c09 	.word	0x08005c09
 8005bc0:	08005c09 	.word	0x08005c09
 8005bc4:	08005bf9 	.word	0x08005bf9
 8005bc8:	08005c09 	.word	0x08005c09
 8005bcc:	08005c09 	.word	0x08005c09
 8005bd0:	08005c09 	.word	0x08005c09
 8005bd4:	08005bf1 	.word	0x08005bf1
 8005bd8:	08005c09 	.word	0x08005c09
 8005bdc:	08005c09 	.word	0x08005c09
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c01 	.word	0x08005c01
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bee:	e0d8      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf6:	e0d4      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfe:	e0d0      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c00:	2308      	movs	r3, #8
 8005c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c06:	e0cc      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0e:	e0c8      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a5e      	ldr	r2, [pc, #376]	; (8005d90 <UART_SetConfig+0x2ec>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d125      	bne.n	8005c66 <UART_SetConfig+0x1c2>
 8005c1a:	4b5b      	ldr	r3, [pc, #364]	; (8005d88 <UART_SetConfig+0x2e4>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d016      	beq.n	8005c56 <UART_SetConfig+0x1b2>
 8005c28:	2b30      	cmp	r3, #48	; 0x30
 8005c2a:	d818      	bhi.n	8005c5e <UART_SetConfig+0x1ba>
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d00a      	beq.n	8005c46 <UART_SetConfig+0x1a2>
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d814      	bhi.n	8005c5e <UART_SetConfig+0x1ba>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <UART_SetConfig+0x19a>
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d008      	beq.n	8005c4e <UART_SetConfig+0x1aa>
 8005c3c:	e00f      	b.n	8005c5e <UART_SetConfig+0x1ba>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c44:	e0ad      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c46:	2302      	movs	r3, #2
 8005c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4c:	e0a9      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c4e:	2304      	movs	r3, #4
 8005c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c54:	e0a5      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c56:	2308      	movs	r3, #8
 8005c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c5c:	e0a1      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c5e:	2310      	movs	r3, #16
 8005c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c64:	e09d      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4a      	ldr	r2, [pc, #296]	; (8005d94 <UART_SetConfig+0x2f0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d125      	bne.n	8005cbc <UART_SetConfig+0x218>
 8005c70:	4b45      	ldr	r3, [pc, #276]	; (8005d88 <UART_SetConfig+0x2e4>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c7c:	d016      	beq.n	8005cac <UART_SetConfig+0x208>
 8005c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c80:	d818      	bhi.n	8005cb4 <UART_SetConfig+0x210>
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d00a      	beq.n	8005c9c <UART_SetConfig+0x1f8>
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d814      	bhi.n	8005cb4 <UART_SetConfig+0x210>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <UART_SetConfig+0x1f0>
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d008      	beq.n	8005ca4 <UART_SetConfig+0x200>
 8005c92:	e00f      	b.n	8005cb4 <UART_SetConfig+0x210>
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e082      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e07e      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005caa:	e07a      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	e076      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cba:	e072      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a35      	ldr	r2, [pc, #212]	; (8005d98 <UART_SetConfig+0x2f4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d12a      	bne.n	8005d1c <UART_SetConfig+0x278>
 8005cc6:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <UART_SetConfig+0x2e4>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd4:	d01a      	beq.n	8005d0c <UART_SetConfig+0x268>
 8005cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cda:	d81b      	bhi.n	8005d14 <UART_SetConfig+0x270>
 8005cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce0:	d00c      	beq.n	8005cfc <UART_SetConfig+0x258>
 8005ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce6:	d815      	bhi.n	8005d14 <UART_SetConfig+0x270>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <UART_SetConfig+0x250>
 8005cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf0:	d008      	beq.n	8005d04 <UART_SetConfig+0x260>
 8005cf2:	e00f      	b.n	8005d14 <UART_SetConfig+0x270>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e052      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e04e      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d04:	2304      	movs	r3, #4
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	e04a      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d0c:	2308      	movs	r3, #8
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d12:	e046      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1a:	e042      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <UART_SetConfig+0x2dc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d13a      	bne.n	8005d9c <UART_SetConfig+0x2f8>
 8005d26:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <UART_SetConfig+0x2e4>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d34:	d01a      	beq.n	8005d6c <UART_SetConfig+0x2c8>
 8005d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d3a:	d81b      	bhi.n	8005d74 <UART_SetConfig+0x2d0>
 8005d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d40:	d00c      	beq.n	8005d5c <UART_SetConfig+0x2b8>
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d46:	d815      	bhi.n	8005d74 <UART_SetConfig+0x2d0>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <UART_SetConfig+0x2b0>
 8005d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d50:	d008      	beq.n	8005d64 <UART_SetConfig+0x2c0>
 8005d52:	e00f      	b.n	8005d74 <UART_SetConfig+0x2d0>
 8005d54:	2300      	movs	r3, #0
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5a:	e022      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d62:	e01e      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d64:	2304      	movs	r3, #4
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6a:	e01a      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d72:	e016      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d74:	2310      	movs	r3, #16
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7a:	e012      	b.n	8005da2 <UART_SetConfig+0x2fe>
 8005d7c:	cfff69f3 	.word	0xcfff69f3
 8005d80:	40008000 	.word	0x40008000
 8005d84:	40013800 	.word	0x40013800
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40004400 	.word	0x40004400
 8005d90:	40004800 	.word	0x40004800
 8005d94:	40004c00 	.word	0x40004c00
 8005d98:	40005000 	.word	0x40005000
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4aae      	ldr	r2, [pc, #696]	; (8006060 <UART_SetConfig+0x5bc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f040 8097 	bne.w	8005edc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d823      	bhi.n	8005dfe <UART_SetConfig+0x35a>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x318>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005dff 	.word	0x08005dff
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005def 	.word	0x08005def
 8005dd0:	08005dff 	.word	0x08005dff
 8005dd4:	08005dff 	.word	0x08005dff
 8005dd8:	08005dff 	.word	0x08005dff
 8005ddc:	08005df7 	.word	0x08005df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de0:	f7fd f8c4 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8005de4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005de6:	e010      	b.n	8005e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de8:	4b9e      	ldr	r3, [pc, #632]	; (8006064 <UART_SetConfig+0x5c0>)
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dec:	e00d      	b.n	8005e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dee:	f7fd f84f 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8005df2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005df4:	e009      	b.n	8005e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dfc:	e005      	b.n	8005e0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8130 	beq.w	8006072 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	4a94      	ldr	r2, [pc, #592]	; (8006068 <UART_SetConfig+0x5c4>)
 8005e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4413      	add	r3, r2
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d305      	bcc.n	8005e42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d903      	bls.n	8005e4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e48:	e113      	b.n	8006072 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	60fa      	str	r2, [r7, #12]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	4a84      	ldr	r2, [pc, #528]	; (8006068 <UART_SetConfig+0x5c4>)
 8005e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2200      	movs	r2, #0
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e6c:	f7fa fe16 	bl	8000a9c <__aeabi_uldivmod>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	020b      	lsls	r3, r1, #8
 8005e82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e86:	0202      	lsls	r2, r0, #8
 8005e88:	6979      	ldr	r1, [r7, #20]
 8005e8a:	6849      	ldr	r1, [r1, #4]
 8005e8c:	0849      	lsrs	r1, r1, #1
 8005e8e:	2000      	movs	r0, #0
 8005e90:	460c      	mov	r4, r1
 8005e92:	4605      	mov	r5, r0
 8005e94:	eb12 0804 	adds.w	r8, r2, r4
 8005e98:	eb43 0905 	adc.w	r9, r3, r5
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	469a      	mov	sl, r3
 8005ea4:	4693      	mov	fp, r2
 8005ea6:	4652      	mov	r2, sl
 8005ea8:	465b      	mov	r3, fp
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	f7fa fdf5 	bl	8000a9c <__aeabi_uldivmod>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec0:	d308      	bcc.n	8005ed4 <UART_SetConfig+0x430>
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec8:	d204      	bcs.n	8005ed4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	e0ce      	b.n	8006072 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005eda:	e0ca      	b.n	8006072 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee4:	d166      	bne.n	8005fb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d827      	bhi.n	8005f3e <UART_SetConfig+0x49a>
 8005eee:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x450>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fd f828 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8005f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f1e:	e014      	b.n	8005f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fd f83a 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8005f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f26:	e010      	b.n	8005f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b4e      	ldr	r3, [pc, #312]	; (8006064 <UART_SetConfig+0x5c0>)
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f2c:	e00d      	b.n	8005f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fc ffaf 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8005f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f34:	e009      	b.n	8005f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f3c:	e005      	b.n	8005f4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8090 	beq.w	8006072 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	4a44      	ldr	r2, [pc, #272]	; (8006068 <UART_SetConfig+0x5c4>)
 8005f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f64:	005a      	lsls	r2, r3, #1
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	441a      	add	r2, r3
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	d916      	bls.n	8005fac <UART_SetConfig+0x508>
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d212      	bcs.n	8005fac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f023 030f 	bic.w	r3, r3, #15
 8005f8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	8bfb      	ldrh	r3, [r7, #30]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	8bfa      	ldrh	r2, [r7, #30]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e062      	b.n	8006072 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fb2:	e05e      	b.n	8006072 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d828      	bhi.n	800600e <UART_SetConfig+0x56a>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0x520>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08005fff 	.word	0x08005fff
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	0800600f 	.word	0x0800600f
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	08006007 	.word	0x08006007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f7fc ffc0 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8005fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fee:	e014      	b.n	800601a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff0:	f7fc ffd2 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8005ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ff6:	e010      	b.n	800601a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff8:	4b1a      	ldr	r3, [pc, #104]	; (8006064 <UART_SetConfig+0x5c0>)
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ffc:	e00d      	b.n	800601a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffe:	f7fc ff47 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8006002:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006004:	e009      	b.n	800601a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800600c:	e005      	b.n	800601a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006018:	bf00      	nop
    }

    if (pclk != 0U)
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d028      	beq.n	8006072 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	4a10      	ldr	r2, [pc, #64]	; (8006068 <UART_SetConfig+0x5c4>)
 8006026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800602a:	461a      	mov	r2, r3
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	441a      	add	r2, r3
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b0f      	cmp	r3, #15
 8006048:	d910      	bls.n	800606c <UART_SetConfig+0x5c8>
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006050:	d20c      	bcs.n	800606c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	b29a      	uxth	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60da      	str	r2, [r3, #12]
 800605c:	e009      	b.n	8006072 <UART_SetConfig+0x5ce>
 800605e:	bf00      	nop
 8006060:	40008000 	.word	0x40008000
 8006064:	00f42400 	.word	0x00f42400
 8006068:	0800a918 	.word	0x0800a918
      }
      else
      {
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2201      	movs	r2, #1
 8006076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2201      	movs	r2, #1
 800607e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800608e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006092:	4618      	mov	r0, r3
 8006094:	3730      	adds	r7, #48	; 0x30
 8006096:	46bd      	mov	sp, r7
 8006098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800609c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01a      	beq.n	80061b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619a:	d10a      	bne.n	80061b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	605a      	str	r2, [r3, #4]
  }
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061f0:	f7fb fdc8 	bl	8001d84 <HAL_GetTick>
 80061f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b08      	cmp	r3, #8
 8006202:	d10e      	bne.n	8006222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f82f 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e025      	b.n	800626e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b04      	cmp	r3, #4
 800622e:	d10e      	bne.n	800624e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f819 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e00f      	b.n	800626e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b09c      	sub	sp, #112	; 0x70
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	e0a9      	b.n	80063dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	f000 80a5 	beq.w	80063dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006292:	f7fb fd77 	bl	8001d84 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800629e:	429a      	cmp	r2, r3
 80062a0:	d302      	bcc.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80062a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d140      	bne.n	800632a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062bc:	667b      	str	r3, [r7, #100]	; 0x64
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80062fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e5      	bne.n	80062da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e069      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d051      	beq.n	80063dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006346:	d149      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006350:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
 8006372:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e6      	bne.n	8006352 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	613b      	str	r3, [r7, #16]
   return(result);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	66bb      	str	r3, [r7, #104]	; 0x68
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063a4:	623a      	str	r2, [r7, #32]
 80063a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e010      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69da      	ldr	r2, [r3, #28]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f43f af46 	beq.w	8006288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3770      	adds	r7, #112	; 0x70
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006406:	b480      	push	{r7}
 8006408:	b095      	sub	sp, #84	; 0x54
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642c:	643b      	str	r3, [r7, #64]	; 0x40
 800642e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	64bb      	str	r3, [r7, #72]	; 0x48
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006464:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800646a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e3      	bne.n	8006440 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d118      	bne.n	80064b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	60bb      	str	r3, [r7, #8]
   return(result);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f023 0310 	bic.w	r3, r3, #16
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	613b      	str	r3, [r7, #16]
   return(result);
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80064c6:	bf00      	nop
 80064c8:	3754      	adds	r7, #84	; 0x54
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff fac1 	bl	8005a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b088      	sub	sp, #32
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	60bb      	str	r3, [r7, #8]
   return(result);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6979      	ldr	r1, [r7, #20]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	613b      	str	r3, [r7, #16]
   return(result);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e6      	bne.n	8006506 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fa8c 	bl	8005a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654c:	bf00      	nop
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e027      	b.n	80065f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2224      	movs	r2, #36	; 0x24
 80065b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0201 	bic.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006616:	2302      	movs	r3, #2
 8006618:	e02d      	b.n	8006676 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2224      	movs	r2, #36	; 0x24
 8006626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f850 	bl	80066fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006692:	2302      	movs	r3, #2
 8006694:	e02d      	b.n	80066f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2224      	movs	r2, #36	; 0x24
 80066a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f812 	bl	80066fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006708:	2b00      	cmp	r3, #0
 800670a:	d108      	bne.n	800671e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800671c:	e031      	b.n	8006782 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800671e:	2308      	movs	r3, #8
 8006720:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006722:	2308      	movs	r3, #8
 8006724:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	0e5b      	lsrs	r3, r3, #25
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	0f5b      	lsrs	r3, r3, #29
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	7b3a      	ldrb	r2, [r7, #12]
 800674a:	4911      	ldr	r1, [pc, #68]	; (8006790 <UARTEx_SetNbDataToProcess+0x94>)
 800674c:	5c8a      	ldrb	r2, [r1, r2]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006752:	7b3a      	ldrb	r2, [r7, #12]
 8006754:	490f      	ldr	r1, [pc, #60]	; (8006794 <UARTEx_SetNbDataToProcess+0x98>)
 8006756:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006758:	fb93 f3f2 	sdiv	r3, r3, r2
 800675c:	b29a      	uxth	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	7b7a      	ldrb	r2, [r7, #13]
 8006768:	4909      	ldr	r1, [pc, #36]	; (8006790 <UARTEx_SetNbDataToProcess+0x94>)
 800676a:	5c8a      	ldrb	r2, [r1, r2]
 800676c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006770:	7b7a      	ldrb	r2, [r7, #13]
 8006772:	4908      	ldr	r1, [pc, #32]	; (8006794 <UARTEx_SetNbDataToProcess+0x98>)
 8006774:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006776:	fb93 f3f2 	sdiv	r3, r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	0800a930 	.word	0x0800a930
 8006794:	0800a938 	.word	0x0800a938

08006798 <__NVIC_SetPriority>:
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	db0a      	blt.n	80067c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	490c      	ldr	r1, [pc, #48]	; (80067e4 <__NVIC_SetPriority+0x4c>)
 80067b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b6:	0112      	lsls	r2, r2, #4
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	440b      	add	r3, r1
 80067bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067c0:	e00a      	b.n	80067d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	4908      	ldr	r1, [pc, #32]	; (80067e8 <__NVIC_SetPriority+0x50>)
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	3b04      	subs	r3, #4
 80067d0:	0112      	lsls	r2, r2, #4
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	440b      	add	r3, r1
 80067d6:	761a      	strb	r2, [r3, #24]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	e000e100 	.word	0xe000e100
 80067e8:	e000ed00 	.word	0xe000ed00

080067ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80067f0:	2100      	movs	r1, #0
 80067f2:	f06f 0004 	mvn.w	r0, #4
 80067f6:	f7ff ffcf 	bl	8006798 <__NVIC_SetPriority>
#endif
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006806:	f3ef 8305 	mrs	r3, IPSR
 800680a:	603b      	str	r3, [r7, #0]
  return(result);
 800680c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006812:	f06f 0305 	mvn.w	r3, #5
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	e00c      	b.n	8006834 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <osKernelInitialize+0x44>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006822:	4b08      	ldr	r3, [pc, #32]	; (8006844 <osKernelInitialize+0x44>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006828:	2300      	movs	r3, #0
 800682a:	607b      	str	r3, [r7, #4]
 800682c:	e002      	b.n	8006834 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800682e:	f04f 33ff 	mov.w	r3, #4294967295
 8006832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006834:	687b      	ldr	r3, [r7, #4]
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	200002ac 	.word	0x200002ac

08006848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684e:	f3ef 8305 	mrs	r3, IPSR
 8006852:	603b      	str	r3, [r7, #0]
  return(result);
 8006854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <osKernelStart+0x1a>
    stat = osErrorISR;
 800685a:	f06f 0305 	mvn.w	r3, #5
 800685e:	607b      	str	r3, [r7, #4]
 8006860:	e010      	b.n	8006884 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <osKernelStart+0x48>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d109      	bne.n	800687e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800686a:	f7ff ffbf 	bl	80067ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800686e:	4b08      	ldr	r3, [pc, #32]	; (8006890 <osKernelStart+0x48>)
 8006870:	2202      	movs	r2, #2
 8006872:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006874:	f001 fcbc 	bl	80081f0 <vTaskStartScheduler>
      stat = osOK;
 8006878:	2300      	movs	r3, #0
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	e002      	b.n	8006884 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800687e:	f04f 33ff 	mov.w	r3, #4294967295
 8006882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006884:	687b      	ldr	r3, [r7, #4]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	200002ac 	.word	0x200002ac

08006894 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af04      	add	r7, sp, #16
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a4:	f3ef 8305 	mrs	r3, IPSR
 80068a8:	617b      	str	r3, [r7, #20]
  return(result);
 80068aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d17e      	bne.n	80069ae <osThreadNew+0x11a>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d07b      	beq.n	80069ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068ba:	2318      	movs	r3, #24
 80068bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295
 80068c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d045      	beq.n	800695a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <osThreadNew+0x48>
        name = attr->name;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <osThreadNew+0x6e>
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b38      	cmp	r3, #56	; 0x38
 80068f4:	d805      	bhi.n	8006902 <osThreadNew+0x6e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <osThreadNew+0x72>
        return (NULL);
 8006902:	2300      	movs	r3, #0
 8006904:	e054      	b.n	80069b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <osThreadNew+0xa8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2bbb      	cmp	r3, #187	; 0xbb
 8006924:	d90a      	bls.n	800693c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800692a:	2b00      	cmp	r3, #0
 800692c:	d006      	beq.n	800693c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <osThreadNew+0xa8>
        mem = 1;
 8006936:	2301      	movs	r3, #1
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e010      	b.n	800695e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10c      	bne.n	800695e <osThreadNew+0xca>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <osThreadNew+0xca>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d104      	bne.n	800695e <osThreadNew+0xca>
          mem = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	e001      	b.n	800695e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d110      	bne.n	8006986 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800696c:	9202      	str	r2, [sp, #8]
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6a3a      	ldr	r2, [r7, #32]
 8006978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f001 fa4c 	bl	8007e18 <xTaskCreateStatic>
 8006980:	4603      	mov	r3, r0
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	e013      	b.n	80069ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d110      	bne.n	80069ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	b29a      	uxth	r2, r3
 8006990:	f107 0310 	add.w	r3, r7, #16
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f001 fa97 	bl	8007ed2 <xTaskCreate>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d001      	beq.n	80069ae <osThreadNew+0x11a>
            hTask = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069ae:	693b      	ldr	r3, [r7, #16]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3728      	adds	r7, #40	; 0x28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069c0:	f3ef 8305 	mrs	r3, IPSR
 80069c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80069c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <osDelay+0x1c>
    stat = osErrorISR;
 80069cc:	f06f 0305 	mvn.w	r3, #5
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e007      	b.n	80069e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fbd2 	bl	8008188 <vTaskDelay>
    }
  }

  return (stat);
 80069e4:	68fb      	ldr	r3, [r7, #12]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b08a      	sub	sp, #40	; 0x28
 80069f2:	af02      	add	r7, sp, #8
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069fe:	f3ef 8305 	mrs	r3, IPSR
 8006a02:	613b      	str	r3, [r7, #16]
  return(result);
 8006a04:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d175      	bne.n	8006af6 <osSemaphoreNew+0x108>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d072      	beq.n	8006af6 <osSemaphoreNew+0x108>
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d86e      	bhi.n	8006af6 <osSemaphoreNew+0x108>
    mem = -1;
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d015      	beq.n	8006a50 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d006      	beq.n	8006a3a <osSemaphoreNew+0x4c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b4f      	cmp	r3, #79	; 0x4f
 8006a32:	d902      	bls.n	8006a3a <osSemaphoreNew+0x4c>
        mem = 1;
 8006a34:	2301      	movs	r3, #1
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	e00c      	b.n	8006a54 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <osSemaphoreNew+0x66>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <osSemaphoreNew+0x66>
          mem = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e001      	b.n	8006a54 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d04c      	beq.n	8006af6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d128      	bne.n	8006ab4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d10a      	bne.n	8006a7e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	9200      	str	r2, [sp, #0]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2100      	movs	r1, #0
 8006a74:	2001      	movs	r0, #1
 8006a76:	f000 fa29 	bl	8006ecc <xQueueGenericCreateStatic>
 8006a7a:	61f8      	str	r0, [r7, #28]
 8006a7c:	e005      	b.n	8006a8a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006a7e:	2203      	movs	r2, #3
 8006a80:	2100      	movs	r1, #0
 8006a82:	2001      	movs	r0, #1
 8006a84:	f000 fa9a 	bl	8006fbc <xQueueGenericCreate>
 8006a88:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d022      	beq.n	8006ad6 <osSemaphoreNew+0xe8>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01f      	beq.n	8006ad6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a96:	2300      	movs	r3, #0
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	69f8      	ldr	r0, [r7, #28]
 8006a9e:	f000 fb55 	bl	800714c <xQueueGenericSend>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d016      	beq.n	8006ad6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006aa8:	69f8      	ldr	r0, [r7, #28]
 8006aaa:	f000 ffe1 	bl	8007a70 <vQueueDelete>
            hSemaphore = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	e010      	b.n	8006ad6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d108      	bne.n	8006acc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fad7 	bl	8007076 <xQueueCreateCountingSemaphoreStatic>
 8006ac8:	61f8      	str	r0, [r7, #28]
 8006aca:	e004      	b.n	8006ad6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fb08 	bl	80070e4 <xQueueCreateCountingSemaphore>
 8006ad4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00c      	beq.n	8006af6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <osSemaphoreNew+0xfc>
          name = attr->name;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e001      	b.n	8006aee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006aee:	6979      	ldr	r1, [r7, #20]
 8006af0:	69f8      	ldr	r0, [r7, #28]
 8006af2:	f001 f909 	bl	8007d08 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006af6:	69fb      	ldr	r3, [r7, #28]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b18:	f06f 0303 	mvn.w	r3, #3
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	e039      	b.n	8006b94 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b20:	f3ef 8305 	mrs	r3, IPSR
 8006b24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d022      	beq.n	8006b72 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006b32:	f06f 0303 	mvn.w	r3, #3
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e02c      	b.n	8006b94 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b3e:	f107 0308 	add.w	r3, r7, #8
 8006b42:	461a      	mov	r2, r3
 8006b44:	2100      	movs	r1, #0
 8006b46:	6938      	ldr	r0, [r7, #16]
 8006b48:	f000 ff12 	bl	8007970 <xQueueReceiveFromISR>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d003      	beq.n	8006b5a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006b52:	f06f 0302 	mvn.w	r3, #2
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e01c      	b.n	8006b94 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d019      	beq.n	8006b94 <osSemaphoreAcquire+0x94>
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <osSemaphoreAcquire+0xa0>)
 8006b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	e010      	b.n	8006b94 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6938      	ldr	r0, [r7, #16]
 8006b76:	f000 fdef 	bl	8007758 <xQueueSemaphoreTake>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d009      	beq.n	8006b94 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006b86:	f06f 0301 	mvn.w	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e002      	b.n	8006b94 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006b8e:	f06f 0302 	mvn.w	r3, #2
 8006b92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b94:	697b      	ldr	r3, [r7, #20]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006bba:	f06f 0303 	mvn.w	r3, #3
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e02c      	b.n	8006c1c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc2:	f3ef 8305 	mrs	r3, IPSR
 8006bc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01a      	beq.n	8006c04 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006bd2:	f107 0308 	add.w	r3, r7, #8
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6938      	ldr	r0, [r7, #16]
 8006bda:	f000 fc50 	bl	800747e <xQueueGiveFromISR>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d003      	beq.n	8006bec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006be4:	f06f 0302 	mvn.w	r3, #2
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e017      	b.n	8006c1c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d014      	beq.n	8006c1c <osSemaphoreRelease+0x78>
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <osSemaphoreRelease+0x84>)
 8006bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	e00b      	b.n	8006c1c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c04:	2300      	movs	r3, #0
 8006c06:	2200      	movs	r2, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	6938      	ldr	r0, [r7, #16]
 8006c0c:	f000 fa9e 	bl	800714c <xQueueGenericSend>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d002      	beq.n	8006c1c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006c16:	f06f 0302 	mvn.w	r3, #2
 8006c1a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006c1c:	697b      	ldr	r3, [r7, #20]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a07      	ldr	r2, [pc, #28]	; (8006c58 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4a06      	ldr	r2, [pc, #24]	; (8006c5c <vApplicationGetIdleTaskMemory+0x30>)
 8006c42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2280      	movs	r2, #128	; 0x80
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	200002b0 	.word	0x200002b0
 8006c5c:	2000036c 	.word	0x2000036c

08006c60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4a07      	ldr	r2, [pc, #28]	; (8006c8c <vApplicationGetTimerTaskMemory+0x2c>)
 8006c70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4a06      	ldr	r2, [pc, #24]	; (8006c90 <vApplicationGetTimerTaskMemory+0x30>)
 8006c76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7e:	601a      	str	r2, [r3, #0]
}
 8006c80:	bf00      	nop
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	2000056c 	.word	0x2000056c
 8006c90:	20000628 	.word	0x20000628

08006c94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f103 0208 	add.w	r2, r3, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f103 0208 	add.w	r2, r3, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f103 0208 	add.w	r2, r3, #8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4c:	d103      	bne.n	8006d56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e00c      	b.n	8006d70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e002      	b.n	8006d64 <vListInsert+0x2e>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d2f6      	bcs.n	8006d5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	601a      	str	r2, [r3, #0]
}
 8006d9c:	bf00      	nop
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6892      	ldr	r2, [r2, #8]
 8006dbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6852      	ldr	r2, [r2, #4]
 8006dc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d103      	bne.n	8006ddc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	1e5a      	subs	r2, r3, #1
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e26:	f002 fc95 	bl	8009754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e36:	fb01 f303 	mul.w	r3, r1, r3
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	3b01      	subs	r3, #1
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	441a      	add	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	22ff      	movs	r2, #255	; 0xff
 8006e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	22ff      	movs	r2, #255	; 0xff
 8006e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d114      	bne.n	8006ea6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01a      	beq.n	8006eba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3310      	adds	r3, #16
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 fc4b 	bl	8008724 <xTaskRemoveFromEventList>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d012      	beq.n	8006eba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <xQueueGenericReset+0xcc>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	e009      	b.n	8006eba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3310      	adds	r3, #16
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff fef2 	bl	8006c94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3324      	adds	r3, #36	; 0x24
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff feed 	bl	8006c94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006eba:	f002 fc7b 	bl	80097b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ebe:	2301      	movs	r3, #1
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <xQueueGenericCreateStatic+0x52>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <xQueueGenericCreateStatic+0x56>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <xQueueGenericCreateStatic+0x58>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	623b      	str	r3, [r7, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <xQueueGenericCreateStatic+0x7e>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <xQueueGenericCreateStatic+0x82>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <xQueueGenericCreateStatic+0x84>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	61fb      	str	r3, [r7, #28]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f6a:	2350      	movs	r3, #80	; 0x50
 8006f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b50      	cmp	r3, #80	; 0x50
 8006f72:	d00a      	beq.n	8006f8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	61bb      	str	r3, [r7, #24]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00d      	beq.n	8006fb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f83f 	bl	8007030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3730      	adds	r7, #48	; 0x30
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	; 0x28
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	613b      	str	r3, [r7, #16]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3350      	adds	r3, #80	; 0x50
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f002 fccf 	bl	8009998 <pvPortMalloc>
 8006ffa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d011      	beq.n	8007026 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	3350      	adds	r3, #80	; 0x50
 800700a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007014:	79fa      	ldrb	r2, [r7, #7]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	4613      	mov	r3, r2
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f805 	bl	8007030 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007026:	69bb      	ldr	r3, [r7, #24]
	}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e002      	b.n	8007052 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800705e:	2101      	movs	r1, #1
 8007060:	69b8      	ldr	r0, [r7, #24]
 8007062:	f7ff fecb 	bl	8006dfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007076:	b580      	push	{r7, lr}
 8007078:	b08a      	sub	sp, #40	; 0x28
 800707a:	af02      	add	r7, sp, #8
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	61bb      	str	r3, [r7, #24]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d90a      	bls.n	80070bc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	617b      	str	r3, [r7, #20]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070bc:	2302      	movs	r3, #2
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	2100      	movs	r1, #0
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff ff00 	bl	8006ecc <xQueueGenericCreateStatic>
 80070cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070da:	69fb      	ldr	r3, [r7, #28]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	3720      	adds	r7, #32
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	613b      	str	r3, [r7, #16]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d90a      	bls.n	8007128 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60fb      	str	r3, [r7, #12]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007128:	2202      	movs	r2, #2
 800712a:	2100      	movs	r1, #0
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff ff45 	bl	8006fbc <xQueueGenericCreate>
 8007132:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007140:	697b      	ldr	r3, [r7, #20]
	}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08e      	sub	sp, #56	; 0x38
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800715a:	2300      	movs	r3, #0
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <xQueueGenericSend+0x32>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <xQueueGenericSend+0x40>
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <xQueueGenericSend+0x44>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <xQueueGenericSend+0x46>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <xQueueGenericSend+0x60>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSend+0x6e>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <xQueueGenericSend+0x72>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericSend+0x74>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueGenericSend+0x8e>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	623b      	str	r3, [r7, #32]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071da:	f001 fc65 	bl	8008aa8 <xTaskGetSchedulerState>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <xQueueGenericSend+0x9e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueGenericSend+0xa2>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueGenericSend+0xa4>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueGenericSend+0xbe>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	61fb      	str	r3, [r7, #28]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800720a:	f002 faa3 	bl	8009754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	429a      	cmp	r2, r3
 8007218:	d302      	bcc.n	8007220 <xQueueGenericSend+0xd4>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d129      	bne.n	8007274 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007226:	f000 fc5e 	bl	8007ae6 <prvCopyDataToQueue>
 800722a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	4618      	mov	r0, r3
 800723a:	f001 fa73 	bl	8008724 <xTaskRemoveFromEventList>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d013      	beq.n	800726c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007244:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <xQueueGenericSend+0x1f8>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	e00a      	b.n	800726c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d007      	beq.n	800726c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800725c:	4b39      	ldr	r3, [pc, #228]	; (8007344 <xQueueGenericSend+0x1f8>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800726c:	f002 faa2 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 8007270:	2301      	movs	r3, #1
 8007272:	e063      	b.n	800733c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d103      	bne.n	8007282 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800727a:	f002 fa9b 	bl	80097b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800727e:	2300      	movs	r3, #0
 8007280:	e05c      	b.n	800733c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007288:	f107 0314 	add.w	r3, r7, #20
 800728c:	4618      	mov	r0, r3
 800728e:	f001 faad 	bl	80087ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007292:	2301      	movs	r3, #1
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007296:	f002 fa8d 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800729a:	f001 f819 	bl	80082d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800729e:	f002 fa59 	bl	8009754 <vPortEnterCritical>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a8:	b25b      	sxtb	r3, r3
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	d103      	bne.n	80072b8 <xQueueGenericSend+0x16c>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d103      	bne.n	80072ce <xQueueGenericSend+0x182>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ce:	f002 fa71 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072d2:	1d3a      	adds	r2, r7, #4
 80072d4:	f107 0314 	add.w	r3, r7, #20
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fa9c 	bl	8008818 <xTaskCheckForTimeOut>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d124      	bne.n	8007330 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e8:	f000 fcf5 	bl	8007cd6 <prvIsQueueFull>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d018      	beq.n	8007324 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	3310      	adds	r3, #16
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f9c2 	bl	8008684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007302:	f000 fc80 	bl	8007c06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007306:	f000 fff1 	bl	80082ec <xTaskResumeAll>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f af7c 	bne.w	800720a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <xQueueGenericSend+0x1f8>)
 8007314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	e772      	b.n	800720a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007326:	f000 fc6e 	bl	8007c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800732a:	f000 ffdf 	bl	80082ec <xTaskResumeAll>
 800732e:	e76c      	b.n	800720a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007332:	f000 fc68 	bl	8007c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007336:	f000 ffd9 	bl	80082ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800733a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800733c:	4618      	mov	r0, r3
 800733e:	3738      	adds	r7, #56	; 0x38
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b090      	sub	sp, #64	; 0x40
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d103      	bne.n	8007384 <xQueueGenericSendFromISR+0x3c>
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <xQueueGenericSendFromISR+0x40>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <xQueueGenericSendFromISR+0x42>
 8007388:	2300      	movs	r3, #0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d103      	bne.n	80073b2 <xQueueGenericSendFromISR+0x6a>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <xQueueGenericSendFromISR+0x6e>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <xQueueGenericSendFromISR+0x70>
 80073b6:	2300      	movs	r3, #0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	623b      	str	r3, [r7, #32]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073d2:	f002 faa1 	bl	8009918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073d6:	f3ef 8211 	mrs	r2, BASEPRI
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	61fa      	str	r2, [r7, #28]
 80073ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <xQueueGenericSendFromISR+0xbc>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d12f      	bne.n	8007464 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800740a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800741a:	f000 fb64 	bl	8007ae6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800741e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007426:	d112      	bne.n	800744e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	2b00      	cmp	r3, #0
 800742e:	d016      	beq.n	800745e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	3324      	adds	r3, #36	; 0x24
 8007434:	4618      	mov	r0, r3
 8007436:	f001 f975 	bl	8008724 <xTaskRemoveFromEventList>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e007      	b.n	800745e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800744e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007452:	3301      	adds	r3, #1
 8007454:	b2db      	uxtb	r3, r3
 8007456:	b25a      	sxtb	r2, r3
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800745e:	2301      	movs	r3, #1
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007462:	e001      	b.n	8007468 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007464:	2300      	movs	r3, #0
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007472:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007476:	4618      	mov	r0, r3
 8007478:	3740      	adds	r7, #64	; 0x40
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b08e      	sub	sp, #56	; 0x38
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	623b      	str	r3, [r7, #32]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	61fb      	str	r3, [r7, #28]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d103      	bne.n	80074d6 <xQueueGiveFromISR+0x58>
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <xQueueGiveFromISR+0x5c>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <xQueueGiveFromISR+0x5e>
 80074da:	2300      	movs	r3, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	61bb      	str	r3, [r7, #24]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074f6:	f002 fa0f 	bl	8009918 <vPortValidateInterruptPriority>
	__asm volatile
 80074fa:	f3ef 8211 	mrs	r2, BASEPRI
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	617a      	str	r2, [r7, #20]
 8007510:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007512:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007522:	429a      	cmp	r2, r3
 8007524:	d22b      	bcs.n	800757e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800752c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d112      	bne.n	8007568 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d016      	beq.n	8007578 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	3324      	adds	r3, #36	; 0x24
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f8e8 	bl	8008724 <xTaskRemoveFromEventList>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e007      	b.n	8007578 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800756c:	3301      	adds	r3, #1
 800756e:	b2db      	uxtb	r3, r3
 8007570:	b25a      	sxtb	r2, r3
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007578:	2301      	movs	r3, #1
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
 800757c:	e001      	b.n	8007582 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800757e:	2300      	movs	r3, #0
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f383 8811 	msr	BASEPRI, r3
}
 800758c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007590:	4618      	mov	r0, r3
 8007592:	3738      	adds	r7, #56	; 0x38
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08c      	sub	sp, #48	; 0x30
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <xQueueReceive+0x30>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	623b      	str	r3, [r7, #32]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <xQueueReceive+0x3e>
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <xQueueReceive+0x42>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <xQueueReceive+0x44>
 80075da:	2300      	movs	r3, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <xQueueReceive+0x5e>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	61fb      	str	r3, [r7, #28]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075f6:	f001 fa57 	bl	8008aa8 <xTaskGetSchedulerState>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <xQueueReceive+0x6e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <xQueueReceive+0x72>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <xQueueReceive+0x74>
 800760a:	2300      	movs	r3, #0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xQueueReceive+0x8e>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	61bb      	str	r3, [r7, #24]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007626:	f002 f895 	bl	8009754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01f      	beq.n	8007676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763a:	f000 fabe 	bl	8007bba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	1e5a      	subs	r2, r3, #1
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00f      	beq.n	800766e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	3310      	adds	r3, #16
 8007652:	4618      	mov	r0, r3
 8007654:	f001 f866 	bl	8008724 <xTaskRemoveFromEventList>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800765e:	4b3d      	ldr	r3, [pc, #244]	; (8007754 <xQueueReceive+0x1bc>)
 8007660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800766e:	f002 f8a1 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 8007672:	2301      	movs	r3, #1
 8007674:	e069      	b.n	800774a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800767c:	f002 f89a 	bl	80097b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007680:	2300      	movs	r3, #0
 8007682:	e062      	b.n	800774a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	4618      	mov	r0, r3
 8007690:	f001 f8ac 	bl	80087ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007694:	2301      	movs	r3, #1
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007698:	f002 f88c 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800769c:	f000 fe18 	bl	80082d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a0:	f002 f858 	bl	8009754 <vPortEnterCritical>
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076aa:	b25b      	sxtb	r3, r3
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d103      	bne.n	80076ba <xQueueReceive+0x122>
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d103      	bne.n	80076d0 <xQueueReceive+0x138>
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d0:	f002 f870 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d4:	1d3a      	adds	r2, r7, #4
 80076d6:	f107 0310 	add.w	r3, r7, #16
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 f89b 	bl	8008818 <xTaskCheckForTimeOut>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d123      	bne.n	8007730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ea:	f000 fade 	bl	8007caa <prvIsQueueEmpty>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d017      	beq.n	8007724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	3324      	adds	r3, #36	; 0x24
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 ffc1 	bl	8008684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007704:	f000 fa7f 	bl	8007c06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007708:	f000 fdf0 	bl	80082ec <xTaskResumeAll>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d189      	bne.n	8007626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <xQueueReceive+0x1bc>)
 8007714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	e780      	b.n	8007626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007726:	f000 fa6e 	bl	8007c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800772a:	f000 fddf 	bl	80082ec <xTaskResumeAll>
 800772e:	e77a      	b.n	8007626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007732:	f000 fa68 	bl	8007c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007736:	f000 fdd9 	bl	80082ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800773a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800773c:	f000 fab5 	bl	8007caa <prvIsQueueEmpty>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	f43f af6f 	beq.w	8007626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800774a:	4618      	mov	r0, r3
 800774c:	3730      	adds	r7, #48	; 0x30
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	; 0x38
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007762:	2300      	movs	r3, #0
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	623b      	str	r3, [r7, #32]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	61fb      	str	r3, [r7, #28]
}
 80077a4:	bf00      	nop
 80077a6:	e7fe      	b.n	80077a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077a8:	f001 f97e 	bl	8008aa8 <xTaskGetSchedulerState>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <xQueueSemaphoreTake+0x60>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <xQueueSemaphoreTake+0x64>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <xQueueSemaphoreTake+0x66>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	61bb      	str	r3, [r7, #24]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077d8:	f001 ffbc 	bl	8009754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d024      	beq.n	8007832 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	1e5a      	subs	r2, r3, #1
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077f8:	f001 facc 	bl	8008d94 <pvTaskIncrementMutexHeldCount>
 80077fc:	4602      	mov	r2, r0
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00f      	beq.n	800782a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	3310      	adds	r3, #16
 800780e:	4618      	mov	r0, r3
 8007810:	f000 ff88 	bl	8008724 <xTaskRemoveFromEventList>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800781a:	4b54      	ldr	r3, [pc, #336]	; (800796c <xQueueSemaphoreTake+0x214>)
 800781c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800782a:	f001 ffc3 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 800782e:	2301      	movs	r3, #1
 8007830:	e097      	b.n	8007962 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d111      	bne.n	800785c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	617b      	str	r3, [r7, #20]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007854:	f001 ffae 	bl	80097b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007858:	2300      	movs	r3, #0
 800785a:	e082      	b.n	8007962 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007862:	f107 030c 	add.w	r3, r7, #12
 8007866:	4618      	mov	r0, r3
 8007868:	f000 ffc0 	bl	80087ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800786c:	2301      	movs	r3, #1
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007870:	f001 ffa0 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007874:	f000 fd2c 	bl	80082d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007878:	f001 ff6c 	bl	8009754 <vPortEnterCritical>
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007882:	b25b      	sxtb	r3, r3
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007888:	d103      	bne.n	8007892 <xQueueSemaphoreTake+0x13a>
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007898:	b25b      	sxtb	r3, r3
 800789a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789e:	d103      	bne.n	80078a8 <xQueueSemaphoreTake+0x150>
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078a8:	f001 ff84 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ac:	463a      	mov	r2, r7
 80078ae:	f107 030c 	add.w	r3, r7, #12
 80078b2:	4611      	mov	r1, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 ffaf 	bl	8008818 <xTaskCheckForTimeOut>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d132      	bne.n	8007926 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078c2:	f000 f9f2 	bl	8007caa <prvIsQueueEmpty>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d026      	beq.n	800791a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d109      	bne.n	80078e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078d4:	f001 ff3e 	bl	8009754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 f901 	bl	8008ae4 <xTaskPriorityInherit>
 80078e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078e4:	f001 ff66 	bl	80097b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	3324      	adds	r3, #36	; 0x24
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fec7 	bl	8008684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078f8:	f000 f985 	bl	8007c06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078fc:	f000 fcf6 	bl	80082ec <xTaskResumeAll>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	f47f af68 	bne.w	80077d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007908:	4b18      	ldr	r3, [pc, #96]	; (800796c <xQueueSemaphoreTake+0x214>)
 800790a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	e75e      	b.n	80077d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800791a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800791c:	f000 f973 	bl	8007c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007920:	f000 fce4 	bl	80082ec <xTaskResumeAll>
 8007924:	e758      	b.n	80077d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007928:	f000 f96d 	bl	8007c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800792c:	f000 fcde 	bl	80082ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007932:	f000 f9ba 	bl	8007caa <prvIsQueueEmpty>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	f43f af4d 	beq.w	80077d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007944:	f001 ff06 	bl	8009754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800794a:	f000 f8b4 	bl	8007ab6 <prvGetDisinheritPriorityAfterTimeout>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007956:	4618      	mov	r0, r3
 8007958:	f001 f99a 	bl	8008c90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800795c:	f001 ff2a 	bl	80097b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007962:	4618      	mov	r0, r3
 8007964:	3738      	adds	r7, #56	; 0x38
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08e      	sub	sp, #56	; 0x38
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	623b      	str	r3, [r7, #32]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d103      	bne.n	80079aa <xQueueReceiveFromISR+0x3a>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <xQueueReceiveFromISR+0x3e>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <xQueueReceiveFromISR+0x40>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	61fb      	str	r3, [r7, #28]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079ca:	f001 ffa5 	bl	8009918 <vPortValidateInterruptPriority>
	__asm volatile
 80079ce:	f3ef 8211 	mrs	r2, BASEPRI
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	61ba      	str	r2, [r7, #24]
 80079e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02f      	beq.n	8007a56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a04:	f000 f8d9 	bl	8007bba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a18:	d112      	bne.n	8007a40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d016      	beq.n	8007a50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	3310      	adds	r3, #16
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fe7c 	bl	8008724 <xTaskRemoveFromEventList>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00e      	beq.n	8007a50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	e007      	b.n	8007a50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a44:	3301      	adds	r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	b25a      	sxtb	r2, r3
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a50:	2301      	movs	r3, #1
 8007a52:	637b      	str	r3, [r7, #52]	; 0x34
 8007a54:	e001      	b.n	8007a5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f383 8811 	msr	BASEPRI, r3
}
 8007a64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3738      	adds	r7, #56	; 0x38
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <vQueueDelete+0x28>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 f95f 	bl	8007d5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f002 f841 	bl	8009b30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d006      	beq.n	8007ad4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	e001      	b.n	8007ad8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
	}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10d      	bne.n	8007b20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d14d      	bne.n	8007ba8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f001 f84f 	bl	8008bb4 <xTaskPriorityDisinherit>
 8007b16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	609a      	str	r2, [r3, #8]
 8007b1e:	e043      	b.n	8007ba8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d119      	bne.n	8007b5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6858      	ldr	r0, [r3, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	461a      	mov	r2, r3
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	f002 f947 	bl	8009dc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	441a      	add	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d32b      	bcc.n	8007ba8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	605a      	str	r2, [r3, #4]
 8007b58:	e026      	b.n	8007ba8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68d8      	ldr	r0, [r3, #12]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	461a      	mov	r2, r3
 8007b64:	68b9      	ldr	r1, [r7, #8]
 8007b66:	f002 f92d 	bl	8009dc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	425b      	negs	r3, r3
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d207      	bcs.n	8007b96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	425b      	negs	r3, r3
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d105      	bne.n	8007ba8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bb0:	697b      	ldr	r3, [r7, #20]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d018      	beq.n	8007bfe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	441a      	add	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d303      	bcc.n	8007bee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68d9      	ldr	r1, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6838      	ldr	r0, [r7, #0]
 8007bfa:	f002 f8e3 	bl	8009dc4 <memcpy>
	}
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c0e:	f001 fda1 	bl	8009754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c1a:	e011      	b.n	8007c40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d012      	beq.n	8007c4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3324      	adds	r3, #36	; 0x24
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fd7b 	bl	8008724 <xTaskRemoveFromEventList>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c34:	f000 fe52 	bl	80088dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dce9      	bgt.n	8007c1c <prvUnlockQueue+0x16>
 8007c48:	e000      	b.n	8007c4c <prvUnlockQueue+0x46>
					break;
 8007c4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	22ff      	movs	r2, #255	; 0xff
 8007c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c54:	f001 fdae 	bl	80097b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c58:	f001 fd7c 	bl	8009754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c64:	e011      	b.n	8007c8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d012      	beq.n	8007c94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3310      	adds	r3, #16
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fd56 	bl	8008724 <xTaskRemoveFromEventList>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c7e:	f000 fe2d 	bl	80088dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dce9      	bgt.n	8007c66 <prvUnlockQueue+0x60>
 8007c92:	e000      	b.n	8007c96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	22ff      	movs	r2, #255	; 0xff
 8007c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c9e:	f001 fd89 	bl	80097b4 <vPortExitCritical>
}
 8007ca2:	bf00      	nop
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cb2:	f001 fd4f 	bl	8009754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e001      	b.n	8007cc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cc8:	f001 fd74 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cde:	f001 fd39 	bl	8009754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d102      	bne.n	8007cf4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	e001      	b.n	8007cf8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cf8:	f001 fd5c 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e014      	b.n	8007d42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d18:	4a0f      	ldr	r2, [pc, #60]	; (8007d58 <vQueueAddToRegistry+0x50>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10b      	bne.n	8007d3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d24:	490c      	ldr	r1, [pc, #48]	; (8007d58 <vQueueAddToRegistry+0x50>)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d2e:	4a0a      	ldr	r2, [pc, #40]	; (8007d58 <vQueueAddToRegistry+0x50>)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d3a:	e006      	b.n	8007d4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b07      	cmp	r3, #7
 8007d46:	d9e7      	bls.n	8007d18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20000a28 	.word	0x20000a28

08007d5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e016      	b.n	8007d98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d6a:	4a10      	ldr	r2, [pc, #64]	; (8007dac <vQueueUnregisterQueue+0x50>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d10b      	bne.n	8007d92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <vQueueUnregisterQueue+0x50>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d84:	4a09      	ldr	r2, [pc, #36]	; (8007dac <vQueueUnregisterQueue+0x50>)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	4413      	add	r3, r2
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	605a      	str	r2, [r3, #4]
				break;
 8007d90:	e006      	b.n	8007da0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b07      	cmp	r3, #7
 8007d9c:	d9e5      	bls.n	8007d6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000a28 	.word	0x20000a28

08007db0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007dc0:	f001 fcc8 	bl	8009754 <vPortEnterCritical>
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d103      	bne.n	8007dda <vQueueWaitForMessageRestricted+0x2a>
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de0:	b25b      	sxtb	r3, r3
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d103      	bne.n	8007df0 <vQueueWaitForMessageRestricted+0x40>
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007df0:	f001 fce0 	bl	80097b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	3324      	adds	r3, #36	; 0x24
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fc61 	bl	80086cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e0a:	6978      	ldr	r0, [r7, #20]
 8007e0c:	f7ff fefb 	bl	8007c06 <prvUnlockQueue>
	}
 8007e10:	bf00      	nop
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08e      	sub	sp, #56	; 0x38
 8007e1c:	af04      	add	r7, sp, #16
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	623b      	str	r3, [r7, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xTaskCreateStatic+0x46>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	61fb      	str	r3, [r7, #28]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e5e:	23bc      	movs	r3, #188	; 0xbc
 8007e60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2bbc      	cmp	r3, #188	; 0xbc
 8007e66:	d00a      	beq.n	8007e7e <xTaskCreateStatic+0x66>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	61bb      	str	r3, [r7, #24]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01e      	beq.n	8007ec4 <xTaskCreateStatic+0xac>
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01b      	beq.n	8007ec4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9303      	str	r3, [sp, #12]
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	9302      	str	r3, [sp, #8]
 8007ea6:	f107 0314 	add.w	r3, r7, #20
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f850 	bl	8007f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ebe:	f000 f8f3 	bl	80080a8 <prvAddNewTaskToReadyList>
 8007ec2:	e001      	b.n	8007ec8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ec8:	697b      	ldr	r3, [r7, #20]
	}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3728      	adds	r7, #40	; 0x28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b08c      	sub	sp, #48	; 0x30
 8007ed6:	af04      	add	r7, sp, #16
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	603b      	str	r3, [r7, #0]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 fd56 	bl	8009998 <pvPortMalloc>
 8007eec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00e      	beq.n	8007f12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ef4:	20bc      	movs	r0, #188	; 0xbc
 8007ef6:	f001 fd4f 	bl	8009998 <pvPortMalloc>
 8007efa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	631a      	str	r2, [r3, #48]	; 0x30
 8007f08:	e005      	b.n	8007f16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f0a:	6978      	ldr	r0, [r7, #20]
 8007f0c:	f001 fe10 	bl	8009b30 <vPortFree>
 8007f10:	e001      	b.n	8007f16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d017      	beq.n	8007f4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	2300      	movs	r3, #0
 8007f28:	9303      	str	r3, [sp, #12]
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	9302      	str	r3, [sp, #8]
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f80e 	bl	8007f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f40:	69f8      	ldr	r0, [r7, #28]
 8007f42:	f000 f8b1 	bl	80080a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f46:	2301      	movs	r3, #1
 8007f48:	61bb      	str	r3, [r7, #24]
 8007f4a:	e002      	b.n	8007f52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f52:	69bb      	ldr	r3, [r7, #24]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	461a      	mov	r2, r3
 8007f74:	21a5      	movs	r1, #165	; 0xa5
 8007f76:	f001 ff33 	bl	8009de0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f84:	3b01      	subs	r3, #1
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f023 0307 	bic.w	r3, r3, #7
 8007f92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	617b      	str	r3, [r7, #20]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01f      	beq.n	8007ffa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	e012      	b.n	8007fe6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	7819      	ldrb	r1, [r3, #0]
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4413      	add	r3, r2
 8007fce:	3334      	adds	r3, #52	; 0x34
 8007fd0:	460a      	mov	r2, r1
 8007fd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d006      	beq.n	8007fee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	61fb      	str	r3, [r7, #28]
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	2b0f      	cmp	r3, #15
 8007fea:	d9e9      	bls.n	8007fc0 <prvInitialiseNewTask+0x64>
 8007fec:	e000      	b.n	8007ff0 <prvInitialiseNewTask+0x94>
			{
				break;
 8007fee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ff8:	e003      	b.n	8008002 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	2b37      	cmp	r3, #55	; 0x37
 8008006:	d901      	bls.n	800800c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008008:	2337      	movs	r3, #55	; 0x37
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008016:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	2200      	movs	r2, #0
 800801c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	3304      	adds	r3, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fe56 	bl	8006cd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	3318      	adds	r3, #24
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe fe51 	bl	8006cd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	2200      	movs	r2, #0
 800804c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	2200      	movs	r2, #0
 8008054:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	3354      	adds	r3, #84	; 0x54
 800805c:	2260      	movs	r2, #96	; 0x60
 800805e:	2100      	movs	r1, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f001 febd 	bl	8009de0 <memset>
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	4a0c      	ldr	r2, [pc, #48]	; (800809c <prvInitialiseNewTask+0x140>)
 800806a:	659a      	str	r2, [r3, #88]	; 0x58
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	4a0c      	ldr	r2, [pc, #48]	; (80080a0 <prvInitialiseNewTask+0x144>)
 8008070:	65da      	str	r2, [r3, #92]	; 0x5c
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	4a0b      	ldr	r2, [pc, #44]	; (80080a4 <prvInitialiseNewTask+0x148>)
 8008076:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	69b8      	ldr	r0, [r7, #24]
 800807e:	f001 fa3f 	bl	8009500 <pxPortInitialiseStack>
 8008082:	4602      	mov	r2, r0
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008092:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008094:	bf00      	nop
 8008096:	3720      	adds	r7, #32
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	0800a960 	.word	0x0800a960
 80080a0:	0800a980 	.word	0x0800a980
 80080a4:	0800a940 	.word	0x0800a940

080080a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080b0:	f001 fb50 	bl	8009754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080b4:	4b2d      	ldr	r3, [pc, #180]	; (800816c <prvAddNewTaskToReadyList+0xc4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3301      	adds	r3, #1
 80080ba:	4a2c      	ldr	r2, [pc, #176]	; (800816c <prvAddNewTaskToReadyList+0xc4>)
 80080bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080be:	4b2c      	ldr	r3, [pc, #176]	; (8008170 <prvAddNewTaskToReadyList+0xc8>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d109      	bne.n	80080da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080c6:	4a2a      	ldr	r2, [pc, #168]	; (8008170 <prvAddNewTaskToReadyList+0xc8>)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080cc:	4b27      	ldr	r3, [pc, #156]	; (800816c <prvAddNewTaskToReadyList+0xc4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d110      	bne.n	80080f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080d4:	f000 fc26 	bl	8008924 <prvInitialiseTaskLists>
 80080d8:	e00d      	b.n	80080f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080da:	4b26      	ldr	r3, [pc, #152]	; (8008174 <prvAddNewTaskToReadyList+0xcc>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080e2:	4b23      	ldr	r3, [pc, #140]	; (8008170 <prvAddNewTaskToReadyList+0xc8>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d802      	bhi.n	80080f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080f0:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <prvAddNewTaskToReadyList+0xc8>)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080f6:	4b20      	ldr	r3, [pc, #128]	; (8008178 <prvAddNewTaskToReadyList+0xd0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3301      	adds	r3, #1
 80080fc:	4a1e      	ldr	r2, [pc, #120]	; (8008178 <prvAddNewTaskToReadyList+0xd0>)
 80080fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008100:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <prvAddNewTaskToReadyList+0xd0>)
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4b1b      	ldr	r3, [pc, #108]	; (800817c <prvAddNewTaskToReadyList+0xd4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d903      	bls.n	800811c <prvAddNewTaskToReadyList+0x74>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4a18      	ldr	r2, [pc, #96]	; (800817c <prvAddNewTaskToReadyList+0xd4>)
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4a15      	ldr	r2, [pc, #84]	; (8008180 <prvAddNewTaskToReadyList+0xd8>)
 800812a:	441a      	add	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7fe fddb 	bl	8006cee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008138:	f001 fb3c 	bl	80097b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <prvAddNewTaskToReadyList+0xcc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00e      	beq.n	8008162 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008144:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <prvAddNewTaskToReadyList+0xc8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	429a      	cmp	r2, r3
 8008150:	d207      	bcs.n	8008162 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008152:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <prvAddNewTaskToReadyList+0xdc>)
 8008154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000f3c 	.word	0x20000f3c
 8008170:	20000a68 	.word	0x20000a68
 8008174:	20000f48 	.word	0x20000f48
 8008178:	20000f58 	.word	0x20000f58
 800817c:	20000f44 	.word	0x20000f44
 8008180:	20000a6c 	.word	0x20000a6c
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d017      	beq.n	80081ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800819a:	4b13      	ldr	r3, [pc, #76]	; (80081e8 <vTaskDelay+0x60>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <vTaskDelay+0x30>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	60bb      	str	r3, [r7, #8]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081b8:	f000 f88a 	bl	80082d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081bc:	2100      	movs	r1, #0
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fdfc 	bl	8008dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081c4:	f000 f892 	bl	80082ec <xTaskResumeAll>
 80081c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d107      	bne.n	80081e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <vTaskDelay+0x64>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20000f64 	.word	0x20000f64
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	; 0x28
 80081f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081fe:	463a      	mov	r2, r7
 8008200:	1d39      	adds	r1, r7, #4
 8008202:	f107 0308 	add.w	r3, r7, #8
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fd10 	bl	8006c2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	9202      	str	r2, [sp, #8]
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	2300      	movs	r3, #0
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	2300      	movs	r3, #0
 800821c:	460a      	mov	r2, r1
 800821e:	4924      	ldr	r1, [pc, #144]	; (80082b0 <vTaskStartScheduler+0xc0>)
 8008220:	4824      	ldr	r0, [pc, #144]	; (80082b4 <vTaskStartScheduler+0xc4>)
 8008222:	f7ff fdf9 	bl	8007e18 <xTaskCreateStatic>
 8008226:	4603      	mov	r3, r0
 8008228:	4a23      	ldr	r2, [pc, #140]	; (80082b8 <vTaskStartScheduler+0xc8>)
 800822a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800822c:	4b22      	ldr	r3, [pc, #136]	; (80082b8 <vTaskStartScheduler+0xc8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008234:	2301      	movs	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e001      	b.n	800823e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d102      	bne.n	800824a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008244:	f000 fe0e 	bl	8008e64 <xTimerCreateTimerTask>
 8008248:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d11b      	bne.n	8008288 <vTaskStartScheduler+0x98>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008264:	4b15      	ldr	r3, [pc, #84]	; (80082bc <vTaskStartScheduler+0xcc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3354      	adds	r3, #84	; 0x54
 800826a:	4a15      	ldr	r2, [pc, #84]	; (80082c0 <vTaskStartScheduler+0xd0>)
 800826c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800826e:	4b15      	ldr	r3, [pc, #84]	; (80082c4 <vTaskStartScheduler+0xd4>)
 8008270:	f04f 32ff 	mov.w	r2, #4294967295
 8008274:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <vTaskStartScheduler+0xd8>)
 8008278:	2201      	movs	r2, #1
 800827a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800827c:	4b13      	ldr	r3, [pc, #76]	; (80082cc <vTaskStartScheduler+0xdc>)
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008282:	f001 f9c5 	bl	8009610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008286:	e00e      	b.n	80082a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d10a      	bne.n	80082a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60fb      	str	r3, [r7, #12]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <vTaskStartScheduler+0xb4>
}
 80082a6:	bf00      	nop
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	0800a814 	.word	0x0800a814
 80082b4:	080088f5 	.word	0x080088f5
 80082b8:	20000f60 	.word	0x20000f60
 80082bc:	20000a68 	.word	0x20000a68
 80082c0:	20000014 	.word	0x20000014
 80082c4:	20000f5c 	.word	0x20000f5c
 80082c8:	20000f48 	.word	0x20000f48
 80082cc:	20000f40 	.word	0x20000f40

080082d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80082d4:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <vTaskSuspendAll+0x18>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3301      	adds	r3, #1
 80082da:	4a03      	ldr	r2, [pc, #12]	; (80082e8 <vTaskSuspendAll+0x18>)
 80082dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80082de:	bf00      	nop
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	20000f64 	.word	0x20000f64

080082ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082fa:	4b42      	ldr	r3, [pc, #264]	; (8008404 <xTaskResumeAll+0x118>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <xTaskResumeAll+0x2c>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	603b      	str	r3, [r7, #0]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008318:	f001 fa1c 	bl	8009754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800831c:	4b39      	ldr	r3, [pc, #228]	; (8008404 <xTaskResumeAll+0x118>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	4a38      	ldr	r2, [pc, #224]	; (8008404 <xTaskResumeAll+0x118>)
 8008324:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008326:	4b37      	ldr	r3, [pc, #220]	; (8008404 <xTaskResumeAll+0x118>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d162      	bne.n	80083f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800832e:	4b36      	ldr	r3, [pc, #216]	; (8008408 <xTaskResumeAll+0x11c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d05e      	beq.n	80083f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008336:	e02f      	b.n	8008398 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008338:	4b34      	ldr	r3, [pc, #208]	; (800840c <xTaskResumeAll+0x120>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3318      	adds	r3, #24
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe fd2f 	bl	8006da8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3304      	adds	r3, #4
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fd2a 	bl	8006da8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008358:	4b2d      	ldr	r3, [pc, #180]	; (8008410 <xTaskResumeAll+0x124>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d903      	bls.n	8008368 <xTaskResumeAll+0x7c>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a2a      	ldr	r2, [pc, #168]	; (8008410 <xTaskResumeAll+0x124>)
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4a27      	ldr	r2, [pc, #156]	; (8008414 <xTaskResumeAll+0x128>)
 8008376:	441a      	add	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3304      	adds	r3, #4
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f7fe fcb5 	bl	8006cee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008388:	4b23      	ldr	r3, [pc, #140]	; (8008418 <xTaskResumeAll+0x12c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	429a      	cmp	r2, r3
 8008390:	d302      	bcc.n	8008398 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008392:	4b22      	ldr	r3, [pc, #136]	; (800841c <xTaskResumeAll+0x130>)
 8008394:	2201      	movs	r2, #1
 8008396:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008398:	4b1c      	ldr	r3, [pc, #112]	; (800840c <xTaskResumeAll+0x120>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1cb      	bne.n	8008338 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083a6:	f000 fb5f 	bl	8008a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083aa:	4b1d      	ldr	r3, [pc, #116]	; (8008420 <xTaskResumeAll+0x134>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d010      	beq.n	80083d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083b6:	f000 f847 	bl	8008448 <xTaskIncrementTick>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80083c0:	4b16      	ldr	r3, [pc, #88]	; (800841c <xTaskResumeAll+0x130>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f1      	bne.n	80083b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80083d2:	4b13      	ldr	r3, [pc, #76]	; (8008420 <xTaskResumeAll+0x134>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083d8:	4b10      	ldr	r3, [pc, #64]	; (800841c <xTaskResumeAll+0x130>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d009      	beq.n	80083f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <xTaskResumeAll+0x138>)
 80083e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083f4:	f001 f9de 	bl	80097b4 <vPortExitCritical>

	return xAlreadyYielded;
 80083f8:	68bb      	ldr	r3, [r7, #8]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000f64 	.word	0x20000f64
 8008408:	20000f3c 	.word	0x20000f3c
 800840c:	20000efc 	.word	0x20000efc
 8008410:	20000f44 	.word	0x20000f44
 8008414:	20000a6c 	.word	0x20000a6c
 8008418:	20000a68 	.word	0x20000a68
 800841c:	20000f50 	.word	0x20000f50
 8008420:	20000f4c 	.word	0x20000f4c
 8008424:	e000ed04 	.word	0xe000ed04

08008428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <xTaskGetTickCount+0x1c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008434:	687b      	ldr	r3, [r7, #4]
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20000f40 	.word	0x20000f40

08008448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008452:	4b4f      	ldr	r3, [pc, #316]	; (8008590 <xTaskIncrementTick+0x148>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 808f 	bne.w	800857a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800845c:	4b4d      	ldr	r3, [pc, #308]	; (8008594 <xTaskIncrementTick+0x14c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008464:	4a4b      	ldr	r2, [pc, #300]	; (8008594 <xTaskIncrementTick+0x14c>)
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d120      	bne.n	80084b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008470:	4b49      	ldr	r3, [pc, #292]	; (8008598 <xTaskIncrementTick+0x150>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <xTaskIncrementTick+0x48>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	603b      	str	r3, [r7, #0]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xTaskIncrementTick+0x46>
 8008490:	4b41      	ldr	r3, [pc, #260]	; (8008598 <xTaskIncrementTick+0x150>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	4b41      	ldr	r3, [pc, #260]	; (800859c <xTaskIncrementTick+0x154>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a3f      	ldr	r2, [pc, #252]	; (8008598 <xTaskIncrementTick+0x150>)
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4a3f      	ldr	r2, [pc, #252]	; (800859c <xTaskIncrementTick+0x154>)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	4b3e      	ldr	r3, [pc, #248]	; (80085a0 <xTaskIncrementTick+0x158>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3301      	adds	r3, #1
 80084aa:	4a3d      	ldr	r2, [pc, #244]	; (80085a0 <xTaskIncrementTick+0x158>)
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	f000 fadb 	bl	8008a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084b2:	4b3c      	ldr	r3, [pc, #240]	; (80085a4 <xTaskIncrementTick+0x15c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d349      	bcc.n	8008550 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084bc:	4b36      	ldr	r3, [pc, #216]	; (8008598 <xTaskIncrementTick+0x150>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d104      	bne.n	80084d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c6:	4b37      	ldr	r3, [pc, #220]	; (80085a4 <xTaskIncrementTick+0x15c>)
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	601a      	str	r2, [r3, #0]
					break;
 80084ce:	e03f      	b.n	8008550 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d0:	4b31      	ldr	r3, [pc, #196]	; (8008598 <xTaskIncrementTick+0x150>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d203      	bcs.n	80084f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084e8:	4a2e      	ldr	r2, [pc, #184]	; (80085a4 <xTaskIncrementTick+0x15c>)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084ee:	e02f      	b.n	8008550 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fc57 	bl	8006da8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	3318      	adds	r3, #24
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fc4e 	bl	8006da8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008510:	4b25      	ldr	r3, [pc, #148]	; (80085a8 <xTaskIncrementTick+0x160>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d903      	bls.n	8008520 <xTaskIncrementTick+0xd8>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <xTaskIncrementTick+0x160>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4a1f      	ldr	r2, [pc, #124]	; (80085ac <xTaskIncrementTick+0x164>)
 800852e:	441a      	add	r2, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	3304      	adds	r3, #4
 8008534:	4619      	mov	r1, r3
 8008536:	4610      	mov	r0, r2
 8008538:	f7fe fbd9 	bl	8006cee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008540:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <xTaskIncrementTick+0x168>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	429a      	cmp	r2, r3
 8008548:	d3b8      	bcc.n	80084bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800854e:	e7b5      	b.n	80084bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008550:	4b17      	ldr	r3, [pc, #92]	; (80085b0 <xTaskIncrementTick+0x168>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008556:	4915      	ldr	r1, [pc, #84]	; (80085ac <xTaskIncrementTick+0x164>)
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d901      	bls.n	800856c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008568:	2301      	movs	r3, #1
 800856a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800856c:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <xTaskIncrementTick+0x16c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	e004      	b.n	8008584 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <xTaskIncrementTick+0x170>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3301      	adds	r3, #1
 8008580:	4a0d      	ldr	r2, [pc, #52]	; (80085b8 <xTaskIncrementTick+0x170>)
 8008582:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008584:	697b      	ldr	r3, [r7, #20]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000f64 	.word	0x20000f64
 8008594:	20000f40 	.word	0x20000f40
 8008598:	20000ef4 	.word	0x20000ef4
 800859c:	20000ef8 	.word	0x20000ef8
 80085a0:	20000f54 	.word	0x20000f54
 80085a4:	20000f5c 	.word	0x20000f5c
 80085a8:	20000f44 	.word	0x20000f44
 80085ac:	20000a6c 	.word	0x20000a6c
 80085b0:	20000a68 	.word	0x20000a68
 80085b4:	20000f50 	.word	0x20000f50
 80085b8:	20000f4c 	.word	0x20000f4c

080085bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085c2:	4b2a      	ldr	r3, [pc, #168]	; (800866c <vTaskSwitchContext+0xb0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085ca:	4b29      	ldr	r3, [pc, #164]	; (8008670 <vTaskSwitchContext+0xb4>)
 80085cc:	2201      	movs	r2, #1
 80085ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085d0:	e046      	b.n	8008660 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80085d2:	4b27      	ldr	r3, [pc, #156]	; (8008670 <vTaskSwitchContext+0xb4>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d8:	4b26      	ldr	r3, [pc, #152]	; (8008674 <vTaskSwitchContext+0xb8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	e010      	b.n	8008602 <vTaskSwitchContext+0x46>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <vTaskSwitchContext+0x40>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	607b      	str	r3, [r7, #4]
}
 80085f8:	bf00      	nop
 80085fa:	e7fe      	b.n	80085fa <vTaskSwitchContext+0x3e>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3b01      	subs	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	491d      	ldr	r1, [pc, #116]	; (8008678 <vTaskSwitchContext+0xbc>)
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0e4      	beq.n	80085e0 <vTaskSwitchContext+0x24>
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4613      	mov	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4a15      	ldr	r2, [pc, #84]	; (8008678 <vTaskSwitchContext+0xbc>)
 8008622:	4413      	add	r3, r2
 8008624:	60bb      	str	r3, [r7, #8]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	605a      	str	r2, [r3, #4]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	3308      	adds	r3, #8
 8008638:	429a      	cmp	r2, r3
 800863a:	d104      	bne.n	8008646 <vTaskSwitchContext+0x8a>
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	605a      	str	r2, [r3, #4]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	4a0b      	ldr	r2, [pc, #44]	; (800867c <vTaskSwitchContext+0xc0>)
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	4a08      	ldr	r2, [pc, #32]	; (8008674 <vTaskSwitchContext+0xb8>)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <vTaskSwitchContext+0xc0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3354      	adds	r3, #84	; 0x54
 800865c:	4a08      	ldr	r2, [pc, #32]	; (8008680 <vTaskSwitchContext+0xc4>)
 800865e:	6013      	str	r3, [r2, #0]
}
 8008660:	bf00      	nop
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	20000f64 	.word	0x20000f64
 8008670:	20000f50 	.word	0x20000f50
 8008674:	20000f44 	.word	0x20000f44
 8008678:	20000a6c 	.word	0x20000a6c
 800867c:	20000a68 	.word	0x20000a68
 8008680:	20000014 	.word	0x20000014

08008684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	60fb      	str	r3, [r7, #12]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <vTaskPlaceOnEventList+0x44>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3318      	adds	r3, #24
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7fe fb3f 	bl	8006d36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086b8:	2101      	movs	r1, #1
 80086ba:	6838      	ldr	r0, [r7, #0]
 80086bc:	f000 fb7e 	bl	8008dbc <prvAddCurrentTaskToDelayedList>
}
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000a68 	.word	0x20000a68

080086cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	617b      	str	r3, [r7, #20]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <vTaskPlaceOnEventListRestricted+0x54>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3318      	adds	r3, #24
 80086fa:	4619      	mov	r1, r3
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7fe faf6 	bl	8006cee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008708:	f04f 33ff 	mov.w	r3, #4294967295
 800870c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	68b8      	ldr	r0, [r7, #8]
 8008712:	f000 fb53 	bl	8008dbc <prvAddCurrentTaskToDelayedList>
	}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20000a68 	.word	0x20000a68

08008724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10a      	bne.n	8008750 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60fb      	str	r3, [r7, #12]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3318      	adds	r3, #24
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe fb27 	bl	8006da8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800875a:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <xTaskRemoveFromEventList+0xb0>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d11d      	bne.n	800879e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3304      	adds	r3, #4
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fb1e 	bl	8006da8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <xTaskRemoveFromEventList+0xb4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d903      	bls.n	8008780 <xTaskRemoveFromEventList+0x5c>
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	4a16      	ldr	r2, [pc, #88]	; (80087d8 <xTaskRemoveFromEventList+0xb4>)
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4a13      	ldr	r2, [pc, #76]	; (80087dc <xTaskRemoveFromEventList+0xb8>)
 800878e:	441a      	add	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f7fe faa9 	bl	8006cee <vListInsertEnd>
 800879c:	e005      	b.n	80087aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3318      	adds	r3, #24
 80087a2:	4619      	mov	r1, r3
 80087a4:	480e      	ldr	r0, [pc, #56]	; (80087e0 <xTaskRemoveFromEventList+0xbc>)
 80087a6:	f7fe faa2 	bl	8006cee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <xTaskRemoveFromEventList+0xc0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d905      	bls.n	80087c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <xTaskRemoveFromEventList+0xc4>)
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e001      	b.n	80087c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80087c8:	697b      	ldr	r3, [r7, #20]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000f64 	.word	0x20000f64
 80087d8:	20000f44 	.word	0x20000f44
 80087dc:	20000a6c 	.word	0x20000a6c
 80087e0:	20000efc 	.word	0x20000efc
 80087e4:	20000a68 	.word	0x20000a68
 80087e8:	20000f50 	.word	0x20000f50

080087ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087f4:	4b06      	ldr	r3, [pc, #24]	; (8008810 <vTaskInternalSetTimeOutState+0x24>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <vTaskInternalSetTimeOutState+0x28>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	605a      	str	r2, [r3, #4]
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20000f54 	.word	0x20000f54
 8008814:	20000f40 	.word	0x20000f40

08008818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	60fb      	str	r3, [r7, #12]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800885a:	f000 ff7b 	bl	8009754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800885e:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <xTaskCheckForTimeOut+0xbc>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	d102      	bne.n	800887e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	e023      	b.n	80088c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <xTaskCheckForTimeOut+0xc0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d007      	beq.n	800889a <xTaskCheckForTimeOut+0x82>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	429a      	cmp	r2, r3
 8008892:	d302      	bcc.n	800889a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008894:	2301      	movs	r3, #1
 8008896:	61fb      	str	r3, [r7, #28]
 8008898:	e015      	b.n	80088c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d20b      	bcs.n	80088bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff ff9b 	bl	80087ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
 80088ba:	e004      	b.n	80088c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088c6:	f000 ff75 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 80088ca:	69fb      	ldr	r3, [r7, #28]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000f40 	.word	0x20000f40
 80088d8:	20000f54 	.word	0x20000f54

080088dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088e0:	4b03      	ldr	r3, [pc, #12]	; (80088f0 <vTaskMissedYield+0x14>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
}
 80088e6:	bf00      	nop
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000f50 	.word	0x20000f50

080088f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088fc:	f000 f852 	bl	80089a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <prvIdleTask+0x28>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d9f9      	bls.n	80088fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <prvIdleTask+0x2c>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008918:	e7f0      	b.n	80088fc <prvIdleTask+0x8>
 800891a:	bf00      	nop
 800891c:	20000a6c 	.word	0x20000a6c
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
 800892e:	e00c      	b.n	800894a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4a12      	ldr	r2, [pc, #72]	; (8008984 <prvInitialiseTaskLists+0x60>)
 800893c:	4413      	add	r3, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe f9a8 	bl	8006c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3301      	adds	r3, #1
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b37      	cmp	r3, #55	; 0x37
 800894e:	d9ef      	bls.n	8008930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008950:	480d      	ldr	r0, [pc, #52]	; (8008988 <prvInitialiseTaskLists+0x64>)
 8008952:	f7fe f99f 	bl	8006c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008956:	480d      	ldr	r0, [pc, #52]	; (800898c <prvInitialiseTaskLists+0x68>)
 8008958:	f7fe f99c 	bl	8006c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800895c:	480c      	ldr	r0, [pc, #48]	; (8008990 <prvInitialiseTaskLists+0x6c>)
 800895e:	f7fe f999 	bl	8006c94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008962:	480c      	ldr	r0, [pc, #48]	; (8008994 <prvInitialiseTaskLists+0x70>)
 8008964:	f7fe f996 	bl	8006c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008968:	480b      	ldr	r0, [pc, #44]	; (8008998 <prvInitialiseTaskLists+0x74>)
 800896a:	f7fe f993 	bl	8006c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800896e:	4b0b      	ldr	r3, [pc, #44]	; (800899c <prvInitialiseTaskLists+0x78>)
 8008970:	4a05      	ldr	r2, [pc, #20]	; (8008988 <prvInitialiseTaskLists+0x64>)
 8008972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008974:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <prvInitialiseTaskLists+0x7c>)
 8008976:	4a05      	ldr	r2, [pc, #20]	; (800898c <prvInitialiseTaskLists+0x68>)
 8008978:	601a      	str	r2, [r3, #0]
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000a6c 	.word	0x20000a6c
 8008988:	20000ecc 	.word	0x20000ecc
 800898c:	20000ee0 	.word	0x20000ee0
 8008990:	20000efc 	.word	0x20000efc
 8008994:	20000f10 	.word	0x20000f10
 8008998:	20000f28 	.word	0x20000f28
 800899c:	20000ef4 	.word	0x20000ef4
 80089a0:	20000ef8 	.word	0x20000ef8

080089a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089aa:	e019      	b.n	80089e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089ac:	f000 fed2 	bl	8009754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b0:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <prvCheckTasksWaitingTermination+0x50>)
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe f9f3 	bl	8006da8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089c2:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <prvCheckTasksWaitingTermination+0x54>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	4a0b      	ldr	r2, [pc, #44]	; (80089f8 <prvCheckTasksWaitingTermination+0x54>)
 80089ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089cc:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <prvCheckTasksWaitingTermination+0x58>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	4a0a      	ldr	r2, [pc, #40]	; (80089fc <prvCheckTasksWaitingTermination+0x58>)
 80089d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089d6:	f000 feed 	bl	80097b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f810 	bl	8008a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <prvCheckTasksWaitingTermination+0x58>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e1      	bne.n	80089ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000f10 	.word	0x20000f10
 80089f8:	20000f3c 	.word	0x20000f3c
 80089fc:	20000f24 	.word	0x20000f24

08008a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3354      	adds	r3, #84	; 0x54
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fa91 	bl	8009f34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d108      	bne.n	8008a2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	4618      	mov	r0, r3
 8008a22:	f001 f885 	bl	8009b30 <vPortFree>
				vPortFree( pxTCB );
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 f882 	bl	8009b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a2c:	e018      	b.n	8008a60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d103      	bne.n	8008a40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 f879 	bl	8009b30 <vPortFree>
	}
 8008a3e:	e00f      	b.n	8008a60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d00a      	beq.n	8008a60 <prvDeleteTCB+0x60>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	60fb      	str	r3, [r7, #12]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <prvDeleteTCB+0x5e>
	}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <prvResetNextTaskUnblockTime+0x38>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d104      	bne.n	8008a82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8008a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a80:	e008      	b.n	8008a94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a82:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <prvResetNextTaskUnblockTime+0x38>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8008a92:	6013      	str	r3, [r2, #0]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000ef4 	.word	0x20000ef4
 8008aa4:	20000f5c 	.word	0x20000f5c

08008aa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008aae:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <xTaskGetSchedulerState+0x34>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d102      	bne.n	8008abc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	e008      	b.n	8008ace <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008abc:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <xTaskGetSchedulerState+0x38>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	e001      	b.n	8008ace <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008aca:	2300      	movs	r3, #0
 8008acc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ace:	687b      	ldr	r3, [r7, #4]
	}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	20000f48 	.word	0x20000f48
 8008ae0:	20000f64 	.word	0x20000f64

08008ae4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d051      	beq.n	8008b9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afe:	4b2a      	ldr	r3, [pc, #168]	; (8008ba8 <xTaskPriorityInherit+0xc4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d241      	bcs.n	8008b8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	db06      	blt.n	8008b1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <xTaskPriorityInherit+0xc4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	6959      	ldr	r1, [r3, #20]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4a1f      	ldr	r2, [pc, #124]	; (8008bac <xTaskPriorityInherit+0xc8>)
 8008b30:	4413      	add	r3, r2
 8008b32:	4299      	cmp	r1, r3
 8008b34:	d122      	bne.n	8008b7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe f934 	bl	8006da8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b40:	4b19      	ldr	r3, [pc, #100]	; (8008ba8 <xTaskPriorityInherit+0xc4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4e:	4b18      	ldr	r3, [pc, #96]	; (8008bb0 <xTaskPriorityInherit+0xcc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d903      	bls.n	8008b5e <xTaskPriorityInherit+0x7a>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	4a15      	ldr	r2, [pc, #84]	; (8008bb0 <xTaskPriorityInherit+0xcc>)
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4a10      	ldr	r2, [pc, #64]	; (8008bac <xTaskPriorityInherit+0xc8>)
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fe f8ba 	bl	8006cee <vListInsertEnd>
 8008b7a:	e004      	b.n	8008b86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <xTaskPriorityInherit+0xc4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b86:	2301      	movs	r3, #1
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e008      	b.n	8008b9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <xTaskPriorityInherit+0xc4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d201      	bcs.n	8008b9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
	}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000a68 	.word	0x20000a68
 8008bac:	20000a6c 	.word	0x20000a6c
 8008bb0:	20000f44 	.word	0x20000f44

08008bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d056      	beq.n	8008c78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bca:	4b2e      	ldr	r3, [pc, #184]	; (8008c84 <xTaskPriorityDisinherit+0xd0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d00a      	beq.n	8008bea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60fb      	str	r3, [r7, #12]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10a      	bne.n	8008c08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	60bb      	str	r3, [r7, #8]
}
 8008c04:	bf00      	nop
 8008c06:	e7fe      	b.n	8008c06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c0c:	1e5a      	subs	r2, r3, #1
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d02c      	beq.n	8008c78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d128      	bne.n	8008c78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe f8bc 	bl	8006da8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c48:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <xTaskPriorityDisinherit+0xd4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d903      	bls.n	8008c58 <xTaskPriorityDisinherit+0xa4>
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	4a0c      	ldr	r2, [pc, #48]	; (8008c88 <xTaskPriorityDisinherit+0xd4>)
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <xTaskPriorityDisinherit+0xd8>)
 8008c66:	441a      	add	r2, r3
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f7fe f83d 	bl	8006cee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c74:	2301      	movs	r3, #1
 8008c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c78:	697b      	ldr	r3, [r7, #20]
	}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000a68 	.word	0x20000a68
 8008c88:	20000f44 	.word	0x20000f44
 8008c8c:	20000a6c 	.word	0x20000a6c

08008c90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d06a      	beq.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	60fb      	str	r3, [r7, #12]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d902      	bls.n	8008cd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	e002      	b.n	8008cdc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d04b      	beq.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d146      	bne.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008cf0:	4b25      	ldr	r3, [pc, #148]	; (8008d88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d10a      	bne.n	8008d10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	60bb      	str	r3, [r7, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	69fa      	ldr	r2, [r7, #28]
 8008d1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	db04      	blt.n	8008d2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	6959      	ldr	r1, [r3, #20]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4a13      	ldr	r2, [pc, #76]	; (8008d8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d3e:	4413      	add	r3, r2
 8008d40:	4299      	cmp	r1, r3
 8008d42:	d11c      	bne.n	8008d7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe f82d 	bl	8006da8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d52:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d903      	bls.n	8008d62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	4a0c      	ldr	r2, [pc, #48]	; (8008d90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a07      	ldr	r2, [pc, #28]	; (8008d8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008d70:	441a      	add	r2, r3
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f7fd ffb8 	bl	8006cee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d7e:	bf00      	nop
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000a68 	.word	0x20000a68
 8008d8c:	20000a6c 	.word	0x20000a6c
 8008d90:	20000f44 	.word	0x20000f44

08008d94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d98:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d004      	beq.n	8008daa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008da0:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008da6:	3201      	adds	r2, #1
 8008da8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008daa:	4b03      	ldr	r3, [pc, #12]	; (8008db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008dac:	681b      	ldr	r3, [r3, #0]
	}
 8008dae:	4618      	mov	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20000a68 	.word	0x20000a68

08008dbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dc6:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <prvAddCurrentTaskToDelayedList+0x90>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dcc:	4b20      	ldr	r3, [pc, #128]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fd ffe8 	bl	8006da8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dde:	d10a      	bne.n	8008df6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de6:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4819      	ldr	r0, [pc, #100]	; (8008e54 <prvAddCurrentTaskToDelayedList+0x98>)
 8008df0:	f7fd ff7d 	bl	8006cee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008df4:	e026      	b.n	8008e44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dfe:	4b14      	ldr	r3, [pc, #80]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d209      	bcs.n	8008e22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e0e:	4b12      	ldr	r3, [pc, #72]	; (8008e58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	f7fd ff8b 	bl	8006d36 <vListInsert>
}
 8008e20:	e010      	b.n	8008e44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e22:	4b0e      	ldr	r3, [pc, #56]	; (8008e5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7fd ff81 	bl	8006d36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e34:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d202      	bcs.n	8008e44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e3e:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	6013      	str	r3, [r2, #0]
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20000f40 	.word	0x20000f40
 8008e50:	20000a68 	.word	0x20000a68
 8008e54:	20000f28 	.word	0x20000f28
 8008e58:	20000ef8 	.word	0x20000ef8
 8008e5c:	20000ef4 	.word	0x20000ef4
 8008e60:	20000f5c 	.word	0x20000f5c

08008e64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	; 0x28
 8008e68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e6e:	f000 fb07 	bl	8009480 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e72:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <xTimerCreateTimerTask+0x80>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d021      	beq.n	8008ebe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e82:	1d3a      	adds	r2, r7, #4
 8008e84:	f107 0108 	add.w	r1, r7, #8
 8008e88:	f107 030c 	add.w	r3, r7, #12
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fd fee7 	bl	8006c60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	9202      	str	r2, [sp, #8]
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	460a      	mov	r2, r1
 8008ea4:	4910      	ldr	r1, [pc, #64]	; (8008ee8 <xTimerCreateTimerTask+0x84>)
 8008ea6:	4811      	ldr	r0, [pc, #68]	; (8008eec <xTimerCreateTimerTask+0x88>)
 8008ea8:	f7fe ffb6 	bl	8007e18 <xTaskCreateStatic>
 8008eac:	4603      	mov	r3, r0
 8008eae:	4a10      	ldr	r2, [pc, #64]	; (8008ef0 <xTimerCreateTimerTask+0x8c>)
 8008eb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008eb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <xTimerCreateTimerTask+0x8c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	613b      	str	r3, [r7, #16]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008eda:	697b      	ldr	r3, [r7, #20]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000f98 	.word	0x20000f98
 8008ee8:	0800a81c 	.word	0x0800a81c
 8008eec:	08009029 	.word	0x08009029
 8008ef0:	20000f9c 	.word	0x20000f9c

08008ef4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10a      	bne.n	8008f22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	623b      	str	r3, [r7, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f22:	4b1a      	ldr	r3, [pc, #104]	; (8008f8c <xTimerGenericCommand+0x98>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d02a      	beq.n	8008f80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b05      	cmp	r3, #5
 8008f3a:	dc18      	bgt.n	8008f6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f3c:	f7ff fdb4 	bl	8008aa8 <xTaskGetSchedulerState>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d109      	bne.n	8008f5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f46:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <xTimerGenericCommand+0x98>)
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f107 0110 	add.w	r1, r7, #16
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f52:	f7fe f8fb 	bl	800714c <xQueueGenericSend>
 8008f56:	6278      	str	r0, [r7, #36]	; 0x24
 8008f58:	e012      	b.n	8008f80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <xTimerGenericCommand+0x98>)
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f107 0110 	add.w	r1, r7, #16
 8008f62:	2300      	movs	r3, #0
 8008f64:	2200      	movs	r2, #0
 8008f66:	f7fe f8f1 	bl	800714c <xQueueGenericSend>
 8008f6a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f6c:	e008      	b.n	8008f80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f6e:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <xTimerGenericCommand+0x98>)
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f107 0110 	add.w	r1, r7, #16
 8008f76:	2300      	movs	r3, #0
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	f7fe f9e5 	bl	8007348 <xQueueGenericSendFromISR>
 8008f7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3728      	adds	r7, #40	; 0x28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20000f98 	.word	0x20000f98

08008f90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9a:	4b22      	ldr	r3, [pc, #136]	; (8009024 <prvProcessExpiredTimer+0x94>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fefd 	bl	8006da8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d022      	beq.n	8009002 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	18d1      	adds	r1, r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	6978      	ldr	r0, [r7, #20]
 8008fca:	f000 f8d1 	bl	8009170 <prvInsertTimerInActiveList>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d01f      	beq.n	8009014 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f7ff ff88 	bl	8008ef4 <xTimerGenericCommand>
 8008fe4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d113      	bne.n	8009014 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60fb      	str	r3, [r7, #12]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	b2da      	uxtb	r2, r3
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	6978      	ldr	r0, [r7, #20]
 800901a:	4798      	blx	r3
}
 800901c:	bf00      	nop
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000f90 	.word	0x20000f90

08009028 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009030:	f107 0308 	add.w	r3, r7, #8
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f857 	bl	80090e8 <prvGetNextExpireTime>
 800903a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4619      	mov	r1, r3
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f803 	bl	800904c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009046:	f000 f8d5 	bl	80091f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800904a:	e7f1      	b.n	8009030 <prvTimerTask+0x8>

0800904c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009056:	f7ff f93b 	bl	80082d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800905a:	f107 0308 	add.w	r3, r7, #8
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f866 	bl	8009130 <prvSampleTimeNow>
 8009064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d130      	bne.n	80090ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <prvProcessTimerOrBlockTask+0x3c>
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	429a      	cmp	r2, r3
 8009078:	d806      	bhi.n	8009088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800907a:	f7ff f937 	bl	80082ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff ff85 	bl	8008f90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009086:	e024      	b.n	80090d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800908e:	4b13      	ldr	r3, [pc, #76]	; (80090dc <prvProcessTimerOrBlockTask+0x90>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <prvProcessTimerOrBlockTask+0x50>
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <prvProcessTimerOrBlockTask+0x52>
 800909c:	2300      	movs	r3, #0
 800909e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090a0:	4b0f      	ldr	r3, [pc, #60]	; (80090e0 <prvProcessTimerOrBlockTask+0x94>)
 80090a2:	6818      	ldr	r0, [r3, #0]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	f7fe fe7f 	bl	8007db0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090b2:	f7ff f91b 	bl	80082ec <xTaskResumeAll>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090bc:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <prvProcessTimerOrBlockTask+0x98>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	f3bf 8f6f 	isb	sy
}
 80090cc:	e001      	b.n	80090d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090ce:	f7ff f90d 	bl	80082ec <xTaskResumeAll>
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000f94 	.word	0x20000f94
 80090e0:	20000f98 	.word	0x20000f98
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090f0:	4b0e      	ldr	r3, [pc, #56]	; (800912c <prvGetNextExpireTime+0x44>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <prvGetNextExpireTime+0x16>
 80090fa:	2201      	movs	r2, #1
 80090fc:	e000      	b.n	8009100 <prvGetNextExpireTime+0x18>
 80090fe:	2200      	movs	r2, #0
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d105      	bne.n	8009118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800910c:	4b07      	ldr	r3, [pc, #28]	; (800912c <prvGetNextExpireTime+0x44>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e001      	b.n	800911c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800911c:	68fb      	ldr	r3, [r7, #12]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000f90 	.word	0x20000f90

08009130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009138:	f7ff f976 	bl	8008428 <xTaskGetTickCount>
 800913c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800913e:	4b0b      	ldr	r3, [pc, #44]	; (800916c <prvSampleTimeNow+0x3c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	429a      	cmp	r2, r3
 8009146:	d205      	bcs.n	8009154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009148:	f000 f936 	bl	80093b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	e002      	b.n	800915a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800915a:	4a04      	ldr	r2, [pc, #16]	; (800916c <prvSampleTimeNow+0x3c>)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009160:	68fb      	ldr	r3, [r7, #12]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000fa0 	.word	0x20000fa0

08009170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d812      	bhi.n	80091bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	1ad2      	subs	r2, r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d302      	bcc.n	80091aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	e01b      	b.n	80091e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091aa:	4b10      	ldr	r3, [pc, #64]	; (80091ec <prvInsertTimerInActiveList+0x7c>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fd fdbe 	bl	8006d36 <vListInsert>
 80091ba:	e012      	b.n	80091e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d206      	bcs.n	80091d2 <prvInsertTimerInActiveList+0x62>
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d302      	bcc.n	80091d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e007      	b.n	80091e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091d2:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <prvInsertTimerInActiveList+0x80>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3304      	adds	r3, #4
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7fd fdaa 	bl	8006d36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091e2:	697b      	ldr	r3, [r7, #20]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000f94 	.word	0x20000f94
 80091f0:	20000f90 	.word	0x20000f90

080091f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08e      	sub	sp, #56	; 0x38
 80091f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091fa:	e0ca      	b.n	8009392 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da18      	bge.n	8009234 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009202:	1d3b      	adds	r3, r7, #4
 8009204:	3304      	adds	r3, #4
 8009206:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	61fb      	str	r3, [r7, #28]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800922a:	6850      	ldr	r0, [r2, #4]
 800922c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800922e:	6892      	ldr	r2, [r2, #8]
 8009230:	4611      	mov	r1, r2
 8009232:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f2c0 80aa 	blt.w	8009390 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d004      	beq.n	8009252 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	3304      	adds	r3, #4
 800924c:	4618      	mov	r0, r3
 800924e:	f7fd fdab 	bl	8006da8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009252:	463b      	mov	r3, r7
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff ff6b 	bl	8009130 <prvSampleTimeNow>
 800925a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b09      	cmp	r3, #9
 8009260:	f200 8097 	bhi.w	8009392 <prvProcessReceivedCommands+0x19e>
 8009264:	a201      	add	r2, pc, #4	; (adr r2, 800926c <prvProcessReceivedCommands+0x78>)
 8009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926a:	bf00      	nop
 800926c:	08009295 	.word	0x08009295
 8009270:	08009295 	.word	0x08009295
 8009274:	08009295 	.word	0x08009295
 8009278:	08009309 	.word	0x08009309
 800927c:	0800931d 	.word	0x0800931d
 8009280:	08009367 	.word	0x08009367
 8009284:	08009295 	.word	0x08009295
 8009288:	08009295 	.word	0x08009295
 800928c:	08009309 	.word	0x08009309
 8009290:	0800931d 	.word	0x0800931d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800929a:	f043 0301 	orr.w	r3, r3, #1
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	18d1      	adds	r1, r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092b4:	f7ff ff5c 	bl	8009170 <prvInsertTimerInActiveList>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d069      	beq.n	8009392 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d05e      	beq.n	8009392 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	441a      	add	r2, r3
 80092dc:	2300      	movs	r3, #0
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	2300      	movs	r3, #0
 80092e2:	2100      	movs	r1, #0
 80092e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e6:	f7ff fe05 	bl	8008ef4 <xTimerGenericCommand>
 80092ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d14f      	bne.n	8009392 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	61bb      	str	r3, [r7, #24]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800931a:	e03a      	b.n	8009392 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	b2da      	uxtb	r2, r3
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	617b      	str	r3, [r7, #20]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	699a      	ldr	r2, [r3, #24]
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	18d1      	adds	r1, r2, r3
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009360:	f7ff ff06 	bl	8009170 <prvInsertTimerInActiveList>
					break;
 8009364:	e015      	b.n	8009392 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009376:	f000 fbdb 	bl	8009b30 <vPortFree>
 800937a:	e00a      	b.n	8009392 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009382:	f023 0301 	bic.w	r3, r3, #1
 8009386:	b2da      	uxtb	r2, r3
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800938e:	e000      	b.n	8009392 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009390:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009392:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <prvProcessReceivedCommands+0x1c0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	1d39      	adds	r1, r7, #4
 8009398:	2200      	movs	r2, #0
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe f8fc 	bl	8007598 <xQueueReceive>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f47f af2a 	bne.w	80091fc <prvProcessReceivedCommands+0x8>
	}
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	3730      	adds	r7, #48	; 0x30
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000f98 	.word	0x20000f98

080093b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093be:	e048      	b.n	8009452 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093c0:	4b2d      	ldr	r3, [pc, #180]	; (8009478 <prvSwitchTimerLists+0xc0>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ca:	4b2b      	ldr	r3, [pc, #172]	; (8009478 <prvSwitchTimerLists+0xc0>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3304      	adds	r3, #4
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fd fce5 	bl	8006da8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d02e      	beq.n	8009452 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	4413      	add	r3, r2
 80093fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	429a      	cmp	r2, r3
 8009404:	d90e      	bls.n	8009424 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009412:	4b19      	ldr	r3, [pc, #100]	; (8009478 <prvSwitchTimerLists+0xc0>)
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fd fc8a 	bl	8006d36 <vListInsert>
 8009422:	e016      	b.n	8009452 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009424:	2300      	movs	r3, #0
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	2300      	movs	r3, #0
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	2100      	movs	r1, #0
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff fd60 	bl	8008ef4 <xTimerGenericCommand>
 8009434:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	603b      	str	r3, [r7, #0]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <prvSwitchTimerLists+0xc0>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1b1      	bne.n	80093c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800945c:	4b06      	ldr	r3, [pc, #24]	; (8009478 <prvSwitchTimerLists+0xc0>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009462:	4b06      	ldr	r3, [pc, #24]	; (800947c <prvSwitchTimerLists+0xc4>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a04      	ldr	r2, [pc, #16]	; (8009478 <prvSwitchTimerLists+0xc0>)
 8009468:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800946a:	4a04      	ldr	r2, [pc, #16]	; (800947c <prvSwitchTimerLists+0xc4>)
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	6013      	str	r3, [r2, #0]
}
 8009470:	bf00      	nop
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20000f90 	.word	0x20000f90
 800947c:	20000f94 	.word	0x20000f94

08009480 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009486:	f000 f965 	bl	8009754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800948a:	4b15      	ldr	r3, [pc, #84]	; (80094e0 <prvCheckForValidListAndQueue+0x60>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d120      	bne.n	80094d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009492:	4814      	ldr	r0, [pc, #80]	; (80094e4 <prvCheckForValidListAndQueue+0x64>)
 8009494:	f7fd fbfe 	bl	8006c94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009498:	4813      	ldr	r0, [pc, #76]	; (80094e8 <prvCheckForValidListAndQueue+0x68>)
 800949a:	f7fd fbfb 	bl	8006c94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <prvCheckForValidListAndQueue+0x6c>)
 80094a0:	4a10      	ldr	r2, [pc, #64]	; (80094e4 <prvCheckForValidListAndQueue+0x64>)
 80094a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094a4:	4b12      	ldr	r3, [pc, #72]	; (80094f0 <prvCheckForValidListAndQueue+0x70>)
 80094a6:	4a10      	ldr	r2, [pc, #64]	; (80094e8 <prvCheckForValidListAndQueue+0x68>)
 80094a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094aa:	2300      	movs	r3, #0
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	4b11      	ldr	r3, [pc, #68]	; (80094f4 <prvCheckForValidListAndQueue+0x74>)
 80094b0:	4a11      	ldr	r2, [pc, #68]	; (80094f8 <prvCheckForValidListAndQueue+0x78>)
 80094b2:	2110      	movs	r1, #16
 80094b4:	200a      	movs	r0, #10
 80094b6:	f7fd fd09 	bl	8006ecc <xQueueGenericCreateStatic>
 80094ba:	4603      	mov	r3, r0
 80094bc:	4a08      	ldr	r2, [pc, #32]	; (80094e0 <prvCheckForValidListAndQueue+0x60>)
 80094be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <prvCheckForValidListAndQueue+0x60>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094c8:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <prvCheckForValidListAndQueue+0x60>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	490b      	ldr	r1, [pc, #44]	; (80094fc <prvCheckForValidListAndQueue+0x7c>)
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe fc1a 	bl	8007d08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094d4:	f000 f96e 	bl	80097b4 <vPortExitCritical>
}
 80094d8:	bf00      	nop
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000f98 	.word	0x20000f98
 80094e4:	20000f68 	.word	0x20000f68
 80094e8:	20000f7c 	.word	0x20000f7c
 80094ec:	20000f90 	.word	0x20000f90
 80094f0:	20000f94 	.word	0x20000f94
 80094f4:	20001044 	.word	0x20001044
 80094f8:	20000fa4 	.word	0x20000fa4
 80094fc:	0800a824 	.word	0x0800a824

08009500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3b04      	subs	r3, #4
 8009510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3b04      	subs	r3, #4
 800951e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f023 0201 	bic.w	r2, r3, #1
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3b04      	subs	r3, #4
 800952e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009530:	4a0c      	ldr	r2, [pc, #48]	; (8009564 <pxPortInitialiseStack+0x64>)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3b14      	subs	r3, #20
 800953a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3b04      	subs	r3, #4
 8009546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f06f 0202 	mvn.w	r2, #2
 800954e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3b20      	subs	r3, #32
 8009554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009556:	68fb      	ldr	r3, [r7, #12]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	08009569 	.word	0x08009569

08009568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009572:	4b12      	ldr	r3, [pc, #72]	; (80095bc <prvTaskExitError+0x54>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d00a      	beq.n	8009592 <prvTaskExitError+0x2a>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	60fb      	str	r3, [r7, #12]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <prvTaskExitError+0x28>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	60bb      	str	r3, [r7, #8]
}
 80095a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095a6:	bf00      	nop
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0fc      	beq.n	80095a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	20000010 	.word	0x20000010

080095c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095c0:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <pxCurrentTCBConst2>)
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	f380 8809 	msr	PSP, r0
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8811 	msr	BASEPRI, r0
 80095da:	4770      	bx	lr
 80095dc:	f3af 8000 	nop.w

080095e0 <pxCurrentTCBConst2>:
 80095e0:	20000a68 	.word	0x20000a68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095e8:	4808      	ldr	r0, [pc, #32]	; (800960c <prvPortStartFirstTask+0x24>)
 80095ea:	6800      	ldr	r0, [r0, #0]
 80095ec:	6800      	ldr	r0, [r0, #0]
 80095ee:	f380 8808 	msr	MSP, r0
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8814 	msr	CONTROL, r0
 80095fa:	b662      	cpsie	i
 80095fc:	b661      	cpsie	f
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	df00      	svc	0
 8009608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800960a:	bf00      	nop
 800960c:	e000ed08 	.word	0xe000ed08

08009610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009616:	4b46      	ldr	r3, [pc, #280]	; (8009730 <xPortStartScheduler+0x120>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a46      	ldr	r2, [pc, #280]	; (8009734 <xPortStartScheduler+0x124>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d10a      	bne.n	8009636 <xPortStartScheduler+0x26>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	613b      	str	r3, [r7, #16]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009636:	4b3e      	ldr	r3, [pc, #248]	; (8009730 <xPortStartScheduler+0x120>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a3f      	ldr	r2, [pc, #252]	; (8009738 <xPortStartScheduler+0x128>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d10a      	bne.n	8009656 <xPortStartScheduler+0x46>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60fb      	str	r3, [r7, #12]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009656:	4b39      	ldr	r3, [pc, #228]	; (800973c <xPortStartScheduler+0x12c>)
 8009658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009678:	b2da      	uxtb	r2, r3
 800967a:	4b31      	ldr	r3, [pc, #196]	; (8009740 <xPortStartScheduler+0x130>)
 800967c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800967e:	4b31      	ldr	r3, [pc, #196]	; (8009744 <xPortStartScheduler+0x134>)
 8009680:	2207      	movs	r2, #7
 8009682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009684:	e009      	b.n	800969a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009686:	4b2f      	ldr	r3, [pc, #188]	; (8009744 <xPortStartScheduler+0x134>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3b01      	subs	r3, #1
 800968c:	4a2d      	ldr	r2, [pc, #180]	; (8009744 <xPortStartScheduler+0x134>)
 800968e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b80      	cmp	r3, #128	; 0x80
 80096a4:	d0ef      	beq.n	8009686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096a6:	4b27      	ldr	r3, [pc, #156]	; (8009744 <xPortStartScheduler+0x134>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1c3 0307 	rsb	r3, r3, #7
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d00a      	beq.n	80096c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60bb      	str	r3, [r7, #8]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096c8:	4b1e      	ldr	r3, [pc, #120]	; (8009744 <xPortStartScheduler+0x134>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	021b      	lsls	r3, r3, #8
 80096ce:	4a1d      	ldr	r2, [pc, #116]	; (8009744 <xPortStartScheduler+0x134>)
 80096d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096d2:	4b1c      	ldr	r3, [pc, #112]	; (8009744 <xPortStartScheduler+0x134>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096da:	4a1a      	ldr	r2, [pc, #104]	; (8009744 <xPortStartScheduler+0x134>)
 80096dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096e6:	4b18      	ldr	r3, [pc, #96]	; (8009748 <xPortStartScheduler+0x138>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a17      	ldr	r2, [pc, #92]	; (8009748 <xPortStartScheduler+0x138>)
 80096ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096f2:	4b15      	ldr	r3, [pc, #84]	; (8009748 <xPortStartScheduler+0x138>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a14      	ldr	r2, [pc, #80]	; (8009748 <xPortStartScheduler+0x138>)
 80096f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096fe:	f000 f8dd 	bl	80098bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009702:	4b12      	ldr	r3, [pc, #72]	; (800974c <xPortStartScheduler+0x13c>)
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009708:	f000 f8fc 	bl	8009904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800970c:	4b10      	ldr	r3, [pc, #64]	; (8009750 <xPortStartScheduler+0x140>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a0f      	ldr	r2, [pc, #60]	; (8009750 <xPortStartScheduler+0x140>)
 8009712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009718:	f7ff ff66 	bl	80095e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800971c:	f7fe ff4e 	bl	80085bc <vTaskSwitchContext>
	prvTaskExitError();
 8009720:	f7ff ff22 	bl	8009568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	e000ed00 	.word	0xe000ed00
 8009734:	410fc271 	.word	0x410fc271
 8009738:	410fc270 	.word	0x410fc270
 800973c:	e000e400 	.word	0xe000e400
 8009740:	20001094 	.word	0x20001094
 8009744:	20001098 	.word	0x20001098
 8009748:	e000ed20 	.word	0xe000ed20
 800974c:	20000010 	.word	0x20000010
 8009750:	e000ef34 	.word	0xe000ef34

08009754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	607b      	str	r3, [r7, #4]
}
 800976c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800976e:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <vPortEnterCritical+0x58>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	4a0d      	ldr	r2, [pc, #52]	; (80097ac <vPortEnterCritical+0x58>)
 8009776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009778:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <vPortEnterCritical+0x58>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d10f      	bne.n	80097a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009780:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <vPortEnterCritical+0x5c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <vPortEnterCritical+0x4a>
	}
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20000010 	.word	0x20000010
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097ba:	4b12      	ldr	r3, [pc, #72]	; (8009804 <vPortExitCritical+0x50>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10a      	bne.n	80097d8 <vPortExitCritical+0x24>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097d8:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <vPortExitCritical+0x50>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3b01      	subs	r3, #1
 80097de:	4a09      	ldr	r2, [pc, #36]	; (8009804 <vPortExitCritical+0x50>)
 80097e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097e2:	4b08      	ldr	r3, [pc, #32]	; (8009804 <vPortExitCritical+0x50>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <vPortExitCritical+0x42>
 80097ea:	2300      	movs	r3, #0
 80097ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	f383 8811 	msr	BASEPRI, r3
}
 80097f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20000010 	.word	0x20000010
	...

08009810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009810:	f3ef 8009 	mrs	r0, PSP
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4b15      	ldr	r3, [pc, #84]	; (8009870 <pxCurrentTCBConst>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	f01e 0f10 	tst.w	lr, #16
 8009820:	bf08      	it	eq
 8009822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982a:	6010      	str	r0, [r2, #0]
 800982c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009834:	f380 8811 	msr	BASEPRI, r0
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f7fe febc 	bl	80085bc <vTaskSwitchContext>
 8009844:	f04f 0000 	mov.w	r0, #0
 8009848:	f380 8811 	msr	BASEPRI, r0
 800984c:	bc09      	pop	{r0, r3}
 800984e:	6819      	ldr	r1, [r3, #0]
 8009850:	6808      	ldr	r0, [r1, #0]
 8009852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009856:	f01e 0f10 	tst.w	lr, #16
 800985a:	bf08      	it	eq
 800985c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009860:	f380 8809 	msr	PSP, r0
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst>:
 8009870:	20000a68 	.word	0x20000a68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009892:	f7fe fdd9 	bl	8008448 <xTaskIncrementTick>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800989c:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <xPortSysTickHandler+0x40>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	2300      	movs	r3, #0
 80098a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f383 8811 	msr	BASEPRI, r3
}
 80098ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098c0:	4b0b      	ldr	r3, [pc, #44]	; (80098f0 <vPortSetupTimerInterrupt+0x34>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098c6:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <vPortSetupTimerInterrupt+0x38>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098cc:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <vPortSetupTimerInterrupt+0x3c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a0a      	ldr	r2, [pc, #40]	; (80098fc <vPortSetupTimerInterrupt+0x40>)
 80098d2:	fba2 2303 	umull	r2, r3, r2, r3
 80098d6:	099b      	lsrs	r3, r3, #6
 80098d8:	4a09      	ldr	r2, [pc, #36]	; (8009900 <vPortSetupTimerInterrupt+0x44>)
 80098da:	3b01      	subs	r3, #1
 80098dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098de:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <vPortSetupTimerInterrupt+0x34>)
 80098e0:	2207      	movs	r2, #7
 80098e2:	601a      	str	r2, [r3, #0]
}
 80098e4:	bf00      	nop
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	e000e010 	.word	0xe000e010
 80098f4:	e000e018 	.word	0xe000e018
 80098f8:	20000004 	.word	0x20000004
 80098fc:	10624dd3 	.word	0x10624dd3
 8009900:	e000e014 	.word	0xe000e014

08009904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009914 <vPortEnableVFP+0x10>
 8009908:	6801      	ldr	r1, [r0, #0]
 800990a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800990e:	6001      	str	r1, [r0, #0]
 8009910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009912:	bf00      	nop
 8009914:	e000ed88 	.word	0xe000ed88

08009918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800991e:	f3ef 8305 	mrs	r3, IPSR
 8009922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b0f      	cmp	r3, #15
 8009928:	d914      	bls.n	8009954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800992a:	4a17      	ldr	r2, [pc, #92]	; (8009988 <vPortValidateInterruptPriority+0x70>)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009934:	4b15      	ldr	r3, [pc, #84]	; (800998c <vPortValidateInterruptPriority+0x74>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	7afa      	ldrb	r2, [r7, #11]
 800993a:	429a      	cmp	r2, r3
 800993c:	d20a      	bcs.n	8009954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <vPortValidateInterruptPriority+0x78>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <vPortValidateInterruptPriority+0x7c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d90a      	bls.n	800997a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	603b      	str	r3, [r7, #0]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <vPortValidateInterruptPriority+0x60>
	}
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	e000e3f0 	.word	0xe000e3f0
 800998c:	20001094 	.word	0x20001094
 8009990:	e000ed0c 	.word	0xe000ed0c
 8009994:	20001098 	.word	0x20001098

08009998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08a      	sub	sp, #40	; 0x28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099a4:	f7fe fc94 	bl	80082d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099a8:	4b5b      	ldr	r3, [pc, #364]	; (8009b18 <pvPortMalloc+0x180>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099b0:	f000 f920 	bl	8009bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099b4:	4b59      	ldr	r3, [pc, #356]	; (8009b1c <pvPortMalloc+0x184>)
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4013      	ands	r3, r2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 8093 	bne.w	8009ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01d      	beq.n	8009a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80099c8:	2208      	movs	r2, #8
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4413      	add	r3, r2
 80099ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f003 0307 	and.w	r3, r3, #7
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d014      	beq.n	8009a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f023 0307 	bic.w	r3, r3, #7
 80099e0:	3308      	adds	r3, #8
 80099e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <pvPortMalloc+0x6c>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	617b      	str	r3, [r7, #20]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d06e      	beq.n	8009ae8 <pvPortMalloc+0x150>
 8009a0a:	4b45      	ldr	r3, [pc, #276]	; (8009b20 <pvPortMalloc+0x188>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d869      	bhi.n	8009ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a14:	4b43      	ldr	r3, [pc, #268]	; (8009b24 <pvPortMalloc+0x18c>)
 8009a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a18:	4b42      	ldr	r3, [pc, #264]	; (8009b24 <pvPortMalloc+0x18c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a1e:	e004      	b.n	8009a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d903      	bls.n	8009a3c <pvPortMalloc+0xa4>
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1f1      	bne.n	8009a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a3c:	4b36      	ldr	r3, [pc, #216]	; (8009b18 <pvPortMalloc+0x180>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d050      	beq.n	8009ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2208      	movs	r2, #8
 8009a4c:	4413      	add	r3, r2
 8009a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	1ad2      	subs	r2, r2, r3
 8009a60:	2308      	movs	r3, #8
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d91f      	bls.n	8009aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <pvPortMalloc+0xf8>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	613b      	str	r3, [r7, #16]
}
 8009a8c:	bf00      	nop
 8009a8e:	e7fe      	b.n	8009a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	1ad2      	subs	r2, r2, r3
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009aa2:	69b8      	ldr	r0, [r7, #24]
 8009aa4:	f000 f908 	bl	8009cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009aa8:	4b1d      	ldr	r3, [pc, #116]	; (8009b20 <pvPortMalloc+0x188>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	4a1b      	ldr	r2, [pc, #108]	; (8009b20 <pvPortMalloc+0x188>)
 8009ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <pvPortMalloc+0x188>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <pvPortMalloc+0x190>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d203      	bcs.n	8009aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ac2:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <pvPortMalloc+0x188>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a18      	ldr	r2, [pc, #96]	; (8009b28 <pvPortMalloc+0x190>)
 8009ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <pvPortMalloc+0x184>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ade:	4b13      	ldr	r3, [pc, #76]	; (8009b2c <pvPortMalloc+0x194>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	4a11      	ldr	r2, [pc, #68]	; (8009b2c <pvPortMalloc+0x194>)
 8009ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ae8:	f7fe fc00 	bl	80082ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f003 0307 	and.w	r3, r3, #7
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <pvPortMalloc+0x174>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	60fb      	str	r3, [r7, #12]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <pvPortMalloc+0x172>
	return pvReturn;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3728      	adds	r7, #40	; 0x28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20001ca4 	.word	0x20001ca4
 8009b1c:	20001cb8 	.word	0x20001cb8
 8009b20:	20001ca8 	.word	0x20001ca8
 8009b24:	20001c9c 	.word	0x20001c9c
 8009b28:	20001cac 	.word	0x20001cac
 8009b2c:	20001cb0 	.word	0x20001cb0

08009b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d04d      	beq.n	8009bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b42:	2308      	movs	r3, #8
 8009b44:	425b      	negs	r3, r3
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4413      	add	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <vPortFree+0xb8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <vPortFree+0x44>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60fb      	str	r3, [r7, #12]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00a      	beq.n	8009b92 <vPortFree+0x62>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	60bb      	str	r3, [r7, #8]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <vPortFree+0xb8>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01e      	beq.n	8009bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d11a      	bne.n	8009bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <vPortFree+0xb8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	43db      	mvns	r3, r3
 8009bb2:	401a      	ands	r2, r3
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bb8:	f7fe fb8a 	bl	80082d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <vPortFree+0xbc>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	4a09      	ldr	r2, [pc, #36]	; (8009bec <vPortFree+0xbc>)
 8009bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bca:	6938      	ldr	r0, [r7, #16]
 8009bcc:	f000 f874 	bl	8009cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <vPortFree+0xc0>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	4a06      	ldr	r2, [pc, #24]	; (8009bf0 <vPortFree+0xc0>)
 8009bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009bda:	f7fe fb87 	bl	80082ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bde:	bf00      	nop
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20001cb8 	.word	0x20001cb8
 8009bec:	20001ca8 	.word	0x20001ca8
 8009bf0:	20001cb4 	.word	0x20001cb4

08009bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c00:	4b27      	ldr	r3, [pc, #156]	; (8009ca0 <prvHeapInit+0xac>)
 8009c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3307      	adds	r3, #7
 8009c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f023 0307 	bic.w	r3, r3, #7
 8009c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <prvHeapInit+0xac>)
 8009c24:	4413      	add	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c40:	2208      	movs	r2, #8
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0307 	bic.w	r3, r3, #7
 8009c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c5e:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c74:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <prvHeapInit+0xb8>)
 8009c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <prvHeapInit+0xbc>)
 8009c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <prvHeapInit+0xc0>)
 8009c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c92:	601a      	str	r2, [r3, #0]
}
 8009c94:	bf00      	nop
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	2000109c 	.word	0x2000109c
 8009ca4:	20001c9c 	.word	0x20001c9c
 8009ca8:	20001ca4 	.word	0x20001ca4
 8009cac:	20001cac 	.word	0x20001cac
 8009cb0:	20001ca8 	.word	0x20001ca8
 8009cb4:	20001cb8 	.word	0x20001cb8

08009cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cc0:	4b28      	ldr	r3, [pc, #160]	; (8009d64 <prvInsertBlockIntoFreeList+0xac>)
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e002      	b.n	8009ccc <prvInsertBlockIntoFreeList+0x14>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d8f7      	bhi.n	8009cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d108      	bne.n	8009cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	441a      	add	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	441a      	add	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d118      	bne.n	8009d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d00d      	beq.n	8009d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	441a      	add	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	e008      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	e003      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d002      	beq.n	8009d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20001c9c 	.word	0x20001c9c
 8009d68:	20001ca4 	.word	0x20001ca4

08009d6c <__errno>:
 8009d6c:	4b01      	ldr	r3, [pc, #4]	; (8009d74 <__errno+0x8>)
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20000014 	.word	0x20000014

08009d78 <__libc_init_array>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	4d0d      	ldr	r5, [pc, #52]	; (8009db0 <__libc_init_array+0x38>)
 8009d7c:	4c0d      	ldr	r4, [pc, #52]	; (8009db4 <__libc_init_array+0x3c>)
 8009d7e:	1b64      	subs	r4, r4, r5
 8009d80:	10a4      	asrs	r4, r4, #2
 8009d82:	2600      	movs	r6, #0
 8009d84:	42a6      	cmp	r6, r4
 8009d86:	d109      	bne.n	8009d9c <__libc_init_array+0x24>
 8009d88:	4d0b      	ldr	r5, [pc, #44]	; (8009db8 <__libc_init_array+0x40>)
 8009d8a:	4c0c      	ldr	r4, [pc, #48]	; (8009dbc <__libc_init_array+0x44>)
 8009d8c:	f000 fcf8 	bl	800a780 <_init>
 8009d90:	1b64      	subs	r4, r4, r5
 8009d92:	10a4      	asrs	r4, r4, #2
 8009d94:	2600      	movs	r6, #0
 8009d96:	42a6      	cmp	r6, r4
 8009d98:	d105      	bne.n	8009da6 <__libc_init_array+0x2e>
 8009d9a:	bd70      	pop	{r4, r5, r6, pc}
 8009d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da0:	4798      	blx	r3
 8009da2:	3601      	adds	r6, #1
 8009da4:	e7ee      	b.n	8009d84 <__libc_init_array+0xc>
 8009da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009daa:	4798      	blx	r3
 8009dac:	3601      	adds	r6, #1
 8009dae:	e7f2      	b.n	8009d96 <__libc_init_array+0x1e>
 8009db0:	0800a9dc 	.word	0x0800a9dc
 8009db4:	0800a9dc 	.word	0x0800a9dc
 8009db8:	0800a9dc 	.word	0x0800a9dc
 8009dbc:	0800a9e0 	.word	0x0800a9e0

08009dc0 <__retarget_lock_acquire_recursive>:
 8009dc0:	4770      	bx	lr

08009dc2 <__retarget_lock_release_recursive>:
 8009dc2:	4770      	bx	lr

08009dc4 <memcpy>:
 8009dc4:	440a      	add	r2, r1
 8009dc6:	4291      	cmp	r1, r2
 8009dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dcc:	d100      	bne.n	8009dd0 <memcpy+0xc>
 8009dce:	4770      	bx	lr
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	d1f9      	bne.n	8009dd2 <memcpy+0xe>
 8009dde:	bd10      	pop	{r4, pc}

08009de0 <memset>:
 8009de0:	4402      	add	r2, r0
 8009de2:	4603      	mov	r3, r0
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d100      	bne.n	8009dea <memset+0xa>
 8009de8:	4770      	bx	lr
 8009dea:	f803 1b01 	strb.w	r1, [r3], #1
 8009dee:	e7f9      	b.n	8009de4 <memset+0x4>

08009df0 <sbrk_aligned>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	4e0e      	ldr	r6, [pc, #56]	; (8009e2c <sbrk_aligned+0x3c>)
 8009df4:	460c      	mov	r4, r1
 8009df6:	6831      	ldr	r1, [r6, #0]
 8009df8:	4605      	mov	r5, r0
 8009dfa:	b911      	cbnz	r1, 8009e02 <sbrk_aligned+0x12>
 8009dfc:	f000 f8f6 	bl	8009fec <_sbrk_r>
 8009e00:	6030      	str	r0, [r6, #0]
 8009e02:	4621      	mov	r1, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 f8f1 	bl	8009fec <_sbrk_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d00a      	beq.n	8009e24 <sbrk_aligned+0x34>
 8009e0e:	1cc4      	adds	r4, r0, #3
 8009e10:	f024 0403 	bic.w	r4, r4, #3
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d007      	beq.n	8009e28 <sbrk_aligned+0x38>
 8009e18:	1a21      	subs	r1, r4, r0
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f000 f8e6 	bl	8009fec <_sbrk_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	d101      	bne.n	8009e28 <sbrk_aligned+0x38>
 8009e24:	f04f 34ff 	mov.w	r4, #4294967295
 8009e28:	4620      	mov	r0, r4
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	20001cc4 	.word	0x20001cc4

08009e30 <_malloc_r>:
 8009e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e34:	1ccd      	adds	r5, r1, #3
 8009e36:	f025 0503 	bic.w	r5, r5, #3
 8009e3a:	3508      	adds	r5, #8
 8009e3c:	2d0c      	cmp	r5, #12
 8009e3e:	bf38      	it	cc
 8009e40:	250c      	movcc	r5, #12
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	4607      	mov	r7, r0
 8009e46:	db01      	blt.n	8009e4c <_malloc_r+0x1c>
 8009e48:	42a9      	cmp	r1, r5
 8009e4a:	d905      	bls.n	8009e58 <_malloc_r+0x28>
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	2600      	movs	r6, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e58:	4e2e      	ldr	r6, [pc, #184]	; (8009f14 <_malloc_r+0xe4>)
 8009e5a:	f000 f8f7 	bl	800a04c <__malloc_lock>
 8009e5e:	6833      	ldr	r3, [r6, #0]
 8009e60:	461c      	mov	r4, r3
 8009e62:	bb34      	cbnz	r4, 8009eb2 <_malloc_r+0x82>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff ffc2 	bl	8009df0 <sbrk_aligned>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	4604      	mov	r4, r0
 8009e70:	d14d      	bne.n	8009f0e <_malloc_r+0xde>
 8009e72:	6834      	ldr	r4, [r6, #0]
 8009e74:	4626      	mov	r6, r4
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	d140      	bne.n	8009efc <_malloc_r+0xcc>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4638      	mov	r0, r7
 8009e80:	eb04 0803 	add.w	r8, r4, r3
 8009e84:	f000 f8b2 	bl	8009fec <_sbrk_r>
 8009e88:	4580      	cmp	r8, r0
 8009e8a:	d13a      	bne.n	8009f02 <_malloc_r+0xd2>
 8009e8c:	6821      	ldr	r1, [r4, #0]
 8009e8e:	3503      	adds	r5, #3
 8009e90:	1a6d      	subs	r5, r5, r1
 8009e92:	f025 0503 	bic.w	r5, r5, #3
 8009e96:	3508      	adds	r5, #8
 8009e98:	2d0c      	cmp	r5, #12
 8009e9a:	bf38      	it	cc
 8009e9c:	250c      	movcc	r5, #12
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa5 	bl	8009df0 <sbrk_aligned>
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d02b      	beq.n	8009f02 <_malloc_r+0xd2>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	442b      	add	r3, r5
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	e00e      	b.n	8009ed0 <_malloc_r+0xa0>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	1b52      	subs	r2, r2, r5
 8009eb6:	d41e      	bmi.n	8009ef6 <_malloc_r+0xc6>
 8009eb8:	2a0b      	cmp	r2, #11
 8009eba:	d916      	bls.n	8009eea <_malloc_r+0xba>
 8009ebc:	1961      	adds	r1, r4, r5
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	6025      	str	r5, [r4, #0]
 8009ec2:	bf18      	it	ne
 8009ec4:	6059      	strne	r1, [r3, #4]
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	bf08      	it	eq
 8009eca:	6031      	streq	r1, [r6, #0]
 8009ecc:	5162      	str	r2, [r4, r5]
 8009ece:	604b      	str	r3, [r1, #4]
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f104 060b 	add.w	r6, r4, #11
 8009ed6:	f000 f8bf 	bl	800a058 <__malloc_unlock>
 8009eda:	f026 0607 	bic.w	r6, r6, #7
 8009ede:	1d23      	adds	r3, r4, #4
 8009ee0:	1af2      	subs	r2, r6, r3
 8009ee2:	d0b6      	beq.n	8009e52 <_malloc_r+0x22>
 8009ee4:	1b9b      	subs	r3, r3, r6
 8009ee6:	50a3      	str	r3, [r4, r2]
 8009ee8:	e7b3      	b.n	8009e52 <_malloc_r+0x22>
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	bf0c      	ite	eq
 8009ef0:	6032      	streq	r2, [r6, #0]
 8009ef2:	605a      	strne	r2, [r3, #4]
 8009ef4:	e7ec      	b.n	8009ed0 <_malloc_r+0xa0>
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	6864      	ldr	r4, [r4, #4]
 8009efa:	e7b2      	b.n	8009e62 <_malloc_r+0x32>
 8009efc:	4634      	mov	r4, r6
 8009efe:	6876      	ldr	r6, [r6, #4]
 8009f00:	e7b9      	b.n	8009e76 <_malloc_r+0x46>
 8009f02:	230c      	movs	r3, #12
 8009f04:	603b      	str	r3, [r7, #0]
 8009f06:	4638      	mov	r0, r7
 8009f08:	f000 f8a6 	bl	800a058 <__malloc_unlock>
 8009f0c:	e7a1      	b.n	8009e52 <_malloc_r+0x22>
 8009f0e:	6025      	str	r5, [r4, #0]
 8009f10:	e7de      	b.n	8009ed0 <_malloc_r+0xa0>
 8009f12:	bf00      	nop
 8009f14:	20001cc0 	.word	0x20001cc0

08009f18 <cleanup_glue>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	6809      	ldr	r1, [r1, #0]
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b109      	cbz	r1, 8009f26 <cleanup_glue+0xe>
 8009f22:	f7ff fff9 	bl	8009f18 <cleanup_glue>
 8009f26:	4621      	mov	r1, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2e:	f000 b899 	b.w	800a064 <_free_r>
	...

08009f34 <_reclaim_reent>:
 8009f34:	4b2c      	ldr	r3, [pc, #176]	; (8009fe8 <_reclaim_reent+0xb4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4283      	cmp	r3, r0
 8009f3a:	b570      	push	{r4, r5, r6, lr}
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	d051      	beq.n	8009fe4 <_reclaim_reent+0xb0>
 8009f40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f42:	b143      	cbz	r3, 8009f56 <_reclaim_reent+0x22>
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d14a      	bne.n	8009fe0 <_reclaim_reent+0xac>
 8009f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f4c:	6819      	ldr	r1, [r3, #0]
 8009f4e:	b111      	cbz	r1, 8009f56 <_reclaim_reent+0x22>
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 f887 	bl	800a064 <_free_r>
 8009f56:	6961      	ldr	r1, [r4, #20]
 8009f58:	b111      	cbz	r1, 8009f60 <_reclaim_reent+0x2c>
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f882 	bl	800a064 <_free_r>
 8009f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f62:	b111      	cbz	r1, 8009f6a <_reclaim_reent+0x36>
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 f87d 	bl	800a064 <_free_r>
 8009f6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f6c:	b111      	cbz	r1, 8009f74 <_reclaim_reent+0x40>
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f878 	bl	800a064 <_free_r>
 8009f74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f76:	b111      	cbz	r1, 8009f7e <_reclaim_reent+0x4a>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 f873 	bl	800a064 <_free_r>
 8009f7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f80:	b111      	cbz	r1, 8009f88 <_reclaim_reent+0x54>
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f86e 	bl	800a064 <_free_r>
 8009f88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f8a:	b111      	cbz	r1, 8009f92 <_reclaim_reent+0x5e>
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 f869 	bl	800a064 <_free_r>
 8009f92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f94:	b111      	cbz	r1, 8009f9c <_reclaim_reent+0x68>
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 f864 	bl	800a064 <_free_r>
 8009f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f9e:	b111      	cbz	r1, 8009fa6 <_reclaim_reent+0x72>
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 f85f 	bl	800a064 <_free_r>
 8009fa6:	69a3      	ldr	r3, [r4, #24]
 8009fa8:	b1e3      	cbz	r3, 8009fe4 <_reclaim_reent+0xb0>
 8009faa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fac:	4620      	mov	r0, r4
 8009fae:	4798      	blx	r3
 8009fb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fb2:	b1b9      	cbz	r1, 8009fe4 <_reclaim_reent+0xb0>
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fba:	f7ff bfad 	b.w	8009f18 <cleanup_glue>
 8009fbe:	5949      	ldr	r1, [r1, r5]
 8009fc0:	b941      	cbnz	r1, 8009fd4 <_reclaim_reent+0xa0>
 8009fc2:	3504      	adds	r5, #4
 8009fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc6:	2d80      	cmp	r5, #128	; 0x80
 8009fc8:	68d9      	ldr	r1, [r3, #12]
 8009fca:	d1f8      	bne.n	8009fbe <_reclaim_reent+0x8a>
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 f849 	bl	800a064 <_free_r>
 8009fd2:	e7ba      	b.n	8009f4a <_reclaim_reent+0x16>
 8009fd4:	680e      	ldr	r6, [r1, #0]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f000 f844 	bl	800a064 <_free_r>
 8009fdc:	4631      	mov	r1, r6
 8009fde:	e7ef      	b.n	8009fc0 <_reclaim_reent+0x8c>
 8009fe0:	2500      	movs	r5, #0
 8009fe2:	e7ef      	b.n	8009fc4 <_reclaim_reent+0x90>
 8009fe4:	bd70      	pop	{r4, r5, r6, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000014 	.word	0x20000014

08009fec <_sbrk_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d06      	ldr	r5, [pc, #24]	; (800a008 <_sbrk_r+0x1c>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	602b      	str	r3, [r5, #0]
 8009ff8:	f7f7 fb0a 	bl	8001610 <_sbrk>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_sbrk_r+0x1a>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	b103      	cbz	r3, 800a006 <_sbrk_r+0x1a>
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	20001cc8 	.word	0x20001cc8

0800a00c <siprintf>:
 800a00c:	b40e      	push	{r1, r2, r3}
 800a00e:	b500      	push	{lr}
 800a010:	b09c      	sub	sp, #112	; 0x70
 800a012:	ab1d      	add	r3, sp, #116	; 0x74
 800a014:	9002      	str	r0, [sp, #8]
 800a016:	9006      	str	r0, [sp, #24]
 800a018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a01c:	4809      	ldr	r0, [pc, #36]	; (800a044 <siprintf+0x38>)
 800a01e:	9107      	str	r1, [sp, #28]
 800a020:	9104      	str	r1, [sp, #16]
 800a022:	4909      	ldr	r1, [pc, #36]	; (800a048 <siprintf+0x3c>)
 800a024:	f853 2b04 	ldr.w	r2, [r3], #4
 800a028:	9105      	str	r1, [sp, #20]
 800a02a:	6800      	ldr	r0, [r0, #0]
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	a902      	add	r1, sp, #8
 800a030:	f000 f8c0 	bl	800a1b4 <_svfiprintf_r>
 800a034:	9b02      	ldr	r3, [sp, #8]
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	b01c      	add	sp, #112	; 0x70
 800a03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a040:	b003      	add	sp, #12
 800a042:	4770      	bx	lr
 800a044:	20000014 	.word	0x20000014
 800a048:	ffff0208 	.word	0xffff0208

0800a04c <__malloc_lock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__malloc_lock+0x8>)
 800a04e:	f7ff beb7 	b.w	8009dc0 <__retarget_lock_acquire_recursive>
 800a052:	bf00      	nop
 800a054:	20001cbc 	.word	0x20001cbc

0800a058 <__malloc_unlock>:
 800a058:	4801      	ldr	r0, [pc, #4]	; (800a060 <__malloc_unlock+0x8>)
 800a05a:	f7ff beb2 	b.w	8009dc2 <__retarget_lock_release_recursive>
 800a05e:	bf00      	nop
 800a060:	20001cbc 	.word	0x20001cbc

0800a064 <_free_r>:
 800a064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a066:	2900      	cmp	r1, #0
 800a068:	d044      	beq.n	800a0f4 <_free_r+0x90>
 800a06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a06e:	9001      	str	r0, [sp, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	f1a1 0404 	sub.w	r4, r1, #4
 800a076:	bfb8      	it	lt
 800a078:	18e4      	addlt	r4, r4, r3
 800a07a:	f7ff ffe7 	bl	800a04c <__malloc_lock>
 800a07e:	4a1e      	ldr	r2, [pc, #120]	; (800a0f8 <_free_r+0x94>)
 800a080:	9801      	ldr	r0, [sp, #4]
 800a082:	6813      	ldr	r3, [r2, #0]
 800a084:	b933      	cbnz	r3, 800a094 <_free_r+0x30>
 800a086:	6063      	str	r3, [r4, #4]
 800a088:	6014      	str	r4, [r2, #0]
 800a08a:	b003      	add	sp, #12
 800a08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a090:	f7ff bfe2 	b.w	800a058 <__malloc_unlock>
 800a094:	42a3      	cmp	r3, r4
 800a096:	d908      	bls.n	800a0aa <_free_r+0x46>
 800a098:	6825      	ldr	r5, [r4, #0]
 800a09a:	1961      	adds	r1, r4, r5
 800a09c:	428b      	cmp	r3, r1
 800a09e:	bf01      	itttt	eq
 800a0a0:	6819      	ldreq	r1, [r3, #0]
 800a0a2:	685b      	ldreq	r3, [r3, #4]
 800a0a4:	1949      	addeq	r1, r1, r5
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	e7ed      	b.n	800a086 <_free_r+0x22>
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	b10b      	cbz	r3, 800a0b4 <_free_r+0x50>
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	d9fa      	bls.n	800a0aa <_free_r+0x46>
 800a0b4:	6811      	ldr	r1, [r2, #0]
 800a0b6:	1855      	adds	r5, r2, r1
 800a0b8:	42a5      	cmp	r5, r4
 800a0ba:	d10b      	bne.n	800a0d4 <_free_r+0x70>
 800a0bc:	6824      	ldr	r4, [r4, #0]
 800a0be:	4421      	add	r1, r4
 800a0c0:	1854      	adds	r4, r2, r1
 800a0c2:	42a3      	cmp	r3, r4
 800a0c4:	6011      	str	r1, [r2, #0]
 800a0c6:	d1e0      	bne.n	800a08a <_free_r+0x26>
 800a0c8:	681c      	ldr	r4, [r3, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	6053      	str	r3, [r2, #4]
 800a0ce:	4421      	add	r1, r4
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	e7da      	b.n	800a08a <_free_r+0x26>
 800a0d4:	d902      	bls.n	800a0dc <_free_r+0x78>
 800a0d6:	230c      	movs	r3, #12
 800a0d8:	6003      	str	r3, [r0, #0]
 800a0da:	e7d6      	b.n	800a08a <_free_r+0x26>
 800a0dc:	6825      	ldr	r5, [r4, #0]
 800a0de:	1961      	adds	r1, r4, r5
 800a0e0:	428b      	cmp	r3, r1
 800a0e2:	bf04      	itt	eq
 800a0e4:	6819      	ldreq	r1, [r3, #0]
 800a0e6:	685b      	ldreq	r3, [r3, #4]
 800a0e8:	6063      	str	r3, [r4, #4]
 800a0ea:	bf04      	itt	eq
 800a0ec:	1949      	addeq	r1, r1, r5
 800a0ee:	6021      	streq	r1, [r4, #0]
 800a0f0:	6054      	str	r4, [r2, #4]
 800a0f2:	e7ca      	b.n	800a08a <_free_r+0x26>
 800a0f4:	b003      	add	sp, #12
 800a0f6:	bd30      	pop	{r4, r5, pc}
 800a0f8:	20001cc0 	.word	0x20001cc0

0800a0fc <__ssputs_r>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	688e      	ldr	r6, [r1, #8]
 800a102:	429e      	cmp	r6, r3
 800a104:	4682      	mov	sl, r0
 800a106:	460c      	mov	r4, r1
 800a108:	4690      	mov	r8, r2
 800a10a:	461f      	mov	r7, r3
 800a10c:	d838      	bhi.n	800a180 <__ssputs_r+0x84>
 800a10e:	898a      	ldrh	r2, [r1, #12]
 800a110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a114:	d032      	beq.n	800a17c <__ssputs_r+0x80>
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	6909      	ldr	r1, [r1, #16]
 800a11a:	eba5 0901 	sub.w	r9, r5, r1
 800a11e:	6965      	ldr	r5, [r4, #20]
 800a120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a128:	3301      	adds	r3, #1
 800a12a:	444b      	add	r3, r9
 800a12c:	106d      	asrs	r5, r5, #1
 800a12e:	429d      	cmp	r5, r3
 800a130:	bf38      	it	cc
 800a132:	461d      	movcc	r5, r3
 800a134:	0553      	lsls	r3, r2, #21
 800a136:	d531      	bpl.n	800a19c <__ssputs_r+0xa0>
 800a138:	4629      	mov	r1, r5
 800a13a:	f7ff fe79 	bl	8009e30 <_malloc_r>
 800a13e:	4606      	mov	r6, r0
 800a140:	b950      	cbnz	r0, 800a158 <__ssputs_r+0x5c>
 800a142:	230c      	movs	r3, #12
 800a144:	f8ca 3000 	str.w	r3, [sl]
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14e:	81a3      	strh	r3, [r4, #12]
 800a150:	f04f 30ff 	mov.w	r0, #4294967295
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	6921      	ldr	r1, [r4, #16]
 800a15a:	464a      	mov	r2, r9
 800a15c:	f7ff fe32 	bl	8009dc4 <memcpy>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	6126      	str	r6, [r4, #16]
 800a16e:	6165      	str	r5, [r4, #20]
 800a170:	444e      	add	r6, r9
 800a172:	eba5 0509 	sub.w	r5, r5, r9
 800a176:	6026      	str	r6, [r4, #0]
 800a178:	60a5      	str	r5, [r4, #8]
 800a17a:	463e      	mov	r6, r7
 800a17c:	42be      	cmp	r6, r7
 800a17e:	d900      	bls.n	800a182 <__ssputs_r+0x86>
 800a180:	463e      	mov	r6, r7
 800a182:	6820      	ldr	r0, [r4, #0]
 800a184:	4632      	mov	r2, r6
 800a186:	4641      	mov	r1, r8
 800a188:	f000 faa8 	bl	800a6dc <memmove>
 800a18c:	68a3      	ldr	r3, [r4, #8]
 800a18e:	1b9b      	subs	r3, r3, r6
 800a190:	60a3      	str	r3, [r4, #8]
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	4433      	add	r3, r6
 800a196:	6023      	str	r3, [r4, #0]
 800a198:	2000      	movs	r0, #0
 800a19a:	e7db      	b.n	800a154 <__ssputs_r+0x58>
 800a19c:	462a      	mov	r2, r5
 800a19e:	f000 fab7 	bl	800a710 <_realloc_r>
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d1e1      	bne.n	800a16c <__ssputs_r+0x70>
 800a1a8:	6921      	ldr	r1, [r4, #16]
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	f7ff ff5a 	bl	800a064 <_free_r>
 800a1b0:	e7c7      	b.n	800a142 <__ssputs_r+0x46>
	...

0800a1b4 <_svfiprintf_r>:
 800a1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	4698      	mov	r8, r3
 800a1ba:	898b      	ldrh	r3, [r1, #12]
 800a1bc:	061b      	lsls	r3, r3, #24
 800a1be:	b09d      	sub	sp, #116	; 0x74
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	460d      	mov	r5, r1
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	d50e      	bpl.n	800a1e6 <_svfiprintf_r+0x32>
 800a1c8:	690b      	ldr	r3, [r1, #16]
 800a1ca:	b963      	cbnz	r3, 800a1e6 <_svfiprintf_r+0x32>
 800a1cc:	2140      	movs	r1, #64	; 0x40
 800a1ce:	f7ff fe2f 	bl	8009e30 <_malloc_r>
 800a1d2:	6028      	str	r0, [r5, #0]
 800a1d4:	6128      	str	r0, [r5, #16]
 800a1d6:	b920      	cbnz	r0, 800a1e2 <_svfiprintf_r+0x2e>
 800a1d8:	230c      	movs	r3, #12
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e0:	e0d1      	b.n	800a386 <_svfiprintf_r+0x1d2>
 800a1e2:	2340      	movs	r3, #64	; 0x40
 800a1e4:	616b      	str	r3, [r5, #20]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ea:	2320      	movs	r3, #32
 800a1ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1f4:	2330      	movs	r3, #48	; 0x30
 800a1f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3a0 <_svfiprintf_r+0x1ec>
 800a1fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1fe:	f04f 0901 	mov.w	r9, #1
 800a202:	4623      	mov	r3, r4
 800a204:	469a      	mov	sl, r3
 800a206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20a:	b10a      	cbz	r2, 800a210 <_svfiprintf_r+0x5c>
 800a20c:	2a25      	cmp	r2, #37	; 0x25
 800a20e:	d1f9      	bne.n	800a204 <_svfiprintf_r+0x50>
 800a210:	ebba 0b04 	subs.w	fp, sl, r4
 800a214:	d00b      	beq.n	800a22e <_svfiprintf_r+0x7a>
 800a216:	465b      	mov	r3, fp
 800a218:	4622      	mov	r2, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	4638      	mov	r0, r7
 800a21e:	f7ff ff6d 	bl	800a0fc <__ssputs_r>
 800a222:	3001      	adds	r0, #1
 800a224:	f000 80aa 	beq.w	800a37c <_svfiprintf_r+0x1c8>
 800a228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a22a:	445a      	add	r2, fp
 800a22c:	9209      	str	r2, [sp, #36]	; 0x24
 800a22e:	f89a 3000 	ldrb.w	r3, [sl]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80a2 	beq.w	800a37c <_svfiprintf_r+0x1c8>
 800a238:	2300      	movs	r3, #0
 800a23a:	f04f 32ff 	mov.w	r2, #4294967295
 800a23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a242:	f10a 0a01 	add.w	sl, sl, #1
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	9307      	str	r3, [sp, #28]
 800a24a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a24e:	931a      	str	r3, [sp, #104]	; 0x68
 800a250:	4654      	mov	r4, sl
 800a252:	2205      	movs	r2, #5
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	4851      	ldr	r0, [pc, #324]	; (800a3a0 <_svfiprintf_r+0x1ec>)
 800a25a:	f7f5 ffe1 	bl	8000220 <memchr>
 800a25e:	9a04      	ldr	r2, [sp, #16]
 800a260:	b9d8      	cbnz	r0, 800a29a <_svfiprintf_r+0xe6>
 800a262:	06d0      	lsls	r0, r2, #27
 800a264:	bf44      	itt	mi
 800a266:	2320      	movmi	r3, #32
 800a268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26c:	0711      	lsls	r1, r2, #28
 800a26e:	bf44      	itt	mi
 800a270:	232b      	movmi	r3, #43	; 0x2b
 800a272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a276:	f89a 3000 	ldrb.w	r3, [sl]
 800a27a:	2b2a      	cmp	r3, #42	; 0x2a
 800a27c:	d015      	beq.n	800a2aa <_svfiprintf_r+0xf6>
 800a27e:	9a07      	ldr	r2, [sp, #28]
 800a280:	4654      	mov	r4, sl
 800a282:	2000      	movs	r0, #0
 800a284:	f04f 0c0a 	mov.w	ip, #10
 800a288:	4621      	mov	r1, r4
 800a28a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a28e:	3b30      	subs	r3, #48	; 0x30
 800a290:	2b09      	cmp	r3, #9
 800a292:	d94e      	bls.n	800a332 <_svfiprintf_r+0x17e>
 800a294:	b1b0      	cbz	r0, 800a2c4 <_svfiprintf_r+0x110>
 800a296:	9207      	str	r2, [sp, #28]
 800a298:	e014      	b.n	800a2c4 <_svfiprintf_r+0x110>
 800a29a:	eba0 0308 	sub.w	r3, r0, r8
 800a29e:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	46a2      	mov	sl, r4
 800a2a8:	e7d2      	b.n	800a250 <_svfiprintf_r+0x9c>
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	1d19      	adds	r1, r3, #4
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	9103      	str	r1, [sp, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bfbb      	ittet	lt
 800a2b6:	425b      	neglt	r3, r3
 800a2b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2bc:	9307      	strge	r3, [sp, #28]
 800a2be:	9307      	strlt	r3, [sp, #28]
 800a2c0:	bfb8      	it	lt
 800a2c2:	9204      	strlt	r2, [sp, #16]
 800a2c4:	7823      	ldrb	r3, [r4, #0]
 800a2c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c8:	d10c      	bne.n	800a2e4 <_svfiprintf_r+0x130>
 800a2ca:	7863      	ldrb	r3, [r4, #1]
 800a2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ce:	d135      	bne.n	800a33c <_svfiprintf_r+0x188>
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	9203      	str	r2, [sp, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bfb8      	it	lt
 800a2dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2e0:	3402      	adds	r4, #2
 800a2e2:	9305      	str	r3, [sp, #20]
 800a2e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3b0 <_svfiprintf_r+0x1fc>
 800a2e8:	7821      	ldrb	r1, [r4, #0]
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	f7f5 ff97 	bl	8000220 <memchr>
 800a2f2:	b140      	cbz	r0, 800a306 <_svfiprintf_r+0x152>
 800a2f4:	2340      	movs	r3, #64	; 0x40
 800a2f6:	eba0 000a 	sub.w	r0, r0, sl
 800a2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a2fe:	9b04      	ldr	r3, [sp, #16]
 800a300:	4303      	orrs	r3, r0
 800a302:	3401      	adds	r4, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30a:	4826      	ldr	r0, [pc, #152]	; (800a3a4 <_svfiprintf_r+0x1f0>)
 800a30c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a310:	2206      	movs	r2, #6
 800a312:	f7f5 ff85 	bl	8000220 <memchr>
 800a316:	2800      	cmp	r0, #0
 800a318:	d038      	beq.n	800a38c <_svfiprintf_r+0x1d8>
 800a31a:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <_svfiprintf_r+0x1f4>)
 800a31c:	bb1b      	cbnz	r3, 800a366 <_svfiprintf_r+0x1b2>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	3307      	adds	r3, #7
 800a322:	f023 0307 	bic.w	r3, r3, #7
 800a326:	3308      	adds	r3, #8
 800a328:	9303      	str	r3, [sp, #12]
 800a32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32c:	4433      	add	r3, r6
 800a32e:	9309      	str	r3, [sp, #36]	; 0x24
 800a330:	e767      	b.n	800a202 <_svfiprintf_r+0x4e>
 800a332:	fb0c 3202 	mla	r2, ip, r2, r3
 800a336:	460c      	mov	r4, r1
 800a338:	2001      	movs	r0, #1
 800a33a:	e7a5      	b.n	800a288 <_svfiprintf_r+0xd4>
 800a33c:	2300      	movs	r3, #0
 800a33e:	3401      	adds	r4, #1
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	4619      	mov	r1, r3
 800a344:	f04f 0c0a 	mov.w	ip, #10
 800a348:	4620      	mov	r0, r4
 800a34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34e:	3a30      	subs	r2, #48	; 0x30
 800a350:	2a09      	cmp	r2, #9
 800a352:	d903      	bls.n	800a35c <_svfiprintf_r+0x1a8>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0c5      	beq.n	800a2e4 <_svfiprintf_r+0x130>
 800a358:	9105      	str	r1, [sp, #20]
 800a35a:	e7c3      	b.n	800a2e4 <_svfiprintf_r+0x130>
 800a35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a360:	4604      	mov	r4, r0
 800a362:	2301      	movs	r3, #1
 800a364:	e7f0      	b.n	800a348 <_svfiprintf_r+0x194>
 800a366:	ab03      	add	r3, sp, #12
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	462a      	mov	r2, r5
 800a36c:	4b0f      	ldr	r3, [pc, #60]	; (800a3ac <_svfiprintf_r+0x1f8>)
 800a36e:	a904      	add	r1, sp, #16
 800a370:	4638      	mov	r0, r7
 800a372:	f3af 8000 	nop.w
 800a376:	1c42      	adds	r2, r0, #1
 800a378:	4606      	mov	r6, r0
 800a37a:	d1d6      	bne.n	800a32a <_svfiprintf_r+0x176>
 800a37c:	89ab      	ldrh	r3, [r5, #12]
 800a37e:	065b      	lsls	r3, r3, #25
 800a380:	f53f af2c 	bmi.w	800a1dc <_svfiprintf_r+0x28>
 800a384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a386:	b01d      	add	sp, #116	; 0x74
 800a388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38c:	ab03      	add	r3, sp, #12
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	462a      	mov	r2, r5
 800a392:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <_svfiprintf_r+0x1f8>)
 800a394:	a904      	add	r1, sp, #16
 800a396:	4638      	mov	r0, r7
 800a398:	f000 f87a 	bl	800a490 <_printf_i>
 800a39c:	e7eb      	b.n	800a376 <_svfiprintf_r+0x1c2>
 800a39e:	bf00      	nop
 800a3a0:	0800a9a0 	.word	0x0800a9a0
 800a3a4:	0800a9aa 	.word	0x0800a9aa
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	0800a0fd 	.word	0x0800a0fd
 800a3b0:	0800a9a6 	.word	0x0800a9a6

0800a3b4 <_printf_common>:
 800a3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	4699      	mov	r9, r3
 800a3bc:	688a      	ldr	r2, [r1, #8]
 800a3be:	690b      	ldr	r3, [r1, #16]
 800a3c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bfb8      	it	lt
 800a3c8:	4613      	movlt	r3, r2
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	b10a      	cbz	r2, 800a3da <_printf_common+0x26>
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	6033      	str	r3, [r6, #0]
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	0699      	lsls	r1, r3, #26
 800a3de:	bf42      	ittt	mi
 800a3e0:	6833      	ldrmi	r3, [r6, #0]
 800a3e2:	3302      	addmi	r3, #2
 800a3e4:	6033      	strmi	r3, [r6, #0]
 800a3e6:	6825      	ldr	r5, [r4, #0]
 800a3e8:	f015 0506 	ands.w	r5, r5, #6
 800a3ec:	d106      	bne.n	800a3fc <_printf_common+0x48>
 800a3ee:	f104 0a19 	add.w	sl, r4, #25
 800a3f2:	68e3      	ldr	r3, [r4, #12]
 800a3f4:	6832      	ldr	r2, [r6, #0]
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dc26      	bgt.n	800a44a <_printf_common+0x96>
 800a3fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a400:	1e13      	subs	r3, r2, #0
 800a402:	6822      	ldr	r2, [r4, #0]
 800a404:	bf18      	it	ne
 800a406:	2301      	movne	r3, #1
 800a408:	0692      	lsls	r2, r2, #26
 800a40a:	d42b      	bmi.n	800a464 <_printf_common+0xb0>
 800a40c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a410:	4649      	mov	r1, r9
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	3001      	adds	r0, #1
 800a418:	d01e      	beq.n	800a458 <_printf_common+0xa4>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	68e5      	ldr	r5, [r4, #12]
 800a41e:	6832      	ldr	r2, [r6, #0]
 800a420:	f003 0306 	and.w	r3, r3, #6
 800a424:	2b04      	cmp	r3, #4
 800a426:	bf08      	it	eq
 800a428:	1aad      	subeq	r5, r5, r2
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	6922      	ldr	r2, [r4, #16]
 800a42e:	bf0c      	ite	eq
 800a430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a434:	2500      	movne	r5, #0
 800a436:	4293      	cmp	r3, r2
 800a438:	bfc4      	itt	gt
 800a43a:	1a9b      	subgt	r3, r3, r2
 800a43c:	18ed      	addgt	r5, r5, r3
 800a43e:	2600      	movs	r6, #0
 800a440:	341a      	adds	r4, #26
 800a442:	42b5      	cmp	r5, r6
 800a444:	d11a      	bne.n	800a47c <_printf_common+0xc8>
 800a446:	2000      	movs	r0, #0
 800a448:	e008      	b.n	800a45c <_printf_common+0xa8>
 800a44a:	2301      	movs	r3, #1
 800a44c:	4652      	mov	r2, sl
 800a44e:	4649      	mov	r1, r9
 800a450:	4638      	mov	r0, r7
 800a452:	47c0      	blx	r8
 800a454:	3001      	adds	r0, #1
 800a456:	d103      	bne.n	800a460 <_printf_common+0xac>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	3501      	adds	r5, #1
 800a462:	e7c6      	b.n	800a3f2 <_printf_common+0x3e>
 800a464:	18e1      	adds	r1, r4, r3
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	2030      	movs	r0, #48	; 0x30
 800a46a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a46e:	4422      	add	r2, r4
 800a470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a478:	3302      	adds	r3, #2
 800a47a:	e7c7      	b.n	800a40c <_printf_common+0x58>
 800a47c:	2301      	movs	r3, #1
 800a47e:	4622      	mov	r2, r4
 800a480:	4649      	mov	r1, r9
 800a482:	4638      	mov	r0, r7
 800a484:	47c0      	blx	r8
 800a486:	3001      	adds	r0, #1
 800a488:	d0e6      	beq.n	800a458 <_printf_common+0xa4>
 800a48a:	3601      	adds	r6, #1
 800a48c:	e7d9      	b.n	800a442 <_printf_common+0x8e>
	...

0800a490 <_printf_i>:
 800a490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	7e0f      	ldrb	r7, [r1, #24]
 800a496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a498:	2f78      	cmp	r7, #120	; 0x78
 800a49a:	4691      	mov	r9, r2
 800a49c:	4680      	mov	r8, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	469a      	mov	sl, r3
 800a4a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4a6:	d807      	bhi.n	800a4b8 <_printf_i+0x28>
 800a4a8:	2f62      	cmp	r7, #98	; 0x62
 800a4aa:	d80a      	bhi.n	800a4c2 <_printf_i+0x32>
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	f000 80d8 	beq.w	800a662 <_printf_i+0x1d2>
 800a4b2:	2f58      	cmp	r7, #88	; 0x58
 800a4b4:	f000 80a3 	beq.w	800a5fe <_printf_i+0x16e>
 800a4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4c0:	e03a      	b.n	800a538 <_printf_i+0xa8>
 800a4c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4c6:	2b15      	cmp	r3, #21
 800a4c8:	d8f6      	bhi.n	800a4b8 <_printf_i+0x28>
 800a4ca:	a101      	add	r1, pc, #4	; (adr r1, 800a4d0 <_printf_i+0x40>)
 800a4cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a53d 	.word	0x0800a53d
 800a4d8:	0800a4b9 	.word	0x0800a4b9
 800a4dc:	0800a4b9 	.word	0x0800a4b9
 800a4e0:	0800a4b9 	.word	0x0800a4b9
 800a4e4:	0800a4b9 	.word	0x0800a4b9
 800a4e8:	0800a53d 	.word	0x0800a53d
 800a4ec:	0800a4b9 	.word	0x0800a4b9
 800a4f0:	0800a4b9 	.word	0x0800a4b9
 800a4f4:	0800a4b9 	.word	0x0800a4b9
 800a4f8:	0800a4b9 	.word	0x0800a4b9
 800a4fc:	0800a649 	.word	0x0800a649
 800a500:	0800a56d 	.word	0x0800a56d
 800a504:	0800a62b 	.word	0x0800a62b
 800a508:	0800a4b9 	.word	0x0800a4b9
 800a50c:	0800a4b9 	.word	0x0800a4b9
 800a510:	0800a66b 	.word	0x0800a66b
 800a514:	0800a4b9 	.word	0x0800a4b9
 800a518:	0800a56d 	.word	0x0800a56d
 800a51c:	0800a4b9 	.word	0x0800a4b9
 800a520:	0800a4b9 	.word	0x0800a4b9
 800a524:	0800a633 	.word	0x0800a633
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	1d1a      	adds	r2, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	602a      	str	r2, [r5, #0]
 800a530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a538:	2301      	movs	r3, #1
 800a53a:	e0a3      	b.n	800a684 <_printf_i+0x1f4>
 800a53c:	6820      	ldr	r0, [r4, #0]
 800a53e:	6829      	ldr	r1, [r5, #0]
 800a540:	0606      	lsls	r6, r0, #24
 800a542:	f101 0304 	add.w	r3, r1, #4
 800a546:	d50a      	bpl.n	800a55e <_printf_i+0xce>
 800a548:	680e      	ldr	r6, [r1, #0]
 800a54a:	602b      	str	r3, [r5, #0]
 800a54c:	2e00      	cmp	r6, #0
 800a54e:	da03      	bge.n	800a558 <_printf_i+0xc8>
 800a550:	232d      	movs	r3, #45	; 0x2d
 800a552:	4276      	negs	r6, r6
 800a554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a558:	485e      	ldr	r0, [pc, #376]	; (800a6d4 <_printf_i+0x244>)
 800a55a:	230a      	movs	r3, #10
 800a55c:	e019      	b.n	800a592 <_printf_i+0x102>
 800a55e:	680e      	ldr	r6, [r1, #0]
 800a560:	602b      	str	r3, [r5, #0]
 800a562:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a566:	bf18      	it	ne
 800a568:	b236      	sxthne	r6, r6
 800a56a:	e7ef      	b.n	800a54c <_printf_i+0xbc>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	6820      	ldr	r0, [r4, #0]
 800a570:	1d19      	adds	r1, r3, #4
 800a572:	6029      	str	r1, [r5, #0]
 800a574:	0601      	lsls	r1, r0, #24
 800a576:	d501      	bpl.n	800a57c <_printf_i+0xec>
 800a578:	681e      	ldr	r6, [r3, #0]
 800a57a:	e002      	b.n	800a582 <_printf_i+0xf2>
 800a57c:	0646      	lsls	r6, r0, #25
 800a57e:	d5fb      	bpl.n	800a578 <_printf_i+0xe8>
 800a580:	881e      	ldrh	r6, [r3, #0]
 800a582:	4854      	ldr	r0, [pc, #336]	; (800a6d4 <_printf_i+0x244>)
 800a584:	2f6f      	cmp	r7, #111	; 0x6f
 800a586:	bf0c      	ite	eq
 800a588:	2308      	moveq	r3, #8
 800a58a:	230a      	movne	r3, #10
 800a58c:	2100      	movs	r1, #0
 800a58e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a592:	6865      	ldr	r5, [r4, #4]
 800a594:	60a5      	str	r5, [r4, #8]
 800a596:	2d00      	cmp	r5, #0
 800a598:	bfa2      	ittt	ge
 800a59a:	6821      	ldrge	r1, [r4, #0]
 800a59c:	f021 0104 	bicge.w	r1, r1, #4
 800a5a0:	6021      	strge	r1, [r4, #0]
 800a5a2:	b90e      	cbnz	r6, 800a5a8 <_printf_i+0x118>
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	d04d      	beq.n	800a644 <_printf_i+0x1b4>
 800a5a8:	4615      	mov	r5, r2
 800a5aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5ae:	fb03 6711 	mls	r7, r3, r1, r6
 800a5b2:	5dc7      	ldrb	r7, [r0, r7]
 800a5b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5b8:	4637      	mov	r7, r6
 800a5ba:	42bb      	cmp	r3, r7
 800a5bc:	460e      	mov	r6, r1
 800a5be:	d9f4      	bls.n	800a5aa <_printf_i+0x11a>
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d10b      	bne.n	800a5dc <_printf_i+0x14c>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	07de      	lsls	r6, r3, #31
 800a5c8:	d508      	bpl.n	800a5dc <_printf_i+0x14c>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	6861      	ldr	r1, [r4, #4]
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	bfde      	ittt	le
 800a5d2:	2330      	movle	r3, #48	; 0x30
 800a5d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5dc:	1b52      	subs	r2, r2, r5
 800a5de:	6122      	str	r2, [r4, #16]
 800a5e0:	f8cd a000 	str.w	sl, [sp]
 800a5e4:	464b      	mov	r3, r9
 800a5e6:	aa03      	add	r2, sp, #12
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4640      	mov	r0, r8
 800a5ec:	f7ff fee2 	bl	800a3b4 <_printf_common>
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d14c      	bne.n	800a68e <_printf_i+0x1fe>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	b004      	add	sp, #16
 800a5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fe:	4835      	ldr	r0, [pc, #212]	; (800a6d4 <_printf_i+0x244>)
 800a600:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a604:	6829      	ldr	r1, [r5, #0]
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	f851 6b04 	ldr.w	r6, [r1], #4
 800a60c:	6029      	str	r1, [r5, #0]
 800a60e:	061d      	lsls	r5, r3, #24
 800a610:	d514      	bpl.n	800a63c <_printf_i+0x1ac>
 800a612:	07df      	lsls	r7, r3, #31
 800a614:	bf44      	itt	mi
 800a616:	f043 0320 	orrmi.w	r3, r3, #32
 800a61a:	6023      	strmi	r3, [r4, #0]
 800a61c:	b91e      	cbnz	r6, 800a626 <_printf_i+0x196>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	f023 0320 	bic.w	r3, r3, #32
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	2310      	movs	r3, #16
 800a628:	e7b0      	b.n	800a58c <_printf_i+0xfc>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	f043 0320 	orr.w	r3, r3, #32
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	2378      	movs	r3, #120	; 0x78
 800a634:	4828      	ldr	r0, [pc, #160]	; (800a6d8 <_printf_i+0x248>)
 800a636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a63a:	e7e3      	b.n	800a604 <_printf_i+0x174>
 800a63c:	0659      	lsls	r1, r3, #25
 800a63e:	bf48      	it	mi
 800a640:	b2b6      	uxthmi	r6, r6
 800a642:	e7e6      	b.n	800a612 <_printf_i+0x182>
 800a644:	4615      	mov	r5, r2
 800a646:	e7bb      	b.n	800a5c0 <_printf_i+0x130>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	6826      	ldr	r6, [r4, #0]
 800a64c:	6961      	ldr	r1, [r4, #20]
 800a64e:	1d18      	adds	r0, r3, #4
 800a650:	6028      	str	r0, [r5, #0]
 800a652:	0635      	lsls	r5, r6, #24
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	d501      	bpl.n	800a65c <_printf_i+0x1cc>
 800a658:	6019      	str	r1, [r3, #0]
 800a65a:	e002      	b.n	800a662 <_printf_i+0x1d2>
 800a65c:	0670      	lsls	r0, r6, #25
 800a65e:	d5fb      	bpl.n	800a658 <_printf_i+0x1c8>
 800a660:	8019      	strh	r1, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	4615      	mov	r5, r2
 800a668:	e7ba      	b.n	800a5e0 <_printf_i+0x150>
 800a66a:	682b      	ldr	r3, [r5, #0]
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	602a      	str	r2, [r5, #0]
 800a670:	681d      	ldr	r5, [r3, #0]
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	2100      	movs	r1, #0
 800a676:	4628      	mov	r0, r5
 800a678:	f7f5 fdd2 	bl	8000220 <memchr>
 800a67c:	b108      	cbz	r0, 800a682 <_printf_i+0x1f2>
 800a67e:	1b40      	subs	r0, r0, r5
 800a680:	6060      	str	r0, [r4, #4]
 800a682:	6863      	ldr	r3, [r4, #4]
 800a684:	6123      	str	r3, [r4, #16]
 800a686:	2300      	movs	r3, #0
 800a688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a68c:	e7a8      	b.n	800a5e0 <_printf_i+0x150>
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	462a      	mov	r2, r5
 800a692:	4649      	mov	r1, r9
 800a694:	4640      	mov	r0, r8
 800a696:	47d0      	blx	sl
 800a698:	3001      	adds	r0, #1
 800a69a:	d0ab      	beq.n	800a5f4 <_printf_i+0x164>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	079b      	lsls	r3, r3, #30
 800a6a0:	d413      	bmi.n	800a6ca <_printf_i+0x23a>
 800a6a2:	68e0      	ldr	r0, [r4, #12]
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	4298      	cmp	r0, r3
 800a6a8:	bfb8      	it	lt
 800a6aa:	4618      	movlt	r0, r3
 800a6ac:	e7a4      	b.n	800a5f8 <_printf_i+0x168>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	47d0      	blx	sl
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d09b      	beq.n	800a5f4 <_printf_i+0x164>
 800a6bc:	3501      	adds	r5, #1
 800a6be:	68e3      	ldr	r3, [r4, #12]
 800a6c0:	9903      	ldr	r1, [sp, #12]
 800a6c2:	1a5b      	subs	r3, r3, r1
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dcf2      	bgt.n	800a6ae <_printf_i+0x21e>
 800a6c8:	e7eb      	b.n	800a6a2 <_printf_i+0x212>
 800a6ca:	2500      	movs	r5, #0
 800a6cc:	f104 0619 	add.w	r6, r4, #25
 800a6d0:	e7f5      	b.n	800a6be <_printf_i+0x22e>
 800a6d2:	bf00      	nop
 800a6d4:	0800a9b1 	.word	0x0800a9b1
 800a6d8:	0800a9c2 	.word	0x0800a9c2

0800a6dc <memmove>:
 800a6dc:	4288      	cmp	r0, r1
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	eb01 0402 	add.w	r4, r1, r2
 800a6e4:	d902      	bls.n	800a6ec <memmove+0x10>
 800a6e6:	4284      	cmp	r4, r0
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	d807      	bhi.n	800a6fc <memmove+0x20>
 800a6ec:	1e43      	subs	r3, r0, #1
 800a6ee:	42a1      	cmp	r1, r4
 800a6f0:	d008      	beq.n	800a704 <memmove+0x28>
 800a6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6fa:	e7f8      	b.n	800a6ee <memmove+0x12>
 800a6fc:	4402      	add	r2, r0
 800a6fe:	4601      	mov	r1, r0
 800a700:	428a      	cmp	r2, r1
 800a702:	d100      	bne.n	800a706 <memmove+0x2a>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a70a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a70e:	e7f7      	b.n	800a700 <memmove+0x24>

0800a710 <_realloc_r>:
 800a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a714:	4680      	mov	r8, r0
 800a716:	4614      	mov	r4, r2
 800a718:	460e      	mov	r6, r1
 800a71a:	b921      	cbnz	r1, 800a726 <_realloc_r+0x16>
 800a71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a720:	4611      	mov	r1, r2
 800a722:	f7ff bb85 	b.w	8009e30 <_malloc_r>
 800a726:	b92a      	cbnz	r2, 800a734 <_realloc_r+0x24>
 800a728:	f7ff fc9c 	bl	800a064 <_free_r>
 800a72c:	4625      	mov	r5, r4
 800a72e:	4628      	mov	r0, r5
 800a730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a734:	f000 f81b 	bl	800a76e <_malloc_usable_size_r>
 800a738:	4284      	cmp	r4, r0
 800a73a:	4607      	mov	r7, r0
 800a73c:	d802      	bhi.n	800a744 <_realloc_r+0x34>
 800a73e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a742:	d812      	bhi.n	800a76a <_realloc_r+0x5a>
 800a744:	4621      	mov	r1, r4
 800a746:	4640      	mov	r0, r8
 800a748:	f7ff fb72 	bl	8009e30 <_malloc_r>
 800a74c:	4605      	mov	r5, r0
 800a74e:	2800      	cmp	r0, #0
 800a750:	d0ed      	beq.n	800a72e <_realloc_r+0x1e>
 800a752:	42bc      	cmp	r4, r7
 800a754:	4622      	mov	r2, r4
 800a756:	4631      	mov	r1, r6
 800a758:	bf28      	it	cs
 800a75a:	463a      	movcs	r2, r7
 800a75c:	f7ff fb32 	bl	8009dc4 <memcpy>
 800a760:	4631      	mov	r1, r6
 800a762:	4640      	mov	r0, r8
 800a764:	f7ff fc7e 	bl	800a064 <_free_r>
 800a768:	e7e1      	b.n	800a72e <_realloc_r+0x1e>
 800a76a:	4635      	mov	r5, r6
 800a76c:	e7df      	b.n	800a72e <_realloc_r+0x1e>

0800a76e <_malloc_usable_size_r>:
 800a76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a772:	1f18      	subs	r0, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfbc      	itt	lt
 800a778:	580b      	ldrlt	r3, [r1, r0]
 800a77a:	18c0      	addlt	r0, r0, r3
 800a77c:	4770      	bx	lr
	...

0800a780 <_init>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	bf00      	nop
 800a784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a786:	bc08      	pop	{r3}
 800a788:	469e      	mov	lr, r3
 800a78a:	4770      	bx	lr

0800a78c <_fini>:
 800a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78e:	bf00      	nop
 800a790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a792:	bc08      	pop	{r3}
 800a794:	469e      	mov	lr, r3
 800a796:	4770      	bx	lr
