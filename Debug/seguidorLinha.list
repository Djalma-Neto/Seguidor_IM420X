
seguidorLinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c424  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800c608  0800c608  0001c608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae0  0800cae0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cae0  0800cae0  0001cae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae8  0800cae8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800caec  0800caec  0001caec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800caf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025e4  20000080  0800cb70  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002664  0800cb70  00022664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f874  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e15  00000000  00000000  0003f924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00043740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00044ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029936  00000000  00000000  00046718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0d2  00000000  00000000  0007004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001076e5  00000000  00000000  0008c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007394  00000000  00000000  00193858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c5ec 	.word	0x0800c5ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800c5ec 	.word	0x0800c5ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_FREERTOS_Init+0x78>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	2001      	movs	r0, #1
 8000f96:	f006 fa04 	bl	80073a2 <osSemaphoreNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_FREERTOS_Init+0x7c>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <MX_FREERTOS_Init+0x80>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f006 f9fc 	bl	80073a2 <osSemaphoreNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_FREERTOS_Init+0x84>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_FREERTOS_Init+0x88>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_FREERTOS_Init+0x8c>)
 8000fb6:	f006 f947 	bl	8007248 <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_FREERTOS_Init+0x90>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <MX_FREERTOS_Init+0x94>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_FREERTOS_Init+0x98>)
 8000fc6:	f006 f93f 	bl	8007248 <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a16      	ldr	r2, [pc, #88]	; (8001028 <MX_FREERTOS_Init+0x9c>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_FREERTOS_Init+0xa0>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <MX_FREERTOS_Init+0xa4>)
 8000fd6:	f006 f937 	bl	8007248 <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <MX_FREERTOS_Init+0xa8>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <MX_FREERTOS_Init+0xac>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <MX_FREERTOS_Init+0xb0>)
 8000fe6:	f006 f92f 	bl	8007248 <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <MX_FREERTOS_Init+0xb4>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <MX_FREERTOS_Init+0xb8>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_FREERTOS_Init+0xbc>)
 8000ff6:	f006 f927 	bl	8007248 <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <MX_FREERTOS_Init+0xc0>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800c7e0 	.word	0x0800c7e0
 8001008:	20000160 	.word	0x20000160
 800100c:	0800c7f0 	.word	0x0800c7f0
 8001010:	20000164 	.word	0x20000164
 8001014:	0800c72c 	.word	0x0800c72c
 8001018:	08001051 	.word	0x08001051
 800101c:	2000014c 	.word	0x2000014c
 8001020:	0800c750 	.word	0x0800c750
 8001024:	080010a1 	.word	0x080010a1
 8001028:	20000150 	.word	0x20000150
 800102c:	0800c774 	.word	0x0800c774
 8001030:	0800134d 	.word	0x0800134d
 8001034:	20000154 	.word	0x20000154
 8001038:	0800c798 	.word	0x0800c798
 800103c:	08001569 	.word	0x08001569
 8001040:	20000158 	.word	0x20000158
 8001044:	0800c7bc 	.word	0x0800c7bc
 8001048:	08001751 	.word	0x08001751
 800104c:	2000015c 	.word	0x2000015c

08001050 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001058:	2108      	movs	r1, #8
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <FunctionUltrassom+0x4c>)
 800105c:	f003 fc76 	bl	800494c <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <FunctionUltrassom+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <FunctionUltrassom+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0208 	orr.w	r2, r2, #8
 800106e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f002 f903 	bl	8003284 <HAL_GPIO_WritePin>
		osDelay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f006 f974 	bl	800736c <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f002 f8f9 	bl	8003284 <HAL_GPIO_WritePin>
		osDelay(500);
 8001092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001096:	f006 f969 	bl	800736c <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 800109a:	e7e1      	b.n	8001060 <FunctionUltrassom+0x10>
 800109c:	200001ac 	.word	0x200001ac

080010a0 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	; 0x48
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80010a8:	4b95      	ldr	r3, [pc, #596]	; (8001300 <FunctionComunica+0x260>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	21c8      	movs	r1, #200	; 0xc8
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 fa00 	bl	80074b4 <osSemaphoreAcquire>

	  /*
	   * Captura de valor vindo do terminal remoto bluetooth podem=ndo ser "M", "O" ou "V"
	   * Sendo "M" RPS de cada roda, "O" dados da odometria e "V" deslocamento em m/s de cada roda
	   */
	  HAL_UART_Receive(&huart1, (uint8_t *)&cData, sizeof(cData),100);
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	4992      	ldr	r1, [pc, #584]	; (8001304 <FunctionComunica+0x264>)
 80010ba:	4893      	ldr	r0, [pc, #588]	; (8001308 <FunctionComunica+0x268>)
 80010bc:	f005 f9be 	bl	800643c <HAL_UART_Receive>
	  if(uiBloqueado){
 80010c0:	4b92      	ldr	r3, [pc, #584]	; (800130c <FunctionComunica+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <FunctionComunica+0x70>
		  int dist1 = (int)fDistancia;
 80010c8:	4b91      	ldr	r3, [pc, #580]	; (8001310 <FunctionComunica+0x270>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 3a90 	vmov	r3, s15
 80010d6:	60fb      	str	r3, [r7, #12]
		  int dist2 = (fDistancia-(int)fDistancia)*100;
 80010d8:	4b8d      	ldr	r3, [pc, #564]	; (8001310 <FunctionComunica+0x270>)
 80010da:	ed93 7a00 	vldr	s14, [r3]
 80010de:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <FunctionComunica+0x270>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001314 <FunctionComunica+0x274>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	60bb      	str	r3, [r7, #8]

		  sprintf(cMostrar,"Blockeado: %d.%02d \r \n ",dist1,dist2);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4984      	ldr	r1, [pc, #528]	; (8001318 <FunctionComunica+0x278>)
 8001108:	4884      	ldr	r0, [pc, #528]	; (800131c <FunctionComunica+0x27c>)
 800110a:	f008 ff5b 	bl	8009fc4 <siprintf>
 800110e:	e0e2      	b.n	80012d6 <FunctionComunica+0x236>
	  } else if(!uiStart){
 8001110:	4b83      	ldr	r3, [pc, #524]	; (8001320 <FunctionComunica+0x280>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <FunctionComunica+0x82>
		  sprintf(cMostrar,"Aguardando Start!! \r \n ");
 8001118:	4982      	ldr	r1, [pc, #520]	; (8001324 <FunctionComunica+0x284>)
 800111a:	4880      	ldr	r0, [pc, #512]	; (800131c <FunctionComunica+0x27c>)
 800111c:	f008 ff52 	bl	8009fc4 <siprintf>
 8001120:	e0d9      	b.n	80012d6 <FunctionComunica+0x236>
	  } else{
		  if(cData == 'O' || cData == 'o'){
 8001122:	4b78      	ldr	r3, [pc, #480]	; (8001304 <FunctionComunica+0x264>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b4f      	cmp	r3, #79	; 0x4f
 8001128:	d003      	beq.n	8001132 <FunctionComunica+0x92>
 800112a:	4b76      	ldr	r3, [pc, #472]	; (8001304 <FunctionComunica+0x264>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b6f      	cmp	r3, #111	; 0x6f
 8001130:	d123      	bne.n	800117a <FunctionComunica+0xda>
			  int valor1 = (int)fDistanciaO;
 8001132:	4b7d      	ldr	r3, [pc, #500]	; (8001328 <FunctionComunica+0x288>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113c:	ee17 3a90 	vmov	r3, s15
 8001140:	617b      	str	r3, [r7, #20]
			  int valor2 = (fDistanciaO-(int)fDistanciaO)*100;
 8001142:	4b79      	ldr	r3, [pc, #484]	; (8001328 <FunctionComunica+0x288>)
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	4b77      	ldr	r3, [pc, #476]	; (8001328 <FunctionComunica+0x288>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001314 <FunctionComunica+0x274>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 3a90 	vmov	r3, s15
 800116a:	613b      	str	r3, [r7, #16]

			  sprintf(cMostrar,"Distancia Percorrida: %d.%02dm \r \n ",valor1,valor2);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	496e      	ldr	r1, [pc, #440]	; (800132c <FunctionComunica+0x28c>)
 8001172:	486a      	ldr	r0, [pc, #424]	; (800131c <FunctionComunica+0x27c>)
 8001174:	f008 ff26 	bl	8009fc4 <siprintf>
		  if(cData == 'O' || cData == 'o'){
 8001178:	e0ad      	b.n	80012d6 <FunctionComunica+0x236>
		  }else if(cData == 'V' || cData == 'v'){
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <FunctionComunica+0x264>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b56      	cmp	r3, #86	; 0x56
 8001180:	d003      	beq.n	800118a <FunctionComunica+0xea>
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <FunctionComunica+0x264>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b76      	cmp	r3, #118	; 0x76
 8001188:	d144      	bne.n	8001214 <FunctionComunica+0x174>
			  int valor1 = (int)fWE;
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <FunctionComunica+0x290>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
			  int valor2 = (fWE-(int)fWE)*100;
 800119a:	4b65      	ldr	r3, [pc, #404]	; (8001330 <FunctionComunica+0x290>)
 800119c:	ed93 7a00 	vldr	s14, [r3]
 80011a0:	4b63      	ldr	r3, [pc, #396]	; (8001330 <FunctionComunica+0x290>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001314 <FunctionComunica+0x274>
 80011b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011be:	ee17 3a90 	vmov	r3, s15
 80011c2:	623b      	str	r3, [r7, #32]

			  int valor3 = (int)fWD;
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <FunctionComunica+0x294>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	61fb      	str	r3, [r7, #28]
			  int valor4 = (fWD-(int)fWD)*100;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <FunctionComunica+0x294>)
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	4b56      	ldr	r3, [pc, #344]	; (8001334 <FunctionComunica+0x294>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001314 <FunctionComunica+0x274>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f8:	ee17 3a90 	vmov	r3, s15
 80011fc:	61bb      	str	r3, [r7, #24]

			  sprintf(cMostrar,"MotorE: %d.%02d m/s -- MotorD: %d.%02d m/s \r \n ",valor1,valor2,valor3,valor4);
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120a:	494b      	ldr	r1, [pc, #300]	; (8001338 <FunctionComunica+0x298>)
 800120c:	4843      	ldr	r0, [pc, #268]	; (800131c <FunctionComunica+0x27c>)
 800120e:	f008 fed9 	bl	8009fc4 <siprintf>
		  }else if(cData == 'V' || cData == 'v'){
 8001212:	e060      	b.n	80012d6 <FunctionComunica+0x236>
		  }else{
			  cData = 'M';
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <FunctionComunica+0x264>)
 8001216:	224d      	movs	r2, #77	; 0x4d
 8001218:	701a      	strb	r2, [r3, #0]
			  float valE = ((float)ulPulsesE/FUROS)*10;
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <FunctionComunica+0x29c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001226:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800122a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			  float valD = ((float)ulPulsesD/FUROS)*10;
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <FunctionComunica+0x2a0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001246:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

			  int valor1 = (int)valE;
 800125a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800125e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001262:	ee17 3a90 	vmov	r3, s15
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
			  int valor2 = (valE-(int)valE)*100;
 8001268:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001314 <FunctionComunica+0x274>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001288:	ee17 3a90 	vmov	r3, s15
 800128c:	633b      	str	r3, [r7, #48]	; 0x30

			  int valor3 = (int)valD;
 800128e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001296:	ee17 3a90 	vmov	r3, s15
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
			  int valor4 = (valD-(int)valD)*100;
 800129c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001314 <FunctionComunica+0x274>
 80012b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012bc:	ee17 3a90 	vmov	r3, s15
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28

			  sprintf(cMostrar,"RPS_E: %d.%02d -- RPS_D: %d.%02d \r \n ",valor1,valor2,valor3,valor4);
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ce:	491d      	ldr	r1, [pc, #116]	; (8001344 <FunctionComunica+0x2a4>)
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <FunctionComunica+0x27c>)
 80012d2:	f008 fe77 	bl	8009fc4 <siprintf>
		  }
	  }

	  /*transmite a informação via UART e via BlueTooth*/
	  HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	2264      	movs	r2, #100	; 0x64
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <FunctionComunica+0x27c>)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <FunctionComunica+0x268>)
 80012de:	f005 f817 	bl	8006310 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <FunctionComunica+0x27c>)
 80012e8:	4817      	ldr	r0, [pc, #92]	; (8001348 <FunctionComunica+0x2a8>)
 80012ea:	f005 f811 	bl	8006310 <HAL_UART_Transmit>

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <FunctionComunica+0x260>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f930 	bl	8007558 <osSemaphoreRelease>
	  osDelay(100);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f006 f837 	bl	800736c <osDelay>
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80012fe:	e6d3      	b.n	80010a8 <FunctionComunica+0x8>
 8001300:	20000164 	.word	0x20000164
 8001304:	20000008 	.word	0x20000008
 8001308:	200003b8 	.word	0x200003b8
 800130c:	200000e0 	.word	0x200000e0
 8001310:	200000a8 	.word	0x200000a8
 8001314:	42c80000 	.word	0x42c80000
 8001318:	0800c668 	.word	0x0800c668
 800131c:	200000e8 	.word	0x200000e8
 8001320:	200000dc 	.word	0x200000dc
 8001324:	0800c680 	.word	0x0800c680
 8001328:	200000c8 	.word	0x200000c8
 800132c:	0800c698 	.word	0x0800c698
 8001330:	200000d0 	.word	0x200000d0
 8001334:	200000d8 	.word	0x200000d8
 8001338:	0800c6bc 	.word	0x0800c6bc
 800133c:	200000cc 	.word	0x200000cc
 8001340:	200000d4 	.word	0x200000d4
 8001344:	0800c6ec 	.word	0x0800c6ec
 8001348:	20000328 	.word	0x20000328

0800134c <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
	  /*Faz a leitura dos dados dos sensores*/
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135c:	f001 ff7a 	bl	8003254 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8001364:	2120      	movs	r1, #32
 8001366:	4877      	ldr	r0, [pc, #476]	; (8001544 <FunctionSeguidor+0x1f8>)
 8001368:	f001 ff74 	bl	8003254 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8001370:	2140      	movs	r1, #64	; 0x40
 8001372:	4874      	ldr	r0, [pc, #464]	; (8001544 <FunctionSeguidor+0x1f8>)
 8001374:	f001 ff6e 	bl	8003254 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 800137c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001380:	4870      	ldr	r0, [pc, #448]	; (8001544 <FunctionSeguidor+0x1f8>)
 8001382:	f001 ff67 	bl	8003254 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800138a:	4b6f      	ldr	r3, [pc, #444]	; (8001548 <FunctionSeguidor+0x1fc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	21c8      	movs	r1, #200	; 0xc8
 8001390:	4618      	mov	r0, r3
 8001392:	f006 f88f 	bl	80074b4 <osSemaphoreAcquire>


    if(uiBloqueado){/*caso blockeado...*/
 8001396:	4b6d      	ldr	r3, [pc, #436]	; (800154c <FunctionSeguidor+0x200>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d016      	beq.n	80013cc <FunctionSeguidor+0x80>
    	fWAngularD = 0;
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <FunctionSeguidor+0x204>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <FunctionSeguidor+0x208>)
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2104      	movs	r1, #4
 80013b2:	4869      	ldr	r0, [pc, #420]	; (8001558 <FunctionSeguidor+0x20c>)
 80013b4:	f001 ff66 	bl	8003284 <HAL_GPIO_WritePin>
		osDelay(500);
 80013b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013bc:	f005 ffd6 	bl	800736c <osDelay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2104      	movs	r1, #4
 80013c4:	4864      	ldr	r0, [pc, #400]	; (8001558 <FunctionSeguidor+0x20c>)
 80013c6:	f001 ff5d 	bl	8003284 <HAL_GPIO_WritePin>
 80013ca:	e0b1      	b.n	8001530 <FunctionSeguidor+0x1e4>
    }else if(uiBTN){/*caso BTN start pressionado...*/
 80013cc:	7b3b      	ldrb	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d027      	beq.n	8001422 <FunctionSeguidor+0xd6>
    	uiStart = uiStart?0:1;
 80013d2:	4b62      	ldr	r3, [pc, #392]	; (800155c <FunctionSeguidor+0x210>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf0c      	ite	eq
 80013da:	2301      	moveq	r3, #1
 80013dc:	2300      	movne	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b5e      	ldr	r3, [pc, #376]	; (800155c <FunctionSeguidor+0x210>)
 80013e4:	601a      	str	r2, [r3, #0]
    	uiCountSeguidor = 0;
 80013e6:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <FunctionSeguidor+0x214>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
    	fWAngularD = 0;
 80013ec:	4b58      	ldr	r3, [pc, #352]	; (8001550 <FunctionSeguidor+0x204>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
    	fWAngularE = 0;
 80013f4:	4b57      	ldr	r3, [pc, #348]	; (8001554 <FunctionSeguidor+0x208>)
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2104      	movs	r1, #4
 8001400:	4855      	ldr	r0, [pc, #340]	; (8001558 <FunctionSeguidor+0x20c>)
 8001402:	f001 ff3f 	bl	8003284 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140a:	f005 ffaf 	bl	800736c <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	4851      	ldr	r0, [pc, #324]	; (8001558 <FunctionSeguidor+0x20c>)
 8001414:	f001 ff36 	bl	8003284 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141c:	f005 ffa6 	bl	800736c <osDelay>
 8001420:	e086      	b.n	8001530 <FunctionSeguidor+0x1e4>
    }else if(uiStart && uiCountSeguidor < 50){/*caso start pressionado e o veículo esteja na linha...*/
 8001422:	4b4e      	ldr	r3, [pc, #312]	; (800155c <FunctionSeguidor+0x210>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d078      	beq.n	800151c <FunctionSeguidor+0x1d0>
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <FunctionSeguidor+0x214>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b31      	cmp	r3, #49	; 0x31
 8001430:	d874      	bhi.n	800151c <FunctionSeguidor+0x1d0>
    	if(uiS2 && uiS3 && !uiS4){/*caso linha no sensor direito...*/
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d011      	beq.n	800145c <FunctionSeguidor+0x110>
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00e      	beq.n	800145c <FunctionSeguidor+0x110>
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <FunctionSeguidor+0x110>
    		uiCountSeguidor = 0;
 8001444:	4b46      	ldr	r3, [pc, #280]	; (8001560 <FunctionSeguidor+0x214>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
			fWAngularE = fVelocidade;
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <FunctionSeguidor+0x218>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a41      	ldr	r2, [pc, #260]	; (8001554 <FunctionSeguidor+0x208>)
 8001450:	6013      	str	r3, [r2, #0]
			fWAngularD = 0;
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <FunctionSeguidor+0x204>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e050      	b.n	80014fe <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && uiS3 && uiS4){/*caso linha no sensor esquerdo...*/
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d111      	bne.n	8001486 <FunctionSeguidor+0x13a>
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00e      	beq.n	8001486 <FunctionSeguidor+0x13a>
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <FunctionSeguidor+0x13a>
			uiCountSeguidor = 0;
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <FunctionSeguidor+0x214>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <FunctionSeguidor+0x208>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <FunctionSeguidor+0x218>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a33      	ldr	r2, [pc, #204]	; (8001550 <FunctionSeguidor+0x204>)
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e03b      	b.n	80014fe <FunctionSeguidor+0x1b2>
		}else if(uiS2 && !uiS3 && uiS4){/*caso linha no sensor do meio...*/
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d011      	beq.n	80014b0 <FunctionSeguidor+0x164>
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10e      	bne.n	80014b0 <FunctionSeguidor+0x164>
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <FunctionSeguidor+0x164>
			uiCountSeguidor = 0;
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <FunctionSeguidor+0x214>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <FunctionSeguidor+0x218>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <FunctionSeguidor+0x204>)
 80014a4:	6013      	str	r3, [r2, #0]
			fWAngularE = fVelocidade;
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <FunctionSeguidor+0x218>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <FunctionSeguidor+0x208>)
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e026      	b.n	80014fe <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && !uiS3 && !uiS4){/*caso linha nos tres sensores(Fim de curso)...*/
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d123      	bne.n	80014fe <FunctionSeguidor+0x1b2>
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d120      	bne.n	80014fe <FunctionSeguidor+0x1b2>
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d11d      	bne.n	80014fe <FunctionSeguidor+0x1b2>
			uiCountSeguidor = 0;
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <FunctionSeguidor+0x214>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
			fWAngularD = 0;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <FunctionSeguidor+0x204>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <FunctionSeguidor+0x208>)
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
			uiStart = 0;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <FunctionSeguidor+0x210>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2104      	movs	r1, #4
 80014e2:	481d      	ldr	r0, [pc, #116]	; (8001558 <FunctionSeguidor+0x20c>)
 80014e4:	f001 fece 	bl	8003284 <HAL_GPIO_WritePin>
			osDelay(100);
 80014e8:	2064      	movs	r0, #100	; 0x64
 80014ea:	f005 ff3f 	bl	800736c <osDelay>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	4819      	ldr	r0, [pc, #100]	; (8001558 <FunctionSeguidor+0x20c>)
 80014f4:	f001 fec6 	bl	8003284 <HAL_GPIO_WritePin>
			osDelay(100);
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f005 ff37 	bl	800736c <osDelay>
		}
    	/*
    	 * Caso o veículo saia da linha ele permanece fazendo a ultima manobra de correção, enquanto não encontrar  a linha
    	 * o contador "uiCountSeguidor" irá incrementar e quando exceder o valor 50 o veículo ira para o modo blockeado
    	 */
    	if(uiS2 && uiS3 && uiS4){/*caso sensores fora da linha(fora da trajetória)...*/
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d014      	beq.n	800152e <FunctionSeguidor+0x1e2>
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d011      	beq.n	800152e <FunctionSeguidor+0x1e2>
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00e      	beq.n	800152e <FunctionSeguidor+0x1e2>
    		uiCountSeguidor++;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <FunctionSeguidor+0x214>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <FunctionSeguidor+0x214>)
 8001518:	6013      	str	r3, [r2, #0]
    	if(uiS2 && uiS3 && uiS4){/*caso sensores fora da linha(fora da trajetória)...*/
 800151a:	e008      	b.n	800152e <FunctionSeguidor+0x1e2>
		}
    }else{
    	if(uiCountSeguidor >= 50){
    		//uiBloqueado = 1;
    	}
    	fWAngularD = 0;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <FunctionSeguidor+0x204>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <FunctionSeguidor+0x208>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e000      	b.n	8001530 <FunctionSeguidor+0x1e4>
    	if(uiS2 && uiS3 && uiS4){/*caso sensores fora da linha(fora da trajetória)...*/
 800152e:	bf00      	nop
    }
    osDelay(100);
 8001530:	2064      	movs	r0, #100	; 0x64
 8001532:	f005 ff1b 	bl	800736c <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <FunctionSeguidor+0x1fc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f006 f80c 	bl	8007558 <osSemaphoreRelease>
  {
 8001540:	e708      	b.n	8001354 <FunctionSeguidor+0x8>
 8001542:	bf00      	nop
 8001544:	48000800 	.word	0x48000800
 8001548:	20000160 	.word	0x20000160
 800154c:	200000e0 	.word	0x200000e0
 8001550:	200000ac 	.word	0x200000ac
 8001554:	200000b0 	.word	0x200000b0
 8001558:	48000c00 	.word	0x48000c00
 800155c:	200000dc 	.word	0x200000dc
 8001560:	200000e4 	.word	0x200000e4
 8001564:	20000004 	.word	0x20000004

08001568 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b090      	sub	sp, #64	; 0x40
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */

	/*Iniciando o PWM*/
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001570:	2100      	movs	r1, #0
 8001572:	4869      	ldr	r0, [pc, #420]	; (8001718 <FunctionAtivarMotores+0x1b0>)
 8001574:	f003 f876 	bl	8004664 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001578:	2104      	movs	r1, #4
 800157a:	4867      	ldr	r0, [pc, #412]	; (8001718 <FunctionAtivarMotores+0x1b0>)
 800157c:	f003 f872 	bl	8004664 <HAL_TIM_PWM_Start>

	/*Iniciando o PID com os devidos ganhos*/
	sPID_D pid_D;
	sPID_E pid_E;

	pid_E.fKpE = 500;
 8001580:	4b66      	ldr	r3, [pc, #408]	; (800171c <FunctionAtivarMotores+0x1b4>)
 8001582:	60bb      	str	r3, [r7, #8]
	pid_E.fKiE = 10;
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <FunctionAtivarMotores+0x1b8>)
 8001586:	60fb      	str	r3, [r7, #12]
	pid_E.fKdE = 0.001;
 8001588:	4b66      	ldr	r3, [pc, #408]	; (8001724 <FunctionAtivarMotores+0x1bc>)
 800158a:	613b      	str	r3, [r7, #16]
	pid_E.fTsE = 100;
 800158c:	4b66      	ldr	r3, [pc, #408]	; (8001728 <FunctionAtivarMotores+0x1c0>)
 800158e:	617b      	str	r3, [r7, #20]
	pid_E.fOutminE = 0;
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
	pid_E.fOutmaxE = 100;
 8001596:	4b64      	ldr	r3, [pc, #400]	; (8001728 <FunctionAtivarMotores+0x1c0>)
 8001598:	61fb      	str	r3, [r7, #28]
	PID_init_E(&pid_E);
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fcf2 	bl	8001f88 <PID_init_E>

	pid_D.fKpD = 500;
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <FunctionAtivarMotores+0x1b4>)
 80015a6:	623b      	str	r3, [r7, #32]
	pid_D.fKiD = 10;
 80015a8:	4b5d      	ldr	r3, [pc, #372]	; (8001720 <FunctionAtivarMotores+0x1b8>)
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
	pid_D.fKdD = 0.001;
 80015ac:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <FunctionAtivarMotores+0x1bc>)
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
	pid_D.fTsD = 100;
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <FunctionAtivarMotores+0x1c0>)
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	pid_D.fOutminD = 0;
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
	pid_D.fOutmaxD = 100;
 80015ba:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <FunctionAtivarMotores+0x1c0>)
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
	PID_init_D(&pid_D);
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fcb2 	bl	8001f2c <PID_init_D>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <FunctionAtivarMotores+0x1c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	21c8      	movs	r1, #200	; 0xc8
 80015ce:	4618      	mov	r0, r3
 80015d0:	f005 ff70 	bl	80074b4 <osSemaphoreAcquire>

	  /*seta o IN1, IN2, IN3 e IN4 de forma que o veículo siga em frente*/
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f001 fe51 	bl	8003284 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f001 fe4a 	bl	8003284 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	484e      	ldr	r0, [pc, #312]	; (8001730 <FunctionAtivarMotores+0x1c8>)
 80015f6:	f001 fe45 	bl	8003284 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2140      	movs	r1, #64	; 0x40
 80015fe:	484d      	ldr	r0, [pc, #308]	; (8001734 <FunctionAtivarMotores+0x1cc>)
 8001600:	f001 fe40 	bl	8003284 <HAL_GPIO_WritePin>

	  /*caso os valores referentes à velocidade dos dois motores sejam "0" o veículo deve parar imediatamente*/
	  if(!fWAngularD && !fWAngularE){
 8001604:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <FunctionAtivarMotores+0x1d0>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	d11f      	bne.n	8001654 <FunctionAtivarMotores+0xec>
 8001614:	4b49      	ldr	r3, [pc, #292]	; (800173c <FunctionAtivarMotores+0x1d4>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001622:	d117      	bne.n	8001654 <FunctionAtivarMotores+0xec>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f001 fe29 	bl	8003284 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f001 fe22 	bl	8003284 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	483a      	ldr	r0, [pc, #232]	; (8001730 <FunctionAtivarMotores+0x1c8>)
 8001646:	f001 fe1d 	bl	8003284 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	4839      	ldr	r0, [pc, #228]	; (8001734 <FunctionAtivarMotores+0x1cc>)
 8001650:	f001 fe18 	bl	8003284 <HAL_GPIO_WritePin>
	  }

	  /*A função "PID_E" e "PID_D" retorna o valor PWM para cada motor de acordo com a realimentação vinda do encoder*/
	  float fVE = fWE*RAIO;
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <FunctionAtivarMotores+0x1d8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff95 	bl	8000588 <__aeabi_f2d>
 800165e:	a32c      	add	r3, pc, #176	; (adr r3, 8001710 <FunctionAtivarMotores+0x1a8>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe ffe8 	bl	8000638 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff faba 	bl	8000be8 <__aeabi_d2f>
 8001674:	4603      	mov	r3, r0
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float fVD = fWE*RAIO;
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <FunctionAtivarMotores+0x1d8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff83 	bl	8000588 <__aeabi_f2d>
 8001682:	a323      	add	r3, pc, #140	; (adr r3, 8001710 <FunctionAtivarMotores+0x1a8>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ffd6 	bl	8000638 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff faa8 	bl	8000be8 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
	  fPIDVal_E = PID_E(fVE, fWAngularE);
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <FunctionAtivarMotores+0x1d4>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eef0 0a67 	vmov.f32	s1, s15
 80016a6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80016aa:	f000 fc9b 	bl	8001fe4 <PID_E>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <FunctionAtivarMotores+0x1dc>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
	  fPIDVal_D = PID_D(fVD, fWAngularD);
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <FunctionAtivarMotores+0x1d0>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eef0 0a67 	vmov.f32	s1, s15
 80016c2:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80016c6:	f000 fd17 	bl	80020f8 <PID_D>
 80016ca:	eef0 7a40 	vmov.f32	s15, s0
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <FunctionAtivarMotores+0x1e0>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]

	  htim3.Instance->CCR2 = fPIDVal_E;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <FunctionAtivarMotores+0x1dc>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <FunctionAtivarMotores+0x1b0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 2a90 	vmov	r2, s15
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
	  htim3.Instance->CCR1 = fPIDVal_D;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <FunctionAtivarMotores+0x1e0>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <FunctionAtivarMotores+0x1b0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 2a90 	vmov	r2, s15
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34

	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <FunctionAtivarMotores+0x1c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f005 ff29 	bl	8007558 <osSemaphoreRelease>
	  osDelay(100);
 8001706:	2064      	movs	r0, #100	; 0x64
 8001708:	f005 fe30 	bl	800736c <osDelay>
  {
 800170c:	e75c      	b.n	80015c8 <FunctionAtivarMotores+0x60>
 800170e:	bf00      	nop
 8001710:	0a3d70a4 	.word	0x0a3d70a4
 8001714:	3fa0a3d7 	.word	0x3fa0a3d7
 8001718:	20000244 	.word	0x20000244
 800171c:	43fa0000 	.word	0x43fa0000
 8001720:	41200000 	.word	0x41200000
 8001724:	3a83126f 	.word	0x3a83126f
 8001728:	42c80000 	.word	0x42c80000
 800172c:	20000160 	.word	0x20000160
 8001730:	48000800 	.word	0x48000800
 8001734:	48000400 	.word	0x48000400
 8001738:	200000ac 	.word	0x200000ac
 800173c:	200000b0 	.word	0x200000b0
 8001740:	200000d0 	.word	0x200000d0
 8001744:	200000b8 	.word	0x200000b8
 8001748:	200000b4 	.word	0x200000b4
 800174c:	00000000 	.word	0x00000000

08001750 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 8001750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_Base_Start_IT(&htim6);
 800175a:	489b      	ldr	r0, [pc, #620]	; (80019c8 <FunctionOdometria+0x278>)
 800175c:	f002 feb2 	bl	80044c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8001760:	489a      	ldr	r0, [pc, #616]	; (80019cc <FunctionOdometria+0x27c>)
 8001762:	f002 fe3f 	bl	80043e4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <FunctionOdometria+0x280>)
 8001768:	f002 fe3c 	bl	80043e4 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 100);
 800176c:	4b99      	ldr	r3, [pc, #612]	; (80019d4 <FunctionOdometria+0x284>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2164      	movs	r1, #100	; 0x64
 8001772:	4618      	mov	r0, r3
 8001774:	f005 fe9e 	bl	80074b4 <osSemaphoreAcquire>

	  /* Primeiro é calculado a Velocidade de cada roda em m/s */
	  float fVE = fWE*RAIO;
 8001778:	4b97      	ldr	r3, [pc, #604]	; (80019d8 <FunctionOdometria+0x288>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe ff03 	bl	8000588 <__aeabi_f2d>
 8001782:	a389      	add	r3, pc, #548	; (adr r3, 80019a8 <FunctionOdometria+0x258>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff56 	bl	8000638 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fa28 	bl	8000be8 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]
	  float fVD = fWE*RAIO;
 800179c:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <FunctionOdometria+0x288>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fef1 	bl	8000588 <__aeabi_f2d>
 80017a6:	a380      	add	r3, pc, #512	; (adr r3, 80019a8 <FunctionOdometria+0x258>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ff44 	bl	8000638 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff fa16 	bl	8000be8 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	60bb      	str	r3, [r7, #8]

	  /*Posteriormente é calculado o valor Teta*/
	  fTeta = fTeta + ((fVD-fVE)/(COMPRIMENTO+LARGURA))*fTs;
 80017c0:	4b86      	ldr	r3, [pc, #536]	; (80019dc <FunctionOdometria+0x28c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fedf 	bl	8000588 <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	ee17 0a90 	vmov	r0, s15
 80017de:	f7fe fed3 	bl	8000588 <__aeabi_f2d>
 80017e2:	a373      	add	r3, pc, #460	; (adr r3, 80019b0 <FunctionOdometria+0x260>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7ff f850 	bl	800088c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	a370      	add	r3, pc, #448	; (adr r3, 80019b8 <FunctionOdometria+0x268>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe ff1d 	bl	8000638 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4620      	mov	r0, r4
 8001804:	4629      	mov	r1, r5
 8001806:	f7fe fd61 	bl	80002cc <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f9e9 	bl	8000be8 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	4a70      	ldr	r2, [pc, #448]	; (80019dc <FunctionOdometria+0x28c>)
 800181a:	6013      	str	r3, [r2, #0]

	  /*Assim é calculado o valor de deslocamento em X e Y*/
	  fX = fX + ((fVD+fVE)/2)*cos(fTeta)*fTs;
 800181c:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <FunctionOdometria+0x290>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe feb1 	bl	8000588 <__aeabi_f2d>
 8001826:	4604      	mov	r4, r0
 8001828:	460d      	mov	r5, r1
 800182a:	ed97 7a02 	vldr	s14, [r7, #8]
 800182e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800183a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800183e:	ee16 0a90 	vmov	r0, s13
 8001842:	f7fe fea1 	bl	8000588 <__aeabi_f2d>
 8001846:	4680      	mov	r8, r0
 8001848:	4689      	mov	r9, r1
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <FunctionOdometria+0x28c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe9a 	bl	8000588 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	ec43 2b10 	vmov	d0, r2, r3
 800185c:	f008 ff6c 	bl	800a738 <cos>
 8001860:	ec53 2b10 	vmov	r2, r3, d0
 8001864:	4640      	mov	r0, r8
 8001866:	4649      	mov	r1, r9
 8001868:	f7fe fee6 	bl	8000638 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	a350      	add	r3, pc, #320	; (adr r3, 80019b8 <FunctionOdometria+0x268>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7fe fedd 	bl	8000638 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fd21 	bl	80002cc <__adddf3>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff f9a9 	bl	8000be8 <__aeabi_d2f>
 8001896:	4603      	mov	r3, r0
 8001898:	4a51      	ldr	r2, [pc, #324]	; (80019e0 <FunctionOdometria+0x290>)
 800189a:	6013      	str	r3, [r2, #0]
	  fY = fY + ((fVD+fVE)/2)*sin(fTeta)*fTs;
 800189c:	4b51      	ldr	r3, [pc, #324]	; (80019e4 <FunctionOdometria+0x294>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe71 	bl	8000588 <__aeabi_f2d>
 80018a6:	4604      	mov	r4, r0
 80018a8:	460d      	mov	r5, r1
 80018aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018be:	ee16 0a90 	vmov	r0, s13
 80018c2:	f7fe fe61 	bl	8000588 <__aeabi_f2d>
 80018c6:	4680      	mov	r8, r0
 80018c8:	4689      	mov	r9, r1
 80018ca:	4b44      	ldr	r3, [pc, #272]	; (80019dc <FunctionOdometria+0x28c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe5a 	bl	8000588 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	ec43 2b10 	vmov	d0, r2, r3
 80018dc:	f008 ff80 	bl	800a7e0 <sin>
 80018e0:	ec53 2b10 	vmov	r2, r3, d0
 80018e4:	4640      	mov	r0, r8
 80018e6:	4649      	mov	r1, r9
 80018e8:	f7fe fea6 	bl	8000638 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	a330      	add	r3, pc, #192	; (adr r3, 80019b8 <FunctionOdometria+0x268>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fe9d 	bl	8000638 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4620      	mov	r0, r4
 8001904:	4629      	mov	r1, r5
 8001906:	f7fe fce1 	bl	80002cc <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f969 	bl	8000be8 <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	4a32      	ldr	r2, [pc, #200]	; (80019e4 <FunctionOdometria+0x294>)
 800191a:	6013      	str	r3, [r2, #0]

	  /*a distancia é dada pela relação da raiz da doma dos quadrados de X e Y*/
	  fDistanciaO = (sqrt(pow(fX,2) + pow(fY,2)))/0.75;
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <FunctionOdometria+0x290>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe31 	bl	8000588 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80019c0 <FunctionOdometria+0x270>
 800192e:	ec43 2b10 	vmov	d0, r2, r3
 8001932:	f008 ffad 	bl	800a890 <pow>
 8001936:	ec55 4b10 	vmov	r4, r5, d0
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <FunctionOdometria+0x294>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe22 	bl	8000588 <__aeabi_f2d>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80019c0 <FunctionOdometria+0x270>
 800194c:	ec43 2b10 	vmov	d0, r2, r3
 8001950:	f008 ff9e 	bl	800a890 <pow>
 8001954:	ec53 2b10 	vmov	r2, r3, d0
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fcb6 	bl	80002cc <__adddf3>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	ec43 2b17 	vmov	d7, r2, r3
 8001968:	eeb0 0a47 	vmov.f32	s0, s14
 800196c:	eef0 0a67 	vmov.f32	s1, s15
 8001970:	f008 fffe 	bl	800a970 <sqrt>
 8001974:	ec51 0b10 	vmov	r0, r1, d0
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <FunctionOdometria+0x298>)
 800197e:	f7fe ff85 	bl	800088c <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f92d 	bl	8000be8 <__aeabi_d2f>
 800198e:	4603      	mov	r3, r0
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <FunctionOdometria+0x29c>)
 8001992:	6013      	str	r3, [r2, #0]
	  osSemaphoreRelease(SemaphoreComunicaHandle);
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <FunctionOdometria+0x284>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f005 fddd 	bl	8007558 <osSemaphoreRelease>
	  osDelay(100);
 800199e:	2064      	movs	r0, #100	; 0x64
 80019a0:	f005 fce4 	bl	800736c <osDelay>
  {
 80019a4:	e6e2      	b.n	800176c <FunctionOdometria+0x1c>
 80019a6:	bf00      	nop
 80019a8:	0a3d70a4 	.word	0x0a3d70a4
 80019ac:	3fa0a3d7 	.word	0x3fa0a3d7
 80019b0:	fbe76c8b 	.word	0xfbe76c8b
 80019b4:	3fc2f1a9 	.word	0x3fc2f1a9
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999
 80019c0:	00000000 	.word	0x00000000
 80019c4:	40000000 	.word	0x40000000
 80019c8:	200002dc 	.word	0x200002dc
 80019cc:	200001f8 	.word	0x200001f8
 80019d0:	20000290 	.word	0x20000290
 80019d4:	20000164 	.word	0x20000164
 80019d8:	200000d0 	.word	0x200000d0
 80019dc:	200000bc 	.word	0x200000bc
 80019e0:	200000c0 	.word	0x200000c0
 80019e4:	200000c4 	.word	0x200000c4
 80019e8:	3fe80000 	.word	0x3fe80000
 80019ec:	200000c8 	.word	0x200000c8

080019f0 <HAL_TIM_IC_CaptureCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/*interrupção para captura do ultrassônico*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	f040 80cb 	bne.w	8001b98 <HAL_TIM_IC_CaptureCallback+0x1a8>
		/*a interrupção é disparada na borda de subida onde pega o primeiro valor do timer*/
		if(uiIsFirst){
 8001a02:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01f      	beq.n	8001a4a <HAL_TIM_IC_CaptureCallback+0x5a>
			fDistancia = 0;
 8001a0a:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
			lValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001a12:	2108      	movs	r1, #8
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f003 fd2f 	bl	8005478 <HAL_TIM_ReadCapturedValue>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001a20:	601a      	str	r2, [r3, #0]
			/*
			 * Setando o "uiIsFirst" como "0" e forçando a captura da borda de descida, é esperado que
			 * na proxima interrupção seja pego o valor do timer referente ao tempo que o ECHO ficou em alta
			 */
			uiIsFirst=0;
 8001a22:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001a36:	621a      	str	r2, [r3, #32]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6a1a      	ldr	r2, [r3, #32]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a46:	621a      	str	r2, [r3, #32]
			uiIsFirst=1;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
		}
	}
}
 8001a48:	e0a6      	b.n	8001b98 <HAL_TIM_IC_CaptureCallback+0x1a8>
			lValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f003 fd13 	bl	8005478 <HAL_TIM_ReadCapturedValue>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001a58:	601a      	str	r2, [r3, #0]
			fDiferenca = (float)((unsigned)lValor2-(unsigned)lValor1);
 8001a5a:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a6e:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001a70:	edc3 7a00 	vstr	s15, [r3]
			fDistancia = ((fDiferenca/2)*0.0001)*340/2 < 100?((fDiferenca/2)*0.0001)*340/2 : fDistancia;
 8001a74:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a82:	ee16 0a90 	vmov	r0, s13
 8001a86:	f7fe fd7f 	bl	8000588 <__aeabi_f2d>
 8001a8a:	a345      	add	r3, pc, #276	; (adr r3, 8001ba0 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fdd2 	bl	8000638 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001aa2:	f7fe fdc9 	bl	8000638 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab6:	f7fe fee9 	bl	800088c <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001ac8:	f7ff f828 	bl	8000b1c <__aeabi_dcmplt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d02a      	beq.n	8001b28 <HAL_TIM_IC_CaptureCallback+0x138>
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001adc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ae0:	ee16 0a90 	vmov	r0, s13
 8001ae4:	f7fe fd50 	bl	8000588 <__aeabi_f2d>
 8001ae8:	a32d      	add	r3, pc, #180	; (adr r3, 8001ba0 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fda3 	bl	8000638 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001b00:	f7fe fd9a 	bl	8000638 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b14:	f7fe feba 	bl	800088c <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7ff f862 	bl	8000be8 <__aeabi_d2f>
 8001b24:	4603      	mov	r3, r0
 8001b26:	e001      	b.n	8001b2c <HAL_TIM_IC_CaptureCallback+0x13c>
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001b2e:	6013      	str	r3, [r2, #0]
			uiBloqueado = (fDistancia>0 && fDistancia<20) ? 1 : 0;
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	dd0b      	ble.n	8001b58 <HAL_TIM_IC_CaptureCallback+0x168>
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d501      	bpl.n	8001b58 <HAL_TIM_IC_CaptureCallback+0x168>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_TIM_IC_CaptureCallback+0x16a>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001b5e:	601a      	str	r2, [r3, #0]
			uiBloqueado = 0;
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
			uiIsFirst=1;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6a1a      	ldr	r2, [r3, #32]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001b7a:	621a      	str	r2, [r3, #32]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6a12      	ldr	r2, [r2, #32]
 8001b86:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0208 	bic.w	r2, r2, #8
 8001b96:	60da      	str	r2, [r3, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	eb1c432d 	.word	0xeb1c432d
 8001ba4:	3f1a36e2 	.word	0x3f1a36e2
 8001ba8:	200001ac 	.word	0x200001ac
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	200000a8 	.word	0x200000a8
 8001bb4:	2000009c 	.word	0x2000009c
 8001bb8:	200000a0 	.word	0x200000a0
 8001bbc:	200000a4 	.word	0x200000a4
 8001bc0:	40754000 	.word	0x40754000
 8001bc4:	40590000 	.word	0x40590000
 8001bc8:	200000e0 	.word	0x200000e0
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <HAL_TIM_PeriodElapsedCallback>:

/*interrupção a cada 100ms para calcular o valor do encoder que incrementa o contador do TIMER*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d164      	bne.n	8001caa <HAL_TIM_PeriodElapsedCallback+0xda>
		/*pegando os valores do contador do timer*/
		ulPulsesE = __HAL_TIM_GET_COUNTER(&htim2);
 8001be0:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001be8:	6013      	str	r3, [r2, #0]
		ulPulsesD = __HAL_TIM_GET_COUNTER(&htim5);
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bf2:	6013      	str	r3, [r2, #0]

		/*LED para verificar o correto funcionamento da interrupção*/
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f001 fb5b 	bl	80032b4 <HAL_GPIO_TogglePin>

		/*Calculando a velocidade em m/s de acordo ao "fTs" que é a taxa de amostragem*/
		fWE = (((float)ulPulsesE/FUROS)*2*PI)/fTs;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c0a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c16:	ee17 0a90 	vmov	r0, s15
 8001c1a:	f7fe fcb5 	bl	8000588 <__aeabi_f2d>
 8001c1e:	a326      	add	r3, pc, #152	; (adr r3, 8001cb8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fd08 	bl	8000638 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	a323      	add	r3, pc, #140	; (adr r3, 8001cc0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fe29 	bl	800088c <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ffd1 	bl	8000be8 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001c4a:	6013      	str	r3, [r2, #0]
		fWD = (((float)ulPulsesD/FUROS)*2*PI)/fTs;
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c58:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c64:	ee17 0a90 	vmov	r0, s15
 8001c68:	f7fe fc8e 	bl	8000588 <__aeabi_f2d>
 8001c6c:	a312      	add	r3, pc, #72	; (adr r3, 8001cb8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fce1 	bl	8000638 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	a310      	add	r3, pc, #64	; (adr r3, 8001cc0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe fe02 	bl	800088c <__aeabi_ddiv>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ffaa 	bl	8000be8 <__aeabi_d2f>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c98:	6013      	str	r3, [r2, #0]

		/*resetando o contador dos timers*/
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim5,0);
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	23fee2ca 	.word	0x23fee2ca
 8001cbc:	400921d3 	.word	0x400921d3
 8001cc0:	9999999a 	.word	0x9999999a
 8001cc4:	3fb99999 	.word	0x3fb99999
 8001cc8:	200002dc 	.word	0x200002dc
 8001ccc:	200001f8 	.word	0x200001f8
 8001cd0:	200000cc 	.word	0x200000cc
 8001cd4:	20000290 	.word	0x20000290
 8001cd8:	200000d4 	.word	0x200000d4
 8001cdc:	200000d0 	.word	0x200000d0
 8001ce0:	200000d8 	.word	0x200000d8

08001ce4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4a4f      	ldr	r2, [pc, #316]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d06:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a49      	ldr	r2, [pc, #292]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a43      	ldr	r2, [pc, #268]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	4a3d      	ldr	r2, [pc, #244]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <MX_GPIO_Init+0x158>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f248 3120 	movw	r1, #33568	; 0x8320
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d64:	f001 fa8e 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	4834      	ldr	r0, [pc, #208]	; (8001e40 <MX_GPIO_Init+0x15c>)
 8001d6e:	f001 fa89 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2104      	movs	r1, #4
 8001d76:	4833      	ldr	r0, [pc, #204]	; (8001e44 <MX_GPIO_Init+0x160>)
 8001d78:	f001 fa84 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d82:	4831      	ldr	r0, [pc, #196]	; (8001e48 <MX_GPIO_Init+0x164>)
 8001d84:	f001 fa7e 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 8001d88:	f242 3360 	movw	r3, #9056	; 0x2360
 8001d8c:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4828      	ldr	r0, [pc, #160]	; (8001e40 <MX_GPIO_Init+0x15c>)
 8001d9e:	f001 f8d7 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 8001da2:	f248 3320 	movw	r3, #33568	; 0x8320
 8001da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f001 f8c7 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4819      	ldr	r0, [pc, #100]	; (8001e40 <MX_GPIO_Init+0x15c>)
 8001dda:	f001 f8b9 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df6:	f001 f8ab 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_GPIO_Init+0x160>)
 8001e12:	f001 f89d 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 8001e16:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MX_GPIO_Init+0x164>)
 8001e30:	f001 f88e 	bl	8002f50 <HAL_GPIO_Init>

}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48000800 	.word	0x48000800
 8001e44:	48000c00 	.word	0x48000c00
 8001e48:	48000400 	.word	0x48000400

08001e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e50:	f000 fefd 	bl	8002c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e54:	f000 f817 	bl	8001e86 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e58:	f7ff ff44 	bl	8001ce4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001e5c:	f000 fa80 	bl	8002360 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e60:	f000 faf4 	bl	800244c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e64:	f000 fb46 	bl	80024f4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001e68:	f000 fbfe 	bl	8002668 <MX_TIM6_Init>
  MX_LPUART1_UART_Init();
 8001e6c:	f000 fd56 	bl	800291c <MX_LPUART1_UART_Init>
  MX_TIM5_Init();
 8001e70:	f000 fba4 	bl	80025bc <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001e74:	f000 fd9c 	bl	80029b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e78:	f005 f99c 	bl	80071b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e7c:	f7ff f886 	bl	8000f8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e80:	f005 f9bc 	bl	80071fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <main+0x38>

08001e86 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b094      	sub	sp, #80	; 0x50
 8001e8a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	2238      	movs	r2, #56	; 0x38
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f007 ff7f 	bl	8009d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eac:	f001 fa1c 	bl	80032e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eba:	2340      	movs	r3, #64	; 0x40
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001eca:	2319      	movs	r3, #25
 8001ecc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 faa6 	bl	8003430 <HAL_RCC_OscConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001eea:	f000 f819 	bl	8001f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eee:	230f      	movs	r3, #15
 8001ef0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001efa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2103      	movs	r1, #3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 fda9 	bl	8003a60 <HAL_RCC_ClockConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f14:	f000 f804 	bl	8001f20 <Error_Handler>
  }
}
 8001f18:	bf00      	nop
 8001f1a:	3750      	adds	r7, #80	; 0x50
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <Error_Handler+0x8>
	...

08001f2c <PID_init_D>:
float fKpD, fKiD, fKdD, fTsD, fOutminD, fOutmaxD;

float fErrorP_E, fErrorI_E, fErrorD_E;
float fErrorP_D,fErrorI_D,fErrorD_D;

void PID_init_D(sPID_D *par) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	fKpD = par->fKpD;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <PID_init_D+0x44>)
 8001f3a:	6013      	str	r3, [r2, #0]
	fKiD = par->fKiD;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <PID_init_D+0x48>)
 8001f42:	6013      	str	r3, [r2, #0]
	fKdD = par->fKdD;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <PID_init_D+0x4c>)
 8001f4a:	6013      	str	r3, [r2, #0]
	fTsD = par->fTsD;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <PID_init_D+0x50>)
 8001f52:	6013      	str	r3, [r2, #0]
	fOutminD = par->fOutminD;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <PID_init_D+0x54>)
 8001f5a:	6013      	str	r3, [r2, #0]
	fOutmaxD = par->fOutmaxD;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <PID_init_D+0x58>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	20000180 	.word	0x20000180
 8001f74:	20000184 	.word	0x20000184
 8001f78:	20000188 	.word	0x20000188
 8001f7c:	2000018c 	.word	0x2000018c
 8001f80:	20000190 	.word	0x20000190
 8001f84:	20000194 	.word	0x20000194

08001f88 <PID_init_E>:
void PID_init_E(sPID_E *par) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	fKpE = par->fKpE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <PID_init_E+0x44>)
 8001f96:	6013      	str	r3, [r2, #0]
	fKiE = par->fKiE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <PID_init_E+0x48>)
 8001f9e:	6013      	str	r3, [r2, #0]
	fKdE = par->fKdE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <PID_init_E+0x4c>)
 8001fa6:	6013      	str	r3, [r2, #0]
	fTsE = par->fTsE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <PID_init_E+0x50>)
 8001fae:	6013      	str	r3, [r2, #0]
	fOutminE = par->fOutminE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <PID_init_E+0x54>)
 8001fb6:	6013      	str	r3, [r2, #0]
	fOutmaxE = par->fOutmaxE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <PID_init_E+0x58>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	20000168 	.word	0x20000168
 8001fd0:	2000016c 	.word	0x2000016c
 8001fd4:	20000170 	.word	0x20000170
 8001fd8:	20000174 	.word	0x20000174
 8001fdc:	20000178 	.word	0x20000178
 8001fe0:	2000017c 	.word	0x2000017c

08001fe4 <PID_E>:

float PID_E(float input, float set_point) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fee:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_E;

	fErrorP_E = (set_point - input);
 8001ff2:	ed97 7a00 	vldr	s14, [r7]
 8001ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpE * fErrorP_E;
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <PID_E+0xf4>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ed97 7a06 	vldr	s14, [r7, #24]
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_E += fErrorP_E * fTsE;
 8002014:	4b31      	ldr	r3, [pc, #196]	; (80020dc <PID_E+0xf8>)
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	edd7 7a06 	vldr	s15, [r7, #24]
 800201e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <PID_E+0xfc>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <PID_E+0xfc>)
 800202e:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiE * fErrorI_E;
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <PID_E+0x100>)
 8002034:	ed93 7a00 	vldr	s14, [r3]
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <PID_E+0xfc>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_E = (fErrorP_E-fErrorD_E)/fTsE;
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <PID_E+0x104>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002050:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <PID_E+0xf8>)
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <PID_E+0x104>)
 8002060:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdE * fErrorD_E;
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <PID_E+0x108>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <PID_E+0x104>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002074:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 8002078:	ed97 7a05 	vldr	s14, [r7, #20]
 800207c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002084:	ed97 7a03 	vldr	s14, [r7, #12]
 8002088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208c:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxE) {
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <PID_E+0x10c>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	ed97 7a07 	vldr	s14, [r7, #28]
 800209a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	dd02      	ble.n	80020aa <PID_E+0xc6>
		fOut = fOutmaxE;
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <PID_E+0x10c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61fb      	str	r3, [r7, #28]
	}
	if (fOut < fOutminE) {
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <PID_E+0x110>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80020b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	d502      	bpl.n	80020c4 <PID_E+0xe0>
		fOut = fOutminE;
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <PID_E+0x110>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	ee07 3a90 	vmov	s15, r3
}
 80020ca:	eeb0 0a67 	vmov.f32	s0, s15
 80020ce:	3724      	adds	r7, #36	; 0x24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	20000168 	.word	0x20000168
 80020dc:	20000174 	.word	0x20000174
 80020e0:	20000198 	.word	0x20000198
 80020e4:	2000016c 	.word	0x2000016c
 80020e8:	2000019c 	.word	0x2000019c
 80020ec:	20000170 	.word	0x20000170
 80020f0:	2000017c 	.word	0x2000017c
 80020f4:	20000178 	.word	0x20000178

080020f8 <PID_D>:
float PID_D(float input, float set_point) {
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002102:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_D;

	fErrorP_D = (set_point - input);
 8002106:	ed97 7a00 	vldr	s14, [r7]
 800210a:	edd7 7a01 	vldr	s15, [r7, #4]
 800210e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002112:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpD * fErrorP_D;
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <PID_D+0xf8>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002124:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_D += fErrorP_D * fTsD;
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <PID_D+0xfc>)
 800212a:	ed93 7a00 	vldr	s14, [r3]
 800212e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <PID_D+0x100>)
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <PID_D+0x100>)
 8002142:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiD * fErrorI_D;
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <PID_D+0x104>)
 8002148:	ed93 7a00 	vldr	s14, [r3]
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <PID_D+0x100>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_D = (fErrorP_D-fErrorD_D)/fTsD;
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <PID_D+0x108>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	ed97 7a06 	vldr	s14, [r7, #24]
 8002164:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <PID_D+0xfc>)
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <PID_D+0x108>)
 8002174:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdD * fErrorD_D;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <PID_D+0x10c>)
 800217a:	ed93 7a00 	vldr	s14, [r3]
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <PID_D+0x108>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002188:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 800218c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002190:	edd7 7a04 	vldr	s15, [r7, #16]
 8002194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002198:	ed97 7a03 	vldr	s14, [r7, #12]
 800219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a0:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxD) {
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <PID_D+0x110>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80021ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b6:	dd03      	ble.n	80021c0 <PID_D+0xc8>
		fOut = fOutmaxD;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <PID_D+0x110>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	e00c      	b.n	80021da <PID_D+0xe2>
	}else if (fOut < fOutminD) {
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <PID_D+0x114>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80021ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	d502      	bpl.n	80021da <PID_D+0xe2>
		fOut = fOutminD;
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <PID_D+0x114>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	ee07 3a90 	vmov	s15, r3
}
 80021e0:	eeb0 0a67 	vmov.f32	s0, s15
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000180 	.word	0x20000180
 80021f4:	2000018c 	.word	0x2000018c
 80021f8:	200001a0 	.word	0x200001a0
 80021fc:	20000184 	.word	0x20000184
 8002200:	200001a4 	.word	0x200001a4
 8002204:	20000188 	.word	0x20000188
 8002208:	20000194 	.word	0x20000194
 800220c:	20000190 	.word	0x20000190

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_MspInit+0x4c>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_MspInit+0x4c>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6613      	str	r3, [r2, #96]	; 0x60
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_MspInit+0x4c>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_MspInit+0x4c>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_MspInit+0x4c>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_MspInit+0x4c>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	210f      	movs	r1, #15
 800224a:	f06f 0001 	mvn.w	r0, #1
 800224e:	f000 fe4a 	bl	8002ee6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <NMI_Handler+0x4>

08002266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler+0x4>

08002272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <UsageFault_Handler+0x4>

0800227e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002290:	f000 fd30 	bl	8002cf4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002294:	f006 fdcc 	bl	8008e30 <xTaskGetSchedulerState>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800229e:	f007 fb5b 	bl	8009958 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <TIM1_CC_IRQHandler+0x10>)
 80022ae:	f002 fc9d 	bl	8004bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200001ac 	.word	0x200001ac

080022bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <TIM6_DAC_IRQHandler+0x10>)
 80022c2:	f002 fc93 	bl	8004bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002dc 	.word	0x200002dc

080022d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f007 fd10 	bl	8009d24 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20020000 	.word	0x20020000
 8002330:	00000400 	.word	0x00000400
 8002334:	200001a8 	.word	0x200001a8
 8002338:	20002668 	.word	0x20002668

0800233c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <SystemInit+0x20>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <SystemInit+0x20>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002366:	f107 0320 	add.w	r3, r7, #32
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <MX_TIM1_Init+0xe4>)
 800238e:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <MX_TIM1_Init+0xe8>)
 8002390:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <MX_TIM1_Init+0xe4>)
 8002394:	2231      	movs	r2, #49	; 0x31
 8002396:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <MX_TIM1_Init+0xe4>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <MX_TIM1_Init+0xe4>)
 80023a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <MX_TIM1_Init+0xe4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <MX_TIM1_Init+0xe4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <MX_TIM1_Init+0xe4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b8:	4822      	ldr	r0, [pc, #136]	; (8002444 <MX_TIM1_Init+0xe4>)
 80023ba:	f001 ffbb 	bl	8004334 <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80023c4:	f7ff fdac 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	4619      	mov	r1, r3
 80023d4:	481b      	ldr	r0, [pc, #108]	; (8002444 <MX_TIM1_Init+0xe4>)
 80023d6:	f002 ff39 	bl	800524c <HAL_TIM_ConfigClockSource>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80023e0:	f7ff fd9e 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80023e4:	4817      	ldr	r0, [pc, #92]	; (8002444 <MX_TIM1_Init+0xe4>)
 80023e6:	f002 fa4f 	bl	8004888 <HAL_TIM_IC_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80023f0:	f7ff fd96 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	480f      	ldr	r0, [pc, #60]	; (8002444 <MX_TIM1_Init+0xe4>)
 8002408:	f003 fe56 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002412:	f7ff fd85 	bl	8001f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800241a:	2301      	movs	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2208      	movs	r2, #8
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_TIM1_Init+0xe4>)
 800242e:	f002 fd5c 	bl	8004eea <HAL_TIM_IC_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002438:	f7ff fd72 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	3730      	adds	r7, #48	; 0x30
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200001ac 	.word	0x200001ac
 8002448:	40012c00 	.word	0x40012c00

0800244c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <MX_TIM2_Init+0xa0>)
 800246c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_TIM2_Init+0xa0>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <MX_TIM2_Init+0xa0>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_TIM2_Init+0xa0>)
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <MX_TIM2_Init+0xa4>)
 8002482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <MX_TIM2_Init+0xa0>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_TIM2_Init+0xa0>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002490:	4816      	ldr	r0, [pc, #88]	; (80024ec <MX_TIM2_Init+0xa0>)
 8002492:	f001 ff4f 	bl	8004334 <HAL_TIM_Base_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800249c:	f7ff fd40 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80024a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a4:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024b2:	f107 0310 	add.w	r3, r7, #16
 80024b6:	4619      	mov	r1, r3
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <MX_TIM2_Init+0xa0>)
 80024ba:	f002 fec7 	bl	800524c <HAL_TIM_ConfigClockSource>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80024c4:	f7ff fd2c 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_TIM2_Init+0xa0>)
 80024d6:	f003 fdef 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80024e0:	f7ff fd1e 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200001f8 	.word	0x200001f8
 80024f0:	000f423f 	.word	0x000f423f

080024f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	463b      	mov	r3, r7
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <MX_TIM3_Init+0xc0>)
 800251a:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <MX_TIM3_Init+0xc4>)
 800251c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <MX_TIM3_Init+0xc0>)
 8002520:	2231      	movs	r2, #49	; 0x31
 8002522:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <MX_TIM3_Init+0xc0>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <MX_TIM3_Init+0xc0>)
 800252c:	2263      	movs	r2, #99	; 0x63
 800252e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002530:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <MX_TIM3_Init+0xc0>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002536:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <MX_TIM3_Init+0xc0>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800253c:	481d      	ldr	r0, [pc, #116]	; (80025b4 <MX_TIM3_Init+0xc0>)
 800253e:	f002 f839 	bl	80045b4 <HAL_TIM_PWM_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002548:	f7ff fcea 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	4816      	ldr	r0, [pc, #88]	; (80025b4 <MX_TIM3_Init+0xc0>)
 800255c:	f003 fdac 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002566:	f7ff fcdb 	bl	8001f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256a:	2360      	movs	r3, #96	; 0x60
 800256c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <MX_TIM3_Init+0xc0>)
 8002582:	f002 fd4f 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800258c:	f7ff fcc8 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	2204      	movs	r2, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM3_Init+0xc0>)
 8002598:	f002 fd44 	bl	8005024 <HAL_TIM_PWM_ConfigChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025a2:	f7ff fcbd 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM3_Init+0xc0>)
 80025a8:	f000 f980 	bl	80028ac <HAL_TIM_MspPostInit>

}
 80025ac:	bf00      	nop
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000244 	.word	0x20000244
 80025b8:	40000400 	.word	0x40000400

080025bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <MX_TIM5_Init+0xa0>)
 80025dc:	4a20      	ldr	r2, [pc, #128]	; (8002660 <MX_TIM5_Init+0xa4>)
 80025de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <MX_TIM5_Init+0xa0>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <MX_TIM5_Init+0xa0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999999;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <MX_TIM5_Init+0xa0>)
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <MX_TIM5_Init+0xa8>)
 80025f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <MX_TIM5_Init+0xa0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <MX_TIM5_Init+0xa0>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025fe:	4817      	ldr	r0, [pc, #92]	; (800265c <MX_TIM5_Init+0xa0>)
 8002600:	f001 fe98 	bl	8004334 <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800260a:	f7ff fc89 	bl	8001f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800260e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002612:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	; (800265c <MX_TIM5_Init+0xa0>)
 8002628:	f002 fe10 	bl	800524c <HAL_TIM_ConfigClockSource>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8002632:	f7ff fc75 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4806      	ldr	r0, [pc, #24]	; (800265c <MX_TIM5_Init+0xa0>)
 8002644:	f003 fd38 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800264e:	f7ff fc67 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000290 	.word	0x20000290
 8002660:	40000c00 	.word	0x40000c00
 8002664:	000f423f 	.word	0x000f423f

08002668 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_TIM6_Init+0x68>)
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <MX_TIM6_Init+0x6c>)
 800267c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5000-1;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_TIM6_Init+0x68>)
 8002680:	f241 3287 	movw	r2, #4999	; 0x1387
 8002684:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_TIM6_Init+0x68>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <MX_TIM6_Init+0x68>)
 800268e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002692:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_TIM6_Init+0x68>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800269a:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_TIM6_Init+0x68>)
 800269c:	f001 fe4a 	bl	8004334 <HAL_TIM_Base_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80026a6:	f7ff fc3b 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4806      	ldr	r0, [pc, #24]	; (80026d0 <MX_TIM6_Init+0x68>)
 80026b8:	f003 fcfe 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80026c2:	f7ff fc2d 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200002dc 	.word	0x200002dc
 80026d4:	40001000 	.word	0x40001000

080026d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	; 0x38
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a57      	ldr	r2, [pc, #348]	; (8002854 <HAL_TIM_Base_MspInit+0x17c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d130      	bne.n	800275c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026fa:	4b57      	ldr	r3, [pc, #348]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	4a56      	ldr	r2, [pc, #344]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002704:	6613      	str	r3, [r2, #96]	; 0x60
 8002706:	4b54      	ldr	r3, [pc, #336]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002712:	4b51      	ldr	r3, [pc, #324]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271e:	4b4e      	ldr	r3, [pc, #312]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 800272a:	2304      	movs	r3, #4
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800273a:	2302      	movs	r3, #2
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002742:	4619      	mov	r1, r3
 8002744:	4845      	ldr	r0, [pc, #276]	; (800285c <HAL_TIM_Base_MspInit+0x184>)
 8002746:	f000 fc03 	bl	8002f50 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2105      	movs	r1, #5
 800274e:	201b      	movs	r0, #27
 8002750:	f000 fbc9 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002754:	201b      	movs	r0, #27
 8002756:	f000 fbe0 	bl	8002f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800275a:	e076      	b.n	800284a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d129      	bne.n	80027ba <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002766:	4b3c      	ldr	r3, [pc, #240]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6593      	str	r3, [r2, #88]	; 0x58
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	61bb      	str	r3, [r7, #24]
 800277c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	4a35      	ldr	r2, [pc, #212]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278a:	4b33      	ldr	r3, [pc, #204]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 8002796:	2301      	movs	r3, #1
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80027a6:	230e      	movs	r3, #14
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ae:	4619      	mov	r1, r3
 80027b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b4:	f000 fbcc 	bl	8002f50 <HAL_GPIO_Init>
}
 80027b8:	e047      	b.n	800284a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM5)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a28      	ldr	r2, [pc, #160]	; (8002860 <HAL_TIM_Base_MspInit+0x188>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d129      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6593      	str	r3, [r2, #88]	; 0x58
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_D_Pin;
 80027f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002806:	2302      	movs	r3, #2
 8002808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 800280a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280e:	4619      	mov	r1, r3
 8002810:	4814      	ldr	r0, [pc, #80]	; (8002864 <HAL_TIM_Base_MspInit+0x18c>)
 8002812:	f000 fb9d 	bl	8002f50 <HAL_GPIO_Init>
}
 8002816:	e018      	b.n	800284a <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM6)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_TIM_Base_MspInit+0x190>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002828:	f043 0310 	orr.w	r3, r3, #16
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_TIM_Base_MspInit+0x180>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2105      	movs	r1, #5
 800283e:	2036      	movs	r0, #54	; 0x36
 8002840:	f000 fb51 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002844:	2036      	movs	r0, #54	; 0x36
 8002846:	f000 fb68 	bl	8002f1a <HAL_NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3738      	adds	r7, #56	; 0x38
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40021000 	.word	0x40021000
 800285c:	48000800 	.word	0x48000800
 8002860:	40000c00 	.word	0x40000c00
 8002864:	48000400 	.word	0x48000400
 8002868:	40001000 	.word	0x40001000

0800286c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_TIM_PWM_MspInit+0x38>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10b      	bne.n	8002896 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6593      	str	r3, [r2, #88]	; 0x58
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_TIM_MspPostInit+0x64>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d11b      	bne.n	8002906 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_TIM_MspPostInit+0x68>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_TIM_MspPostInit+0x68>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_TIM_MspPostInit+0x68>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_2_Pin;
 80028e6:	2330      	movs	r3, #48	; 0x30
 80028e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <HAL_TIM_MspPostInit+0x6c>)
 8002902:	f000 fb25 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40000400 	.word	0x40000400
 8002914:	40021000 	.word	0x40021000
 8002918:	48000400 	.word	0x48000400

0800291c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002922:	4a22      	ldr	r2, [pc, #136]	; (80029ac <MX_LPUART1_UART_Init+0x90>)
 8002924:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002928:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800292c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 800294e:	2200      	movs	r2, #0
 8002950:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002954:	2200      	movs	r2, #0
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800295e:	4812      	ldr	r0, [pc, #72]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002960:	f003 fc86 	bl	8006270 <HAL_UART_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800296a:	f7ff fad9 	bl	8001f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296e:	2100      	movs	r1, #0
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002972:	f004 fb21 	bl	8006fb8 <HAL_UARTEx_SetTxFifoThreshold>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800297c:	f7ff fad0 	bl	8001f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002980:	2100      	movs	r1, #0
 8002982:	4809      	ldr	r0, [pc, #36]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002984:	f004 fb56 	bl	8007034 <HAL_UARTEx_SetRxFifoThreshold>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800298e:	f7ff fac7 	bl	8001f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_LPUART1_UART_Init+0x8c>)
 8002994:	f004 fad7 	bl	8006f46 <HAL_UARTEx_DisableFifoMode>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800299e:	f7ff fabf 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000328 	.word	0x20000328
 80029ac:	40008000 	.word	0x40008000

080029b0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <MX_USART1_UART_Init+0x94>)
 80029b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029d6:	220c      	movs	r2, #12
 80029d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029f8:	4811      	ldr	r0, [pc, #68]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 80029fa:	f003 fc39 	bl	8006270 <HAL_UART_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a04:	f7ff fa8c 	bl	8001f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	480d      	ldr	r0, [pc, #52]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 8002a0c:	f004 fad4 	bl	8006fb8 <HAL_UARTEx_SetTxFifoThreshold>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a16:	f7ff fa83 	bl	8001f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4808      	ldr	r0, [pc, #32]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 8002a1e:	f004 fb09 	bl	8007034 <HAL_UARTEx_SetRxFifoThreshold>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a28:	f7ff fa7a 	bl	8001f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a2c:	4804      	ldr	r0, [pc, #16]	; (8002a40 <MX_USART1_UART_Init+0x90>)
 8002a2e:	f004 fa8a 	bl	8006f46 <HAL_UARTEx_DisableFifoMode>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a38:	f7ff fa72 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200003b8 	.word	0x200003b8
 8002a44:	40013800 	.word	0x40013800

08002a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0a2      	sub	sp, #136	; 0x88
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	2254      	movs	r2, #84	; 0x54
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f007 f995 	bl	8009d98 <memset>
  if(uartHandle->Instance==LPUART1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a5e      	ldr	r2, [pc, #376]	; (8002bec <HAL_UART_MspInit+0x1a4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d157      	bne.n	8002b28 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a80:	f107 0320 	add.w	r3, r7, #32
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 fa07 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a90:	f7ff fa46 	bl	8001f20 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a94:	4b56      	ldr	r3, [pc, #344]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	4a55      	ldr	r2, [pc, #340]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	4a4f      	ldr	r2, [pc, #316]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac4:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad0:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002adc:	2301      	movs	r3, #1
 8002ade:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002aee:	2308      	movs	r3, #8
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002af8:	4619      	mov	r1, r3
 8002afa:	483e      	ldr	r0, [pc, #248]	; (8002bf4 <HAL_UART_MspInit+0x1ac>)
 8002afc:	f000 fa28 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b00:	2304      	movs	r3, #4
 8002b02:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002b12:	230c      	movs	r3, #12
 8002b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b22:	f000 fa15 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b26:	e05c      	b.n	8002be2 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <HAL_UART_MspInit+0x1b0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d157      	bne.n	8002be2 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b3a:	f107 0320 	add.w	r3, r7, #32
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 f9aa 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_UART_MspInit+0x106>
      Error_Handler();
 8002b4a:	f7ff f9e9 	bl	8001f20 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b58:	6613      	str	r3, [r2, #96]	; 0x60
 8002b5a:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_UART_MspInit+0x1a8>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 8002b96:	2310      	movs	r3, #16
 8002b98:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ba8:	2307      	movs	r3, #7
 8002baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480f      	ldr	r0, [pc, #60]	; (8002bf4 <HAL_UART_MspInit+0x1ac>)
 8002bb6:	f000 f9cb 	bl	8002f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 8002bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bbe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bce:	2307      	movs	r3, #7
 8002bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bde:	f000 f9b7 	bl	8002f50 <HAL_GPIO_Init>
}
 8002be2:	bf00      	nop
 8002be4:	3788      	adds	r7, #136	; 0x88
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40008000 	.word	0x40008000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	48000800 	.word	0x48000800
 8002bf8:	40013800 	.word	0x40013800

08002bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c02:	490e      	ldr	r1, [pc, #56]	; (8002c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <LoopForever+0xe>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c18:	4c0b      	ldr	r4, [pc, #44]	; (8002c48 <LoopForever+0x16>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c26:	f7ff fb89 	bl	800233c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f007 f881 	bl	8009d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c2e:	f7ff f90d 	bl	8001e4c <main>

08002c32 <LoopForever>:

LoopForever:
    b LoopForever
 8002c32:	e7fe      	b.n	8002c32 <LoopForever>
  ldr   r0, =_estack
 8002c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002c40:	0800caf0 	.word	0x0800caf0
  ldr r2, =_sbss
 8002c44:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002c48:	20002664 	.word	0x20002664

08002c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC1_2_IRQHandler>

08002c4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f000 f939 	bl	8002ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c5e:	200f      	movs	r0, #15
 8002c60:	f000 f80e 	bl	8002c80 <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	71fb      	strb	r3, [r7, #7]
 8002c6e:	e001      	b.n	8002c74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c70:	f7ff face 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c74:	79fb      	ldrb	r3, [r7, #7]

}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_InitTick+0x68>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d022      	beq.n	8002cda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_InitTick+0x6c>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_InitTick+0x68>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f944 	bl	8002f36 <HAL_SYSTICK_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10f      	bne.n	8002cd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	d809      	bhi.n	8002cce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc2:	f000 f910 	bl	8002ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_InitTick+0x70>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e007      	b.n	8002cde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e004      	b.n	8002cde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e001      	b.n	8002cde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000014 	.word	0x20000014
 8002cec:	2000000c 	.word	0x2000000c
 8002cf0:	20000010 	.word	0x20000010

08002cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_IncTick+0x1c>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_IncTick+0x20>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_IncTick+0x1c>)
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	20000448 	.word	0x20000448
 8002d14:	20000014 	.word	0x20000014

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_GetTick+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000448 	.word	0x20000448

08002d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d62:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60d3      	str	r3, [r2, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <__NVIC_GetPriorityGrouping+0x18>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0307 	and.w	r3, r3, #7
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	db0b      	blt.n	8002dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	4907      	ldr	r1, [pc, #28]	; (8002dcc <__NVIC_EnableIRQ+0x38>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2001      	movs	r0, #1
 8002db6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000e100 	.word	0xe000e100

08002dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db0a      	blt.n	8002dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	490c      	ldr	r1, [pc, #48]	; (8002e1c <__NVIC_SetPriority+0x4c>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	440b      	add	r3, r1
 8002df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df8:	e00a      	b.n	8002e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4908      	ldr	r1, [pc, #32]	; (8002e20 <__NVIC_SetPriority+0x50>)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3b04      	subs	r3, #4
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	bf28      	it	cs
 8002e42:	2304      	movcs	r3, #4
 8002e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d902      	bls.n	8002e54 <NVIC_EncodePriority+0x30>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3b03      	subs	r3, #3
 8002e52:	e000      	b.n	8002e56 <NVIC_EncodePriority+0x32>
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	401a      	ands	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	4313      	orrs	r3, r2
         );
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e9c:	d301      	bcc.n	8002ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00f      	b.n	8002ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <SysTick_Config+0x40>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eaa:	210f      	movs	r1, #15
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f7ff ff8e 	bl	8002dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <SysTick_Config+0x40>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <SysTick_Config+0x40>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	e000e010 	.word	0xe000e010

08002ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff29 	bl	8002d30 <__NVIC_SetPriorityGrouping>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff40 	bl	8002d78 <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff90 	bl	8002e24 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5f 	bl	8002dd0 <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff33 	bl	8002d94 <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ffa4 	bl	8002e8c <SysTick_Config>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f5e:	e15a      	b.n	8003216 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 814c 	beq.w	8003210 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d005      	beq.n	8002f90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d130      	bne.n	8002ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f003 0201 	and.w	r2, r3, #1
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d017      	beq.n	800302e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d123      	bne.n	8003082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	6939      	ldr	r1, [r7, #16]
 800307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0203 	and.w	r2, r3, #3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80a6 	beq.w	8003210 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c4:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_GPIO_Init+0x2e4>)
 80030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c8:	4a5a      	ldr	r2, [pc, #360]	; (8003234 <HAL_GPIO_Init+0x2e4>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6613      	str	r3, [r2, #96]	; 0x60
 80030d0:	4b58      	ldr	r3, [pc, #352]	; (8003234 <HAL_GPIO_Init+0x2e4>)
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030dc:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003106:	d01f      	beq.n	8003148 <HAL_GPIO_Init+0x1f8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_GPIO_Init+0x2ec>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d019      	beq.n	8003144 <HAL_GPIO_Init+0x1f4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_GPIO_Init+0x1f0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00d      	beq.n	800313c <HAL_GPIO_Init+0x1ec>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a49      	ldr	r2, [pc, #292]	; (8003248 <HAL_GPIO_Init+0x2f8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <HAL_GPIO_Init+0x1e8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a48      	ldr	r2, [pc, #288]	; (800324c <HAL_GPIO_Init+0x2fc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_GPIO_Init+0x1e4>
 8003130:	2305      	movs	r3, #5
 8003132:	e00a      	b.n	800314a <HAL_GPIO_Init+0x1fa>
 8003134:	2306      	movs	r3, #6
 8003136:	e008      	b.n	800314a <HAL_GPIO_Init+0x1fa>
 8003138:	2304      	movs	r3, #4
 800313a:	e006      	b.n	800314a <HAL_GPIO_Init+0x1fa>
 800313c:	2303      	movs	r3, #3
 800313e:	e004      	b.n	800314a <HAL_GPIO_Init+0x1fa>
 8003140:	2302      	movs	r3, #2
 8003142:	e002      	b.n	800314a <HAL_GPIO_Init+0x1fa>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_GPIO_Init+0x1fa>
 8003148:	2300      	movs	r3, #0
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	f002 0203 	and.w	r2, r2, #3
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	4093      	lsls	r3, r2
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315a:	4937      	ldr	r1, [pc, #220]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_GPIO_Init+0x300>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800318c:	4a30      	ldr	r2, [pc, #192]	; (8003250 <HAL_GPIO_Init+0x300>)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_GPIO_Init+0x300>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031b6:	4a26      	ldr	r2, [pc, #152]	; (8003250 <HAL_GPIO_Init+0x300>)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_GPIO_Init+0x300>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031e0:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_GPIO_Init+0x300>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_GPIO_Init+0x300>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800320a:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_GPIO_Init+0x300>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3301      	adds	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	f47f ae9d 	bne.w	8002f60 <HAL_GPIO_Init+0x10>
  }
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40021000 	.word	0x40021000
 8003238:	40010000 	.word	0x40010000
 800323c:	48000400 	.word	0x48000400
 8003240:	48000800 	.word	0x48000800
 8003244:	48000c00 	.word	0x48000c00
 8003248:	48001000 	.word	0x48001000
 800324c:	48001400 	.word	0x48001400
 8003250:	40010400 	.word	0x40010400

08003254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e001      	b.n	8003276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	041a      	lsls	r2, r3, #16
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43d9      	mvns	r1, r3
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	400b      	ands	r3, r1
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d141      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032f6:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d131      	bne.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003304:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330a:	4a46      	ldr	r2, [pc, #280]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003314:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800331c:	4a41      	ldr	r2, [pc, #260]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2232      	movs	r2, #50	; 0x32
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	4a3f      	ldr	r2, [pc, #252]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9b      	lsrs	r3, r3, #18
 8003336:	3301      	adds	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333a:	e002      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3b01      	subs	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334e:	d102      	bne.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f2      	bne.n	800333c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003362:	d158      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e057      	b.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800336e:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003378:	e04d      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003380:	d141      	bne.n	8003406 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003382:	4b28      	ldr	r3, [pc, #160]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338e:	d131      	bne.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003396:	4a23      	ldr	r2, [pc, #140]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033a8:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2232      	movs	r2, #50	; 0x32
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	0c9b      	lsrs	r3, r3, #18
 80033c2:	3301      	adds	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c6:	e002      	b.n	80033ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033da:	d102      	bne.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f2      	bne.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d112      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e011      	b.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003404:	e007      	b.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003414:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40007000 	.word	0x40007000
 8003428:	2000000c 	.word	0x2000000c
 800342c:	431bde83 	.word	0x431bde83

08003430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e306      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344e:	4b97      	ldr	r3, [pc, #604]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003458:	4b94      	ldr	r3, [pc, #592]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x3e>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d002      	beq.n	8003474 <HAL_RCC_OscConfig+0x44>
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	4b8d      	ldr	r3, [pc, #564]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e2e1      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x74>
 8003496:	4b85      	ldr	r3, [pc, #532]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a84      	ldr	r2, [pc, #528]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b7f      	ldr	r3, [pc, #508]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7e      	ldr	r2, [pc, #504]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b7c      	ldr	r3, [pc, #496]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7b      	ldr	r2, [pc, #492]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034c8:	4b78      	ldr	r3, [pc, #480]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a77      	ldr	r2, [pc, #476]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b75      	ldr	r3, [pc, #468]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a74      	ldr	r2, [pc, #464]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7ff fc16 	bl	8002d18 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7ff fc12 	bl	8002d18 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e2a6      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003502:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7ff fc02 	bl	8002d18 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7ff fbfe 	bl	8002d18 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e292      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800352a:	4b60      	ldr	r3, [pc, #384]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d075      	beq.n	8003632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003546:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003550:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d102      	bne.n	8003566 <HAL_RCC_OscConfig+0x136>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d002      	beq.n	800356c <HAL_RCC_OscConfig+0x13c>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11f      	bne.n	80035ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356c:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_OscConfig+0x154>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e265      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003584:	4b49      	ldr	r3, [pc, #292]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	4946      	ldr	r1, [pc, #280]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003598:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <HAL_RCC_OscConfig+0x280>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fb6f 	bl	8002c80 <HAL_InitTick>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d043      	beq.n	8003630 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e251      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d023      	beq.n	80035fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b4:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3c      	ldr	r2, [pc, #240]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80035ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7ff fbaa 	bl	8002d18 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c8:	f7ff fba6 	bl	8002d18 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e23a      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	492d      	ldr	r1, [pc, #180]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
 80035fa:	e01a      	b.n	8003632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fc:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7ff fb86 	bl	8002d18 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003610:	f7ff fb82 	bl	8002d18 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e216      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x1e0>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d041      	beq.n	80036c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01c      	beq.n	8003680 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7ff fb5f 	bl	8002d18 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7ff fb5b 	bl	8002d18 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1ef      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ef      	beq.n	800365e <HAL_RCC_OscConfig+0x22e>
 800367e:	e020      	b.n	80036c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_RCC_OscConfig+0x27c>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7ff fb42 	bl	8002d18 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003696:	e00d      	b.n	80036b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003698:	f7ff fb3e 	bl	8002d18 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d906      	bls.n	80036b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e1d2      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b4:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1ea      	bne.n	8003698 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a6 	beq.w	800381c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036d4:	4b84      	ldr	r3, [pc, #528]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x2b4>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x2b6>
 80036e4:	2300      	movs	r3, #0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	4a7e      	ldr	r2, [pc, #504]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6593      	str	r3, [r2, #88]	; 0x58
 80036f6:	4b7c      	ldr	r3, [pc, #496]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003702:	2301      	movs	r3, #1
 8003704:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003706:	4b79      	ldr	r3, [pc, #484]	; (80038ec <HAL_RCC_OscConfig+0x4bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d118      	bne.n	8003744 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003712:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCC_OscConfig+0x4bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a75      	ldr	r2, [pc, #468]	; (80038ec <HAL_RCC_OscConfig+0x4bc>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371e:	f7ff fafb 	bl	8002d18 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003726:	f7ff faf7 	bl	8002d18 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e18b      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003738:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <HAL_RCC_OscConfig+0x4bc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d108      	bne.n	800375e <HAL_RCC_OscConfig+0x32e>
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	4a65      	ldr	r2, [pc, #404]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800375c:	e024      	b.n	80037a8 <HAL_RCC_OscConfig+0x378>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b05      	cmp	r3, #5
 8003764:	d110      	bne.n	8003788 <HAL_RCC_OscConfig+0x358>
 8003766:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	4a5e      	ldr	r2, [pc, #376]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f043 0304 	orr.w	r3, r3, #4
 8003772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003776:	4b5c      	ldr	r3, [pc, #368]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	4a5a      	ldr	r2, [pc, #360]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003786:	e00f      	b.n	80037a8 <HAL_RCC_OscConfig+0x378>
 8003788:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003798:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d016      	beq.n	80037de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7ff fab2 	bl	8002d18 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7ff faae 	bl	8002d18 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e140      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ed      	beq.n	80037b8 <HAL_RCC_OscConfig+0x388>
 80037dc:	e015      	b.n	800380a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7ff fa9b 	bl	8002d18 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7ff fa97 	bl	8002d18 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e129      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ed      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d03c      	beq.n	80038a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01c      	beq.n	800386a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003836:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7ff fa6a 	bl	8002d18 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003848:	f7ff fa66 	bl	8002d18 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0fa      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800385a:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 800385c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ef      	beq.n	8003848 <HAL_RCC_OscConfig+0x418>
 8003868:	e01b      	b.n	80038a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 800386c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387a:	f7ff fa4d 	bl	8002d18 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003882:	f7ff fa49 	bl	8002d18 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e0dd      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 8003896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1ef      	bne.n	8003882 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80d1 	beq.w	8003a4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	f000 808b 	beq.w	80039d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d15e      	bne.n	8003980 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7ff fa23 	bl	8002d18 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d4:	e00c      	b.n	80038f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7ff fa1f 	bl	8002d18 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d905      	bls.n	80038f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e0b3      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ec      	bne.n	80038d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fc:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	4b56      	ldr	r3, [pc, #344]	; (8003a5c <HAL_RCC_OscConfig+0x62c>)
 8003902:	4013      	ands	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6a11      	ldr	r1, [r2, #32]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390c:	3a01      	subs	r2, #1
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	4311      	orrs	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003916:	0212      	lsls	r2, r2, #8
 8003918:	4311      	orrs	r1, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800391e:	0852      	lsrs	r2, r2, #1
 8003920:	3a01      	subs	r2, #1
 8003922:	0552      	lsls	r2, r2, #21
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800392a:	0852      	lsrs	r2, r2, #1
 800392c:	3a01      	subs	r2, #1
 800392e:	0652      	lsls	r2, r2, #25
 8003930:	4311      	orrs	r1, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003936:	06d2      	lsls	r2, r2, #27
 8003938:	430a      	orrs	r2, r1
 800393a:	4947      	ldr	r1, [pc, #284]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 800393c:	4313      	orrs	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a44      	ldr	r2, [pc, #272]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 8003946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800394c:	4b42      	ldr	r3, [pc, #264]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7ff f9de 	bl	8002d18 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7ff f9da 	bl	8002d18 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e06e      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x530>
 800397e:	e066      	b.n	8003a4e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003980:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 8003986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800398a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800398c:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a31      	ldr	r2, [pc, #196]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003998:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 800399e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7ff f9b6 	bl	8002d18 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7ff f9b2 	bl	8002d18 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e046      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c2:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x580>
 80039ce:	e03e      	b.n	8003a4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e039      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <HAL_RCC_OscConfig+0x628>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0203 	and.w	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d12c      	bne.n	8003a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	3b01      	subs	r3, #1
 80039fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d123      	bne.n	8003a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d11b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d113      	bne.n	8003a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	019f800c 	.word	0x019f800c

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e11e      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b91      	ldr	r3, [pc, #580]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b8e      	ldr	r3, [pc, #568]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 020f 	bic.w	r2, r3, #15
 8003a8e:	498c      	ldr	r1, [pc, #560]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b8a      	ldr	r3, [pc, #552]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e106      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d073      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d129      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0f4      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003acc:	f000 f99e 	bl	8003e0c <RCC_GetSysClockFreqFromPLLSource>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4a7c      	ldr	r2, [pc, #496]	; (8003cc8 <HAL_RCC_ClockConfig+0x268>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d93f      	bls.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ada:	4b7a      	ldr	r3, [pc, #488]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d033      	beq.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d12f      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003afa:	4b72      	ldr	r3, [pc, #456]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b02:	4a70      	ldr	r2, [pc, #448]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	e024      	b.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0c6      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b28:	4b66      	ldr	r3, [pc, #408]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0be      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b38:	f000 f8ce 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4a61      	ldr	r2, [pc, #388]	; (8003cc8 <HAL_RCC_ClockConfig+0x268>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d909      	bls.n	8003b5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b46:	4b5f      	ldr	r3, [pc, #380]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4e:	4a5d      	ldr	r2, [pc, #372]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b5a      	ldr	r3, [pc, #360]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4957      	ldr	r1, [pc, #348]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7ff f8d4 	bl	8002d18 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7ff f8d0 	bl	8002d18 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e095      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b4e      	ldr	r3, [pc, #312]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d023      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb4:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a42      	ldr	r2, [pc, #264]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bd4:	4a3b      	ldr	r2, [pc, #236]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4936      	ldr	r1, [pc, #216]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d105      	bne.n	8003c02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4a32      	ldr	r2, [pc, #200]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d21d      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 020f 	bic.w	r2, r3, #15
 8003c18:	4929      	ldr	r1, [pc, #164]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c20:	f7ff f87a 	bl	8002d18 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7ff f876 	bl	8002d18 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e03b      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_ClockConfig+0x260>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1ed      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4917      	ldr	r1, [pc, #92]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	490f      	ldr	r1, [pc, #60]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c8a:	f000 f825 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_ClockConfig+0x264>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	490c      	ldr	r1, [pc, #48]	; (8003ccc <HAL_RCC_ClockConfig+0x26c>)
 8003c9c:	5ccb      	ldrb	r3, [r1, r3]
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_RCC_ClockConfig+0x270>)
 8003ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe ffe6 	bl	8002c80 <HAL_InitTick>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	04c4b400 	.word	0x04c4b400
 8003ccc:	0800c800 	.word	0x0800c800
 8003cd0:	2000000c 	.word	0x2000000c
 8003cd4:	20000010 	.word	0x20000010

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d102      	bne.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cea:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	e047      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cfc:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e03e      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d136      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	3301      	adds	r3, #1
 8003d24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d2c:	4a1a      	ldr	r2, [pc, #104]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d36:	68d2      	ldr	r2, [r2, #12]
 8003d38:	0a12      	lsrs	r2, r2, #8
 8003d3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	617b      	str	r3, [r7, #20]
      break;
 8003d44:	e00c      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	4a10      	ldr	r2, [pc, #64]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d50:	68d2      	ldr	r2, [r2, #12]
 8003d52:	0a12      	lsrs	r2, r2, #8
 8003d54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
      break;
 8003d5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	0e5b      	lsrs	r3, r3, #25
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e001      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d80:	693b      	ldr	r3, [r7, #16]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	007a1200 	.word	0x007a1200

08003d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4904      	ldr	r1, [pc, #16]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	0800c810 	.word	0x0800c810

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003de4:	f7ff ffda 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0adb      	lsrs	r3, r3, #11
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4904      	ldr	r1, [pc, #16]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	0800c810 	.word	0x0800c810

08003e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e12:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d10c      	bne.n	8003e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e30:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e3a:	68d2      	ldr	r2, [r2, #12]
 8003e3c:	0a12      	lsrs	r2, r2, #8
 8003e3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	617b      	str	r3, [r7, #20]
    break;
 8003e48:	e00c      	b.n	8003e64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e54:	68d2      	ldr	r2, [r2, #12]
 8003e56:	0a12      	lsrs	r2, r2, #8
 8003e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
    break;
 8003e62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	0e5b      	lsrs	r3, r3, #25
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e7e:	687b      	ldr	r3, [r7, #4]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	007a1200 	.word	0x007a1200
 8003e94:	00f42400 	.word	0x00f42400

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8098 	beq.w	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eba:	4b43      	ldr	r3, [pc, #268]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10d      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	4a3f      	ldr	r2, [pc, #252]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ee2:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a39      	ldr	r2, [pc, #228]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eee:	f7fe ff13 	bl	8002d18 <HAL_GetTick>
 8003ef2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef4:	e009      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fe ff0f 	bl	8002d18 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d902      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	74fb      	strb	r3, [r7, #19]
        break;
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0a:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ef      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d159      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01e      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d019      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f44:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f54:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d016      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fe fecf 	bl	8002d18 <HAL_GetTick>
 8003f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7c:	e00b      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe fecb 	bl	8002d18 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d902      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	74fb      	strb	r3, [r7, #19]
            break;
 8003f94:	e006      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ec      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	74bb      	strb	r3, [r7, #18]
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd4:	7c7b      	ldrb	r3, [r7, #17]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d105      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fda:	4ba7      	ldr	r3, [pc, #668]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	4aa6      	ldr	r2, [pc, #664]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ff2:	4ba1      	ldr	r3, [pc, #644]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f023 0203 	bic.w	r2, r3, #3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	499d      	ldr	r1, [pc, #628]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004014:	4b98      	ldr	r3, [pc, #608]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f023 020c 	bic.w	r2, r3, #12
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4995      	ldr	r1, [pc, #596]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004036:	4b90      	ldr	r3, [pc, #576]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	498c      	ldr	r1, [pc, #560]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004058:	4b87      	ldr	r3, [pc, #540]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	4984      	ldr	r1, [pc, #528]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800407a:	4b7f      	ldr	r3, [pc, #508]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	497b      	ldr	r1, [pc, #492]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800409c:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	4973      	ldr	r1, [pc, #460]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040be:	4b6e      	ldr	r3, [pc, #440]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	496a      	ldr	r1, [pc, #424]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e0:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4962      	ldr	r1, [pc, #392]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004102:	4b5d      	ldr	r3, [pc, #372]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	4959      	ldr	r1, [pc, #356]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004124:	4b54      	ldr	r3, [pc, #336]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800412a:	f023 0203 	bic.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	4951      	ldr	r1, [pc, #324]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004146:	4b4c      	ldr	r3, [pc, #304]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4948      	ldr	r1, [pc, #288]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4940      	ldr	r1, [pc, #256]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a3a      	ldr	r2, [pc, #232]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041a0:	4b35      	ldr	r3, [pc, #212]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ae:	4932      	ldr	r1, [pc, #200]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c0:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a2c      	ldr	r2, [pc, #176]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d015      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	4924      	ldr	r1, [pc, #144]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004202:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004210:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	4916      	ldr	r1, [pc, #88]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d019      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4908      	ldr	r1, [pc, #32]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004266:	d109      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a02      	ldr	r2, [pc, #8]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004272:	60d3      	str	r3, [r2, #12]
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d015      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004288:	4b29      	ldr	r3, [pc, #164]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4926      	ldr	r1, [pc, #152]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a6:	d105      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042a8:	4b21      	ldr	r3, [pc, #132]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a20      	ldr	r2, [pc, #128]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	4918      	ldr	r1, [pc, #96]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a12      	ldr	r2, [pc, #72]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d015      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004306:	490a      	ldr	r1, [pc, #40]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004316:	d105      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800431e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004322:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004324:	7cbb      	ldrb	r3, [r7, #18]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000

08004334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e049      	b.n	80043da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fe f9bc 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f001 f8e2 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d001      	beq.n	80043fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e04c      	b.n	8004496 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <HAL_TIM_Base_Start+0xc0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d022      	beq.n	8004454 <HAL_TIM_Base_Start+0x70>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d01d      	beq.n	8004454 <HAL_TIM_Base_Start+0x70>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <HAL_TIM_Base_Start+0xc4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_TIM_Base_Start+0x70>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a21      	ldr	r2, [pc, #132]	; (80044ac <HAL_TIM_Base_Start+0xc8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <HAL_TIM_Base_Start+0x70>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <HAL_TIM_Base_Start+0xcc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_TIM_Base_Start+0x70>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_TIM_Base_Start+0xd0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIM_Base_Start+0x70>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_TIM_Base_Start+0xd4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_Base_Start+0x70>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_TIM_Base_Start+0xd8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d115      	bne.n	8004480 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <HAL_TIM_Base_Start+0xdc>)
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d015      	beq.n	8004492 <HAL_TIM_Base_Start+0xae>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d011      	beq.n	8004492 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	e008      	b.n	8004492 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	e000      	b.n	8004494 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40013400 	.word	0x40013400
 80044b8:	40014000 	.word	0x40014000
 80044bc:	40015000 	.word	0x40015000
 80044c0:	00010007 	.word	0x00010007

080044c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d001      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e054      	b.n	8004586 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a26      	ldr	r2, [pc, #152]	; (8004594 <HAL_TIM_Base_Start_IT+0xd0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d022      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d01d      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <HAL_TIM_Base_Start_IT+0xd4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d018      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_TIM_Base_Start_IT+0xd8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00e      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_TIM_Base_Start_IT+0xe8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d115      	bne.n	8004570 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_TIM_Base_Start_IT+0xec>)
 800454c:	4013      	ands	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b06      	cmp	r3, #6
 8004554:	d015      	beq.n	8004582 <HAL_TIM_Base_Start_IT+0xbe>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d011      	beq.n	8004582 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	e008      	b.n	8004582 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e000      	b.n	8004584 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40013400 	.word	0x40013400
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40015000 	.word	0x40015000
 80045b0:	00010007 	.word	0x00010007

080045b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e049      	b.n	800465a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fe f946 	bl	800286c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 ffa2 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <HAL_TIM_PWM_Start+0x24>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e03c      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d109      	bne.n	80046a2 <HAL_TIM_PWM_Start+0x3e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	e02f      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d109      	bne.n	80046bc <HAL_TIM_PWM_Start+0x58>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e022      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d109      	bne.n	80046d6 <HAL_TIM_PWM_Start+0x72>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	e015      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x8c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e008      	b.n	8004702 <HAL_TIM_PWM_Start+0x9e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0a6      	b.n	8004858 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Start+0xb6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	e023      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Start+0xc6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004728:	e01b      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start+0xd6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004738:	e013      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start+0xe6>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004748:	e00b      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b10      	cmp	r3, #16
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0xf6>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	e003      	b.n	8004762 <HAL_TIM_PWM_Start+0xfe>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f001 fc7e 	bl	800606c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <HAL_TIM_PWM_Start+0x1fc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_TIM_PWM_Start+0x148>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a39      	ldr	r2, [pc, #228]	; (8004864 <HAL_TIM_PWM_Start+0x200>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_TIM_PWM_Start+0x148>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a37      	ldr	r2, [pc, #220]	; (8004868 <HAL_TIM_PWM_Start+0x204>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_TIM_PWM_Start+0x148>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a36      	ldr	r2, [pc, #216]	; (800486c <HAL_TIM_PWM_Start+0x208>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_TIM_PWM_Start+0x148>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a34      	ldr	r2, [pc, #208]	; (8004870 <HAL_TIM_PWM_Start+0x20c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIM_PWM_Start+0x148>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a33      	ldr	r2, [pc, #204]	; (8004874 <HAL_TIM_PWM_Start+0x210>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_PWM_Start+0x14c>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_TIM_PWM_Start+0x14e>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a25      	ldr	r2, [pc, #148]	; (8004860 <HAL_TIM_PWM_Start+0x1fc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d022      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1b2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d01d      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1b2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a26      	ldr	r2, [pc, #152]	; (8004878 <HAL_TIM_PWM_Start+0x214>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d018      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1b2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a24      	ldr	r2, [pc, #144]	; (800487c <HAL_TIM_PWM_Start+0x218>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1b2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a23      	ldr	r2, [pc, #140]	; (8004880 <HAL_TIM_PWM_Start+0x21c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1b2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a19      	ldr	r2, [pc, #100]	; (8004864 <HAL_TIM_PWM_Start+0x200>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1b2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a18      	ldr	r2, [pc, #96]	; (8004868 <HAL_TIM_PWM_Start+0x204>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1b2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a18      	ldr	r2, [pc, #96]	; (8004874 <HAL_TIM_PWM_Start+0x210>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d115      	bne.n	8004842 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_TIM_PWM_Start+0x220>)
 800481e:	4013      	ands	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b06      	cmp	r3, #6
 8004826:	d015      	beq.n	8004854 <HAL_TIM_PWM_Start+0x1f0>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482e:	d011      	beq.n	8004854 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	e008      	b.n	8004854 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e000      	b.n	8004856 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40013400 	.word	0x40013400
 8004868:	40014000 	.word	0x40014000
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800
 8004874:	40015000 	.word	0x40015000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	00010007 	.word	0x00010007

08004888 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e049      	b.n	800492e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f841 	bl	8004936 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 fe38 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d104      	bne.n	800496a <HAL_TIM_IC_Start_IT+0x1e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e023      	b.n	80049b2 <HAL_TIM_IC_Start_IT+0x66>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d104      	bne.n	800497a <HAL_TIM_IC_Start_IT+0x2e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004976:	b2db      	uxtb	r3, r3
 8004978:	e01b      	b.n	80049b2 <HAL_TIM_IC_Start_IT+0x66>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d104      	bne.n	800498a <HAL_TIM_IC_Start_IT+0x3e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e013      	b.n	80049b2 <HAL_TIM_IC_Start_IT+0x66>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d104      	bne.n	800499a <HAL_TIM_IC_Start_IT+0x4e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e00b      	b.n	80049b2 <HAL_TIM_IC_Start_IT+0x66>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b10      	cmp	r3, #16
 800499e:	d104      	bne.n	80049aa <HAL_TIM_IC_Start_IT+0x5e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	e003      	b.n	80049b2 <HAL_TIM_IC_Start_IT+0x66>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <HAL_TIM_IC_Start_IT+0x78>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e013      	b.n	80049ec <HAL_TIM_IC_Start_IT+0xa0>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d104      	bne.n	80049d4 <HAL_TIM_IC_Start_IT+0x88>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e00b      	b.n	80049ec <HAL_TIM_IC_Start_IT+0xa0>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d104      	bne.n	80049e4 <HAL_TIM_IC_Start_IT+0x98>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e003      	b.n	80049ec <HAL_TIM_IC_Start_IT+0xa0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d102      	bne.n	80049fa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049f4:	7b7b      	ldrb	r3, [r7, #13]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0e2      	b.n	8004bc4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_IC_Start_IT+0xc2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0c:	e023      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0x10a>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_IC_Start_IT+0xd2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a1c:	e01b      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0x10a>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_IC_Start_IT+0xe2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	e013      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0x10a>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_IC_Start_IT+0xf2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a3c:	e00b      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0x10a>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_IC_Start_IT+0x102>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a4c:	e003      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0x10a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_IC_Start_IT+0x11a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a64:	e013      	b.n	8004a8e <HAL_TIM_IC_Start_IT+0x142>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_IC_Start_IT+0x12a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a74:	e00b      	b.n	8004a8e <HAL_TIM_IC_Start_IT+0x142>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_IC_Start_IT+0x13a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a84:	e003      	b.n	8004a8e <HAL_TIM_IC_Start_IT+0x142>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b0c      	cmp	r3, #12
 8004a92:	d841      	bhi.n	8004b18 <HAL_TIM_IC_Start_IT+0x1cc>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <HAL_TIM_IC_Start_IT+0x150>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004ad1 	.word	0x08004ad1
 8004aa0:	08004b19 	.word	0x08004b19
 8004aa4:	08004b19 	.word	0x08004b19
 8004aa8:	08004b19 	.word	0x08004b19
 8004aac:	08004ae3 	.word	0x08004ae3
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004b19 	.word	0x08004b19
 8004abc:	08004af5 	.word	0x08004af5
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004b07 	.word	0x08004b07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0202 	orr.w	r2, r2, #2
 8004ade:	60da      	str	r2, [r3, #12]
      break;
 8004ae0:	e01d      	b.n	8004b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0204 	orr.w	r2, r2, #4
 8004af0:	60da      	str	r2, [r3, #12]
      break;
 8004af2:	e014      	b.n	8004b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	60da      	str	r2, [r3, #12]
      break;
 8004b04:	e00b      	b.n	8004b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0210 	orr.w	r2, r2, #16
 8004b14:	60da      	str	r2, [r3, #12]
      break;
 8004b16:	e002      	b.n	8004b1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d14e      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	6839      	ldr	r1, [r7, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fa9d 	bl	800606c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a25      	ldr	r2, [pc, #148]	; (8004bcc <HAL_TIM_IC_Start_IT+0x280>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0x236>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d01d      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0x236>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <HAL_TIM_IC_Start_IT+0x284>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0x236>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <HAL_TIM_IC_Start_IT+0x288>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0x236>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <HAL_TIM_IC_Start_IT+0x28c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0x236>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_TIM_IC_Start_IT+0x290>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0x236>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <HAL_TIM_IC_Start_IT+0x294>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_TIM_IC_Start_IT+0x236>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_TIM_IC_Start_IT+0x298>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d115      	bne.n	8004bae <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <HAL_TIM_IC_Start_IT+0x29c>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b06      	cmp	r3, #6
 8004b92:	d015      	beq.n	8004bc0 <HAL_TIM_IC_Start_IT+0x274>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d011      	beq.n	8004bc0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bac:	e008      	b.n	8004bc0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e000      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40013400 	.word	0x40013400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40015000 	.word	0x40015000
 8004be8:	00010007 	.word	0x00010007

08004bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d122      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d11b      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0202 	mvn.w	r2, #2
 8004c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc fede 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fc62 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fc69 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d122      	bne.n	8004c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d11b      	bne.n	8004c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0204 	mvn.w	r2, #4
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fc feb4 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fc38 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fc3f 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d122      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0208 	mvn.w	r2, #8
 8004cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fc fe8a 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8004cdc:	e005      	b.n	8004cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fc0e 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fc15 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d122      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d11b      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0210 	mvn.w	r2, #16
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fe60 	bl	80019f0 <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fbe4 	bl	8005500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fbeb 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0201 	mvn.w	r2, #1
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc ff30 	bl	8001bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d10e      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d88:	2b80      	cmp	r3, #128	; 0x80
 8004d8a:	d107      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f001 fa2e 	bl	80061f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d10e      	bne.n	8004dca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d107      	bne.n	8004dca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f001 fa21 	bl	800620c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d10e      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d107      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fb99 	bl	8005528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d10e      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d107      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f06f 0220 	mvn.w	r2, #32
 8004e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 f9e1 	bl	80061e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e30:	d10f      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 f9e7 	bl	8006220 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e60:	d10f      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e70:	d107      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 f9d9 	bl	8006234 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e90:	d10f      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f001 f9cb 	bl	8006248 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ec0:	d10f      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ecc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ed0:	d107      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 f9bd 	bl	800625c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e088      	b.n	800501a <HAL_TIM_IC_ConfigChannel+0x130>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d11b      	bne.n	8004f4e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f000 fedb 	bl	8005ce0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 020c 	bic.w	r2, r2, #12
 8004f38:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6999      	ldr	r1, [r3, #24]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	619a      	str	r2, [r3, #24]
 8004f4c:	e060      	b.n	8005010 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d11c      	bne.n	8004f8e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f000 ff5f 	bl	8005e26 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f76:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6999      	ldr	r1, [r3, #24]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	021a      	lsls	r2, r3, #8
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	619a      	str	r2, [r3, #24]
 8004f8c:	e040      	b.n	8005010 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f000 ffac 	bl	8005f00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69da      	ldr	r2, [r3, #28]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 020c 	bic.w	r2, r2, #12
 8004fb6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69d9      	ldr	r1, [r3, #28]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	61da      	str	r2, [r3, #28]
 8004fca:	e021      	b.n	8005010 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d11c      	bne.n	800500c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f000 ffc9 	bl	8005f78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ff4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	021a      	lsls	r2, r3, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	61da      	str	r2, [r3, #28]
 800500a:	e001      	b.n	8005010 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800503e:	2302      	movs	r3, #2
 8005040:	e0ff      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b14      	cmp	r3, #20
 800504e:	f200 80f0 	bhi.w	8005232 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	080050ad 	.word	0x080050ad
 800505c:	08005233 	.word	0x08005233
 8005060:	08005233 	.word	0x08005233
 8005064:	08005233 	.word	0x08005233
 8005068:	080050ed 	.word	0x080050ed
 800506c:	08005233 	.word	0x08005233
 8005070:	08005233 	.word	0x08005233
 8005074:	08005233 	.word	0x08005233
 8005078:	0800512f 	.word	0x0800512f
 800507c:	08005233 	.word	0x08005233
 8005080:	08005233 	.word	0x08005233
 8005084:	08005233 	.word	0x08005233
 8005088:	0800516f 	.word	0x0800516f
 800508c:	08005233 	.word	0x08005233
 8005090:	08005233 	.word	0x08005233
 8005094:	08005233 	.word	0x08005233
 8005098:	080051b1 	.word	0x080051b1
 800509c:	08005233 	.word	0x08005233
 80050a0:	08005233 	.word	0x08005233
 80050a4:	08005233 	.word	0x08005233
 80050a8:	080051f1 	.word	0x080051f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 faea 	bl	800568c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0208 	orr.w	r2, r2, #8
 80050c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0204 	bic.w	r2, r2, #4
 80050d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6999      	ldr	r1, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	619a      	str	r2, [r3, #24]
      break;
 80050ea:	e0a5      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fb64 	bl	80057c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6999      	ldr	r1, [r3, #24]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	021a      	lsls	r2, r3, #8
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	619a      	str	r2, [r3, #24]
      break;
 800512c:	e084      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fbd7 	bl	80058e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0208 	orr.w	r2, r2, #8
 8005148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0204 	bic.w	r2, r2, #4
 8005158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69d9      	ldr	r1, [r3, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	61da      	str	r2, [r3, #28]
      break;
 800516c:	e064      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fc49 	bl	8005a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69d9      	ldr	r1, [r3, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	021a      	lsls	r2, r3, #8
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	61da      	str	r2, [r3, #28]
      break;
 80051ae:	e043      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fcbc 	bl	8005b34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0208 	orr.w	r2, r2, #8
 80051ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80051ee:	e023      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fd06 	bl	8005c08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005230:	e002      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
      break;
 8005236:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop

0800524c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_TIM_ConfigClockSource+0x1c>
 8005264:	2302      	movs	r3, #2
 8005266:	e0f6      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x20a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800528a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a6f      	ldr	r2, [pc, #444]	; (8005460 <HAL_TIM_ConfigClockSource+0x214>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f000 80c1 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 80052a8:	4a6d      	ldr	r2, [pc, #436]	; (8005460 <HAL_TIM_ConfigClockSource+0x214>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f200 80c6 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 80052b0:	4a6c      	ldr	r2, [pc, #432]	; (8005464 <HAL_TIM_ConfigClockSource+0x218>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f000 80b9 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 80052b8:	4a6a      	ldr	r2, [pc, #424]	; (8005464 <HAL_TIM_ConfigClockSource+0x218>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	f200 80be 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 80052c0:	4a69      	ldr	r2, [pc, #420]	; (8005468 <HAL_TIM_ConfigClockSource+0x21c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f000 80b1 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 80052c8:	4a67      	ldr	r2, [pc, #412]	; (8005468 <HAL_TIM_ConfigClockSource+0x21c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f200 80b6 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 80052d0:	4a66      	ldr	r2, [pc, #408]	; (800546c <HAL_TIM_ConfigClockSource+0x220>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	f000 80a9 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 80052d8:	4a64      	ldr	r2, [pc, #400]	; (800546c <HAL_TIM_ConfigClockSource+0x220>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	f200 80ae 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 80052e0:	4a63      	ldr	r2, [pc, #396]	; (8005470 <HAL_TIM_ConfigClockSource+0x224>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	f000 80a1 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 80052e8:	4a61      	ldr	r2, [pc, #388]	; (8005470 <HAL_TIM_ConfigClockSource+0x224>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	f200 80a6 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 80052f0:	4a60      	ldr	r2, [pc, #384]	; (8005474 <HAL_TIM_ConfigClockSource+0x228>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	f000 8099 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 80052f8:	4a5e      	ldr	r2, [pc, #376]	; (8005474 <HAL_TIM_ConfigClockSource+0x228>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f200 809e 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 8005300:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005304:	f000 8091 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 8005308:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800530c:	f200 8096 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 8005310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005314:	f000 8089 	beq.w	800542a <HAL_TIM_ConfigClockSource+0x1de>
 8005318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531c:	f200 808e 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 8005320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005324:	d03e      	beq.n	80053a4 <HAL_TIM_ConfigClockSource+0x158>
 8005326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532a:	f200 8087 	bhi.w	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005332:	f000 8086 	beq.w	8005442 <HAL_TIM_ConfigClockSource+0x1f6>
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	d87f      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 800533c:	2b70      	cmp	r3, #112	; 0x70
 800533e:	d01a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x12a>
 8005340:	2b70      	cmp	r3, #112	; 0x70
 8005342:	d87b      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 8005344:	2b60      	cmp	r3, #96	; 0x60
 8005346:	d050      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x19e>
 8005348:	2b60      	cmp	r3, #96	; 0x60
 800534a:	d877      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 800534c:	2b50      	cmp	r3, #80	; 0x50
 800534e:	d03c      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x17e>
 8005350:	2b50      	cmp	r3, #80	; 0x50
 8005352:	d873      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d058      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x1be>
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d86f      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d064      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x1de>
 8005360:	2b30      	cmp	r3, #48	; 0x30
 8005362:	d86b      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d060      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x1de>
 8005368:	2b20      	cmp	r3, #32
 800536a:	d867      	bhi.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05c      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x1de>
 8005370:	2b10      	cmp	r3, #16
 8005372:	d05a      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x1de>
 8005374:	e062      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6899      	ldr	r1, [r3, #8]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f000 fe51 	bl	800602c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	609a      	str	r2, [r3, #8]
      break;
 80053a2:	e04f      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6899      	ldr	r1, [r3, #8]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f000 fe3a 	bl	800602c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c6:	609a      	str	r2, [r3, #8]
      break;
 80053c8:	e03c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fcf6 	bl	8005dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2150      	movs	r1, #80	; 0x50
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fe05 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 80053e8:	e02c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 fd52 	bl	8005ea0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2160      	movs	r1, #96	; 0x60
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fdf5 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005408:	e01c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	461a      	mov	r2, r3
 8005418:	f000 fcd6 	bl	8005dc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2140      	movs	r1, #64	; 0x40
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fde5 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005428:	e00c      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f000 fddc 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 800543a:	e003      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	e000      	b.n	8005444 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	00100070 	.word	0x00100070
 8005464:	00100060 	.word	0x00100060
 8005468:	00100050 	.word	0x00100050
 800546c:	00100040 	.word	0x00100040
 8005470:	00100030 	.word	0x00100030
 8005474:	00100020 	.word	0x00100020

08005478 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b0c      	cmp	r3, #12
 800548a:	d831      	bhi.n	80054f0 <HAL_TIM_ReadCapturedValue+0x78>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <HAL_TIM_ReadCapturedValue+0x1c>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054c9 	.word	0x080054c9
 8005498:	080054f1 	.word	0x080054f1
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	080054d3 	.word	0x080054d3
 80054a8:	080054f1 	.word	0x080054f1
 80054ac:	080054f1 	.word	0x080054f1
 80054b0:	080054f1 	.word	0x080054f1
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054f1 	.word	0x080054f1
 80054bc:	080054f1 	.word	0x080054f1
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	080054e7 	.word	0x080054e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ce:	60fb      	str	r3, [r7, #12]

      break;
 80054d0:	e00f      	b.n	80054f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	60fb      	str	r3, [r7, #12]

      break;
 80054da:	e00a      	b.n	80054f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	60fb      	str	r3, [r7, #12]

      break;
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	60fb      	str	r3, [r7, #12]

      break;
 80054ee:	e000      	b.n	80054f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80054f0:	bf00      	nop
  }

  return tmpreg;
 80054f2:	68fb      	ldr	r3, [r7, #12]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a46      	ldr	r2, [pc, #280]	; (8005668 <TIM_Base_SetConfig+0x12c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d017      	beq.n	8005584 <TIM_Base_SetConfig+0x48>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d013      	beq.n	8005584 <TIM_Base_SetConfig+0x48>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a43      	ldr	r2, [pc, #268]	; (800566c <TIM_Base_SetConfig+0x130>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00f      	beq.n	8005584 <TIM_Base_SetConfig+0x48>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a42      	ldr	r2, [pc, #264]	; (8005670 <TIM_Base_SetConfig+0x134>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00b      	beq.n	8005584 <TIM_Base_SetConfig+0x48>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a41      	ldr	r2, [pc, #260]	; (8005674 <TIM_Base_SetConfig+0x138>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_Base_SetConfig+0x48>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a40      	ldr	r2, [pc, #256]	; (8005678 <TIM_Base_SetConfig+0x13c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0x48>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a3f      	ldr	r2, [pc, #252]	; (800567c <TIM_Base_SetConfig+0x140>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d108      	bne.n	8005596 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a33      	ldr	r2, [pc, #204]	; (8005668 <TIM_Base_SetConfig+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d023      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d01f      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a30      	ldr	r2, [pc, #192]	; (800566c <TIM_Base_SetConfig+0x130>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01b      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2f      	ldr	r2, [pc, #188]	; (8005670 <TIM_Base_SetConfig+0x134>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d017      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2e      	ldr	r2, [pc, #184]	; (8005674 <TIM_Base_SetConfig+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2d      	ldr	r2, [pc, #180]	; (8005678 <TIM_Base_SetConfig+0x13c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00f      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2d      	ldr	r2, [pc, #180]	; (8005680 <TIM_Base_SetConfig+0x144>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <TIM_Base_SetConfig+0x148>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d007      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2b      	ldr	r2, [pc, #172]	; (8005688 <TIM_Base_SetConfig+0x14c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_Base_SetConfig+0xaa>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a26      	ldr	r2, [pc, #152]	; (800567c <TIM_Base_SetConfig+0x140>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a12      	ldr	r2, [pc, #72]	; (8005668 <TIM_Base_SetConfig+0x12c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <TIM_Base_SetConfig+0x110>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a14      	ldr	r2, [pc, #80]	; (8005678 <TIM_Base_SetConfig+0x13c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00f      	beq.n	800564c <TIM_Base_SetConfig+0x110>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a14      	ldr	r2, [pc, #80]	; (8005680 <TIM_Base_SetConfig+0x144>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_Base_SetConfig+0x110>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a13      	ldr	r2, [pc, #76]	; (8005684 <TIM_Base_SetConfig+0x148>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_Base_SetConfig+0x110>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a12      	ldr	r2, [pc, #72]	; (8005688 <TIM_Base_SetConfig+0x14c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0x110>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a0d      	ldr	r2, [pc, #52]	; (800567c <TIM_Base_SetConfig+0x140>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	615a      	str	r2, [r3, #20]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40013400 	.word	0x40013400
 800567c:	40015000 	.word	0x40015000
 8005680:	40014000 	.word	0x40014000
 8005684:	40014400 	.word	0x40014400
 8005688:	40014800 	.word	0x40014800

0800568c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0201 	bic.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0303 	bic.w	r3, r3, #3
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 0302 	bic.w	r3, r3, #2
 80056d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a30      	ldr	r2, [pc, #192]	; (80057a8 <TIM_OC1_SetConfig+0x11c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <TIM_OC1_SetConfig+0x88>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a2f      	ldr	r2, [pc, #188]	; (80057ac <TIM_OC1_SetConfig+0x120>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00f      	beq.n	8005714 <TIM_OC1_SetConfig+0x88>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a2e      	ldr	r2, [pc, #184]	; (80057b0 <TIM_OC1_SetConfig+0x124>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_OC1_SetConfig+0x88>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a2d      	ldr	r2, [pc, #180]	; (80057b4 <TIM_OC1_SetConfig+0x128>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_OC1_SetConfig+0x88>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a2c      	ldr	r2, [pc, #176]	; (80057b8 <TIM_OC1_SetConfig+0x12c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC1_SetConfig+0x88>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <TIM_OC1_SetConfig+0x130>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d10c      	bne.n	800572e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0308 	bic.w	r3, r3, #8
 800571a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 0304 	bic.w	r3, r3, #4
 800572c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <TIM_OC1_SetConfig+0x11c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_OC1_SetConfig+0xd2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <TIM_OC1_SetConfig+0x120>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_OC1_SetConfig+0xd2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <TIM_OC1_SetConfig+0x124>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_OC1_SetConfig+0xd2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <TIM_OC1_SetConfig+0x128>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_OC1_SetConfig+0xd2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <TIM_OC1_SetConfig+0x12c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_OC1_SetConfig+0xd2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a18      	ldr	r2, [pc, #96]	; (80057bc <TIM_OC1_SetConfig+0x130>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800
 80057bc:	40015000 	.word	0x40015000

080057c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 0320 	bic.w	r3, r3, #32
 800580e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <TIM_OC2_SetConfig+0x110>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_OC2_SetConfig+0x74>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2b      	ldr	r2, [pc, #172]	; (80058d4 <TIM_OC2_SetConfig+0x114>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_OC2_SetConfig+0x74>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <TIM_OC2_SetConfig+0x118>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10d      	bne.n	8005850 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <TIM_OC2_SetConfig+0x110>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <TIM_OC2_SetConfig+0xc0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <TIM_OC2_SetConfig+0x114>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <TIM_OC2_SetConfig+0xc0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <TIM_OC2_SetConfig+0x11c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_OC2_SetConfig+0xc0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <TIM_OC2_SetConfig+0x120>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_OC2_SetConfig+0xc0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <TIM_OC2_SetConfig+0x124>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC2_SetConfig+0xc0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <TIM_OC2_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d113      	bne.n	80058a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40015000 	.word	0x40015000
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800

080058e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2b      	ldr	r2, [pc, #172]	; (80059f4 <TIM_OC3_SetConfig+0x10c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_OC3_SetConfig+0x72>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2a      	ldr	r2, [pc, #168]	; (80059f8 <TIM_OC3_SetConfig+0x110>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_OC3_SetConfig+0x72>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a29      	ldr	r2, [pc, #164]	; (80059fc <TIM_OC3_SetConfig+0x114>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d10d      	bne.n	8005976 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <TIM_OC3_SetConfig+0x10c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <TIM_OC3_SetConfig+0xbe>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <TIM_OC3_SetConfig+0x110>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00f      	beq.n	80059a6 <TIM_OC3_SetConfig+0xbe>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <TIM_OC3_SetConfig+0x118>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00b      	beq.n	80059a6 <TIM_OC3_SetConfig+0xbe>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1c      	ldr	r2, [pc, #112]	; (8005a04 <TIM_OC3_SetConfig+0x11c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d007      	beq.n	80059a6 <TIM_OC3_SetConfig+0xbe>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <TIM_OC3_SetConfig+0x120>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_OC3_SetConfig+0xbe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a16      	ldr	r2, [pc, #88]	; (80059fc <TIM_OC3_SetConfig+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d113      	bne.n	80059ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	621a      	str	r2, [r3, #32]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40015000 	.word	0x40015000
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	031b      	lsls	r3, r3, #12
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a2c      	ldr	r2, [pc, #176]	; (8005b1c <TIM_OC4_SetConfig+0x110>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_OC4_SetConfig+0x74>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a2b      	ldr	r2, [pc, #172]	; (8005b20 <TIM_OC4_SetConfig+0x114>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC4_SetConfig+0x74>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a2a      	ldr	r2, [pc, #168]	; (8005b24 <TIM_OC4_SetConfig+0x118>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10d      	bne.n	8005a9c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	031b      	lsls	r3, r3, #12
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <TIM_OC4_SetConfig+0x110>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <TIM_OC4_SetConfig+0xc0>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <TIM_OC4_SetConfig+0x114>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00f      	beq.n	8005acc <TIM_OC4_SetConfig+0xc0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <TIM_OC4_SetConfig+0x11c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00b      	beq.n	8005acc <TIM_OC4_SetConfig+0xc0>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <TIM_OC4_SetConfig+0x120>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d007      	beq.n	8005acc <TIM_OC4_SetConfig+0xc0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <TIM_OC4_SetConfig+0x124>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC4_SetConfig+0xc0>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <TIM_OC4_SetConfig+0x118>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d113      	bne.n	8005af4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ada:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40015000 	.word	0x40015000
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800

08005b34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <TIM_OC5_SetConfig+0xbc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <TIM_OC5_SetConfig+0x82>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <TIM_OC5_SetConfig+0xc0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00f      	beq.n	8005bb6 <TIM_OC5_SetConfig+0x82>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <TIM_OC5_SetConfig+0xc4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_OC5_SetConfig+0x82>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <TIM_OC5_SetConfig+0xc8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <TIM_OC5_SetConfig+0x82>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <TIM_OC5_SetConfig+0xcc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC5_SetConfig+0x82>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <TIM_OC5_SetConfig+0xd0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d109      	bne.n	8005bca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800
 8005c04:	40015000 	.word	0x40015000

08005c08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	051b      	lsls	r3, r3, #20
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <TIM_OC6_SetConfig+0xc0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d013      	beq.n	8005c8c <TIM_OC6_SetConfig+0x84>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <TIM_OC6_SetConfig+0xc4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_OC6_SetConfig+0x84>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <TIM_OC6_SetConfig+0xc8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_OC6_SetConfig+0x84>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <TIM_OC6_SetConfig+0xcc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_OC6_SetConfig+0x84>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <TIM_OC6_SetConfig+0xd0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC6_SetConfig+0x84>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <TIM_OC6_SetConfig+0xd4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d109      	bne.n	8005ca0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	029b      	lsls	r3, r3, #10
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	621a      	str	r2, [r3, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40013400 	.word	0x40013400
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40014400 	.word	0x40014400
 8005cd8:	40014800 	.word	0x40014800
 8005cdc:	40015000 	.word	0x40015000

08005ce0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4a28      	ldr	r2, [pc, #160]	; (8005dac <TIM_TI1_SetConfig+0xcc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01b      	beq.n	8005d46 <TIM_TI1_SetConfig+0x66>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d14:	d017      	beq.n	8005d46 <TIM_TI1_SetConfig+0x66>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a25      	ldr	r2, [pc, #148]	; (8005db0 <TIM_TI1_SetConfig+0xd0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <TIM_TI1_SetConfig+0x66>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a24      	ldr	r2, [pc, #144]	; (8005db4 <TIM_TI1_SetConfig+0xd4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00f      	beq.n	8005d46 <TIM_TI1_SetConfig+0x66>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a23      	ldr	r2, [pc, #140]	; (8005db8 <TIM_TI1_SetConfig+0xd8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00b      	beq.n	8005d46 <TIM_TI1_SetConfig+0x66>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a22      	ldr	r2, [pc, #136]	; (8005dbc <TIM_TI1_SetConfig+0xdc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_TI1_SetConfig+0x66>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <TIM_TI1_SetConfig+0xe0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_TI1_SetConfig+0x66>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <TIM_TI1_SetConfig+0xe4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d101      	bne.n	8005d4a <TIM_TI1_SetConfig+0x6a>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <TIM_TI1_SetConfig+0x6c>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e003      	b.n	8005d6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f023 030a 	bic.w	r3, r3, #10
 8005d84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f003 030a 	and.w	r3, r3, #10
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40015000 	.word	0x40015000

08005dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f023 0201 	bic.w	r2, r3, #1
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 030a 	bic.w	r3, r3, #10
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b087      	sub	sp, #28
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f023 0210 	bic.w	r2, r3, #16
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	031b      	lsls	r3, r3, #12
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	621a      	str	r2, [r3, #32]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f023 0210 	bic.w	r2, r3, #16
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	031b      	lsls	r3, r3, #12
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f023 0303 	bic.w	r3, r3, #3
 8005f2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	621a      	str	r2, [r3, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	031b      	lsls	r3, r3, #12
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005fca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	031b      	lsls	r3, r3, #12
 8005fd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	f043 0307 	orr.w	r3, r3, #7
 8006018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	431a      	orrs	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2201      	movs	r2, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	43db      	mvns	r3, r3
 800608e:	401a      	ands	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1a      	ldr	r2, [r3, #32]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e074      	b.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a33      	ldr	r2, [pc, #204]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a31      	ldr	r2, [pc, #196]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006114:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006150:	d01d      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1d      	ldr	r2, [pc, #116]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a15      	ldr	r2, [pc, #84]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a11      	ldr	r2, [pc, #68]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d10c      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4313      	orrs	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40013400 	.word	0x40013400
 80061d0:	40015000 	.word	0x40015000
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40014000 	.word	0x40014000

080061e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e042      	b.n	8006308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fc fbd7 	bl	8002a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2224      	movs	r2, #36	; 0x24
 800629e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f996 	bl	80065e4 <UART_SetConfig>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e022      	b.n	8006308 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fc86 	bl	8006bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fd0d 	bl	8006d20 <UART_CheckIdleState>
 8006306:	4603      	mov	r3, r0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006326:	2b20      	cmp	r3, #32
 8006328:	f040 8083 	bne.w	8006432 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_UART_Transmit+0x28>
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e07b      	b.n	8006434 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_UART_Transmit+0x3a>
 8006346:	2302      	movs	r3, #2
 8006348:	e074      	b.n	8006434 <HAL_UART_Transmit+0x124>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2221      	movs	r2, #33	; 0x21
 800635e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006362:	f7fc fcd9 	bl	8002d18 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d108      	bne.n	8006394 <HAL_UART_Transmit+0x84>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	e003      	b.n	800639c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80063a4:	e02c      	b.n	8006400 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2200      	movs	r2, #0
 80063ae:	2180      	movs	r1, #128	; 0x80
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fd00 	bl	8006db6 <UART_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e039      	b.n	8006434 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	3302      	adds	r3, #2
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	e007      	b.n	80063ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	3301      	adds	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1cc      	bne.n	80063a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2200      	movs	r2, #0
 8006414:	2140      	movs	r1, #64	; 0x40
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fccd 	bl	8006db6 <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e006      	b.n	8006434 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	4618      	mov	r0, r3
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08a      	sub	sp, #40	; 0x28
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	2b20      	cmp	r3, #32
 8006454:	f040 80c0 	bne.w	80065d8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_UART_Receive+0x28>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e0b8      	b.n	80065da <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_UART_Receive+0x3a>
 8006472:	2302      	movs	r3, #2
 8006474:	e0b1      	b.n	80065da <HAL_UART_Receive+0x19e>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2222      	movs	r2, #34	; 0x22
 800648a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006494:	f7fc fc40 	bl	8002d18 <HAL_GetTick>
 8006498:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b2:	d10e      	bne.n	80064d2 <HAL_UART_Receive+0x96>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <HAL_UART_Receive+0x8c>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064c6:	e02d      	b.n	8006524 <HAL_UART_Receive+0xe8>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	22ff      	movs	r2, #255	; 0xff
 80064cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d0:	e028      	b.n	8006524 <HAL_UART_Receive+0xe8>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <HAL_UART_Receive+0xba>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_UART_Receive+0xb0>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ea:	e01b      	b.n	8006524 <HAL_UART_Receive+0xe8>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	227f      	movs	r2, #127	; 0x7f
 80064f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064f4:	e016      	b.n	8006524 <HAL_UART_Receive+0xe8>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064fe:	d10d      	bne.n	800651c <HAL_UART_Receive+0xe0>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <HAL_UART_Receive+0xd6>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	227f      	movs	r2, #127	; 0x7f
 800650c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006510:	e008      	b.n	8006524 <HAL_UART_Receive+0xe8>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	223f      	movs	r2, #63	; 0x3f
 8006516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800651a:	e003      	b.n	8006524 <HAL_UART_Receive+0xe8>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800652a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006534:	d108      	bne.n	8006548 <HAL_UART_Receive+0x10c>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e003      	b.n	8006550 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006558:	e032      	b.n	80065c0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2120      	movs	r1, #32
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fc26 	bl	8006db6 <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e032      	b.n	80065da <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10c      	bne.n	8006594 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	b29a      	uxth	r2, r3
 8006582:	8a7b      	ldrh	r3, [r7, #18]
 8006584:	4013      	ands	r3, r2
 8006586:	b29a      	uxth	r2, r3
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	3302      	adds	r3, #2
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e00c      	b.n	80065ae <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	b2da      	uxtb	r2, r3
 800659c:	8a7b      	ldrh	r3, [r7, #18]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	4013      	ands	r3, r2
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	3301      	adds	r3, #1
 80065ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1c6      	bne.n	800655a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	e000      	b.n	80065da <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80065d8:	2302      	movs	r3, #2
  }
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e8:	b08c      	sub	sp, #48	; 0x30
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	431a      	orrs	r2, r3
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	4313      	orrs	r3, r2
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4baa      	ldr	r3, [pc, #680]	; (80068bc <UART_SetConfig+0x2d8>)
 8006614:	4013      	ands	r3, r2
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800661c:	430b      	orrs	r3, r1
 800661e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a9f      	ldr	r2, [pc, #636]	; (80068c0 <UART_SetConfig+0x2dc>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800664c:	4313      	orrs	r3, r2
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800665a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006664:	430b      	orrs	r3, r1
 8006666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	f023 010f 	bic.w	r1, r3, #15
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a90      	ldr	r2, [pc, #576]	; (80068c4 <UART_SetConfig+0x2e0>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d125      	bne.n	80066d4 <UART_SetConfig+0xf0>
 8006688:	4b8f      	ldr	r3, [pc, #572]	; (80068c8 <UART_SetConfig+0x2e4>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b03      	cmp	r3, #3
 8006694:	d81a      	bhi.n	80066cc <UART_SetConfig+0xe8>
 8006696:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0xb8>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b2:	e116      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ba:	e112      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80066bc:	2304      	movs	r3, #4
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c2:	e10e      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80066c4:	2308      	movs	r3, #8
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ca:	e10a      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d2:	e106      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7c      	ldr	r2, [pc, #496]	; (80068cc <UART_SetConfig+0x2e8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d138      	bne.n	8006750 <UART_SetConfig+0x16c>
 80066de:	4b7a      	ldr	r3, [pc, #488]	; (80068c8 <UART_SetConfig+0x2e4>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	d82d      	bhi.n	8006748 <UART_SetConfig+0x164>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0x110>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006749 	.word	0x08006749
 8006700:	08006749 	.word	0x08006749
 8006704:	08006739 	.word	0x08006739
 8006708:	08006749 	.word	0x08006749
 800670c:	08006749 	.word	0x08006749
 8006710:	08006749 	.word	0x08006749
 8006714:	08006731 	.word	0x08006731
 8006718:	08006749 	.word	0x08006749
 800671c:	08006749 	.word	0x08006749
 8006720:	08006749 	.word	0x08006749
 8006724:	08006741 	.word	0x08006741
 8006728:	2300      	movs	r3, #0
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672e:	e0d8      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006736:	e0d4      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673e:	e0d0      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006746:	e0cc      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674e:	e0c8      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5e      	ldr	r2, [pc, #376]	; (80068d0 <UART_SetConfig+0x2ec>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d125      	bne.n	80067a6 <UART_SetConfig+0x1c2>
 800675a:	4b5b      	ldr	r3, [pc, #364]	; (80068c8 <UART_SetConfig+0x2e4>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006764:	2b30      	cmp	r3, #48	; 0x30
 8006766:	d016      	beq.n	8006796 <UART_SetConfig+0x1b2>
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d818      	bhi.n	800679e <UART_SetConfig+0x1ba>
 800676c:	2b20      	cmp	r3, #32
 800676e:	d00a      	beq.n	8006786 <UART_SetConfig+0x1a2>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d814      	bhi.n	800679e <UART_SetConfig+0x1ba>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <UART_SetConfig+0x19a>
 8006778:	2b10      	cmp	r3, #16
 800677a:	d008      	beq.n	800678e <UART_SetConfig+0x1aa>
 800677c:	e00f      	b.n	800679e <UART_SetConfig+0x1ba>
 800677e:	2300      	movs	r3, #0
 8006780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006784:	e0ad      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006786:	2302      	movs	r3, #2
 8006788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678c:	e0a9      	b.n	80068e2 <UART_SetConfig+0x2fe>
 800678e:	2304      	movs	r3, #4
 8006790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006794:	e0a5      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006796:	2308      	movs	r3, #8
 8006798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679c:	e0a1      	b.n	80068e2 <UART_SetConfig+0x2fe>
 800679e:	2310      	movs	r3, #16
 80067a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a4:	e09d      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4a      	ldr	r2, [pc, #296]	; (80068d4 <UART_SetConfig+0x2f0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d125      	bne.n	80067fc <UART_SetConfig+0x218>
 80067b0:	4b45      	ldr	r3, [pc, #276]	; (80068c8 <UART_SetConfig+0x2e4>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ba:	2bc0      	cmp	r3, #192	; 0xc0
 80067bc:	d016      	beq.n	80067ec <UART_SetConfig+0x208>
 80067be:	2bc0      	cmp	r3, #192	; 0xc0
 80067c0:	d818      	bhi.n	80067f4 <UART_SetConfig+0x210>
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d00a      	beq.n	80067dc <UART_SetConfig+0x1f8>
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d814      	bhi.n	80067f4 <UART_SetConfig+0x210>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <UART_SetConfig+0x1f0>
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d008      	beq.n	80067e4 <UART_SetConfig+0x200>
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x210>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067da:	e082      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e2:	e07e      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ea:	e07a      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f2:	e076      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fa:	e072      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a35      	ldr	r2, [pc, #212]	; (80068d8 <UART_SetConfig+0x2f4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d12a      	bne.n	800685c <UART_SetConfig+0x278>
 8006806:	4b30      	ldr	r3, [pc, #192]	; (80068c8 <UART_SetConfig+0x2e4>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006814:	d01a      	beq.n	800684c <UART_SetConfig+0x268>
 8006816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800681a:	d81b      	bhi.n	8006854 <UART_SetConfig+0x270>
 800681c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006820:	d00c      	beq.n	800683c <UART_SetConfig+0x258>
 8006822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006826:	d815      	bhi.n	8006854 <UART_SetConfig+0x270>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <UART_SetConfig+0x250>
 800682c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x260>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x270>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683a:	e052      	b.n	80068e2 <UART_SetConfig+0x2fe>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006842:	e04e      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684a:	e04a      	b.n	80068e2 <UART_SetConfig+0x2fe>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006852:	e046      	b.n	80068e2 <UART_SetConfig+0x2fe>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685a:	e042      	b.n	80068e2 <UART_SetConfig+0x2fe>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <UART_SetConfig+0x2dc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d13a      	bne.n	80068dc <UART_SetConfig+0x2f8>
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <UART_SetConfig+0x2e4>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006874:	d01a      	beq.n	80068ac <UART_SetConfig+0x2c8>
 8006876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800687a:	d81b      	bhi.n	80068b4 <UART_SetConfig+0x2d0>
 800687c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006880:	d00c      	beq.n	800689c <UART_SetConfig+0x2b8>
 8006882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006886:	d815      	bhi.n	80068b4 <UART_SetConfig+0x2d0>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <UART_SetConfig+0x2b0>
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d008      	beq.n	80068a4 <UART_SetConfig+0x2c0>
 8006892:	e00f      	b.n	80068b4 <UART_SetConfig+0x2d0>
 8006894:	2300      	movs	r3, #0
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689a:	e022      	b.n	80068e2 <UART_SetConfig+0x2fe>
 800689c:	2302      	movs	r3, #2
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a2:	e01e      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068aa:	e01a      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80068ac:	2308      	movs	r3, #8
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b2:	e016      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ba:	e012      	b.n	80068e2 <UART_SetConfig+0x2fe>
 80068bc:	cfff69f3 	.word	0xcfff69f3
 80068c0:	40008000 	.word	0x40008000
 80068c4:	40013800 	.word	0x40013800
 80068c8:	40021000 	.word	0x40021000
 80068cc:	40004400 	.word	0x40004400
 80068d0:	40004800 	.word	0x40004800
 80068d4:	40004c00 	.word	0x40004c00
 80068d8:	40005000 	.word	0x40005000
 80068dc:	2310      	movs	r3, #16
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4aae      	ldr	r2, [pc, #696]	; (8006ba0 <UART_SetConfig+0x5bc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	f040 8097 	bne.w	8006a1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d823      	bhi.n	800693e <UART_SetConfig+0x35a>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x318>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006921 	.word	0x08006921
 8006900:	0800693f 	.word	0x0800693f
 8006904:	08006929 	.word	0x08006929
 8006908:	0800693f 	.word	0x0800693f
 800690c:	0800692f 	.word	0x0800692f
 8006910:	0800693f 	.word	0x0800693f
 8006914:	0800693f 	.word	0x0800693f
 8006918:	0800693f 	.word	0x0800693f
 800691c:	08006937 	.word	0x08006937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006920:	f7fd fa48 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8006924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006926:	e010      	b.n	800694a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006928:	4b9e      	ldr	r3, [pc, #632]	; (8006ba4 <UART_SetConfig+0x5c0>)
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800692c:	e00d      	b.n	800694a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692e:	f7fd f9d3 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8006932:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006934:	e009      	b.n	800694a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800693c:	e005      	b.n	800694a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8130 	beq.w	8006bb2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	4a94      	ldr	r2, [pc, #592]	; (8006ba8 <UART_SetConfig+0x5c4>)
 8006958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800695c:	461a      	mov	r2, r3
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	fbb3 f3f2 	udiv	r3, r3, r2
 8006964:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	4413      	add	r3, r2
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	429a      	cmp	r2, r3
 8006974:	d305      	bcc.n	8006982 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	429a      	cmp	r2, r3
 8006980:	d903      	bls.n	800698a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006988:	e113      	b.n	8006bb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	2200      	movs	r2, #0
 800698e:	60bb      	str	r3, [r7, #8]
 8006990:	60fa      	str	r2, [r7, #12]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	4a84      	ldr	r2, [pc, #528]	; (8006ba8 <UART_SetConfig+0x5c4>)
 8006998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800699c:	b29b      	uxth	r3, r3
 800699e:	2200      	movs	r2, #0
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069ac:	f7fa f96c 	bl	8000c88 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	020b      	lsls	r3, r1, #8
 80069c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069c6:	0202      	lsls	r2, r0, #8
 80069c8:	6979      	ldr	r1, [r7, #20]
 80069ca:	6849      	ldr	r1, [r1, #4]
 80069cc:	0849      	lsrs	r1, r1, #1
 80069ce:	2000      	movs	r0, #0
 80069d0:	460c      	mov	r4, r1
 80069d2:	4605      	mov	r5, r0
 80069d4:	eb12 0804 	adds.w	r8, r2, r4
 80069d8:	eb43 0905 	adc.w	r9, r3, r5
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	469a      	mov	sl, r3
 80069e4:	4693      	mov	fp, r2
 80069e6:	4652      	mov	r2, sl
 80069e8:	465b      	mov	r3, fp
 80069ea:	4640      	mov	r0, r8
 80069ec:	4649      	mov	r1, r9
 80069ee:	f7fa f94b 	bl	8000c88 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4613      	mov	r3, r2
 80069f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a00:	d308      	bcc.n	8006a14 <UART_SetConfig+0x430>
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a08:	d204      	bcs.n	8006a14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6a3a      	ldr	r2, [r7, #32]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e0ce      	b.n	8006bb2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a1a:	e0ca      	b.n	8006bb2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a24:	d166      	bne.n	8006af4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d827      	bhi.n	8006a7e <UART_SetConfig+0x49a>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0x450>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	08006a7f 	.word	0x08006a7f
 8006a44:	08006a6f 	.word	0x08006a6f
 8006a48:	08006a7f 	.word	0x08006a7f
 8006a4c:	08006a7f 	.word	0x08006a7f
 8006a50:	08006a7f 	.word	0x08006a7f
 8006a54:	08006a77 	.word	0x08006a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a58:	f7fd f9ac 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8006a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a5e:	e014      	b.n	8006a8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fd f9be 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8006a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a66:	e010      	b.n	8006a8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a68:	4b4e      	ldr	r3, [pc, #312]	; (8006ba4 <UART_SetConfig+0x5c0>)
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a6c:	e00d      	b.n	8006a8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6e:	f7fd f933 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8006a72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a74:	e009      	b.n	8006a8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a7c:	e005      	b.n	8006a8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8090 	beq.w	8006bb2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	4a44      	ldr	r2, [pc, #272]	; (8006ba8 <UART_SetConfig+0x5c4>)
 8006a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa4:	005a      	lsls	r2, r3, #1
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	441a      	add	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	2b0f      	cmp	r3, #15
 8006abc:	d916      	bls.n	8006aec <UART_SetConfig+0x508>
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac4:	d212      	bcs.n	8006aec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f023 030f 	bic.w	r3, r3, #15
 8006ace:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	8bfb      	ldrh	r3, [r7, #30]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	8bfa      	ldrh	r2, [r7, #30]
 8006ae8:	60da      	str	r2, [r3, #12]
 8006aea:	e062      	b.n	8006bb2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006af2:	e05e      	b.n	8006bb2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d828      	bhi.n	8006b4e <UART_SetConfig+0x56a>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <UART_SetConfig+0x520>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b31 	.word	0x08006b31
 8006b0c:	08006b39 	.word	0x08006b39
 8006b10:	08006b4f 	.word	0x08006b4f
 8006b14:	08006b3f 	.word	0x08006b3f
 8006b18:	08006b4f 	.word	0x08006b4f
 8006b1c:	08006b4f 	.word	0x08006b4f
 8006b20:	08006b4f 	.word	0x08006b4f
 8006b24:	08006b47 	.word	0x08006b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b28:	f7fd f944 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8006b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b2e:	e014      	b.n	8006b5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b30:	f7fd f956 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8006b34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b36:	e010      	b.n	8006b5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b38:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <UART_SetConfig+0x5c0>)
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b3c:	e00d      	b.n	8006b5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3e:	f7fd f8cb 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8006b42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b44:	e009      	b.n	8006b5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b4c:	e005      	b.n	8006b5a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b58:	bf00      	nop
    }

    if (pclk != 0U)
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d028      	beq.n	8006bb2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	4a10      	ldr	r2, [pc, #64]	; (8006ba8 <UART_SetConfig+0x5c4>)
 8006b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	441a      	add	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	d910      	bls.n	8006bac <UART_SetConfig+0x5c8>
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b90:	d20c      	bcs.n	8006bac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	e009      	b.n	8006bb2 <UART_SetConfig+0x5ce>
 8006b9e:	bf00      	nop
 8006ba0:	40008000 	.word	0x40008000
 8006ba4:	00f42400 	.word	0x00f42400
 8006ba8:	0800c818 	.word	0x0800c818
      }
      else
      {
        ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006bce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3730      	adds	r7, #48	; 0x30
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cda:	d10a      	bne.n	8006cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d30:	f7fb fff2 	bl	8002d18 <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d10e      	bne.n	8006d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f82f 	bl	8006db6 <UART_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e025      	b.n	8006dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d10e      	bne.n	8006d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f819 	bl	8006db6 <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e00f      	b.n	8006dae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b09c      	sub	sp, #112	; 0x70
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc6:	e0a9      	b.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dce:	f000 80a5 	beq.w	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fb ffa1 	bl	8002d18 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d140      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e6      	bne.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	663b      	str	r3, [r7, #96]	; 0x60
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3308      	adds	r3, #8
 8006e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e5      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e069      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d051      	beq.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e86:	d149      	bne.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ee4:	623a      	str	r2, [r7, #32]
 8006ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	6a3a      	ldr	r2, [r7, #32]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e010      	b.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4013      	ands	r3, r2
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	f43f af46 	beq.w	8006dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3770      	adds	r7, #112	; 0x70
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e027      	b.n	8006fac <HAL_UARTEx_DisableFifoMode+0x66>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2224      	movs	r2, #36	; 0x24
 8006f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0201 	bic.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e02d      	b.n	800702c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2224      	movs	r2, #36	; 0x24
 8006fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0201 	bic.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f84f 	bl	80070b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007048:	2302      	movs	r3, #2
 800704a:	e02d      	b.n	80070a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f811 	bl	80070b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d108      	bne.n	80070d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070d0:	e031      	b.n	8007136 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070d2:	2308      	movs	r3, #8
 80070d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070d6:	2308      	movs	r3, #8
 80070d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	0e5b      	lsrs	r3, r3, #25
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	0f5b      	lsrs	r3, r3, #29
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	7b3a      	ldrb	r2, [r7, #12]
 80070fe:	4911      	ldr	r1, [pc, #68]	; (8007144 <UARTEx_SetNbDataToProcess+0x94>)
 8007100:	5c8a      	ldrb	r2, [r1, r2]
 8007102:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007106:	7b3a      	ldrb	r2, [r7, #12]
 8007108:	490f      	ldr	r1, [pc, #60]	; (8007148 <UARTEx_SetNbDataToProcess+0x98>)
 800710a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800710c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	7b7a      	ldrb	r2, [r7, #13]
 800711c:	4909      	ldr	r1, [pc, #36]	; (8007144 <UARTEx_SetNbDataToProcess+0x94>)
 800711e:	5c8a      	ldrb	r2, [r1, r2]
 8007120:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007124:	7b7a      	ldrb	r2, [r7, #13]
 8007126:	4908      	ldr	r1, [pc, #32]	; (8007148 <UARTEx_SetNbDataToProcess+0x98>)
 8007128:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800712a:	fb93 f3f2 	sdiv	r3, r3, r2
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	0800c830 	.word	0x0800c830
 8007148:	0800c838 	.word	0x0800c838

0800714c <__NVIC_SetPriority>:
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715c:	2b00      	cmp	r3, #0
 800715e:	db0a      	blt.n	8007176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	b2da      	uxtb	r2, r3
 8007164:	490c      	ldr	r1, [pc, #48]	; (8007198 <__NVIC_SetPriority+0x4c>)
 8007166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716a:	0112      	lsls	r2, r2, #4
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	440b      	add	r3, r1
 8007170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007174:	e00a      	b.n	800718c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4908      	ldr	r1, [pc, #32]	; (800719c <__NVIC_SetPriority+0x50>)
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	3b04      	subs	r3, #4
 8007184:	0112      	lsls	r2, r2, #4
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	440b      	add	r3, r1
 800718a:	761a      	strb	r2, [r3, #24]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	e000e100 	.word	0xe000e100
 800719c:	e000ed00 	.word	0xe000ed00

080071a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071a4:	2100      	movs	r1, #0
 80071a6:	f06f 0004 	mvn.w	r0, #4
 80071aa:	f7ff ffcf 	bl	800714c <__NVIC_SetPriority>
#endif
}
 80071ae:	bf00      	nop
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ba:	f3ef 8305 	mrs	r3, IPSR
 80071be:	603b      	str	r3, [r7, #0]
  return(result);
 80071c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071c6:	f06f 0305 	mvn.w	r3, #5
 80071ca:	607b      	str	r3, [r7, #4]
 80071cc:	e00c      	b.n	80071e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071ce:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <osKernelInitialize+0x44>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d105      	bne.n	80071e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <osKernelInitialize+0x44>)
 80071d8:	2201      	movs	r2, #1
 80071da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071dc:	2300      	movs	r3, #0
 80071de:	607b      	str	r3, [r7, #4]
 80071e0:	e002      	b.n	80071e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071e8:	687b      	ldr	r3, [r7, #4]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	2000044c 	.word	0x2000044c

080071fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007202:	f3ef 8305 	mrs	r3, IPSR
 8007206:	603b      	str	r3, [r7, #0]
  return(result);
 8007208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <osKernelStart+0x1a>
    stat = osErrorISR;
 800720e:	f06f 0305 	mvn.w	r3, #5
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	e010      	b.n	8007238 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <osKernelStart+0x48>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d109      	bne.n	8007232 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800721e:	f7ff ffbf 	bl	80071a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007222:	4b08      	ldr	r3, [pc, #32]	; (8007244 <osKernelStart+0x48>)
 8007224:	2202      	movs	r2, #2
 8007226:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007228:	f001 fa3c 	bl	80086a4 <vTaskStartScheduler>
      stat = osOK;
 800722c:	2300      	movs	r3, #0
 800722e:	607b      	str	r3, [r7, #4]
 8007230:	e002      	b.n	8007238 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007232:	f04f 33ff 	mov.w	r3, #4294967295
 8007236:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007238:	687b      	ldr	r3, [r7, #4]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	2000044c 	.word	0x2000044c

08007248 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b08e      	sub	sp, #56	; 0x38
 800724c:	af04      	add	r7, sp, #16
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007258:	f3ef 8305 	mrs	r3, IPSR
 800725c:	617b      	str	r3, [r7, #20]
  return(result);
 800725e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007260:	2b00      	cmp	r3, #0
 8007262:	d17e      	bne.n	8007362 <osThreadNew+0x11a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d07b      	beq.n	8007362 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800726a:	2380      	movs	r3, #128	; 0x80
 800726c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800726e:	2318      	movs	r3, #24
 8007270:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007276:	f04f 33ff 	mov.w	r3, #4294967295
 800727a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d045      	beq.n	800730e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <osThreadNew+0x48>
        name = attr->name;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <osThreadNew+0x6e>
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2b38      	cmp	r3, #56	; 0x38
 80072a8:	d805      	bhi.n	80072b6 <osThreadNew+0x6e>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <osThreadNew+0x72>
        return (NULL);
 80072b6:	2300      	movs	r3, #0
 80072b8:	e054      	b.n	8007364 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	089b      	lsrs	r3, r3, #2
 80072c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00e      	beq.n	80072f0 <osThreadNew+0xa8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2bbb      	cmp	r3, #187	; 0xbb
 80072d8:	d90a      	bls.n	80072f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d006      	beq.n	80072f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <osThreadNew+0xa8>
        mem = 1;
 80072ea:	2301      	movs	r3, #1
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	e010      	b.n	8007312 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10c      	bne.n	8007312 <osThreadNew+0xca>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d108      	bne.n	8007312 <osThreadNew+0xca>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <osThreadNew+0xca>
          mem = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	e001      	b.n	8007312 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d110      	bne.n	800733a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007320:	9202      	str	r2, [sp, #8]
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6a3a      	ldr	r2, [r7, #32]
 800732c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f001 f818 	bl	8008364 <xTaskCreateStatic>
 8007334:	4603      	mov	r3, r0
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	e013      	b.n	8007362 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d110      	bne.n	8007362 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	b29a      	uxth	r2, r3
 8007344:	f107 0310 	add.w	r3, r7, #16
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 f836 	bl	80083c4 <xTaskCreate>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	d001      	beq.n	8007362 <osThreadNew+0x11a>
            hTask = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007362:	693b      	ldr	r3, [r7, #16]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3728      	adds	r7, #40	; 0x28
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007374:	f3ef 8305 	mrs	r3, IPSR
 8007378:	60bb      	str	r3, [r7, #8]
  return(result);
 800737a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <osDelay+0x1c>
    stat = osErrorISR;
 8007380:	f06f 0305 	mvn.w	r3, #5
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e007      	b.n	8007398 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 f962 	bl	800865c <vTaskDelay>
    }
  }

  return (stat);
 8007398:	68fb      	ldr	r3, [r7, #12]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b08a      	sub	sp, #40	; 0x28
 80073a6:	af02      	add	r7, sp, #8
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b2:	f3ef 8305 	mrs	r3, IPSR
 80073b6:	613b      	str	r3, [r7, #16]
  return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d175      	bne.n	80074aa <osSemaphoreNew+0x108>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d072      	beq.n	80074aa <osSemaphoreNew+0x108>
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d86e      	bhi.n	80074aa <osSemaphoreNew+0x108>
    mem = -1;
 80073cc:	f04f 33ff 	mov.w	r3, #4294967295
 80073d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d015      	beq.n	8007404 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d006      	beq.n	80073ee <osSemaphoreNew+0x4c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	2b4f      	cmp	r3, #79	; 0x4f
 80073e6:	d902      	bls.n	80073ee <osSemaphoreNew+0x4c>
        mem = 1;
 80073e8:	2301      	movs	r3, #1
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	e00c      	b.n	8007408 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d108      	bne.n	8007408 <osSemaphoreNew+0x66>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d104      	bne.n	8007408 <osSemaphoreNew+0x66>
          mem = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	e001      	b.n	8007408 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d04c      	beq.n	80074aa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d128      	bne.n	8007468 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d10a      	bne.n	8007432 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	2203      	movs	r2, #3
 8007422:	9200      	str	r2, [sp, #0]
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	2001      	movs	r0, #1
 800742a:	f000 fa1b 	bl	8007864 <xQueueGenericCreateStatic>
 800742e:	61f8      	str	r0, [r7, #28]
 8007430:	e005      	b.n	800743e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007432:	2203      	movs	r2, #3
 8007434:	2100      	movs	r1, #0
 8007436:	2001      	movs	r0, #1
 8007438:	f000 fa33 	bl	80078a2 <xQueueGenericCreate>
 800743c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d022      	beq.n	800748a <osSemaphoreNew+0xe8>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01f      	beq.n	800748a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800744a:	2300      	movs	r3, #0
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	69f8      	ldr	r0, [r7, #28]
 8007452:	f000 faa5 	bl	80079a0 <xQueueGenericSend>
 8007456:	4603      	mov	r3, r0
 8007458:	2b01      	cmp	r3, #1
 800745a:	d016      	beq.n	800748a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800745c:	69f8      	ldr	r0, [r7, #28]
 800745e:	f000 fdbc 	bl	8007fda <vQueueDelete>
            hSemaphore = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e010      	b.n	800748a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d108      	bne.n	8007480 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	461a      	mov	r2, r3
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fa62 	bl	8007940 <xQueueCreateCountingSemaphoreStatic>
 800747c:	61f8      	str	r0, [r7, #28]
 800747e:	e004      	b.n	800748a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 fa76 	bl	8007974 <xQueueCreateCountingSemaphore>
 8007488:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00c      	beq.n	80074aa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e001      	b.n	80074a2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	69f8      	ldr	r0, [r7, #28]
 80074a6:	f000 fed5 	bl	8008254 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80074aa:	69fb      	ldr	r3, [r7, #28]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3720      	adds	r7, #32
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80074cc:	f06f 0303 	mvn.w	r3, #3
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e039      	b.n	8007548 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d4:	f3ef 8305 	mrs	r3, IPSR
 80074d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80074da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d022      	beq.n	8007526 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80074e6:	f06f 0303 	mvn.w	r3, #3
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e02c      	b.n	8007548 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80074f2:	f107 0308 	add.w	r3, r7, #8
 80074f6:	461a      	mov	r2, r3
 80074f8:	2100      	movs	r1, #0
 80074fa:	6938      	ldr	r0, [r7, #16]
 80074fc:	f000 fd16 	bl	8007f2c <xQueueReceiveFromISR>
 8007500:	4603      	mov	r3, r0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d003      	beq.n	800750e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007506:	f06f 0302 	mvn.w	r3, #2
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	e01c      	b.n	8007548 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d019      	beq.n	8007548 <osSemaphoreAcquire+0x94>
 8007514:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <osSemaphoreAcquire+0xa0>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	e010      	b.n	8007548 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6938      	ldr	r0, [r7, #16]
 800752a:	f000 fc37 	bl	8007d9c <xQueueSemaphoreTake>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d009      	beq.n	8007548 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800753a:	f06f 0301 	mvn.w	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e002      	b.n	8007548 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007542:	f06f 0302 	mvn.w	r3, #2
 8007546:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	e000ed04 	.word	0xe000ed04

08007558 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d103      	bne.n	8007576 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800756e:	f06f 0303 	mvn.w	r3, #3
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	e02c      	b.n	80075d0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007576:	f3ef 8305 	mrs	r3, IPSR
 800757a:	60fb      	str	r3, [r7, #12]
  return(result);
 800757c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01a      	beq.n	80075b8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007586:	f107 0308 	add.w	r3, r7, #8
 800758a:	4619      	mov	r1, r3
 800758c:	6938      	ldr	r0, [r7, #16]
 800758e:	f000 fb0e 	bl	8007bae <xQueueGiveFromISR>
 8007592:	4603      	mov	r3, r0
 8007594:	2b01      	cmp	r3, #1
 8007596:	d003      	beq.n	80075a0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007598:	f06f 0302 	mvn.w	r3, #2
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	e017      	b.n	80075d0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d014      	beq.n	80075d0 <osSemaphoreRelease+0x78>
 80075a6:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <osSemaphoreRelease+0x84>)
 80075a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	e00b      	b.n	80075d0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80075b8:	2300      	movs	r3, #0
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	6938      	ldr	r0, [r7, #16]
 80075c0:	f000 f9ee 	bl	80079a0 <xQueueGenericSend>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d002      	beq.n	80075d0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80075ca:	f06f 0302 	mvn.w	r3, #2
 80075ce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80075d0:	697b      	ldr	r3, [r7, #20]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4a07      	ldr	r2, [pc, #28]	; (800760c <vApplicationGetIdleTaskMemory+0x2c>)
 80075f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	4a06      	ldr	r2, [pc, #24]	; (8007610 <vApplicationGetIdleTaskMemory+0x30>)
 80075f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2280      	movs	r2, #128	; 0x80
 80075fc:	601a      	str	r2, [r3, #0]
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20000450 	.word	0x20000450
 8007610:	2000050c 	.word	0x2000050c

08007614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a07      	ldr	r2, [pc, #28]	; (8007640 <vApplicationGetTimerTaskMemory+0x2c>)
 8007624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	4a06      	ldr	r2, [pc, #24]	; (8007644 <vApplicationGetTimerTaskMemory+0x30>)
 800762a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	2000070c 	.word	0x2000070c
 8007644:	200007c8 	.word	0x200007c8

08007648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f103 0208 	add.w	r2, r3, #8
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f04f 32ff 	mov.w	r2, #4294967295
 8007660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f103 0208 	add.w	r2, r3, #8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f103 0208 	add.w	r2, r3, #8
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	601a      	str	r2, [r3, #0]
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d103      	bne.n	800770a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e00c      	b.n	8007724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3308      	adds	r3, #8
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e002      	b.n	8007718 <vListInsert+0x2e>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	429a      	cmp	r2, r3
 8007722:	d2f6      	bcs.n	8007712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	601a      	str	r2, [r3, #0]
}
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6892      	ldr	r2, [r2, #8]
 8007772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6852      	ldr	r2, [r2, #4]
 800777c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d103      	bne.n	8007790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	1e5a      	subs	r2, r3, #1
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80077be:	f002 f861 	bl	8009884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077ce:	fb01 f303 	mul.w	r3, r1, r3
 80077d2:	441a      	add	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ee:	3b01      	subs	r3, #1
 80077f0:	68f9      	ldr	r1, [r7, #12]
 80077f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	441a      	add	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	22ff      	movs	r2, #255	; 0xff
 8007802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	22ff      	movs	r2, #255	; 0xff
 800780a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d114      	bne.n	800783e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01a      	beq.n	8007852 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3310      	adds	r3, #16
 8007820:	4618      	mov	r0, r3
 8007822:	f001 f97d 	bl	8008b20 <xTaskRemoveFromEventList>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d012      	beq.n	8007852 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800782c:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <xQueueGenericReset+0xb0>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	e009      	b.n	8007852 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3310      	adds	r3, #16
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff ff00 	bl	8007648 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3324      	adds	r3, #36	; 0x24
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fefb 	bl	8007648 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007852:	f002 f831 	bl	80098b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007856:	2301      	movs	r3, #1
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00d      	beq.n	8007898 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007884:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f831 	bl	80078fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007898:	697b      	ldr	r3, [r7, #20]
	}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b08a      	sub	sp, #40	; 0x28
 80078a6:	af02      	add	r7, sp, #8
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	4613      	mov	r3, r2
 80078ae:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	fb02 f303 	mul.w	r3, r2, r3
 80078b8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	3350      	adds	r3, #80	; 0x50
 80078be:	4618      	mov	r0, r3
 80078c0:	f002 f89a 	bl	80099f8 <pvPortMalloc>
 80078c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d011      	beq.n	80078f0 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3350      	adds	r3, #80	; 0x50
 80078d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078de:	79fa      	ldrb	r2, [r7, #7]
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4613      	mov	r3, r2
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f805 	bl	80078fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078f0:	69bb      	ldr	r3, [r7, #24]
	}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d103      	bne.n	8007916 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	e002      	b.n	800791c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007928:	2101      	movs	r1, #1
 800792a:	69b8      	ldr	r0, [r7, #24]
 800792c:	f7ff ff40 	bl	80077b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	78fa      	ldrb	r2, [r7, #3]
 8007934:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af02      	add	r7, sp, #8
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800794c:	2302      	movs	r3, #2
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ff84 	bl	8007864 <xQueueGenericCreateStatic>
 800795c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800796a:	697b      	ldr	r3, [r7, #20]
	}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800797e:	2202      	movs	r2, #2
 8007980:	2100      	movs	r1, #0
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff ff8d 	bl	80078a2 <xQueueGenericCreate>
 8007988:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007996:	68fb      	ldr	r3, [r7, #12]
	}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079ae:	2300      	movs	r3, #0
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079b6:	f001 ff65 	bl	8009884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d302      	bcc.n	80079cc <xQueueGenericSend+0x2c>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d129      	bne.n	8007a20 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	6a38      	ldr	r0, [r7, #32]
 80079d2:	f000 fb2f 	bl	8008034 <prvCopyDataToQueue>
 80079d6:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	3324      	adds	r3, #36	; 0x24
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f89b 	bl	8008b20 <xTaskRemoveFromEventList>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d013      	beq.n	8007a18 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079f0:	4b3f      	ldr	r3, [pc, #252]	; (8007af0 <xQueueGenericSend+0x150>)
 80079f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	e00a      	b.n	8007a18 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a08:	4b39      	ldr	r3, [pc, #228]	; (8007af0 <xQueueGenericSend+0x150>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a18:	f001 ff4e 	bl	80098b8 <vPortExitCritical>
				return pdPASS;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e063      	b.n	8007ae8 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a26:	f001 ff47 	bl	80098b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e05c      	b.n	8007ae8 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f001 f8c7 	bl	8008bcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a42:	f001 ff39 	bl	80098b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a46:	f000 fe8d 	bl	8008764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a4a:	f001 ff1b 	bl	8009884 <vPortEnterCritical>
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d103      	bne.n	8007a64 <xQueueGenericSend+0xc4>
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d103      	bne.n	8007a7a <xQueueGenericSend+0xda>
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a7a:	f001 ff1d 	bl	80098b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a7e:	1d3a      	adds	r2, r7, #4
 8007a80:	f107 0314 	add.w	r3, r7, #20
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 f8b6 	bl	8008bf8 <xTaskCheckForTimeOut>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d124      	bne.n	8007adc <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a92:	6a38      	ldr	r0, [r7, #32]
 8007a94:	f000 fbc6 	bl	8008224 <prvIsQueueFull>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	3310      	adds	r3, #16
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 f806 	bl	8008ab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007aac:	6a38      	ldr	r0, [r7, #32]
 8007aae:	f000 fb51 	bl	8008154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ab2:	f000 fe65 	bl	8008780 <xTaskResumeAll>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f47f af7c 	bne.w	80079b6 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <xQueueGenericSend+0x150>)
 8007ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	e772      	b.n	80079b6 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ad0:	6a38      	ldr	r0, [r7, #32]
 8007ad2:	f000 fb3f 	bl	8008154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ad6:	f000 fe53 	bl	8008780 <xTaskResumeAll>
 8007ada:	e76c      	b.n	80079b6 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007adc:	6a38      	ldr	r0, [r7, #32]
 8007ade:	f000 fb39 	bl	8008154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ae2:	f000 fe4d 	bl	8008780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3728      	adds	r7, #40	; 0x28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	; 0x30
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b06:	f3ef 8211 	mrs	r2, BASEPRI
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	61ba      	str	r2, [r7, #24]
 8007b1c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d302      	bcc.n	8007b34 <xQueueGenericSendFromISR+0x40>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d12f      	bne.n	8007b94 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b4a:	f000 fa73 	bl	8008034 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b4e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b56:	d112      	bne.n	8007b7e <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d016      	beq.n	8007b8e <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	3324      	adds	r3, #36	; 0x24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 ffdb 	bl	8008b20 <xTaskRemoveFromEventList>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00e      	beq.n	8007b8e <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	e007      	b.n	8007b8e <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b82:	3301      	adds	r3, #1
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	b25a      	sxtb	r2, r3
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8007b92:	e001      	b.n	8007b98 <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ba2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3730      	adds	r7, #48	; 0x30
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b08a      	sub	sp, #40	; 0x28
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	623b      	str	r3, [r7, #32]
	__asm volatile
 8007bbc:	f3ef 8211 	mrs	r2, BASEPRI
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	613a      	str	r2, [r7, #16]
 8007bd2:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8007bd4:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bd6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d229      	bcs.n	8007c3c <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bee:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d112      	bne.n	8007c28 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d015      	beq.n	8007c36 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	3324      	adds	r3, #36	; 0x24
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 ff86 	bl	8008b20 <xTaskRemoveFromEventList>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00d      	beq.n	8007c36 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e006      	b.n	8007c36 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	b25a      	sxtb	r2, r3
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c36:	2301      	movs	r3, #1
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3a:	e001      	b.n	8007c40 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f383 8811 	msr	BASEPRI, r3
}
 8007c4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3728      	adds	r7, #40	; 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c6c:	f001 fe0a 	bl	8009884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01f      	beq.n	8007cbc <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	6a38      	ldr	r0, [r7, #32]
 8007c80:	f000 fa42 	bl	8008108 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	1e5a      	subs	r2, r3, #1
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00f      	beq.n	8007cb4 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	3310      	adds	r3, #16
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 ff41 	bl	8008b20 <xTaskRemoveFromEventList>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ca4:	4b3c      	ldr	r3, [pc, #240]	; (8007d98 <xQueueReceive+0x140>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cb4:	f001 fe00 	bl	80098b8 <vPortExitCritical>
				return pdPASS;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e069      	b.n	8007d90 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d103      	bne.n	8007cca <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cc2:	f001 fdf9 	bl	80098b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e062      	b.n	8007d90 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 ff79 	bl	8008bcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cde:	f001 fdeb 	bl	80098b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ce2:	f000 fd3f 	bl	8008764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ce6:	f001 fdcd 	bl	8009884 <vPortEnterCritical>
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cf0:	b25b      	sxtb	r3, r3
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d103      	bne.n	8007d00 <xQueueReceive+0xa8>
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d06:	b25b      	sxtb	r3, r3
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d103      	bne.n	8007d16 <xQueueReceive+0xbe>
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d16:	f001 fdcf 	bl	80098b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d1a:	1d3a      	adds	r2, r7, #4
 8007d1c:	f107 0314 	add.w	r3, r7, #20
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 ff68 	bl	8008bf8 <xTaskCheckForTimeOut>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d123      	bne.n	8007d76 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d2e:	6a38      	ldr	r0, [r7, #32]
 8007d30:	f000 fa62 	bl	80081f8 <prvIsQueueEmpty>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d017      	beq.n	8007d6a <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	3324      	adds	r3, #36	; 0x24
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	4611      	mov	r1, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 feb8 	bl	8008ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d48:	6a38      	ldr	r0, [r7, #32]
 8007d4a:	f000 fa03 	bl	8008154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d4e:	f000 fd17 	bl	8008780 <xTaskResumeAll>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d189      	bne.n	8007c6c <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <xQueueReceive+0x140>)
 8007d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	e780      	b.n	8007c6c <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d6a:	6a38      	ldr	r0, [r7, #32]
 8007d6c:	f000 f9f2 	bl	8008154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d70:	f000 fd06 	bl	8008780 <xTaskResumeAll>
 8007d74:	e77a      	b.n	8007c6c <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d76:	6a38      	ldr	r0, [r7, #32]
 8007d78:	f000 f9ec 	bl	8008154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d7c:	f000 fd00 	bl	8008780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d80:	6a38      	ldr	r0, [r7, #32]
 8007d82:	f000 fa39 	bl	80081f8 <prvIsQueueEmpty>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f43f af6f 	beq.w	8007c6c <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3728      	adds	r7, #40	; 0x28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	; 0x28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007db2:	f001 fd67 	bl	8009884 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d024      	beq.n	8007e0c <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	1e5a      	subs	r2, r3, #1
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007dd2:	f001 f95f 	bl	8009094 <pvTaskIncrementMutexHeldCount>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00f      	beq.n	8007e04 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	3310      	adds	r3, #16
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fe99 	bl	8008b20 <xTaskRemoveFromEventList>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d007      	beq.n	8007e04 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007df4:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <xQueueSemaphoreTake+0x18c>)
 8007df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e04:	f001 fd58 	bl	80098b8 <vPortExitCritical>
				return pdPASS;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e089      	b.n	8007f20 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e12:	f001 fd51 	bl	80098b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e16:	2300      	movs	r3, #0
 8007e18:	e082      	b.n	8007f20 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e20:	f107 030c 	add.w	r3, r7, #12
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fed1 	bl	8008bcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e2e:	f001 fd43 	bl	80098b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e32:	f000 fc97 	bl	8008764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e36:	f001 fd25 	bl	8009884 <vPortEnterCritical>
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e40:	b25b      	sxtb	r3, r3
 8007e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e46:	d103      	bne.n	8007e50 <xQueueSemaphoreTake+0xb4>
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e56:	b25b      	sxtb	r3, r3
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d103      	bne.n	8007e66 <xQueueSemaphoreTake+0xca>
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e66:	f001 fd27 	bl	80098b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e6a:	463a      	mov	r2, r7
 8007e6c:	f107 030c 	add.w	r3, r7, #12
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fec0 	bl	8008bf8 <xTaskCheckForTimeOut>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d132      	bne.n	8007ee4 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e7e:	69f8      	ldr	r0, [r7, #28]
 8007e80:	f000 f9ba 	bl	80081f8 <prvIsQueueEmpty>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d026      	beq.n	8007ed8 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8007e92:	f001 fcf7 	bl	8009884 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 ffe6 	bl	8008e6c <xTaskPriorityInherit>
 8007ea0:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8007ea2:	f001 fd09 	bl	80098b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	3324      	adds	r3, #36	; 0x24
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fe02 	bl	8008ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eb4:	69f8      	ldr	r0, [r7, #28]
 8007eb6:	f000 f94d 	bl	8008154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007eba:	f000 fc61 	bl	8008780 <xTaskResumeAll>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f47f af76 	bne.w	8007db2 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8007ec6:	4b18      	ldr	r3, [pc, #96]	; (8007f28 <xQueueSemaphoreTake+0x18c>)
 8007ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	e76c      	b.n	8007db2 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ed8:	69f8      	ldr	r0, [r7, #28]
 8007eda:	f000 f93b 	bl	8008154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ede:	f000 fc4f 	bl	8008780 <xTaskResumeAll>
 8007ee2:	e766      	b.n	8007db2 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ee4:	69f8      	ldr	r0, [r7, #28]
 8007ee6:	f000 f935 	bl	8008154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eea:	f000 fc49 	bl	8008780 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007eee:	69f8      	ldr	r0, [r7, #28]
 8007ef0:	f000 f982 	bl	80081f8 <prvIsQueueEmpty>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f43f af5b 	beq.w	8007db2 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8007f02:	f001 fcbf 	bl	8009884 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f06:	69f8      	ldr	r0, [r7, #28]
 8007f08:	f000 f87c 	bl	8008004 <prvGetDisinheritPriorityAfterTimeout>
 8007f0c:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	6979      	ldr	r1, [r7, #20]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 f85d 	bl	8008fd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f1a:	f001 fccd 	bl	80098b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3728      	adds	r7, #40	; 0x28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08c      	sub	sp, #48	; 0x30
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 8007f3c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	61ba      	str	r2, [r7, #24]
 8007f52:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f54:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02d      	beq.n	8007fc0 <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f6a:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f70:	f000 f8ca 	bl	8008108 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	1e5a      	subs	r2, r3, #1
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d112      	bne.n	8007fac <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d015      	beq.n	8007fba <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	3310      	adds	r3, #16
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fdc4 	bl	8008b20 <xTaskRemoveFromEventList>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e006      	b.n	8007fba <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007fac:	7ffb      	ldrb	r3, [r7, #31]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	b25a      	sxtb	r2, r3
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fbe:	e001      	b.n	8007fc4 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f383 8811 	msr	BASEPRI, r3
}
 8007fce:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3730      	adds	r7, #48	; 0x30
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f95e 	bl	80082a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d102      	bne.n	8007ffc <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f001 fd98 	bl	8009b2c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d006      	beq.n	8008022 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	e001      	b.n	8008026 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008022:	2300      	movs	r3, #0
 8008024:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008026:	68fb      	ldr	r3, [r7, #12]
	}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10d      	bne.n	800806e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d14d      	bne.n	80080f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 ff6c 	bl	8008f3c <xTaskPriorityDisinherit>
 8008064:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	609a      	str	r2, [r3, #8]
 800806c:	e043      	b.n	80080f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d119      	bne.n	80080a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6858      	ldr	r0, [r3, #4]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	461a      	mov	r2, r3
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	f001 fe7c 	bl	8009d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	441a      	add	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	429a      	cmp	r2, r3
 800809c:	d32b      	bcc.n	80080f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	e026      	b.n	80080f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68d8      	ldr	r0, [r3, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	461a      	mov	r2, r3
 80080b2:	68b9      	ldr	r1, [r7, #8]
 80080b4:	f001 fe62 	bl	8009d7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	425b      	negs	r3, r3
 80080c2:	441a      	add	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d207      	bcs.n	80080e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	425b      	negs	r3, r3
 80080de:	441a      	add	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d105      	bne.n	80080f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080fe:	697b      	ldr	r3, [r7, #20]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d018      	beq.n	800814c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	441a      	add	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	d303      	bcc.n	800813c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68d9      	ldr	r1, [r3, #12]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	461a      	mov	r2, r3
 8008146:	6838      	ldr	r0, [r7, #0]
 8008148:	f001 fe18 	bl	8009d7c <memcpy>
	}
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800815c:	f001 fb92 	bl	8009884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008166:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008168:	e011      	b.n	800818e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	d012      	beq.n	8008198 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3324      	adds	r3, #36	; 0x24
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fcd2 	bl	8008b20 <xTaskRemoveFromEventList>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008182:	f000 fd7f 	bl	8008c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	3b01      	subs	r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800818e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008192:	2b00      	cmp	r3, #0
 8008194:	dce9      	bgt.n	800816a <prvUnlockQueue+0x16>
 8008196:	e000      	b.n	800819a <prvUnlockQueue+0x46>
					break;
 8008198:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	22ff      	movs	r2, #255	; 0xff
 800819e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081a2:	f001 fb89 	bl	80098b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081a6:	f001 fb6d 	bl	8009884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b2:	e011      	b.n	80081d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d012      	beq.n	80081e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3310      	adds	r3, #16
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fcad 	bl	8008b20 <xTaskRemoveFromEventList>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081cc:	f000 fd5a 	bl	8008c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dce9      	bgt.n	80081b4 <prvUnlockQueue+0x60>
 80081e0:	e000      	b.n	80081e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	22ff      	movs	r2, #255	; 0xff
 80081e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081ec:	f001 fb64 	bl	80098b8 <vPortExitCritical>
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008200:	f001 fb40 	bl	8009884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e001      	b.n	8008216 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008216:	f001 fb4f 	bl	80098b8 <vPortExitCritical>

	return xReturn;
 800821a:	68fb      	ldr	r3, [r7, #12]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800822c:	f001 fb2a 	bl	8009884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	429a      	cmp	r2, r3
 800823a:	d102      	bne.n	8008242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e001      	b.n	8008246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008246:	f001 fb37 	bl	80098b8 <vPortExitCritical>

	return xReturn;
 800824a:	68fb      	ldr	r3, [r7, #12]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	e014      	b.n	800828e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008264:	4a0f      	ldr	r2, [pc, #60]	; (80082a4 <vQueueAddToRegistry+0x50>)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008270:	490c      	ldr	r1, [pc, #48]	; (80082a4 <vQueueAddToRegistry+0x50>)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800827a:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <vQueueAddToRegistry+0x50>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	4413      	add	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008286:	e006      	b.n	8008296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3301      	adds	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b07      	cmp	r3, #7
 8008292:	d9e7      	bls.n	8008264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20000bc8 	.word	0x20000bc8

080082a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e016      	b.n	80082e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80082b6:	4a10      	ldr	r2, [pc, #64]	; (80082f8 <vQueueUnregisterQueue+0x50>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	4413      	add	r3, r2
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d10b      	bne.n	80082de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80082c6:	4a0c      	ldr	r2, [pc, #48]	; (80082f8 <vQueueUnregisterQueue+0x50>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2100      	movs	r1, #0
 80082cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80082d0:	4a09      	ldr	r2, [pc, #36]	; (80082f8 <vQueueUnregisterQueue+0x50>)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	00db      	lsls	r3, r3, #3
 80082d6:	4413      	add	r3, r2
 80082d8:	2200      	movs	r2, #0
 80082da:	605a      	str	r2, [r3, #4]
				break;
 80082dc:	e006      	b.n	80082ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3301      	adds	r3, #1
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b07      	cmp	r3, #7
 80082e8:	d9e5      	bls.n	80082b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	20000bc8 	.word	0x20000bc8

080082fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800830c:	f001 faba 	bl	8009884 <vPortEnterCritical>
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008316:	b25b      	sxtb	r3, r3
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d103      	bne.n	8008326 <vQueueWaitForMessageRestricted+0x2a>
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800832c:	b25b      	sxtb	r3, r3
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d103      	bne.n	800833c <vQueueWaitForMessageRestricted+0x40>
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800833c:	f001 fabc 	bl	80098b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	3324      	adds	r3, #36	; 0x24
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fbc7 	bl	8008ae4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008356:	6978      	ldr	r0, [r7, #20]
 8008358:	f7ff fefc 	bl	8008154 <prvUnlockQueue>
	}
 800835c:	bf00      	nop
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	; 0x28
 8008368:	af04      	add	r7, sp, #16
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01e      	beq.n	80083b6 <xTaskCreateStatic+0x52>
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01b      	beq.n	80083b6 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008386:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008390:	2300      	movs	r3, #0
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	9302      	str	r3, [sp, #8]
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f851 	bl	8008450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083ae:	6978      	ldr	r0, [r7, #20]
 80083b0:	f000 f8e4 	bl	800857c <prvAddNewTaskToReadyList>
 80083b4:	e001      	b.n	80083ba <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80083ba:	693b      	ldr	r3, [r7, #16]
	}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08c      	sub	sp, #48	; 0x30
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	603b      	str	r3, [r7, #0]
 80083d0:	4613      	mov	r3, r2
 80083d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 fb0d 	bl	80099f8 <pvPortMalloc>
 80083de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00e      	beq.n	8008404 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083e6:	20bc      	movs	r0, #188	; 0xbc
 80083e8:	f001 fb06 	bl	80099f8 <pvPortMalloc>
 80083ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	631a      	str	r2, [r3, #48]	; 0x30
 80083fa:	e005      	b.n	8008408 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083fc:	6978      	ldr	r0, [r7, #20]
 80083fe:	f001 fb95 	bl	8009b2c <vPortFree>
 8008402:	e001      	b.n	8008408 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d017      	beq.n	800843e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008416:	88fa      	ldrh	r2, [r7, #6]
 8008418:	2300      	movs	r3, #0
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f80f 	bl	8008450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008432:	69f8      	ldr	r0, [r7, #28]
 8008434:	f000 f8a2 	bl	800857c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008438:	2301      	movs	r3, #1
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	e002      	b.n	8008444 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008444:	69bb      	ldr	r3, [r7, #24]
	}
 8008446:	4618      	mov	r0, r3
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	461a      	mov	r2, r3
 8008468:	21a5      	movs	r1, #165	; 0xa5
 800846a:	f001 fc95 	bl	8009d98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008478:	3b01      	subs	r3, #1
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01f      	beq.n	80084ce <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
 8008492:	e012      	b.n	80084ba <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	4413      	add	r3, r2
 800849a:	7819      	ldrb	r1, [r3, #0]
 800849c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	3334      	adds	r3, #52	; 0x34
 80084a4:	460a      	mov	r2, r1
 80084a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	4413      	add	r3, r2
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d006      	beq.n	80084c2 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	3301      	adds	r3, #1
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b0f      	cmp	r3, #15
 80084be:	d9e9      	bls.n	8008494 <prvInitialiseNewTask+0x44>
 80084c0:	e000      	b.n	80084c4 <prvInitialiseNewTask+0x74>
			{
				break;
 80084c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084cc:	e003      	b.n	80084d6 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	2b37      	cmp	r3, #55	; 0x37
 80084da:	d901      	bls.n	80084e0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084dc:	2337      	movs	r3, #55	; 0x37
 80084de:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	6a3a      	ldr	r2, [r7, #32]
 80084ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	2200      	movs	r2, #0
 80084f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	3304      	adds	r3, #4
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff f8c6 	bl	8007688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	3318      	adds	r3, #24
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff f8c1 	bl	8007688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	2200      	movs	r2, #0
 8008528:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	3354      	adds	r3, #84	; 0x54
 8008530:	2260      	movs	r2, #96	; 0x60
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f001 fc2f 	bl	8009d98 <memset>
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	4a0c      	ldr	r2, [pc, #48]	; (8008570 <prvInitialiseNewTask+0x120>)
 800853e:	659a      	str	r2, [r3, #88]	; 0x58
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	4a0c      	ldr	r2, [pc, #48]	; (8008574 <prvInitialiseNewTask+0x124>)
 8008544:	65da      	str	r2, [r3, #92]	; 0x5c
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	4a0b      	ldr	r2, [pc, #44]	; (8008578 <prvInitialiseNewTask+0x128>)
 800854a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	6938      	ldr	r0, [r7, #16]
 8008552:	f001 f8f5 	bl	8009740 <pxPortInitialiseStack>
 8008556:	4602      	mov	r2, r0
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008566:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008568:	bf00      	nop
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	0800c860 	.word	0x0800c860
 8008574:	0800c880 	.word	0x0800c880
 8008578:	0800c840 	.word	0x0800c840

0800857c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008584:	f001 f97e 	bl	8009884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008588:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <prvAddNewTaskToReadyList+0xc4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	4a2c      	ldr	r2, [pc, #176]	; (8008640 <prvAddNewTaskToReadyList+0xc4>)
 8008590:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008592:	4b2c      	ldr	r3, [pc, #176]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800859a:	4a2a      	ldr	r2, [pc, #168]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085a0:	4b27      	ldr	r3, [pc, #156]	; (8008640 <prvAddNewTaskToReadyList+0xc4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d110      	bne.n	80085ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085a8:	f000 fb90 	bl	8008ccc <prvInitialiseTaskLists>
 80085ac:	e00d      	b.n	80085ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085ae:	4b26      	ldr	r3, [pc, #152]	; (8008648 <prvAddNewTaskToReadyList+0xcc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085b6:	4b23      	ldr	r3, [pc, #140]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d802      	bhi.n	80085ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085c4:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085ca:	4b20      	ldr	r3, [pc, #128]	; (800864c <prvAddNewTaskToReadyList+0xd0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3301      	adds	r3, #1
 80085d0:	4a1e      	ldr	r2, [pc, #120]	; (800864c <prvAddNewTaskToReadyList+0xd0>)
 80085d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <prvAddNewTaskToReadyList+0xd0>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e0:	4b1b      	ldr	r3, [pc, #108]	; (8008650 <prvAddNewTaskToReadyList+0xd4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d903      	bls.n	80085f0 <prvAddNewTaskToReadyList+0x74>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a18      	ldr	r2, [pc, #96]	; (8008650 <prvAddNewTaskToReadyList+0xd4>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4a15      	ldr	r2, [pc, #84]	; (8008654 <prvAddNewTaskToReadyList+0xd8>)
 80085fe:	441a      	add	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3304      	adds	r3, #4
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7ff f84b 	bl	80076a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800860c:	f001 f954 	bl	80098b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008610:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <prvAddNewTaskToReadyList+0xcc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00e      	beq.n	8008636 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <prvAddNewTaskToReadyList+0xc8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	429a      	cmp	r2, r3
 8008624:	d207      	bcs.n	8008636 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008626:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <prvAddNewTaskToReadyList+0xdc>)
 8008628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	200010dc 	.word	0x200010dc
 8008644:	20000c08 	.word	0x20000c08
 8008648:	200010e8 	.word	0x200010e8
 800864c:	200010f8 	.word	0x200010f8
 8008650:	200010e4 	.word	0x200010e4
 8008654:	20000c0c 	.word	0x20000c0c
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800866e:	f000 f879 	bl	8008764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008672:	2100      	movs	r1, #0
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fd21 	bl	80090bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800867a:	f000 f881 	bl	8008780 <xTaskResumeAll>
 800867e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d107      	bne.n	8008696 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8008686:	4b06      	ldr	r3, [pc, #24]	; (80086a0 <vTaskDelay+0x44>)
 8008688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	e000ed04 	.word	0xe000ed04

080086a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086b2:	1d3a      	adds	r2, r7, #4
 80086b4:	f107 0108 	add.w	r1, r7, #8
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe ff8f 	bl	80075e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	9202      	str	r2, [sp, #8]
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	2300      	movs	r3, #0
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	2300      	movs	r3, #0
 80086d2:	460a      	mov	r2, r1
 80086d4:	491b      	ldr	r1, [pc, #108]	; (8008744 <vTaskStartScheduler+0xa0>)
 80086d6:	481c      	ldr	r0, [pc, #112]	; (8008748 <vTaskStartScheduler+0xa4>)
 80086d8:	f7ff fe44 	bl	8008364 <xTaskCreateStatic>
 80086dc:	4603      	mov	r3, r0
 80086de:	4a1b      	ldr	r2, [pc, #108]	; (800874c <vTaskStartScheduler+0xa8>)
 80086e0:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086e2:	4b1a      	ldr	r3, [pc, #104]	; (800874c <vTaskStartScheduler+0xa8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80086ea:	2301      	movs	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	e001      	b.n	80086f4 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d102      	bne.n	8008700 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80086fa:	f000 fd33 	bl	8009164 <xTimerCreateTimerTask>
 80086fe:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d11a      	bne.n	800873c <vTaskStartScheduler+0x98>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	613b      	str	r3, [r7, #16]
}
 8008718:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800871a:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <vTaskStartScheduler+0xac>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3354      	adds	r3, #84	; 0x54
 8008720:	4a0c      	ldr	r2, [pc, #48]	; (8008754 <vTaskStartScheduler+0xb0>)
 8008722:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008724:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <vTaskStartScheduler+0xb4>)
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <vTaskStartScheduler+0xb8>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008732:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <vTaskStartScheduler+0xbc>)
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008738:	f001 f87a 	bl	8009830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800873c:	bf00      	nop
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	0800c714 	.word	0x0800c714
 8008748:	08008c9d 	.word	0x08008c9d
 800874c:	20001100 	.word	0x20001100
 8008750:	20000c08 	.word	0x20000c08
 8008754:	2000001c 	.word	0x2000001c
 8008758:	200010fc 	.word	0x200010fc
 800875c:	200010e8 	.word	0x200010e8
 8008760:	200010e0 	.word	0x200010e0

08008764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008768:	4b04      	ldr	r3, [pc, #16]	; (800877c <vTaskSuspendAll+0x18>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3301      	adds	r3, #1
 800876e:	4a03      	ldr	r2, [pc, #12]	; (800877c <vTaskSuspendAll+0x18>)
 8008770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008772:	bf00      	nop
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	20001104 	.word	0x20001104

08008780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800878a:	2300      	movs	r3, #0
 800878c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800878e:	f001 f879 	bl	8009884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008792:	4b39      	ldr	r3, [pc, #228]	; (8008878 <xTaskResumeAll+0xf8>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3b01      	subs	r3, #1
 8008798:	4a37      	ldr	r2, [pc, #220]	; (8008878 <xTaskResumeAll+0xf8>)
 800879a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800879c:	4b36      	ldr	r3, [pc, #216]	; (8008878 <xTaskResumeAll+0xf8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d162      	bne.n	800886a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087a4:	4b35      	ldr	r3, [pc, #212]	; (800887c <xTaskResumeAll+0xfc>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d05e      	beq.n	800886a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ac:	e02f      	b.n	800880e <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ae:	4b34      	ldr	r3, [pc, #208]	; (8008880 <xTaskResumeAll+0x100>)
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3318      	adds	r3, #24
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe ffce 	bl	800775c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe ffc9 	bl	800775c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ce:	4b2d      	ldr	r3, [pc, #180]	; (8008884 <xTaskResumeAll+0x104>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d903      	bls.n	80087de <xTaskResumeAll+0x5e>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	4a2a      	ldr	r2, [pc, #168]	; (8008884 <xTaskResumeAll+0x104>)
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4a27      	ldr	r2, [pc, #156]	; (8008888 <xTaskResumeAll+0x108>)
 80087ec:	441a      	add	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7fe ff54 	bl	80076a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fe:	4b23      	ldr	r3, [pc, #140]	; (800888c <xTaskResumeAll+0x10c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8008808:	4b21      	ldr	r3, [pc, #132]	; (8008890 <xTaskResumeAll+0x110>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800880e:	4b1c      	ldr	r3, [pc, #112]	; (8008880 <xTaskResumeAll+0x100>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1cb      	bne.n	80087ae <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800881c:	f000 fae8 	bl	8008df0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008820:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <xTaskResumeAll+0x114>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800882c:	f000 f846 	bl	80088bc <xTaskIncrementTick>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8008836:	4b16      	ldr	r3, [pc, #88]	; (8008890 <xTaskResumeAll+0x110>)
 8008838:	2201      	movs	r2, #1
 800883a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3b01      	subs	r3, #1
 8008840:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f1      	bne.n	800882c <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 8008848:	4b12      	ldr	r3, [pc, #72]	; (8008894 <xTaskResumeAll+0x114>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800884e:	4b10      	ldr	r3, [pc, #64]	; (8008890 <xTaskResumeAll+0x110>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008856:	2301      	movs	r3, #1
 8008858:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <xTaskResumeAll+0x118>)
 800885c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800886a:	f001 f825 	bl	80098b8 <vPortExitCritical>

	return xAlreadyYielded;
 800886e:	68bb      	ldr	r3, [r7, #8]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	20001104 	.word	0x20001104
 800887c:	200010dc 	.word	0x200010dc
 8008880:	2000109c 	.word	0x2000109c
 8008884:	200010e4 	.word	0x200010e4
 8008888:	20000c0c 	.word	0x20000c0c
 800888c:	20000c08 	.word	0x20000c08
 8008890:	200010f0 	.word	0x200010f0
 8008894:	200010ec 	.word	0x200010ec
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088a2:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <xTaskGetTickCount+0x1c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088a8:	687b      	ldr	r3, [r7, #4]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	200010e0 	.word	0x200010e0

080088bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c6:	4b46      	ldr	r3, [pc, #280]	; (80089e0 <xTaskIncrementTick+0x124>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d17e      	bne.n	80089cc <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088ce:	4b45      	ldr	r3, [pc, #276]	; (80089e4 <xTaskIncrementTick+0x128>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3301      	adds	r3, #1
 80088d4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088d6:	4a43      	ldr	r2, [pc, #268]	; (80089e4 <xTaskIncrementTick+0x128>)
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d110      	bne.n	8008904 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80088e2:	4b41      	ldr	r3, [pc, #260]	; (80089e8 <xTaskIncrementTick+0x12c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	4b40      	ldr	r3, [pc, #256]	; (80089ec <xTaskIncrementTick+0x130>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a3e      	ldr	r2, [pc, #248]	; (80089e8 <xTaskIncrementTick+0x12c>)
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	4a3e      	ldr	r2, [pc, #248]	; (80089ec <xTaskIncrementTick+0x130>)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	4b3e      	ldr	r3, [pc, #248]	; (80089f0 <xTaskIncrementTick+0x134>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3301      	adds	r3, #1
 80088fc:	4a3c      	ldr	r2, [pc, #240]	; (80089f0 <xTaskIncrementTick+0x134>)
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	f000 fa76 	bl	8008df0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008904:	4b3b      	ldr	r3, [pc, #236]	; (80089f4 <xTaskIncrementTick+0x138>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	429a      	cmp	r2, r3
 800890c:	d349      	bcc.n	80089a2 <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800890e:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <xTaskIncrementTick+0x12c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008918:	4b36      	ldr	r3, [pc, #216]	; (80089f4 <xTaskIncrementTick+0x138>)
 800891a:	f04f 32ff 	mov.w	r2, #4294967295
 800891e:	601a      	str	r2, [r3, #0]
					break;
 8008920:	e03f      	b.n	80089a2 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008922:	4b31      	ldr	r3, [pc, #196]	; (80089e8 <xTaskIncrementTick+0x12c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	429a      	cmp	r2, r3
 8008938:	d203      	bcs.n	8008942 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800893a:	4a2e      	ldr	r2, [pc, #184]	; (80089f4 <xTaskIncrementTick+0x138>)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008940:	e02f      	b.n	80089a2 <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	3304      	adds	r3, #4
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe ff08 	bl	800775c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	3318      	adds	r3, #24
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe feff 	bl	800775c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008962:	4b25      	ldr	r3, [pc, #148]	; (80089f8 <xTaskIncrementTick+0x13c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d903      	bls.n	8008972 <xTaskIncrementTick+0xb6>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	4a22      	ldr	r2, [pc, #136]	; (80089f8 <xTaskIncrementTick+0x13c>)
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4a1f      	ldr	r2, [pc, #124]	; (80089fc <xTaskIncrementTick+0x140>)
 8008980:	441a      	add	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3304      	adds	r3, #4
 8008986:	4619      	mov	r1, r3
 8008988:	4610      	mov	r0, r2
 800898a:	f7fe fe8a 	bl	80076a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	4b1b      	ldr	r3, [pc, #108]	; (8008a00 <xTaskIncrementTick+0x144>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	429a      	cmp	r2, r3
 800899a:	d3b8      	bcc.n	800890e <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a0:	e7b5      	b.n	800890e <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089a2:	4b17      	ldr	r3, [pc, #92]	; (8008a00 <xTaskIncrementTick+0x144>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a8:	4914      	ldr	r1, [pc, #80]	; (80089fc <xTaskIncrementTick+0x140>)
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d901      	bls.n	80089be <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089be:	4b11      	ldr	r3, [pc, #68]	; (8008a04 <xTaskIncrementTick+0x148>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d007      	beq.n	80089d6 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e004      	b.n	80089d6 <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089cc:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <xTaskIncrementTick+0x14c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3301      	adds	r3, #1
 80089d2:	4a0d      	ldr	r2, [pc, #52]	; (8008a08 <xTaskIncrementTick+0x14c>)
 80089d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089d6:	697b      	ldr	r3, [r7, #20]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	20001104 	.word	0x20001104
 80089e4:	200010e0 	.word	0x200010e0
 80089e8:	20001094 	.word	0x20001094
 80089ec:	20001098 	.word	0x20001098
 80089f0:	200010f4 	.word	0x200010f4
 80089f4:	200010fc 	.word	0x200010fc
 80089f8:	200010e4 	.word	0x200010e4
 80089fc:	20000c0c 	.word	0x20000c0c
 8008a00:	20000c08 	.word	0x20000c08
 8008a04:	200010f0 	.word	0x200010f0
 8008a08:	200010ec 	.word	0x200010ec

08008a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a12:	4b23      	ldr	r3, [pc, #140]	; (8008aa0 <vTaskSwitchContext+0x94>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a1a:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <vTaskSwitchContext+0x98>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a20:	e038      	b.n	8008a94 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8008a22:	4b20      	ldr	r3, [pc, #128]	; (8008aa4 <vTaskSwitchContext+0x98>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a28:	4b1f      	ldr	r3, [pc, #124]	; (8008aa8 <vTaskSwitchContext+0x9c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	e002      	b.n	8008a36 <vTaskSwitchContext+0x2a>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	607b      	str	r3, [r7, #4]
 8008a36:	491d      	ldr	r1, [pc, #116]	; (8008aac <vTaskSwitchContext+0xa0>)
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f2      	beq.n	8008a30 <vTaskSwitchContext+0x24>
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4a15      	ldr	r2, [pc, #84]	; (8008aac <vTaskSwitchContext+0xa0>)
 8008a56:	4413      	add	r3, r2
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	605a      	str	r2, [r3, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d104      	bne.n	8008a7a <vTaskSwitchContext+0x6e>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	605a      	str	r2, [r3, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <vTaskSwitchContext+0xa4>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <vTaskSwitchContext+0x9c>)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a8a:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <vTaskSwitchContext+0xa4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3354      	adds	r3, #84	; 0x54
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <vTaskSwitchContext+0xa8>)
 8008a92:	6013      	str	r3, [r2, #0]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20001104 	.word	0x20001104
 8008aa4:	200010f0 	.word	0x200010f0
 8008aa8:	200010e4 	.word	0x200010e4
 8008aac:	20000c0c 	.word	0x20000c0c
 8008ab0:	20000c08 	.word	0x20000c08
 8008ab4:	2000001c 	.word	0x2000001c

08008ab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ac2:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <vTaskPlaceOnEventList+0x28>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3318      	adds	r3, #24
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7fe fe0d 	bl	80076ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	6838      	ldr	r0, [r7, #0]
 8008ad4:	f000 faf2 	bl	80090bc <prvAddCurrentTaskToDelayedList>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	20000c08 	.word	0x20000c08

08008ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <vTaskPlaceOnEventListRestricted+0x38>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3318      	adds	r3, #24
 8008af6:	4619      	mov	r1, r3
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7fe fdd2 	bl	80076a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8008b04:	f04f 33ff 	mov.w	r3, #4294967295
 8008b08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f000 fad5 	bl	80090bc <prvAddCurrentTaskToDelayedList>
	}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000c08 	.word	0x20000c08

08008b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3318      	adds	r3, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fe11 	bl	800775c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b3a:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <xTaskRemoveFromEventList+0x94>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d11d      	bne.n	8008b7e <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fe08 	bl	800775c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b50:	4b19      	ldr	r3, [pc, #100]	; (8008bb8 <xTaskRemoveFromEventList+0x98>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d903      	bls.n	8008b60 <xTaskRemoveFromEventList+0x40>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4a16      	ldr	r2, [pc, #88]	; (8008bb8 <xTaskRemoveFromEventList+0x98>)
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4a13      	ldr	r2, [pc, #76]	; (8008bbc <xTaskRemoveFromEventList+0x9c>)
 8008b6e:	441a      	add	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7fe fd93 	bl	80076a2 <vListInsertEnd>
 8008b7c:	e005      	b.n	8008b8a <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	3318      	adds	r3, #24
 8008b82:	4619      	mov	r1, r3
 8008b84:	480e      	ldr	r0, [pc, #56]	; (8008bc0 <xTaskRemoveFromEventList+0xa0>)
 8008b86:	f7fe fd8c 	bl	80076a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <xTaskRemoveFromEventList+0xa4>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d905      	bls.n	8008ba4 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <xTaskRemoveFromEventList+0xa8>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	e001      	b.n	8008ba8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20001104 	.word	0x20001104
 8008bb8:	200010e4 	.word	0x200010e4
 8008bbc:	20000c0c 	.word	0x20000c0c
 8008bc0:	2000109c 	.word	0x2000109c
 8008bc4:	20000c08 	.word	0x20000c08
 8008bc8:	200010f0 	.word	0x200010f0

08008bcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bd4:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <vTaskInternalSetTimeOutState+0x24>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bdc:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <vTaskInternalSetTimeOutState+0x28>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	605a      	str	r2, [r3, #4]
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	200010f4 	.word	0x200010f4
 8008bf4:	200010e0 	.word	0x200010e0

08008bf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8008c02:	f000 fe3f 	bl	8009884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c06:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <xTaskCheckForTimeOut+0x84>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d102      	bne.n	8008c26 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e023      	b.n	8008c6e <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <xTaskCheckForTimeOut+0x88>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d007      	beq.n	8008c42 <xTaskCheckForTimeOut+0x4a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d302      	bcc.n	8008c42 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	e015      	b.n	8008c6e <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d20b      	bcs.n	8008c64 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	1ad2      	subs	r2, r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ffb7 	bl	8008bcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	e004      	b.n	8008c6e <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008c6e:	f000 fe23 	bl	80098b8 <vPortExitCritical>

	return xReturn;
 8008c72:	697b      	ldr	r3, [r7, #20]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	200010e0 	.word	0x200010e0
 8008c80:	200010f4 	.word	0x200010f4

08008c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c88:	4b03      	ldr	r3, [pc, #12]	; (8008c98 <vTaskMissedYield+0x14>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
}
 8008c8e:	bf00      	nop
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	200010f0 	.word	0x200010f0

08008c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ca4:	f000 f852 	bl	8008d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <prvIdleTask+0x28>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d9f9      	bls.n	8008ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <prvIdleTask+0x2c>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cc0:	e7f0      	b.n	8008ca4 <prvIdleTask+0x8>
 8008cc2:	bf00      	nop
 8008cc4:	20000c0c 	.word	0x20000c0c
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	607b      	str	r3, [r7, #4]
 8008cd6:	e00c      	b.n	8008cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4a12      	ldr	r2, [pc, #72]	; (8008d2c <prvInitialiseTaskLists+0x60>)
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fcae 	bl	8007648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	607b      	str	r3, [r7, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b37      	cmp	r3, #55	; 0x37
 8008cf6:	d9ef      	bls.n	8008cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cf8:	480d      	ldr	r0, [pc, #52]	; (8008d30 <prvInitialiseTaskLists+0x64>)
 8008cfa:	f7fe fca5 	bl	8007648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cfe:	480d      	ldr	r0, [pc, #52]	; (8008d34 <prvInitialiseTaskLists+0x68>)
 8008d00:	f7fe fca2 	bl	8007648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d04:	480c      	ldr	r0, [pc, #48]	; (8008d38 <prvInitialiseTaskLists+0x6c>)
 8008d06:	f7fe fc9f 	bl	8007648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d0a:	480c      	ldr	r0, [pc, #48]	; (8008d3c <prvInitialiseTaskLists+0x70>)
 8008d0c:	f7fe fc9c 	bl	8007648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d10:	480b      	ldr	r0, [pc, #44]	; (8008d40 <prvInitialiseTaskLists+0x74>)
 8008d12:	f7fe fc99 	bl	8007648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <prvInitialiseTaskLists+0x78>)
 8008d18:	4a05      	ldr	r2, [pc, #20]	; (8008d30 <prvInitialiseTaskLists+0x64>)
 8008d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <prvInitialiseTaskLists+0x7c>)
 8008d1e:	4a05      	ldr	r2, [pc, #20]	; (8008d34 <prvInitialiseTaskLists+0x68>)
 8008d20:	601a      	str	r2, [r3, #0]
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000c0c 	.word	0x20000c0c
 8008d30:	2000106c 	.word	0x2000106c
 8008d34:	20001080 	.word	0x20001080
 8008d38:	2000109c 	.word	0x2000109c
 8008d3c:	200010b0 	.word	0x200010b0
 8008d40:	200010c8 	.word	0x200010c8
 8008d44:	20001094 	.word	0x20001094
 8008d48:	20001098 	.word	0x20001098

08008d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d52:	e019      	b.n	8008d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d54:	f000 fd96 	bl	8009884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d58:	4b10      	ldr	r3, [pc, #64]	; (8008d9c <prvCheckTasksWaitingTermination+0x50>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fcf9 	bl	800775c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d6a:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <prvCheckTasksWaitingTermination+0x54>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	4a0b      	ldr	r2, [pc, #44]	; (8008da0 <prvCheckTasksWaitingTermination+0x54>)
 8008d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d74:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <prvCheckTasksWaitingTermination+0x58>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	4a0a      	ldr	r2, [pc, #40]	; (8008da4 <prvCheckTasksWaitingTermination+0x58>)
 8008d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d7e:	f000 fd9b 	bl	80098b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f810 	bl	8008da8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <prvCheckTasksWaitingTermination+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e1      	bne.n	8008d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200010b0 	.word	0x200010b0
 8008da0:	200010dc 	.word	0x200010dc
 8008da4:	200010c4 	.word	0x200010c4

08008da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3354      	adds	r3, #84	; 0x54
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 f899 	bl	8009eec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d108      	bne.n	8008dd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 feaf 	bl	8009b2c <vPortFree>
				vPortFree( pxTCB );
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 feac 	bl	8009b2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008dd4:	e007      	b.n	8008de6 <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d102      	bne.n	8008de6 <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fea3 	bl	8009b2c <vPortFree>
	}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008df6:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <prvResetNextTaskUnblockTime+0x38>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d104      	bne.n	8008e0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e00:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <prvResetNextTaskUnblockTime+0x3c>)
 8008e02:	f04f 32ff 	mov.w	r2, #4294967295
 8008e06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e08:	e008      	b.n	8008e1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e0a:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <prvResetNextTaskUnblockTime+0x38>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a04      	ldr	r2, [pc, #16]	; (8008e2c <prvResetNextTaskUnblockTime+0x3c>)
 8008e1a:	6013      	str	r3, [r2, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr
 8008e28:	20001094 	.word	0x20001094
 8008e2c:	200010fc 	.word	0x200010fc

08008e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e36:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <xTaskGetSchedulerState+0x34>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	607b      	str	r3, [r7, #4]
 8008e42:	e008      	b.n	8008e56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e44:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <xTaskGetSchedulerState+0x38>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	607b      	str	r3, [r7, #4]
 8008e50:	e001      	b.n	8008e56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e52:	2300      	movs	r3, #0
 8008e54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e56:	687b      	ldr	r3, [r7, #4]
	}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	200010e8 	.word	0x200010e8
 8008e68:	20001104 	.word	0x20001104

08008e6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d051      	beq.n	8008f26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e86:	4b2a      	ldr	r3, [pc, #168]	; (8008f30 <xTaskPriorityInherit+0xc4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d241      	bcs.n	8008f14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	db06      	blt.n	8008ea6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e98:	4b25      	ldr	r3, [pc, #148]	; (8008f30 <xTaskPriorityInherit+0xc4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6959      	ldr	r1, [r3, #20]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4a1f      	ldr	r2, [pc, #124]	; (8008f34 <xTaskPriorityInherit+0xc8>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	d122      	bne.n	8008f04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fc4a 	bl	800775c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ec8:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <xTaskPriorityInherit+0xc4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	4b18      	ldr	r3, [pc, #96]	; (8008f38 <xTaskPriorityInherit+0xcc>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d903      	bls.n	8008ee6 <xTaskPriorityInherit+0x7a>
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	4a15      	ldr	r2, [pc, #84]	; (8008f38 <xTaskPriorityInherit+0xcc>)
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4a10      	ldr	r2, [pc, #64]	; (8008f34 <xTaskPriorityInherit+0xc8>)
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f7fe fbd0 	bl	80076a2 <vListInsertEnd>
 8008f02:	e004      	b.n	8008f0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <xTaskPriorityInherit+0xc4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e008      	b.n	8008f26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f18:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <xTaskPriorityInherit+0xc4>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d201      	bcs.n	8008f26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f22:	2301      	movs	r3, #1
 8008f24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f26:	68fb      	ldr	r3, [r7, #12]
	}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20000c08 	.word	0x20000c08
 8008f34:	20000c0c 	.word	0x20000c0c
 8008f38:	200010e4 	.word	0x200010e4

08008f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d037      	beq.n	8008fc2 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f56:	1e5a      	subs	r2, r3, #1
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d02c      	beq.n	8008fc2 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d128      	bne.n	8008fc2 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	3304      	adds	r3, #4
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe fbf1 	bl	800775c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f92:	4b0e      	ldr	r3, [pc, #56]	; (8008fcc <xTaskPriorityDisinherit+0x90>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d903      	bls.n	8008fa2 <xTaskPriorityDisinherit+0x66>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	4a0b      	ldr	r2, [pc, #44]	; (8008fcc <xTaskPriorityDisinherit+0x90>)
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <xTaskPriorityDisinherit+0x94>)
 8008fb0:	441a      	add	r2, r3
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f7fe fb72 	bl	80076a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
	}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	200010e4 	.word	0x200010e4
 8008fd0:	20000c0c 	.word	0x20000c0c

08008fd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d04b      	beq.n	8009084 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d902      	bls.n	8008ffc <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e002      	b.n	8009002 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009000:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	429a      	cmp	r2, r3
 800900a:	d03b      	beq.n	8009084 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d136      	bne.n	8009084 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	2b00      	cmp	r3, #0
 8009028:	db04      	blt.n	8009034 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	6959      	ldr	r1, [r3, #20]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4a12      	ldr	r2, [pc, #72]	; (800908c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009044:	4413      	add	r3, r2
 8009046:	4299      	cmp	r1, r3
 8009048:	d11c      	bne.n	8009084 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fb84 	bl	800775c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d903      	bls.n	8009068 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	4a0a      	ldr	r2, [pc, #40]	; (8009090 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4a05      	ldr	r2, [pc, #20]	; (800908c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009076:	441a      	add	r2, r3
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe fb0f 	bl	80076a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009084:	bf00      	nop
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000c0c 	.word	0x20000c0c
 8009090:	200010e4 	.word	0x200010e4

08009094 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009098:	4b07      	ldr	r3, [pc, #28]	; (80090b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80090a0:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090a6:	3201      	adds	r2, #1
 80090a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80090aa:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80090ac:	681b      	ldr	r3, [r3, #0]
	}
 80090ae:	4618      	mov	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	20000c08 	.word	0x20000c08

080090bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c6:	4b21      	ldr	r3, [pc, #132]	; (800914c <prvAddCurrentTaskToDelayedList+0x90>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fb42 	bl	800775c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	d10a      	bne.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e6:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4819      	ldr	r0, [pc, #100]	; (8009154 <prvAddCurrentTaskToDelayedList+0x98>)
 80090f0:	f7fe fad7 	bl	80076a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090f4:	e026      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090fe:	4b14      	ldr	r3, [pc, #80]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	429a      	cmp	r2, r3
 800910c:	d209      	bcs.n	8009122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910e:	4b12      	ldr	r3, [pc, #72]	; (8009158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fe fae5 	bl	80076ea <vListInsert>
}
 8009120:	e010      	b.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009122:	4b0e      	ldr	r3, [pc, #56]	; (800915c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b0a      	ldr	r3, [pc, #40]	; (8009150 <prvAddCurrentTaskToDelayedList+0x94>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fadb 	bl	80076ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	d202      	bcs.n	8009144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800913e:	4a08      	ldr	r2, [pc, #32]	; (8009160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6013      	str	r3, [r2, #0]
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200010e0 	.word	0x200010e0
 8009150:	20000c08 	.word	0x20000c08
 8009154:	200010c8 	.word	0x200010c8
 8009158:	20001098 	.word	0x20001098
 800915c:	20001094 	.word	0x20001094
 8009160:	200010fc 	.word	0x200010fc

08009164 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800916a:	2300      	movs	r3, #0
 800916c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800916e:	f000 faa7 	bl	80096c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <xTimerCreateTimerTask+0x64>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d020      	beq.n	80091bc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009182:	463a      	mov	r2, r7
 8009184:	1d39      	adds	r1, r7, #4
 8009186:	f107 0308 	add.w	r3, r7, #8
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fa42 	bl	8007614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	9202      	str	r2, [sp, #8]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	2302      	movs	r3, #2
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	2300      	movs	r3, #0
 80091a0:	460a      	mov	r2, r1
 80091a2:	490a      	ldr	r1, [pc, #40]	; (80091cc <xTimerCreateTimerTask+0x68>)
 80091a4:	480a      	ldr	r0, [pc, #40]	; (80091d0 <xTimerCreateTimerTask+0x6c>)
 80091a6:	f7ff f8dd 	bl	8008364 <xTaskCreateStatic>
 80091aa:	4603      	mov	r3, r0
 80091ac:	4a09      	ldr	r2, [pc, #36]	; (80091d4 <xTimerCreateTimerTask+0x70>)
 80091ae:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091b0:	4b08      	ldr	r3, [pc, #32]	; (80091d4 <xTimerCreateTimerTask+0x70>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80091b8:	2301      	movs	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80091bc:	68fb      	ldr	r3, [r7, #12]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20001138 	.word	0x20001138
 80091cc:	0800c71c 	.word	0x0800c71c
 80091d0:	080092d9 	.word	0x080092d9
 80091d4:	2000113c 	.word	0x2000113c

080091d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08a      	sub	sp, #40	; 0x28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091ea:	4b1a      	ldr	r3, [pc, #104]	; (8009254 <xTimerGenericCommand+0x7c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d02a      	beq.n	8009248 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b05      	cmp	r3, #5
 8009202:	dc18      	bgt.n	8009236 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009204:	f7ff fe14 	bl	8008e30 <xTaskGetSchedulerState>
 8009208:	4603      	mov	r3, r0
 800920a:	2b02      	cmp	r3, #2
 800920c:	d109      	bne.n	8009222 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800920e:	4b11      	ldr	r3, [pc, #68]	; (8009254 <xTimerGenericCommand+0x7c>)
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f107 0114 	add.w	r1, r7, #20
 8009216:	2300      	movs	r3, #0
 8009218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921a:	f7fe fbc1 	bl	80079a0 <xQueueGenericSend>
 800921e:	6278      	str	r0, [r7, #36]	; 0x24
 8009220:	e012      	b.n	8009248 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009222:	4b0c      	ldr	r3, [pc, #48]	; (8009254 <xTimerGenericCommand+0x7c>)
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	f107 0114 	add.w	r1, r7, #20
 800922a:	2300      	movs	r3, #0
 800922c:	2200      	movs	r2, #0
 800922e:	f7fe fbb7 	bl	80079a0 <xQueueGenericSend>
 8009232:	6278      	str	r0, [r7, #36]	; 0x24
 8009234:	e008      	b.n	8009248 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009236:	4b07      	ldr	r3, [pc, #28]	; (8009254 <xTimerGenericCommand+0x7c>)
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f107 0114 	add.w	r1, r7, #20
 800923e:	2300      	movs	r3, #0
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	f7fe fc57 	bl	8007af4 <xQueueGenericSendFromISR>
 8009246:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800924a:	4618      	mov	r0, r3
 800924c:	3728      	adds	r7, #40	; 0x28
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20001138 	.word	0x20001138

08009258 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af02      	add	r7, sp, #8
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009262:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <prvProcessExpiredTimer+0x7c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3304      	adds	r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fa73 	bl	800775c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d015      	beq.n	80092b0 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	18d1      	adds	r1, r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f8c5 	bl	8009420 <prvInsertTimerInActiveList>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d012      	beq.n	80092c2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800929c:	2300      	movs	r3, #0
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2300      	movs	r3, #0
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	2100      	movs	r1, #0
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff ff96 	bl	80091d8 <xTimerGenericCommand>
 80092ac:	60b8      	str	r0, [r7, #8]
 80092ae:	e008      	b.n	80092c2 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b6:	f023 0301 	bic.w	r3, r3, #1
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	4798      	blx	r3
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20001130 	.word	0x20001130

080092d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092e0:	f107 0308 	add.w	r3, r7, #8
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f857 	bl	8009398 <prvGetNextExpireTime>
 80092ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	4619      	mov	r1, r3
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 f803 	bl	80092fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092f6:	f000 f8d5 	bl	80094a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092fa:	e7f1      	b.n	80092e0 <prvTimerTask+0x8>

080092fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009306:	f7ff fa2d 	bl	8008764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800930a:	f107 0308 	add.w	r3, r7, #8
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f866 	bl	80093e0 <prvSampleTimeNow>
 8009314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d130      	bne.n	800937e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10a      	bne.n	8009338 <prvProcessTimerOrBlockTask+0x3c>
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	429a      	cmp	r2, r3
 8009328:	d806      	bhi.n	8009338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800932a:	f7ff fa29 	bl	8008780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff ff91 	bl	8009258 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009336:	e024      	b.n	8009382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d008      	beq.n	8009350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800933e:	4b13      	ldr	r3, [pc, #76]	; (800938c <prvProcessTimerOrBlockTask+0x90>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <prvProcessTimerOrBlockTask+0x50>
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <prvProcessTimerOrBlockTask+0x52>
 800934c:	2300      	movs	r3, #0
 800934e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <prvProcessTimerOrBlockTask+0x94>)
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4619      	mov	r1, r3
 800935e:	f7fe ffcd 	bl	80082fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009362:	f7ff fa0d 	bl	8008780 <xTaskResumeAll>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800936c:	4b09      	ldr	r3, [pc, #36]	; (8009394 <prvProcessTimerOrBlockTask+0x98>)
 800936e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	f3bf 8f6f 	isb	sy
}
 800937c:	e001      	b.n	8009382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800937e:	f7ff f9ff 	bl	8008780 <xTaskResumeAll>
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20001134 	.word	0x20001134
 8009390:	20001138 	.word	0x20001138
 8009394:	e000ed04 	.word	0xe000ed04

08009398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093a0:	4b0e      	ldr	r3, [pc, #56]	; (80093dc <prvGetNextExpireTime+0x44>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <prvGetNextExpireTime+0x16>
 80093aa:	2201      	movs	r2, #1
 80093ac:	e000      	b.n	80093b0 <prvGetNextExpireTime+0x18>
 80093ae:	2200      	movs	r2, #0
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d105      	bne.n	80093c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <prvGetNextExpireTime+0x44>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	e001      	b.n	80093cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093cc:	68fb      	ldr	r3, [r7, #12]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20001130 	.word	0x20001130

080093e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093e8:	f7ff fa58 	bl	800889c <xTaskGetTickCount>
 80093ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093ee:	4b0b      	ldr	r3, [pc, #44]	; (800941c <prvSampleTimeNow+0x3c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d205      	bcs.n	8009404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093f8:	f000 f90c 	bl	8009614 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	e002      	b.n	800940a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800940a:	4a04      	ldr	r2, [pc, #16]	; (800941c <prvSampleTimeNow+0x3c>)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009410:	68fb      	ldr	r3, [r7, #12]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20001140 	.word	0x20001140

08009420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d812      	bhi.n	800946c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	429a      	cmp	r2, r3
 8009452:	d302      	bcc.n	800945a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009454:	2301      	movs	r3, #1
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e01b      	b.n	8009492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800945a:	4b10      	ldr	r3, [pc, #64]	; (800949c <prvInsertTimerInActiveList+0x7c>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3304      	adds	r3, #4
 8009462:	4619      	mov	r1, r3
 8009464:	4610      	mov	r0, r2
 8009466:	f7fe f940 	bl	80076ea <vListInsert>
 800946a:	e012      	b.n	8009492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d206      	bcs.n	8009482 <prvInsertTimerInActiveList+0x62>
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d302      	bcc.n	8009482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e007      	b.n	8009492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009482:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <prvInsertTimerInActiveList+0x80>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3304      	adds	r3, #4
 800948a:	4619      	mov	r1, r3
 800948c:	4610      	mov	r0, r2
 800948e:	f7fe f92c 	bl	80076ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009492:	697b      	ldr	r3, [r7, #20]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20001134 	.word	0x20001134
 80094a0:	20001130 	.word	0x20001130

080094a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b08c      	sub	sp, #48	; 0x30
 80094a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094aa:	e0a0      	b.n	80095ee <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	da0b      	bge.n	80094ca <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094b2:	f107 0308 	add.w	r3, r7, #8
 80094b6:	3304      	adds	r3, #4
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c0:	6850      	ldr	r0, [r2, #4]
 80094c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c4:	6892      	ldr	r2, [r2, #8]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f2c0 808d 	blt.w	80095ec <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d004      	beq.n	80094e8 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe f93a 	bl	800775c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094e8:	1d3b      	adds	r3, r7, #4
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff ff78 	bl	80093e0 <prvSampleTimeNow>
 80094f0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b09      	cmp	r3, #9
 80094f6:	d87a      	bhi.n	80095ee <prvProcessReceivedCommands+0x14a>
 80094f8:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <prvProcessReceivedCommands+0x5c>)
 80094fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fe:	bf00      	nop
 8009500:	08009529 	.word	0x08009529
 8009504:	08009529 	.word	0x08009529
 8009508:	08009529 	.word	0x08009529
 800950c:	08009583 	.word	0x08009583
 8009510:	08009597 	.word	0x08009597
 8009514:	080095c3 	.word	0x080095c3
 8009518:	08009529 	.word	0x08009529
 800951c:	08009529 	.word	0x08009529
 8009520:	08009583 	.word	0x08009583
 8009524:	08009597 	.word	0x08009597
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800952e:	f043 0301 	orr.w	r3, r3, #1
 8009532:	b2da      	uxtb	r2, r3
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	18d1      	adds	r1, r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	6a38      	ldr	r0, [r7, #32]
 8009548:	f7ff ff6a 	bl	8009420 <prvInsertTimerInActiveList>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d04d      	beq.n	80095ee <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	6a38      	ldr	r0, [r7, #32]
 8009558:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d042      	beq.n	80095ee <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	441a      	add	r2, r3
 8009570:	2300      	movs	r3, #0
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	2100      	movs	r1, #0
 8009578:	6a38      	ldr	r0, [r7, #32]
 800957a:	f7ff fe2d 	bl	80091d8 <xTimerGenericCommand>
 800957e:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8009580:	e035      	b.n	80095ee <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	b2da      	uxtb	r2, r3
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009594:	e02b      	b.n	80095ee <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800959c:	f043 0301 	orr.w	r3, r3, #1
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	699a      	ldr	r2, [r3, #24]
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	18d1      	adds	r1, r2, r3
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	6a38      	ldr	r0, [r7, #32]
 80095bc:	f7ff ff30 	bl	8009420 <prvInsertTimerInActiveList>
					break;
 80095c0:	e015      	b.n	80095ee <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 80095d0:	6a38      	ldr	r0, [r7, #32]
 80095d2:	f000 faab 	bl	8009b2c <vPortFree>
 80095d6:	e00a      	b.n	80095ee <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095de:	f023 0301 	bic.w	r3, r3, #1
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095ea:	e000      	b.n	80095ee <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80095ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095ee:	4b08      	ldr	r3, [pc, #32]	; (8009610 <prvProcessReceivedCommands+0x16c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f107 0108 	add.w	r1, r7, #8
 80095f6:	2200      	movs	r2, #0
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fb2d 	bl	8007c58 <xQueueReceive>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	f47f af53 	bne.w	80094ac <prvProcessReceivedCommands+0x8>
	}
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	3728      	adds	r7, #40	; 0x28
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20001138 	.word	0x20001138

08009614 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b088      	sub	sp, #32
 8009618:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800961a:	e03a      	b.n	8009692 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800961c:	4b26      	ldr	r3, [pc, #152]	; (80096b8 <prvSwitchTimerLists+0xa4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009626:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <prvSwitchTimerLists+0xa4>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3304      	adds	r3, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe f891 	bl	800775c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d020      	beq.n	8009692 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4413      	add	r3, r2
 8009658:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	429a      	cmp	r2, r3
 8009660:	d90e      	bls.n	8009680 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800966e:	4b12      	ldr	r3, [pc, #72]	; (80096b8 <prvSwitchTimerLists+0xa4>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3304      	adds	r3, #4
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7fe f836 	bl	80076ea <vListInsert>
 800967e:	e008      	b.n	8009692 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009680:	2300      	movs	r3, #0
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	2100      	movs	r1, #0
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f7ff fda4 	bl	80091d8 <xTimerGenericCommand>
 8009690:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009692:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <prvSwitchTimerLists+0xa4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1bf      	bne.n	800961c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <prvSwitchTimerLists+0xa4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096a2:	4b06      	ldr	r3, [pc, #24]	; (80096bc <prvSwitchTimerLists+0xa8>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a04      	ldr	r2, [pc, #16]	; (80096b8 <prvSwitchTimerLists+0xa4>)
 80096a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096aa:	4a04      	ldr	r2, [pc, #16]	; (80096bc <prvSwitchTimerLists+0xa8>)
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	6013      	str	r3, [r2, #0]
}
 80096b0:	bf00      	nop
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20001130 	.word	0x20001130
 80096bc:	20001134 	.word	0x20001134

080096c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096c6:	f000 f8dd 	bl	8009884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096ca:	4b15      	ldr	r3, [pc, #84]	; (8009720 <prvCheckForValidListAndQueue+0x60>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d120      	bne.n	8009714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096d2:	4814      	ldr	r0, [pc, #80]	; (8009724 <prvCheckForValidListAndQueue+0x64>)
 80096d4:	f7fd ffb8 	bl	8007648 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096d8:	4813      	ldr	r0, [pc, #76]	; (8009728 <prvCheckForValidListAndQueue+0x68>)
 80096da:	f7fd ffb5 	bl	8007648 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <prvCheckForValidListAndQueue+0x6c>)
 80096e0:	4a10      	ldr	r2, [pc, #64]	; (8009724 <prvCheckForValidListAndQueue+0x64>)
 80096e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096e4:	4b12      	ldr	r3, [pc, #72]	; (8009730 <prvCheckForValidListAndQueue+0x70>)
 80096e6:	4a10      	ldr	r2, [pc, #64]	; (8009728 <prvCheckForValidListAndQueue+0x68>)
 80096e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096ea:	2300      	movs	r3, #0
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4b11      	ldr	r3, [pc, #68]	; (8009734 <prvCheckForValidListAndQueue+0x74>)
 80096f0:	4a11      	ldr	r2, [pc, #68]	; (8009738 <prvCheckForValidListAndQueue+0x78>)
 80096f2:	2110      	movs	r1, #16
 80096f4:	200a      	movs	r0, #10
 80096f6:	f7fe f8b5 	bl	8007864 <xQueueGenericCreateStatic>
 80096fa:	4603      	mov	r3, r0
 80096fc:	4a08      	ldr	r2, [pc, #32]	; (8009720 <prvCheckForValidListAndQueue+0x60>)
 80096fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <prvCheckForValidListAndQueue+0x60>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009708:	4b05      	ldr	r3, [pc, #20]	; (8009720 <prvCheckForValidListAndQueue+0x60>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	490b      	ldr	r1, [pc, #44]	; (800973c <prvCheckForValidListAndQueue+0x7c>)
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fda0 	bl	8008254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009714:	f000 f8d0 	bl	80098b8 <vPortExitCritical>
}
 8009718:	bf00      	nop
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20001138 	.word	0x20001138
 8009724:	20001108 	.word	0x20001108
 8009728:	2000111c 	.word	0x2000111c
 800972c:	20001130 	.word	0x20001130
 8009730:	20001134 	.word	0x20001134
 8009734:	200011e4 	.word	0x200011e4
 8009738:	20001144 	.word	0x20001144
 800973c:	0800c724 	.word	0x0800c724

08009740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3b04      	subs	r3, #4
 8009750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3b04      	subs	r3, #4
 800975e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f023 0201 	bic.w	r2, r3, #1
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3b04      	subs	r3, #4
 800976e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009770:	4a0c      	ldr	r2, [pc, #48]	; (80097a4 <pxPortInitialiseStack+0x64>)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3b14      	subs	r3, #20
 800977a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3b04      	subs	r3, #4
 8009786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f06f 0202 	mvn.w	r2, #2
 800978e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3b20      	subs	r3, #32
 8009794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009796:	68fb      	ldr	r3, [r7, #12]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	080097a9 	.word	0x080097a9

080097a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	607b      	str	r3, [r7, #4]
}
 80097c4:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097c6:	bf00      	nop
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0fc      	beq.n	80097c8 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	0000      	movs	r0, r0
	...

080097e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <pxCurrentTCBConst2>)
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	6808      	ldr	r0, [r1, #0]
 80097e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ea:	f380 8809 	msr	PSP, r0
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8811 	msr	BASEPRI, r0
 80097fa:	4770      	bx	lr
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst2>:
 8009800:	20000c08 	.word	0x20000c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009808:	4808      	ldr	r0, [pc, #32]	; (800982c <prvPortStartFirstTask+0x24>)
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f380 8808 	msr	MSP, r0
 8009812:	f04f 0000 	mov.w	r0, #0
 8009816:	f380 8814 	msr	CONTROL, r0
 800981a:	b662      	cpsie	i
 800981c:	b661      	cpsie	f
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	df00      	svc	0
 8009828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800982a:	bf00      	nop
 800982c:	e000ed08 	.word	0xe000ed08

08009830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009834:	4b10      	ldr	r3, [pc, #64]	; (8009878 <xPortStartScheduler+0x48>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a0f      	ldr	r2, [pc, #60]	; (8009878 <xPortStartScheduler+0x48>)
 800983a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800983e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009840:	4b0d      	ldr	r3, [pc, #52]	; (8009878 <xPortStartScheduler+0x48>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a0c      	ldr	r2, [pc, #48]	; (8009878 <xPortStartScheduler+0x48>)
 8009846:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800984a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800984c:	f000 f8a6 	bl	800999c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <xPortStartScheduler+0x4c>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009856:	f000 f8c5 	bl	80099e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800985a:	4b09      	ldr	r3, [pc, #36]	; (8009880 <xPortStartScheduler+0x50>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a08      	ldr	r2, [pc, #32]	; (8009880 <xPortStartScheduler+0x50>)
 8009860:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009864:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009866:	f7ff ffcf 	bl	8009808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800986a:	f7ff f8cf 	bl	8008a0c <vTaskSwitchContext>
	prvTaskExitError();
 800986e:	f7ff ff9b 	bl	80097a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	bd80      	pop	{r7, pc}
 8009878:	e000ed20 	.word	0xe000ed20
 800987c:	20000018 	.word	0x20000018
 8009880:	e000ef34 	.word	0xe000ef34

08009884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	607b      	str	r3, [r7, #4]
}
 800989c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800989e:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <vPortEnterCritical+0x30>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3301      	adds	r3, #1
 80098a4:	4a03      	ldr	r2, [pc, #12]	; (80098b4 <vPortEnterCritical+0x30>)
 80098a6:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20000018 	.word	0x20000018

080098b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 80098be:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <vPortExitCritical+0x30>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <vPortExitCritical+0x30>)
 80098c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098c8:	4b07      	ldr	r3, [pc, #28]	; (80098e8 <vPortExitCritical+0x30>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <vPortExitCritical+0x24>
 80098d0:	2300      	movs	r3, #0
 80098d2:	607b      	str	r3, [r7, #4]
	__asm volatile
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f383 8811 	msr	BASEPRI, r3
}
 80098da:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000018 	.word	0x20000018
 80098ec:	00000000 	.word	0x00000000

080098f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098f0:	f3ef 8009 	mrs	r0, PSP
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	4b15      	ldr	r3, [pc, #84]	; (8009950 <pxCurrentTCBConst>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	f01e 0f10 	tst.w	lr, #16
 8009900:	bf08      	it	eq
 8009902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	6010      	str	r0, [r2, #0]
 800990c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009914:	f380 8811 	msr	BASEPRI, r0
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f7ff f874 	bl	8008a0c <vTaskSwitchContext>
 8009924:	f04f 0000 	mov.w	r0, #0
 8009928:	f380 8811 	msr	BASEPRI, r0
 800992c:	bc09      	pop	{r0, r3}
 800992e:	6819      	ldr	r1, [r3, #0]
 8009930:	6808      	ldr	r0, [r1, #0]
 8009932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009936:	f01e 0f10 	tst.w	lr, #16
 800993a:	bf08      	it	eq
 800993c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009940:	f380 8809 	msr	PSP, r0
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	f3af 8000 	nop.w

08009950 <pxCurrentTCBConst>:
 8009950:	20000c08 	.word	0x20000c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop

08009958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	607b      	str	r3, [r7, #4]
}
 8009970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009972:	f7fe ffa3 	bl	80088bc <xTaskIncrementTick>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800997c:	4b06      	ldr	r3, [pc, #24]	; (8009998 <xPortSysTickHandler+0x40>)
 800997e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	2300      	movs	r3, #0
 8009986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f383 8811 	msr	BASEPRI, r3
}
 800998e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099a0:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <vPortSetupTimerInterrupt+0x38>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <vPortSetupTimerInterrupt+0x3c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a0a      	ldr	r2, [pc, #40]	; (80099dc <vPortSetupTimerInterrupt+0x40>)
 80099b2:	fba2 2303 	umull	r2, r3, r2, r3
 80099b6:	099b      	lsrs	r3, r3, #6
 80099b8:	4a09      	ldr	r2, [pc, #36]	; (80099e0 <vPortSetupTimerInterrupt+0x44>)
 80099ba:	3b01      	subs	r3, #1
 80099bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099be:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099c0:	2207      	movs	r2, #7
 80099c2:	601a      	str	r2, [r3, #0]
}
 80099c4:	bf00      	nop
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	e000e010 	.word	0xe000e010
 80099d4:	e000e018 	.word	0xe000e018
 80099d8:	2000000c 	.word	0x2000000c
 80099dc:	10624dd3 	.word	0x10624dd3
 80099e0:	e000e014 	.word	0xe000e014

080099e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099f4 <vPortEnableVFP+0x10>
 80099e8:	6801      	ldr	r1, [r0, #0]
 80099ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099ee:	6001      	str	r1, [r0, #0]
 80099f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099f2:	bf00      	nop
 80099f4:	e000ed88 	.word	0xe000ed88

080099f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8009a04:	f7fe feae 	bl	8008764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a08:	4b42      	ldr	r3, [pc, #264]	; (8009b14 <pvPortMalloc+0x11c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a10:	f000 f8cc 	bl	8009bac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a14:	4b40      	ldr	r3, [pc, #256]	; (8009b18 <pvPortMalloc+0x120>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d172      	bne.n	8009b06 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00d      	beq.n	8009a42 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8009a26:	2208      	movs	r2, #8
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d004      	beq.n	8009a42 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f023 0307 	bic.w	r3, r3, #7
 8009a3e:	3308      	adds	r3, #8
 8009a40:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d05e      	beq.n	8009b06 <pvPortMalloc+0x10e>
 8009a48:	4b34      	ldr	r3, [pc, #208]	; (8009b1c <pvPortMalloc+0x124>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d859      	bhi.n	8009b06 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a52:	4b33      	ldr	r3, [pc, #204]	; (8009b20 <pvPortMalloc+0x128>)
 8009a54:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009a56:	4b32      	ldr	r3, [pc, #200]	; (8009b20 <pvPortMalloc+0x128>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a5c:	e004      	b.n	8009a68 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d903      	bls.n	8009a7a <pvPortMalloc+0x82>
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1f1      	bne.n	8009a5e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a7a:	4b26      	ldr	r3, [pc, #152]	; (8009b14 <pvPortMalloc+0x11c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d040      	beq.n	8009b06 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2208      	movs	r2, #8
 8009a8a:	4413      	add	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	1ad2      	subs	r2, r2, r3
 8009a9e:	2308      	movs	r3, #8
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d90f      	bls.n	8009ac6 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4413      	add	r3, r2
 8009aac:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	1ad2      	subs	r2, r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ac0:	68b8      	ldr	r0, [r7, #8]
 8009ac2:	f000 f8d5 	bl	8009c70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ac6:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <pvPortMalloc+0x124>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	4a12      	ldr	r2, [pc, #72]	; (8009b1c <pvPortMalloc+0x124>)
 8009ad2:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ad4:	4b11      	ldr	r3, [pc, #68]	; (8009b1c <pvPortMalloc+0x124>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <pvPortMalloc+0x12c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d203      	bcs.n	8009ae8 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ae0:	4b0e      	ldr	r3, [pc, #56]	; (8009b1c <pvPortMalloc+0x124>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a0f      	ldr	r2, [pc, #60]	; (8009b24 <pvPortMalloc+0x12c>)
 8009ae6:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <pvPortMalloc+0x120>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	431a      	orrs	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009afc:	4b0a      	ldr	r3, [pc, #40]	; (8009b28 <pvPortMalloc+0x130>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3301      	adds	r3, #1
 8009b02:	4a09      	ldr	r2, [pc, #36]	; (8009b28 <pvPortMalloc+0x130>)
 8009b04:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b06:	f7fe fe3b 	bl	8008780 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	2000263c 	.word	0x2000263c
 8009b18:	20002650 	.word	0x20002650
 8009b1c:	20002640 	.word	0x20002640
 8009b20:	20002634 	.word	0x20002634
 8009b24:	20002644 	.word	0x20002644
 8009b28:	20002648 	.word	0x20002648

08009b2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d02c      	beq.n	8009b98 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b3e:	2308      	movs	r3, #8
 8009b40:	425b      	negs	r3, r3
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	4b13      	ldr	r3, [pc, #76]	; (8009ba0 <vPortFree+0x74>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4013      	ands	r3, r2
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01e      	beq.n	8009b98 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d11a      	bne.n	8009b98 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <vPortFree+0x74>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	43db      	mvns	r3, r3
 8009b6c:	401a      	ands	r2, r3
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b72:	f7fe fdf7 	bl	8008764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vPortFree+0x78>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4413      	add	r3, r2
 8009b80:	4a08      	ldr	r2, [pc, #32]	; (8009ba4 <vPortFree+0x78>)
 8009b82:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b84:	68b8      	ldr	r0, [r7, #8]
 8009b86:	f000 f873 	bl	8009c70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b8a:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <vPortFree+0x7c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	4a05      	ldr	r2, [pc, #20]	; (8009ba8 <vPortFree+0x7c>)
 8009b92:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b94:	f7fe fdf4 	bl	8008780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b98:	bf00      	nop
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20002650 	.word	0x20002650
 8009ba4:	20002640 	.word	0x20002640
 8009ba8:	2000264c 	.word	0x2000264c

08009bac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009bb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bb8:	4b27      	ldr	r3, [pc, #156]	; (8009c58 <prvHeapInit+0xac>)
 8009bba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00c      	beq.n	8009be0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3307      	adds	r3, #7
 8009bca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 0307 	bic.w	r3, r3, #7
 8009bd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	4a1f      	ldr	r2, [pc, #124]	; (8009c58 <prvHeapInit+0xac>)
 8009bdc:	4413      	add	r3, r2
 8009bde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009be4:	4a1d      	ldr	r2, [pc, #116]	; (8009c5c <prvHeapInit+0xb0>)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bea:	4b1c      	ldr	r3, [pc, #112]	; (8009c5c <prvHeapInit+0xb0>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bf8:	2208      	movs	r2, #8
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	1a9b      	subs	r3, r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0307 	bic.w	r3, r3, #7
 8009c06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <prvHeapInit+0xb4>)
 8009c0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c0e:	4b14      	ldr	r3, [pc, #80]	; (8009c60 <prvHeapInit+0xb4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c16:	4b12      	ldr	r3, [pc, #72]	; (8009c60 <prvHeapInit+0xb4>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	1ad2      	subs	r2, r2, r3
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c2c:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <prvHeapInit+0xb4>)
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	4a0a      	ldr	r2, [pc, #40]	; (8009c64 <prvHeapInit+0xb8>)
 8009c3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	4a09      	ldr	r2, [pc, #36]	; (8009c68 <prvHeapInit+0xbc>)
 8009c42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c44:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <prvHeapInit+0xc0>)
 8009c46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c4a:	601a      	str	r2, [r3, #0]
}
 8009c4c:	bf00      	nop
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	20001234 	.word	0x20001234
 8009c5c:	20002634 	.word	0x20002634
 8009c60:	2000263c 	.word	0x2000263c
 8009c64:	20002644 	.word	0x20002644
 8009c68:	20002640 	.word	0x20002640
 8009c6c:	20002650 	.word	0x20002650

08009c70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c78:	4b28      	ldr	r3, [pc, #160]	; (8009d1c <prvInsertBlockIntoFreeList+0xac>)
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	e002      	b.n	8009c84 <prvInsertBlockIntoFreeList+0x14>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d8f7      	bhi.n	8009c7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d108      	bne.n	8009cb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	441a      	add	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	441a      	add	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d118      	bne.n	8009cf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <prvInsertBlockIntoFreeList+0xb0>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d00d      	beq.n	8009cee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	441a      	add	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	e008      	b.n	8009d00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cee:	4b0c      	ldr	r3, [pc, #48]	; (8009d20 <prvInsertBlockIntoFreeList+0xb0>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	e003      	b.n	8009d00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d002      	beq.n	8009d0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d0e:	bf00      	nop
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20002634 	.word	0x20002634
 8009d20:	2000263c 	.word	0x2000263c

08009d24 <__errno>:
 8009d24:	4b01      	ldr	r3, [pc, #4]	; (8009d2c <__errno+0x8>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	2000001c 	.word	0x2000001c

08009d30 <__libc_init_array>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	4d0d      	ldr	r5, [pc, #52]	; (8009d68 <__libc_init_array+0x38>)
 8009d34:	4c0d      	ldr	r4, [pc, #52]	; (8009d6c <__libc_init_array+0x3c>)
 8009d36:	1b64      	subs	r4, r4, r5
 8009d38:	10a4      	asrs	r4, r4, #2
 8009d3a:	2600      	movs	r6, #0
 8009d3c:	42a6      	cmp	r6, r4
 8009d3e:	d109      	bne.n	8009d54 <__libc_init_array+0x24>
 8009d40:	4d0b      	ldr	r5, [pc, #44]	; (8009d70 <__libc_init_array+0x40>)
 8009d42:	4c0c      	ldr	r4, [pc, #48]	; (8009d74 <__libc_init_array+0x44>)
 8009d44:	f002 fc52 	bl	800c5ec <_init>
 8009d48:	1b64      	subs	r4, r4, r5
 8009d4a:	10a4      	asrs	r4, r4, #2
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	42a6      	cmp	r6, r4
 8009d50:	d105      	bne.n	8009d5e <__libc_init_array+0x2e>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d58:	4798      	blx	r3
 8009d5a:	3601      	adds	r6, #1
 8009d5c:	e7ee      	b.n	8009d3c <__libc_init_array+0xc>
 8009d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d62:	4798      	blx	r3
 8009d64:	3601      	adds	r6, #1
 8009d66:	e7f2      	b.n	8009d4e <__libc_init_array+0x1e>
 8009d68:	0800cae8 	.word	0x0800cae8
 8009d6c:	0800cae8 	.word	0x0800cae8
 8009d70:	0800cae8 	.word	0x0800cae8
 8009d74:	0800caec 	.word	0x0800caec

08009d78 <__retarget_lock_acquire_recursive>:
 8009d78:	4770      	bx	lr

08009d7a <__retarget_lock_release_recursive>:
 8009d7a:	4770      	bx	lr

08009d7c <memcpy>:
 8009d7c:	440a      	add	r2, r1
 8009d7e:	4291      	cmp	r1, r2
 8009d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d84:	d100      	bne.n	8009d88 <memcpy+0xc>
 8009d86:	4770      	bx	lr
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d92:	4291      	cmp	r1, r2
 8009d94:	d1f9      	bne.n	8009d8a <memcpy+0xe>
 8009d96:	bd10      	pop	{r4, pc}

08009d98 <memset>:
 8009d98:	4402      	add	r2, r0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d100      	bne.n	8009da2 <memset+0xa>
 8009da0:	4770      	bx	lr
 8009da2:	f803 1b01 	strb.w	r1, [r3], #1
 8009da6:	e7f9      	b.n	8009d9c <memset+0x4>

08009da8 <sbrk_aligned>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	4e0e      	ldr	r6, [pc, #56]	; (8009de4 <sbrk_aligned+0x3c>)
 8009dac:	460c      	mov	r4, r1
 8009dae:	6831      	ldr	r1, [r6, #0]
 8009db0:	4605      	mov	r5, r0
 8009db2:	b911      	cbnz	r1, 8009dba <sbrk_aligned+0x12>
 8009db4:	f000 f8f6 	bl	8009fa4 <_sbrk_r>
 8009db8:	6030      	str	r0, [r6, #0]
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f000 f8f1 	bl	8009fa4 <_sbrk_r>
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d00a      	beq.n	8009ddc <sbrk_aligned+0x34>
 8009dc6:	1cc4      	adds	r4, r0, #3
 8009dc8:	f024 0403 	bic.w	r4, r4, #3
 8009dcc:	42a0      	cmp	r0, r4
 8009dce:	d007      	beq.n	8009de0 <sbrk_aligned+0x38>
 8009dd0:	1a21      	subs	r1, r4, r0
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 f8e6 	bl	8009fa4 <_sbrk_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d101      	bne.n	8009de0 <sbrk_aligned+0x38>
 8009ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8009de0:	4620      	mov	r0, r4
 8009de2:	bd70      	pop	{r4, r5, r6, pc}
 8009de4:	2000265c 	.word	0x2000265c

08009de8 <_malloc_r>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	1ccd      	adds	r5, r1, #3
 8009dee:	f025 0503 	bic.w	r5, r5, #3
 8009df2:	3508      	adds	r5, #8
 8009df4:	2d0c      	cmp	r5, #12
 8009df6:	bf38      	it	cc
 8009df8:	250c      	movcc	r5, #12
 8009dfa:	2d00      	cmp	r5, #0
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	db01      	blt.n	8009e04 <_malloc_r+0x1c>
 8009e00:	42a9      	cmp	r1, r5
 8009e02:	d905      	bls.n	8009e10 <_malloc_r+0x28>
 8009e04:	230c      	movs	r3, #12
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	2600      	movs	r6, #0
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e10:	4e2e      	ldr	r6, [pc, #184]	; (8009ecc <_malloc_r+0xe4>)
 8009e12:	f000 f8f7 	bl	800a004 <__malloc_lock>
 8009e16:	6833      	ldr	r3, [r6, #0]
 8009e18:	461c      	mov	r4, r3
 8009e1a:	bb34      	cbnz	r4, 8009e6a <_malloc_r+0x82>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f7ff ffc2 	bl	8009da8 <sbrk_aligned>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	4604      	mov	r4, r0
 8009e28:	d14d      	bne.n	8009ec6 <_malloc_r+0xde>
 8009e2a:	6834      	ldr	r4, [r6, #0]
 8009e2c:	4626      	mov	r6, r4
 8009e2e:	2e00      	cmp	r6, #0
 8009e30:	d140      	bne.n	8009eb4 <_malloc_r+0xcc>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	4631      	mov	r1, r6
 8009e36:	4638      	mov	r0, r7
 8009e38:	eb04 0803 	add.w	r8, r4, r3
 8009e3c:	f000 f8b2 	bl	8009fa4 <_sbrk_r>
 8009e40:	4580      	cmp	r8, r0
 8009e42:	d13a      	bne.n	8009eba <_malloc_r+0xd2>
 8009e44:	6821      	ldr	r1, [r4, #0]
 8009e46:	3503      	adds	r5, #3
 8009e48:	1a6d      	subs	r5, r5, r1
 8009e4a:	f025 0503 	bic.w	r5, r5, #3
 8009e4e:	3508      	adds	r5, #8
 8009e50:	2d0c      	cmp	r5, #12
 8009e52:	bf38      	it	cc
 8009e54:	250c      	movcc	r5, #12
 8009e56:	4629      	mov	r1, r5
 8009e58:	4638      	mov	r0, r7
 8009e5a:	f7ff ffa5 	bl	8009da8 <sbrk_aligned>
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d02b      	beq.n	8009eba <_malloc_r+0xd2>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	442b      	add	r3, r5
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	e00e      	b.n	8009e88 <_malloc_r+0xa0>
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	1b52      	subs	r2, r2, r5
 8009e6e:	d41e      	bmi.n	8009eae <_malloc_r+0xc6>
 8009e70:	2a0b      	cmp	r2, #11
 8009e72:	d916      	bls.n	8009ea2 <_malloc_r+0xba>
 8009e74:	1961      	adds	r1, r4, r5
 8009e76:	42a3      	cmp	r3, r4
 8009e78:	6025      	str	r5, [r4, #0]
 8009e7a:	bf18      	it	ne
 8009e7c:	6059      	strne	r1, [r3, #4]
 8009e7e:	6863      	ldr	r3, [r4, #4]
 8009e80:	bf08      	it	eq
 8009e82:	6031      	streq	r1, [r6, #0]
 8009e84:	5162      	str	r2, [r4, r5]
 8009e86:	604b      	str	r3, [r1, #4]
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f104 060b 	add.w	r6, r4, #11
 8009e8e:	f000 f8bf 	bl	800a010 <__malloc_unlock>
 8009e92:	f026 0607 	bic.w	r6, r6, #7
 8009e96:	1d23      	adds	r3, r4, #4
 8009e98:	1af2      	subs	r2, r6, r3
 8009e9a:	d0b6      	beq.n	8009e0a <_malloc_r+0x22>
 8009e9c:	1b9b      	subs	r3, r3, r6
 8009e9e:	50a3      	str	r3, [r4, r2]
 8009ea0:	e7b3      	b.n	8009e0a <_malloc_r+0x22>
 8009ea2:	6862      	ldr	r2, [r4, #4]
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	bf0c      	ite	eq
 8009ea8:	6032      	streq	r2, [r6, #0]
 8009eaa:	605a      	strne	r2, [r3, #4]
 8009eac:	e7ec      	b.n	8009e88 <_malloc_r+0xa0>
 8009eae:	4623      	mov	r3, r4
 8009eb0:	6864      	ldr	r4, [r4, #4]
 8009eb2:	e7b2      	b.n	8009e1a <_malloc_r+0x32>
 8009eb4:	4634      	mov	r4, r6
 8009eb6:	6876      	ldr	r6, [r6, #4]
 8009eb8:	e7b9      	b.n	8009e2e <_malloc_r+0x46>
 8009eba:	230c      	movs	r3, #12
 8009ebc:	603b      	str	r3, [r7, #0]
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f000 f8a6 	bl	800a010 <__malloc_unlock>
 8009ec4:	e7a1      	b.n	8009e0a <_malloc_r+0x22>
 8009ec6:	6025      	str	r5, [r4, #0]
 8009ec8:	e7de      	b.n	8009e88 <_malloc_r+0xa0>
 8009eca:	bf00      	nop
 8009ecc:	20002658 	.word	0x20002658

08009ed0 <cleanup_glue>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	6809      	ldr	r1, [r1, #0]
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	b109      	cbz	r1, 8009ede <cleanup_glue+0xe>
 8009eda:	f7ff fff9 	bl	8009ed0 <cleanup_glue>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee6:	f000 b899 	b.w	800a01c <_free_r>
	...

08009eec <_reclaim_reent>:
 8009eec:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <_reclaim_reent+0xb4>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4283      	cmp	r3, r0
 8009ef2:	b570      	push	{r4, r5, r6, lr}
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	d051      	beq.n	8009f9c <_reclaim_reent+0xb0>
 8009ef8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009efa:	b143      	cbz	r3, 8009f0e <_reclaim_reent+0x22>
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d14a      	bne.n	8009f98 <_reclaim_reent+0xac>
 8009f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	b111      	cbz	r1, 8009f0e <_reclaim_reent+0x22>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 f887 	bl	800a01c <_free_r>
 8009f0e:	6961      	ldr	r1, [r4, #20]
 8009f10:	b111      	cbz	r1, 8009f18 <_reclaim_reent+0x2c>
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f882 	bl	800a01c <_free_r>
 8009f18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f1a:	b111      	cbz	r1, 8009f22 <_reclaim_reent+0x36>
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 f87d 	bl	800a01c <_free_r>
 8009f22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f24:	b111      	cbz	r1, 8009f2c <_reclaim_reent+0x40>
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 f878 	bl	800a01c <_free_r>
 8009f2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f2e:	b111      	cbz	r1, 8009f36 <_reclaim_reent+0x4a>
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 f873 	bl	800a01c <_free_r>
 8009f36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f38:	b111      	cbz	r1, 8009f40 <_reclaim_reent+0x54>
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 f86e 	bl	800a01c <_free_r>
 8009f40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f42:	b111      	cbz	r1, 8009f4a <_reclaim_reent+0x5e>
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 f869 	bl	800a01c <_free_r>
 8009f4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f4c:	b111      	cbz	r1, 8009f54 <_reclaim_reent+0x68>
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 f864 	bl	800a01c <_free_r>
 8009f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f56:	b111      	cbz	r1, 8009f5e <_reclaim_reent+0x72>
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 f85f 	bl	800a01c <_free_r>
 8009f5e:	69a3      	ldr	r3, [r4, #24]
 8009f60:	b1e3      	cbz	r3, 8009f9c <_reclaim_reent+0xb0>
 8009f62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f64:	4620      	mov	r0, r4
 8009f66:	4798      	blx	r3
 8009f68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f6a:	b1b9      	cbz	r1, 8009f9c <_reclaim_reent+0xb0>
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f72:	f7ff bfad 	b.w	8009ed0 <cleanup_glue>
 8009f76:	5949      	ldr	r1, [r1, r5]
 8009f78:	b941      	cbnz	r1, 8009f8c <_reclaim_reent+0xa0>
 8009f7a:	3504      	adds	r5, #4
 8009f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7e:	2d80      	cmp	r5, #128	; 0x80
 8009f80:	68d9      	ldr	r1, [r3, #12]
 8009f82:	d1f8      	bne.n	8009f76 <_reclaim_reent+0x8a>
 8009f84:	4620      	mov	r0, r4
 8009f86:	f000 f849 	bl	800a01c <_free_r>
 8009f8a:	e7ba      	b.n	8009f02 <_reclaim_reent+0x16>
 8009f8c:	680e      	ldr	r6, [r1, #0]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 f844 	bl	800a01c <_free_r>
 8009f94:	4631      	mov	r1, r6
 8009f96:	e7ef      	b.n	8009f78 <_reclaim_reent+0x8c>
 8009f98:	2500      	movs	r5, #0
 8009f9a:	e7ef      	b.n	8009f7c <_reclaim_reent+0x90>
 8009f9c:	bd70      	pop	{r4, r5, r6, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000001c 	.word	0x2000001c

08009fa4 <_sbrk_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d06      	ldr	r5, [pc, #24]	; (8009fc0 <_sbrk_r+0x1c>)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4604      	mov	r4, r0
 8009fac:	4608      	mov	r0, r1
 8009fae:	602b      	str	r3, [r5, #0]
 8009fb0:	f7f8 f98e 	bl	80022d0 <_sbrk>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_sbrk_r+0x1a>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_sbrk_r+0x1a>
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	20002660 	.word	0x20002660

08009fc4 <siprintf>:
 8009fc4:	b40e      	push	{r1, r2, r3}
 8009fc6:	b500      	push	{lr}
 8009fc8:	b09c      	sub	sp, #112	; 0x70
 8009fca:	ab1d      	add	r3, sp, #116	; 0x74
 8009fcc:	9002      	str	r0, [sp, #8]
 8009fce:	9006      	str	r0, [sp, #24]
 8009fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fd4:	4809      	ldr	r0, [pc, #36]	; (8009ffc <siprintf+0x38>)
 8009fd6:	9107      	str	r1, [sp, #28]
 8009fd8:	9104      	str	r1, [sp, #16]
 8009fda:	4909      	ldr	r1, [pc, #36]	; (800a000 <siprintf+0x3c>)
 8009fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe0:	9105      	str	r1, [sp, #20]
 8009fe2:	6800      	ldr	r0, [r0, #0]
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	a902      	add	r1, sp, #8
 8009fe8:	f000 f8c0 	bl	800a16c <_svfiprintf_r>
 8009fec:	9b02      	ldr	r3, [sp, #8]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	b01c      	add	sp, #112	; 0x70
 8009ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ff8:	b003      	add	sp, #12
 8009ffa:	4770      	bx	lr
 8009ffc:	2000001c 	.word	0x2000001c
 800a000:	ffff0208 	.word	0xffff0208

0800a004 <__malloc_lock>:
 800a004:	4801      	ldr	r0, [pc, #4]	; (800a00c <__malloc_lock+0x8>)
 800a006:	f7ff beb7 	b.w	8009d78 <__retarget_lock_acquire_recursive>
 800a00a:	bf00      	nop
 800a00c:	20002654 	.word	0x20002654

0800a010 <__malloc_unlock>:
 800a010:	4801      	ldr	r0, [pc, #4]	; (800a018 <__malloc_unlock+0x8>)
 800a012:	f7ff beb2 	b.w	8009d7a <__retarget_lock_release_recursive>
 800a016:	bf00      	nop
 800a018:	20002654 	.word	0x20002654

0800a01c <_free_r>:
 800a01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01e:	2900      	cmp	r1, #0
 800a020:	d044      	beq.n	800a0ac <_free_r+0x90>
 800a022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a026:	9001      	str	r0, [sp, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f1a1 0404 	sub.w	r4, r1, #4
 800a02e:	bfb8      	it	lt
 800a030:	18e4      	addlt	r4, r4, r3
 800a032:	f7ff ffe7 	bl	800a004 <__malloc_lock>
 800a036:	4a1e      	ldr	r2, [pc, #120]	; (800a0b0 <_free_r+0x94>)
 800a038:	9801      	ldr	r0, [sp, #4]
 800a03a:	6813      	ldr	r3, [r2, #0]
 800a03c:	b933      	cbnz	r3, 800a04c <_free_r+0x30>
 800a03e:	6063      	str	r3, [r4, #4]
 800a040:	6014      	str	r4, [r2, #0]
 800a042:	b003      	add	sp, #12
 800a044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a048:	f7ff bfe2 	b.w	800a010 <__malloc_unlock>
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d908      	bls.n	800a062 <_free_r+0x46>
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	1961      	adds	r1, r4, r5
 800a054:	428b      	cmp	r3, r1
 800a056:	bf01      	itttt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	1949      	addeq	r1, r1, r5
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	e7ed      	b.n	800a03e <_free_r+0x22>
 800a062:	461a      	mov	r2, r3
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	b10b      	cbz	r3, 800a06c <_free_r+0x50>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d9fa      	bls.n	800a062 <_free_r+0x46>
 800a06c:	6811      	ldr	r1, [r2, #0]
 800a06e:	1855      	adds	r5, r2, r1
 800a070:	42a5      	cmp	r5, r4
 800a072:	d10b      	bne.n	800a08c <_free_r+0x70>
 800a074:	6824      	ldr	r4, [r4, #0]
 800a076:	4421      	add	r1, r4
 800a078:	1854      	adds	r4, r2, r1
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	d1e0      	bne.n	800a042 <_free_r+0x26>
 800a080:	681c      	ldr	r4, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	4421      	add	r1, r4
 800a088:	6011      	str	r1, [r2, #0]
 800a08a:	e7da      	b.n	800a042 <_free_r+0x26>
 800a08c:	d902      	bls.n	800a094 <_free_r+0x78>
 800a08e:	230c      	movs	r3, #12
 800a090:	6003      	str	r3, [r0, #0]
 800a092:	e7d6      	b.n	800a042 <_free_r+0x26>
 800a094:	6825      	ldr	r5, [r4, #0]
 800a096:	1961      	adds	r1, r4, r5
 800a098:	428b      	cmp	r3, r1
 800a09a:	bf04      	itt	eq
 800a09c:	6819      	ldreq	r1, [r3, #0]
 800a09e:	685b      	ldreq	r3, [r3, #4]
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	bf04      	itt	eq
 800a0a4:	1949      	addeq	r1, r1, r5
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	6054      	str	r4, [r2, #4]
 800a0aa:	e7ca      	b.n	800a042 <_free_r+0x26>
 800a0ac:	b003      	add	sp, #12
 800a0ae:	bd30      	pop	{r4, r5, pc}
 800a0b0:	20002658 	.word	0x20002658

0800a0b4 <__ssputs_r>:
 800a0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b8:	688e      	ldr	r6, [r1, #8]
 800a0ba:	429e      	cmp	r6, r3
 800a0bc:	4682      	mov	sl, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	4690      	mov	r8, r2
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	d838      	bhi.n	800a138 <__ssputs_r+0x84>
 800a0c6:	898a      	ldrh	r2, [r1, #12]
 800a0c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0cc:	d032      	beq.n	800a134 <__ssputs_r+0x80>
 800a0ce:	6825      	ldr	r5, [r4, #0]
 800a0d0:	6909      	ldr	r1, [r1, #16]
 800a0d2:	eba5 0901 	sub.w	r9, r5, r1
 800a0d6:	6965      	ldr	r5, [r4, #20]
 800a0d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	444b      	add	r3, r9
 800a0e4:	106d      	asrs	r5, r5, #1
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	bf38      	it	cc
 800a0ea:	461d      	movcc	r5, r3
 800a0ec:	0553      	lsls	r3, r2, #21
 800a0ee:	d531      	bpl.n	800a154 <__ssputs_r+0xa0>
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7ff fe79 	bl	8009de8 <_malloc_r>
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	b950      	cbnz	r0, 800a110 <__ssputs_r+0x5c>
 800a0fa:	230c      	movs	r3, #12
 800a0fc:	f8ca 3000 	str.w	r3, [sl]
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a110:	6921      	ldr	r1, [r4, #16]
 800a112:	464a      	mov	r2, r9
 800a114:	f7ff fe32 	bl	8009d7c <memcpy>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a11e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	6126      	str	r6, [r4, #16]
 800a126:	6165      	str	r5, [r4, #20]
 800a128:	444e      	add	r6, r9
 800a12a:	eba5 0509 	sub.w	r5, r5, r9
 800a12e:	6026      	str	r6, [r4, #0]
 800a130:	60a5      	str	r5, [r4, #8]
 800a132:	463e      	mov	r6, r7
 800a134:	42be      	cmp	r6, r7
 800a136:	d900      	bls.n	800a13a <__ssputs_r+0x86>
 800a138:	463e      	mov	r6, r7
 800a13a:	6820      	ldr	r0, [r4, #0]
 800a13c:	4632      	mov	r2, r6
 800a13e:	4641      	mov	r1, r8
 800a140:	f000 faa8 	bl	800a694 <memmove>
 800a144:	68a3      	ldr	r3, [r4, #8]
 800a146:	1b9b      	subs	r3, r3, r6
 800a148:	60a3      	str	r3, [r4, #8]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	4433      	add	r3, r6
 800a14e:	6023      	str	r3, [r4, #0]
 800a150:	2000      	movs	r0, #0
 800a152:	e7db      	b.n	800a10c <__ssputs_r+0x58>
 800a154:	462a      	mov	r2, r5
 800a156:	f000 fab7 	bl	800a6c8 <_realloc_r>
 800a15a:	4606      	mov	r6, r0
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1e1      	bne.n	800a124 <__ssputs_r+0x70>
 800a160:	6921      	ldr	r1, [r4, #16]
 800a162:	4650      	mov	r0, sl
 800a164:	f7ff ff5a 	bl	800a01c <_free_r>
 800a168:	e7c7      	b.n	800a0fa <__ssputs_r+0x46>
	...

0800a16c <_svfiprintf_r>:
 800a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	4698      	mov	r8, r3
 800a172:	898b      	ldrh	r3, [r1, #12]
 800a174:	061b      	lsls	r3, r3, #24
 800a176:	b09d      	sub	sp, #116	; 0x74
 800a178:	4607      	mov	r7, r0
 800a17a:	460d      	mov	r5, r1
 800a17c:	4614      	mov	r4, r2
 800a17e:	d50e      	bpl.n	800a19e <_svfiprintf_r+0x32>
 800a180:	690b      	ldr	r3, [r1, #16]
 800a182:	b963      	cbnz	r3, 800a19e <_svfiprintf_r+0x32>
 800a184:	2140      	movs	r1, #64	; 0x40
 800a186:	f7ff fe2f 	bl	8009de8 <_malloc_r>
 800a18a:	6028      	str	r0, [r5, #0]
 800a18c:	6128      	str	r0, [r5, #16]
 800a18e:	b920      	cbnz	r0, 800a19a <_svfiprintf_r+0x2e>
 800a190:	230c      	movs	r3, #12
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	f04f 30ff 	mov.w	r0, #4294967295
 800a198:	e0d1      	b.n	800a33e <_svfiprintf_r+0x1d2>
 800a19a:	2340      	movs	r3, #64	; 0x40
 800a19c:	616b      	str	r3, [r5, #20]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a2:	2320      	movs	r3, #32
 800a1a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ac:	2330      	movs	r3, #48	; 0x30
 800a1ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a358 <_svfiprintf_r+0x1ec>
 800a1b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1b6:	f04f 0901 	mov.w	r9, #1
 800a1ba:	4623      	mov	r3, r4
 800a1bc:	469a      	mov	sl, r3
 800a1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1c2:	b10a      	cbz	r2, 800a1c8 <_svfiprintf_r+0x5c>
 800a1c4:	2a25      	cmp	r2, #37	; 0x25
 800a1c6:	d1f9      	bne.n	800a1bc <_svfiprintf_r+0x50>
 800a1c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1cc:	d00b      	beq.n	800a1e6 <_svfiprintf_r+0x7a>
 800a1ce:	465b      	mov	r3, fp
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	f7ff ff6d 	bl	800a0b4 <__ssputs_r>
 800a1da:	3001      	adds	r0, #1
 800a1dc:	f000 80aa 	beq.w	800a334 <_svfiprintf_r+0x1c8>
 800a1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e2:	445a      	add	r2, fp
 800a1e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 80a2 	beq.w	800a334 <_svfiprintf_r+0x1c8>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1fa:	f10a 0a01 	add.w	sl, sl, #1
 800a1fe:	9304      	str	r3, [sp, #16]
 800a200:	9307      	str	r3, [sp, #28]
 800a202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a206:	931a      	str	r3, [sp, #104]	; 0x68
 800a208:	4654      	mov	r4, sl
 800a20a:	2205      	movs	r2, #5
 800a20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a210:	4851      	ldr	r0, [pc, #324]	; (800a358 <_svfiprintf_r+0x1ec>)
 800a212:	f7f6 f805 	bl	8000220 <memchr>
 800a216:	9a04      	ldr	r2, [sp, #16]
 800a218:	b9d8      	cbnz	r0, 800a252 <_svfiprintf_r+0xe6>
 800a21a:	06d0      	lsls	r0, r2, #27
 800a21c:	bf44      	itt	mi
 800a21e:	2320      	movmi	r3, #32
 800a220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a224:	0711      	lsls	r1, r2, #28
 800a226:	bf44      	itt	mi
 800a228:	232b      	movmi	r3, #43	; 0x2b
 800a22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22e:	f89a 3000 	ldrb.w	r3, [sl]
 800a232:	2b2a      	cmp	r3, #42	; 0x2a
 800a234:	d015      	beq.n	800a262 <_svfiprintf_r+0xf6>
 800a236:	9a07      	ldr	r2, [sp, #28]
 800a238:	4654      	mov	r4, sl
 800a23a:	2000      	movs	r0, #0
 800a23c:	f04f 0c0a 	mov.w	ip, #10
 800a240:	4621      	mov	r1, r4
 800a242:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a246:	3b30      	subs	r3, #48	; 0x30
 800a248:	2b09      	cmp	r3, #9
 800a24a:	d94e      	bls.n	800a2ea <_svfiprintf_r+0x17e>
 800a24c:	b1b0      	cbz	r0, 800a27c <_svfiprintf_r+0x110>
 800a24e:	9207      	str	r2, [sp, #28]
 800a250:	e014      	b.n	800a27c <_svfiprintf_r+0x110>
 800a252:	eba0 0308 	sub.w	r3, r0, r8
 800a256:	fa09 f303 	lsl.w	r3, r9, r3
 800a25a:	4313      	orrs	r3, r2
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	46a2      	mov	sl, r4
 800a260:	e7d2      	b.n	800a208 <_svfiprintf_r+0x9c>
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	1d19      	adds	r1, r3, #4
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	9103      	str	r1, [sp, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bfbb      	ittet	lt
 800a26e:	425b      	neglt	r3, r3
 800a270:	f042 0202 	orrlt.w	r2, r2, #2
 800a274:	9307      	strge	r3, [sp, #28]
 800a276:	9307      	strlt	r3, [sp, #28]
 800a278:	bfb8      	it	lt
 800a27a:	9204      	strlt	r2, [sp, #16]
 800a27c:	7823      	ldrb	r3, [r4, #0]
 800a27e:	2b2e      	cmp	r3, #46	; 0x2e
 800a280:	d10c      	bne.n	800a29c <_svfiprintf_r+0x130>
 800a282:	7863      	ldrb	r3, [r4, #1]
 800a284:	2b2a      	cmp	r3, #42	; 0x2a
 800a286:	d135      	bne.n	800a2f4 <_svfiprintf_r+0x188>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	1d1a      	adds	r2, r3, #4
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	9203      	str	r2, [sp, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	bfb8      	it	lt
 800a294:	f04f 33ff 	movlt.w	r3, #4294967295
 800a298:	3402      	adds	r4, #2
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a368 <_svfiprintf_r+0x1fc>
 800a2a0:	7821      	ldrb	r1, [r4, #0]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	f7f5 ffbb 	bl	8000220 <memchr>
 800a2aa:	b140      	cbz	r0, 800a2be <_svfiprintf_r+0x152>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	eba0 000a 	sub.w	r0, r0, sl
 800a2b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	4303      	orrs	r3, r0
 800a2ba:	3401      	adds	r4, #1
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c2:	4826      	ldr	r0, [pc, #152]	; (800a35c <_svfiprintf_r+0x1f0>)
 800a2c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2c8:	2206      	movs	r2, #6
 800a2ca:	f7f5 ffa9 	bl	8000220 <memchr>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d038      	beq.n	800a344 <_svfiprintf_r+0x1d8>
 800a2d2:	4b23      	ldr	r3, [pc, #140]	; (800a360 <_svfiprintf_r+0x1f4>)
 800a2d4:	bb1b      	cbnz	r3, 800a31e <_svfiprintf_r+0x1b2>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	3307      	adds	r3, #7
 800a2da:	f023 0307 	bic.w	r3, r3, #7
 800a2de:	3308      	adds	r3, #8
 800a2e0:	9303      	str	r3, [sp, #12]
 800a2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e4:	4433      	add	r3, r6
 800a2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e8:	e767      	b.n	800a1ba <_svfiprintf_r+0x4e>
 800a2ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	2001      	movs	r0, #1
 800a2f2:	e7a5      	b.n	800a240 <_svfiprintf_r+0xd4>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	3401      	adds	r4, #1
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f04f 0c0a 	mov.w	ip, #10
 800a300:	4620      	mov	r0, r4
 800a302:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a306:	3a30      	subs	r2, #48	; 0x30
 800a308:	2a09      	cmp	r2, #9
 800a30a:	d903      	bls.n	800a314 <_svfiprintf_r+0x1a8>
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0c5      	beq.n	800a29c <_svfiprintf_r+0x130>
 800a310:	9105      	str	r1, [sp, #20]
 800a312:	e7c3      	b.n	800a29c <_svfiprintf_r+0x130>
 800a314:	fb0c 2101 	mla	r1, ip, r1, r2
 800a318:	4604      	mov	r4, r0
 800a31a:	2301      	movs	r3, #1
 800a31c:	e7f0      	b.n	800a300 <_svfiprintf_r+0x194>
 800a31e:	ab03      	add	r3, sp, #12
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	462a      	mov	r2, r5
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <_svfiprintf_r+0x1f8>)
 800a326:	a904      	add	r1, sp, #16
 800a328:	4638      	mov	r0, r7
 800a32a:	f3af 8000 	nop.w
 800a32e:	1c42      	adds	r2, r0, #1
 800a330:	4606      	mov	r6, r0
 800a332:	d1d6      	bne.n	800a2e2 <_svfiprintf_r+0x176>
 800a334:	89ab      	ldrh	r3, [r5, #12]
 800a336:	065b      	lsls	r3, r3, #25
 800a338:	f53f af2c 	bmi.w	800a194 <_svfiprintf_r+0x28>
 800a33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a33e:	b01d      	add	sp, #116	; 0x74
 800a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a344:	ab03      	add	r3, sp, #12
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	462a      	mov	r2, r5
 800a34a:	4b06      	ldr	r3, [pc, #24]	; (800a364 <_svfiprintf_r+0x1f8>)
 800a34c:	a904      	add	r1, sp, #16
 800a34e:	4638      	mov	r0, r7
 800a350:	f000 f87a 	bl	800a448 <_printf_i>
 800a354:	e7eb      	b.n	800a32e <_svfiprintf_r+0x1c2>
 800a356:	bf00      	nop
 800a358:	0800c8a0 	.word	0x0800c8a0
 800a35c:	0800c8aa 	.word	0x0800c8aa
 800a360:	00000000 	.word	0x00000000
 800a364:	0800a0b5 	.word	0x0800a0b5
 800a368:	0800c8a6 	.word	0x0800c8a6

0800a36c <_printf_common>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	4616      	mov	r6, r2
 800a372:	4699      	mov	r9, r3
 800a374:	688a      	ldr	r2, [r1, #8]
 800a376:	690b      	ldr	r3, [r1, #16]
 800a378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	bfb8      	it	lt
 800a380:	4613      	movlt	r3, r2
 800a382:	6033      	str	r3, [r6, #0]
 800a384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a388:	4607      	mov	r7, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	b10a      	cbz	r2, 800a392 <_printf_common+0x26>
 800a38e:	3301      	adds	r3, #1
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	0699      	lsls	r1, r3, #26
 800a396:	bf42      	ittt	mi
 800a398:	6833      	ldrmi	r3, [r6, #0]
 800a39a:	3302      	addmi	r3, #2
 800a39c:	6033      	strmi	r3, [r6, #0]
 800a39e:	6825      	ldr	r5, [r4, #0]
 800a3a0:	f015 0506 	ands.w	r5, r5, #6
 800a3a4:	d106      	bne.n	800a3b4 <_printf_common+0x48>
 800a3a6:	f104 0a19 	add.w	sl, r4, #25
 800a3aa:	68e3      	ldr	r3, [r4, #12]
 800a3ac:	6832      	ldr	r2, [r6, #0]
 800a3ae:	1a9b      	subs	r3, r3, r2
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	dc26      	bgt.n	800a402 <_printf_common+0x96>
 800a3b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3b8:	1e13      	subs	r3, r2, #0
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	bf18      	it	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	d42b      	bmi.n	800a41c <_printf_common+0xb0>
 800a3c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c0      	blx	r8
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d01e      	beq.n	800a410 <_printf_common+0xa4>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	68e5      	ldr	r5, [r4, #12]
 800a3d6:	6832      	ldr	r2, [r6, #0]
 800a3d8:	f003 0306 	and.w	r3, r3, #6
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	bf08      	it	eq
 800a3e0:	1aad      	subeq	r5, r5, r2
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	6922      	ldr	r2, [r4, #16]
 800a3e6:	bf0c      	ite	eq
 800a3e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3ec:	2500      	movne	r5, #0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bfc4      	itt	gt
 800a3f2:	1a9b      	subgt	r3, r3, r2
 800a3f4:	18ed      	addgt	r5, r5, r3
 800a3f6:	2600      	movs	r6, #0
 800a3f8:	341a      	adds	r4, #26
 800a3fa:	42b5      	cmp	r5, r6
 800a3fc:	d11a      	bne.n	800a434 <_printf_common+0xc8>
 800a3fe:	2000      	movs	r0, #0
 800a400:	e008      	b.n	800a414 <_printf_common+0xa8>
 800a402:	2301      	movs	r3, #1
 800a404:	4652      	mov	r2, sl
 800a406:	4649      	mov	r1, r9
 800a408:	4638      	mov	r0, r7
 800a40a:	47c0      	blx	r8
 800a40c:	3001      	adds	r0, #1
 800a40e:	d103      	bne.n	800a418 <_printf_common+0xac>
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a418:	3501      	adds	r5, #1
 800a41a:	e7c6      	b.n	800a3aa <_printf_common+0x3e>
 800a41c:	18e1      	adds	r1, r4, r3
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	2030      	movs	r0, #48	; 0x30
 800a422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a426:	4422      	add	r2, r4
 800a428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a42c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a430:	3302      	adds	r3, #2
 800a432:	e7c7      	b.n	800a3c4 <_printf_common+0x58>
 800a434:	2301      	movs	r3, #1
 800a436:	4622      	mov	r2, r4
 800a438:	4649      	mov	r1, r9
 800a43a:	4638      	mov	r0, r7
 800a43c:	47c0      	blx	r8
 800a43e:	3001      	adds	r0, #1
 800a440:	d0e6      	beq.n	800a410 <_printf_common+0xa4>
 800a442:	3601      	adds	r6, #1
 800a444:	e7d9      	b.n	800a3fa <_printf_common+0x8e>
	...

0800a448 <_printf_i>:
 800a448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	7e0f      	ldrb	r7, [r1, #24]
 800a44e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a450:	2f78      	cmp	r7, #120	; 0x78
 800a452:	4691      	mov	r9, r2
 800a454:	4680      	mov	r8, r0
 800a456:	460c      	mov	r4, r1
 800a458:	469a      	mov	sl, r3
 800a45a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a45e:	d807      	bhi.n	800a470 <_printf_i+0x28>
 800a460:	2f62      	cmp	r7, #98	; 0x62
 800a462:	d80a      	bhi.n	800a47a <_printf_i+0x32>
 800a464:	2f00      	cmp	r7, #0
 800a466:	f000 80d8 	beq.w	800a61a <_printf_i+0x1d2>
 800a46a:	2f58      	cmp	r7, #88	; 0x58
 800a46c:	f000 80a3 	beq.w	800a5b6 <_printf_i+0x16e>
 800a470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a478:	e03a      	b.n	800a4f0 <_printf_i+0xa8>
 800a47a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a47e:	2b15      	cmp	r3, #21
 800a480:	d8f6      	bhi.n	800a470 <_printf_i+0x28>
 800a482:	a101      	add	r1, pc, #4	; (adr r1, 800a488 <_printf_i+0x40>)
 800a484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4f5 	.word	0x0800a4f5
 800a490:	0800a471 	.word	0x0800a471
 800a494:	0800a471 	.word	0x0800a471
 800a498:	0800a471 	.word	0x0800a471
 800a49c:	0800a471 	.word	0x0800a471
 800a4a0:	0800a4f5 	.word	0x0800a4f5
 800a4a4:	0800a471 	.word	0x0800a471
 800a4a8:	0800a471 	.word	0x0800a471
 800a4ac:	0800a471 	.word	0x0800a471
 800a4b0:	0800a471 	.word	0x0800a471
 800a4b4:	0800a601 	.word	0x0800a601
 800a4b8:	0800a525 	.word	0x0800a525
 800a4bc:	0800a5e3 	.word	0x0800a5e3
 800a4c0:	0800a471 	.word	0x0800a471
 800a4c4:	0800a471 	.word	0x0800a471
 800a4c8:	0800a623 	.word	0x0800a623
 800a4cc:	0800a471 	.word	0x0800a471
 800a4d0:	0800a525 	.word	0x0800a525
 800a4d4:	0800a471 	.word	0x0800a471
 800a4d8:	0800a471 	.word	0x0800a471
 800a4dc:	0800a5eb 	.word	0x0800a5eb
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	602a      	str	r2, [r5, #0]
 800a4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e0a3      	b.n	800a63c <_printf_i+0x1f4>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	6829      	ldr	r1, [r5, #0]
 800a4f8:	0606      	lsls	r6, r0, #24
 800a4fa:	f101 0304 	add.w	r3, r1, #4
 800a4fe:	d50a      	bpl.n	800a516 <_printf_i+0xce>
 800a500:	680e      	ldr	r6, [r1, #0]
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	2e00      	cmp	r6, #0
 800a506:	da03      	bge.n	800a510 <_printf_i+0xc8>
 800a508:	232d      	movs	r3, #45	; 0x2d
 800a50a:	4276      	negs	r6, r6
 800a50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a510:	485e      	ldr	r0, [pc, #376]	; (800a68c <_printf_i+0x244>)
 800a512:	230a      	movs	r3, #10
 800a514:	e019      	b.n	800a54a <_printf_i+0x102>
 800a516:	680e      	ldr	r6, [r1, #0]
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a51e:	bf18      	it	ne
 800a520:	b236      	sxthne	r6, r6
 800a522:	e7ef      	b.n	800a504 <_printf_i+0xbc>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	6820      	ldr	r0, [r4, #0]
 800a528:	1d19      	adds	r1, r3, #4
 800a52a:	6029      	str	r1, [r5, #0]
 800a52c:	0601      	lsls	r1, r0, #24
 800a52e:	d501      	bpl.n	800a534 <_printf_i+0xec>
 800a530:	681e      	ldr	r6, [r3, #0]
 800a532:	e002      	b.n	800a53a <_printf_i+0xf2>
 800a534:	0646      	lsls	r6, r0, #25
 800a536:	d5fb      	bpl.n	800a530 <_printf_i+0xe8>
 800a538:	881e      	ldrh	r6, [r3, #0]
 800a53a:	4854      	ldr	r0, [pc, #336]	; (800a68c <_printf_i+0x244>)
 800a53c:	2f6f      	cmp	r7, #111	; 0x6f
 800a53e:	bf0c      	ite	eq
 800a540:	2308      	moveq	r3, #8
 800a542:	230a      	movne	r3, #10
 800a544:	2100      	movs	r1, #0
 800a546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a54a:	6865      	ldr	r5, [r4, #4]
 800a54c:	60a5      	str	r5, [r4, #8]
 800a54e:	2d00      	cmp	r5, #0
 800a550:	bfa2      	ittt	ge
 800a552:	6821      	ldrge	r1, [r4, #0]
 800a554:	f021 0104 	bicge.w	r1, r1, #4
 800a558:	6021      	strge	r1, [r4, #0]
 800a55a:	b90e      	cbnz	r6, 800a560 <_printf_i+0x118>
 800a55c:	2d00      	cmp	r5, #0
 800a55e:	d04d      	beq.n	800a5fc <_printf_i+0x1b4>
 800a560:	4615      	mov	r5, r2
 800a562:	fbb6 f1f3 	udiv	r1, r6, r3
 800a566:	fb03 6711 	mls	r7, r3, r1, r6
 800a56a:	5dc7      	ldrb	r7, [r0, r7]
 800a56c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a570:	4637      	mov	r7, r6
 800a572:	42bb      	cmp	r3, r7
 800a574:	460e      	mov	r6, r1
 800a576:	d9f4      	bls.n	800a562 <_printf_i+0x11a>
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d10b      	bne.n	800a594 <_printf_i+0x14c>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	07de      	lsls	r6, r3, #31
 800a580:	d508      	bpl.n	800a594 <_printf_i+0x14c>
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	6861      	ldr	r1, [r4, #4]
 800a586:	4299      	cmp	r1, r3
 800a588:	bfde      	ittt	le
 800a58a:	2330      	movle	r3, #48	; 0x30
 800a58c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a590:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a594:	1b52      	subs	r2, r2, r5
 800a596:	6122      	str	r2, [r4, #16]
 800a598:	f8cd a000 	str.w	sl, [sp]
 800a59c:	464b      	mov	r3, r9
 800a59e:	aa03      	add	r2, sp, #12
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f7ff fee2 	bl	800a36c <_printf_common>
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d14c      	bne.n	800a646 <_printf_i+0x1fe>
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	b004      	add	sp, #16
 800a5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b6:	4835      	ldr	r0, [pc, #212]	; (800a68c <_printf_i+0x244>)
 800a5b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5bc:	6829      	ldr	r1, [r5, #0]
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5c4:	6029      	str	r1, [r5, #0]
 800a5c6:	061d      	lsls	r5, r3, #24
 800a5c8:	d514      	bpl.n	800a5f4 <_printf_i+0x1ac>
 800a5ca:	07df      	lsls	r7, r3, #31
 800a5cc:	bf44      	itt	mi
 800a5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a5d2:	6023      	strmi	r3, [r4, #0]
 800a5d4:	b91e      	cbnz	r6, 800a5de <_printf_i+0x196>
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	f023 0320 	bic.w	r3, r3, #32
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	2310      	movs	r3, #16
 800a5e0:	e7b0      	b.n	800a544 <_printf_i+0xfc>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	f043 0320 	orr.w	r3, r3, #32
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	2378      	movs	r3, #120	; 0x78
 800a5ec:	4828      	ldr	r0, [pc, #160]	; (800a690 <_printf_i+0x248>)
 800a5ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5f2:	e7e3      	b.n	800a5bc <_printf_i+0x174>
 800a5f4:	0659      	lsls	r1, r3, #25
 800a5f6:	bf48      	it	mi
 800a5f8:	b2b6      	uxthmi	r6, r6
 800a5fa:	e7e6      	b.n	800a5ca <_printf_i+0x182>
 800a5fc:	4615      	mov	r5, r2
 800a5fe:	e7bb      	b.n	800a578 <_printf_i+0x130>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	6826      	ldr	r6, [r4, #0]
 800a604:	6961      	ldr	r1, [r4, #20]
 800a606:	1d18      	adds	r0, r3, #4
 800a608:	6028      	str	r0, [r5, #0]
 800a60a:	0635      	lsls	r5, r6, #24
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0x1cc>
 800a610:	6019      	str	r1, [r3, #0]
 800a612:	e002      	b.n	800a61a <_printf_i+0x1d2>
 800a614:	0670      	lsls	r0, r6, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0x1c8>
 800a618:	8019      	strh	r1, [r3, #0]
 800a61a:	2300      	movs	r3, #0
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	4615      	mov	r5, r2
 800a620:	e7ba      	b.n	800a598 <_printf_i+0x150>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	1d1a      	adds	r2, r3, #4
 800a626:	602a      	str	r2, [r5, #0]
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	6862      	ldr	r2, [r4, #4]
 800a62c:	2100      	movs	r1, #0
 800a62e:	4628      	mov	r0, r5
 800a630:	f7f5 fdf6 	bl	8000220 <memchr>
 800a634:	b108      	cbz	r0, 800a63a <_printf_i+0x1f2>
 800a636:	1b40      	subs	r0, r0, r5
 800a638:	6060      	str	r0, [r4, #4]
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	2300      	movs	r3, #0
 800a640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a644:	e7a8      	b.n	800a598 <_printf_i+0x150>
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	462a      	mov	r2, r5
 800a64a:	4649      	mov	r1, r9
 800a64c:	4640      	mov	r0, r8
 800a64e:	47d0      	blx	sl
 800a650:	3001      	adds	r0, #1
 800a652:	d0ab      	beq.n	800a5ac <_printf_i+0x164>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	079b      	lsls	r3, r3, #30
 800a658:	d413      	bmi.n	800a682 <_printf_i+0x23a>
 800a65a:	68e0      	ldr	r0, [r4, #12]
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	4298      	cmp	r0, r3
 800a660:	bfb8      	it	lt
 800a662:	4618      	movlt	r0, r3
 800a664:	e7a4      	b.n	800a5b0 <_printf_i+0x168>
 800a666:	2301      	movs	r3, #1
 800a668:	4632      	mov	r2, r6
 800a66a:	4649      	mov	r1, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	47d0      	blx	sl
 800a670:	3001      	adds	r0, #1
 800a672:	d09b      	beq.n	800a5ac <_printf_i+0x164>
 800a674:	3501      	adds	r5, #1
 800a676:	68e3      	ldr	r3, [r4, #12]
 800a678:	9903      	ldr	r1, [sp, #12]
 800a67a:	1a5b      	subs	r3, r3, r1
 800a67c:	42ab      	cmp	r3, r5
 800a67e:	dcf2      	bgt.n	800a666 <_printf_i+0x21e>
 800a680:	e7eb      	b.n	800a65a <_printf_i+0x212>
 800a682:	2500      	movs	r5, #0
 800a684:	f104 0619 	add.w	r6, r4, #25
 800a688:	e7f5      	b.n	800a676 <_printf_i+0x22e>
 800a68a:	bf00      	nop
 800a68c:	0800c8b1 	.word	0x0800c8b1
 800a690:	0800c8c2 	.word	0x0800c8c2

0800a694 <memmove>:
 800a694:	4288      	cmp	r0, r1
 800a696:	b510      	push	{r4, lr}
 800a698:	eb01 0402 	add.w	r4, r1, r2
 800a69c:	d902      	bls.n	800a6a4 <memmove+0x10>
 800a69e:	4284      	cmp	r4, r0
 800a6a0:	4623      	mov	r3, r4
 800a6a2:	d807      	bhi.n	800a6b4 <memmove+0x20>
 800a6a4:	1e43      	subs	r3, r0, #1
 800a6a6:	42a1      	cmp	r1, r4
 800a6a8:	d008      	beq.n	800a6bc <memmove+0x28>
 800a6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6b2:	e7f8      	b.n	800a6a6 <memmove+0x12>
 800a6b4:	4402      	add	r2, r0
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	428a      	cmp	r2, r1
 800a6ba:	d100      	bne.n	800a6be <memmove+0x2a>
 800a6bc:	bd10      	pop	{r4, pc}
 800a6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6c6:	e7f7      	b.n	800a6b8 <memmove+0x24>

0800a6c8 <_realloc_r>:
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6cc:	4680      	mov	r8, r0
 800a6ce:	4614      	mov	r4, r2
 800a6d0:	460e      	mov	r6, r1
 800a6d2:	b921      	cbnz	r1, 800a6de <_realloc_r+0x16>
 800a6d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d8:	4611      	mov	r1, r2
 800a6da:	f7ff bb85 	b.w	8009de8 <_malloc_r>
 800a6de:	b92a      	cbnz	r2, 800a6ec <_realloc_r+0x24>
 800a6e0:	f7ff fc9c 	bl	800a01c <_free_r>
 800a6e4:	4625      	mov	r5, r4
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ec:	f000 f81b 	bl	800a726 <_malloc_usable_size_r>
 800a6f0:	4284      	cmp	r4, r0
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	d802      	bhi.n	800a6fc <_realloc_r+0x34>
 800a6f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6fa:	d812      	bhi.n	800a722 <_realloc_r+0x5a>
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4640      	mov	r0, r8
 800a700:	f7ff fb72 	bl	8009de8 <_malloc_r>
 800a704:	4605      	mov	r5, r0
 800a706:	2800      	cmp	r0, #0
 800a708:	d0ed      	beq.n	800a6e6 <_realloc_r+0x1e>
 800a70a:	42bc      	cmp	r4, r7
 800a70c:	4622      	mov	r2, r4
 800a70e:	4631      	mov	r1, r6
 800a710:	bf28      	it	cs
 800a712:	463a      	movcs	r2, r7
 800a714:	f7ff fb32 	bl	8009d7c <memcpy>
 800a718:	4631      	mov	r1, r6
 800a71a:	4640      	mov	r0, r8
 800a71c:	f7ff fc7e 	bl	800a01c <_free_r>
 800a720:	e7e1      	b.n	800a6e6 <_realloc_r+0x1e>
 800a722:	4635      	mov	r5, r6
 800a724:	e7df      	b.n	800a6e6 <_realloc_r+0x1e>

0800a726 <_malloc_usable_size_r>:
 800a726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a72a:	1f18      	subs	r0, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfbc      	itt	lt
 800a730:	580b      	ldrlt	r3, [r1, r0]
 800a732:	18c0      	addlt	r0, r0, r3
 800a734:	4770      	bx	lr
	...

0800a738 <cos>:
 800a738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a73a:	ec53 2b10 	vmov	r2, r3, d0
 800a73e:	4826      	ldr	r0, [pc, #152]	; (800a7d8 <cos+0xa0>)
 800a740:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a744:	4281      	cmp	r1, r0
 800a746:	dc06      	bgt.n	800a756 <cos+0x1e>
 800a748:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a7d0 <cos+0x98>
 800a74c:	b005      	add	sp, #20
 800a74e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a752:	f001 b929 	b.w	800b9a8 <__kernel_cos>
 800a756:	4821      	ldr	r0, [pc, #132]	; (800a7dc <cos+0xa4>)
 800a758:	4281      	cmp	r1, r0
 800a75a:	dd09      	ble.n	800a770 <cos+0x38>
 800a75c:	ee10 0a10 	vmov	r0, s0
 800a760:	4619      	mov	r1, r3
 800a762:	f7f5 fdb1 	bl	80002c8 <__aeabi_dsub>
 800a766:	ec41 0b10 	vmov	d0, r0, r1
 800a76a:	b005      	add	sp, #20
 800a76c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a770:	4668      	mov	r0, sp
 800a772:	f000 fe59 	bl	800b428 <__ieee754_rem_pio2>
 800a776:	f000 0003 	and.w	r0, r0, #3
 800a77a:	2801      	cmp	r0, #1
 800a77c:	d00b      	beq.n	800a796 <cos+0x5e>
 800a77e:	2802      	cmp	r0, #2
 800a780:	d016      	beq.n	800a7b0 <cos+0x78>
 800a782:	b9e0      	cbnz	r0, 800a7be <cos+0x86>
 800a784:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a788:	ed9d 0b00 	vldr	d0, [sp]
 800a78c:	f001 f90c 	bl	800b9a8 <__kernel_cos>
 800a790:	ec51 0b10 	vmov	r0, r1, d0
 800a794:	e7e7      	b.n	800a766 <cos+0x2e>
 800a796:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a79a:	ed9d 0b00 	vldr	d0, [sp]
 800a79e:	f001 fd1b 	bl	800c1d8 <__kernel_sin>
 800a7a2:	ec53 2b10 	vmov	r2, r3, d0
 800a7a6:	ee10 0a10 	vmov	r0, s0
 800a7aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7ae:	e7da      	b.n	800a766 <cos+0x2e>
 800a7b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7b4:	ed9d 0b00 	vldr	d0, [sp]
 800a7b8:	f001 f8f6 	bl	800b9a8 <__kernel_cos>
 800a7bc:	e7f1      	b.n	800a7a2 <cos+0x6a>
 800a7be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7c2:	ed9d 0b00 	vldr	d0, [sp]
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	f001 fd06 	bl	800c1d8 <__kernel_sin>
 800a7cc:	e7e0      	b.n	800a790 <cos+0x58>
 800a7ce:	bf00      	nop
	...
 800a7d8:	3fe921fb 	.word	0x3fe921fb
 800a7dc:	7fefffff 	.word	0x7fefffff

0800a7e0 <sin>:
 800a7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7e2:	ec53 2b10 	vmov	r2, r3, d0
 800a7e6:	4828      	ldr	r0, [pc, #160]	; (800a888 <sin+0xa8>)
 800a7e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7ec:	4281      	cmp	r1, r0
 800a7ee:	dc07      	bgt.n	800a800 <sin+0x20>
 800a7f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a880 <sin+0xa0>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	b005      	add	sp, #20
 800a7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7fc:	f001 bcec 	b.w	800c1d8 <__kernel_sin>
 800a800:	4822      	ldr	r0, [pc, #136]	; (800a88c <sin+0xac>)
 800a802:	4281      	cmp	r1, r0
 800a804:	dd09      	ble.n	800a81a <sin+0x3a>
 800a806:	ee10 0a10 	vmov	r0, s0
 800a80a:	4619      	mov	r1, r3
 800a80c:	f7f5 fd5c 	bl	80002c8 <__aeabi_dsub>
 800a810:	ec41 0b10 	vmov	d0, r0, r1
 800a814:	b005      	add	sp, #20
 800a816:	f85d fb04 	ldr.w	pc, [sp], #4
 800a81a:	4668      	mov	r0, sp
 800a81c:	f000 fe04 	bl	800b428 <__ieee754_rem_pio2>
 800a820:	f000 0003 	and.w	r0, r0, #3
 800a824:	2801      	cmp	r0, #1
 800a826:	d00c      	beq.n	800a842 <sin+0x62>
 800a828:	2802      	cmp	r0, #2
 800a82a:	d011      	beq.n	800a850 <sin+0x70>
 800a82c:	b9f0      	cbnz	r0, 800a86c <sin+0x8c>
 800a82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a832:	ed9d 0b00 	vldr	d0, [sp]
 800a836:	2001      	movs	r0, #1
 800a838:	f001 fcce 	bl	800c1d8 <__kernel_sin>
 800a83c:	ec51 0b10 	vmov	r0, r1, d0
 800a840:	e7e6      	b.n	800a810 <sin+0x30>
 800a842:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a846:	ed9d 0b00 	vldr	d0, [sp]
 800a84a:	f001 f8ad 	bl	800b9a8 <__kernel_cos>
 800a84e:	e7f5      	b.n	800a83c <sin+0x5c>
 800a850:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a854:	ed9d 0b00 	vldr	d0, [sp]
 800a858:	2001      	movs	r0, #1
 800a85a:	f001 fcbd 	bl	800c1d8 <__kernel_sin>
 800a85e:	ec53 2b10 	vmov	r2, r3, d0
 800a862:	ee10 0a10 	vmov	r0, s0
 800a866:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a86a:	e7d1      	b.n	800a810 <sin+0x30>
 800a86c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a870:	ed9d 0b00 	vldr	d0, [sp]
 800a874:	f001 f898 	bl	800b9a8 <__kernel_cos>
 800a878:	e7f1      	b.n	800a85e <sin+0x7e>
 800a87a:	bf00      	nop
 800a87c:	f3af 8000 	nop.w
	...
 800a888:	3fe921fb 	.word	0x3fe921fb
 800a88c:	7fefffff 	.word	0x7fefffff

0800a890 <pow>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	ed2d 8b02 	vpush	{d8}
 800a896:	eeb0 8a40 	vmov.f32	s16, s0
 800a89a:	eef0 8a60 	vmov.f32	s17, s1
 800a89e:	ec55 4b11 	vmov	r4, r5, d1
 800a8a2:	f000 f891 	bl	800a9c8 <__ieee754_pow>
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	ec57 6b10 	vmov	r6, r7, d0
 800a8b2:	f7f6 f95b 	bl	8000b6c <__aeabi_dcmpun>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d13b      	bne.n	800a932 <pow+0xa2>
 800a8ba:	ec51 0b18 	vmov	r0, r1, d8
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f7f6 f921 	bl	8000b08 <__aeabi_dcmpeq>
 800a8c6:	b1b8      	cbz	r0, 800a8f8 <pow+0x68>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f6 f91a 	bl	8000b08 <__aeabi_dcmpeq>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d146      	bne.n	800a966 <pow+0xd6>
 800a8d8:	ec45 4b10 	vmov	d0, r4, r5
 800a8dc:	f001 fd73 	bl	800c3c6 <finite>
 800a8e0:	b338      	cbz	r0, 800a932 <pow+0xa2>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7f6 f917 	bl	8000b1c <__aeabi_dcmplt>
 800a8ee:	b300      	cbz	r0, 800a932 <pow+0xa2>
 800a8f0:	f7ff fa18 	bl	8009d24 <__errno>
 800a8f4:	2322      	movs	r3, #34	; 0x22
 800a8f6:	e01b      	b.n	800a930 <pow+0xa0>
 800a8f8:	ec47 6b10 	vmov	d0, r6, r7
 800a8fc:	f001 fd63 	bl	800c3c6 <finite>
 800a900:	b9e0      	cbnz	r0, 800a93c <pow+0xac>
 800a902:	eeb0 0a48 	vmov.f32	s0, s16
 800a906:	eef0 0a68 	vmov.f32	s1, s17
 800a90a:	f001 fd5c 	bl	800c3c6 <finite>
 800a90e:	b1a8      	cbz	r0, 800a93c <pow+0xac>
 800a910:	ec45 4b10 	vmov	d0, r4, r5
 800a914:	f001 fd57 	bl	800c3c6 <finite>
 800a918:	b180      	cbz	r0, 800a93c <pow+0xac>
 800a91a:	4632      	mov	r2, r6
 800a91c:	463b      	mov	r3, r7
 800a91e:	4630      	mov	r0, r6
 800a920:	4639      	mov	r1, r7
 800a922:	f7f6 f923 	bl	8000b6c <__aeabi_dcmpun>
 800a926:	2800      	cmp	r0, #0
 800a928:	d0e2      	beq.n	800a8f0 <pow+0x60>
 800a92a:	f7ff f9fb 	bl	8009d24 <__errno>
 800a92e:	2321      	movs	r3, #33	; 0x21
 800a930:	6003      	str	r3, [r0, #0]
 800a932:	ecbd 8b02 	vpop	{d8}
 800a936:	ec47 6b10 	vmov	d0, r6, r7
 800a93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a93c:	2200      	movs	r2, #0
 800a93e:	2300      	movs	r3, #0
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f6 f8e0 	bl	8000b08 <__aeabi_dcmpeq>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d0f2      	beq.n	800a932 <pow+0xa2>
 800a94c:	eeb0 0a48 	vmov.f32	s0, s16
 800a950:	eef0 0a68 	vmov.f32	s1, s17
 800a954:	f001 fd37 	bl	800c3c6 <finite>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d0ea      	beq.n	800a932 <pow+0xa2>
 800a95c:	ec45 4b10 	vmov	d0, r4, r5
 800a960:	f001 fd31 	bl	800c3c6 <finite>
 800a964:	e7c3      	b.n	800a8ee <pow+0x5e>
 800a966:	4f01      	ldr	r7, [pc, #4]	; (800a96c <pow+0xdc>)
 800a968:	2600      	movs	r6, #0
 800a96a:	e7e2      	b.n	800a932 <pow+0xa2>
 800a96c:	3ff00000 	.word	0x3ff00000

0800a970 <sqrt>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	ed2d 8b02 	vpush	{d8}
 800a976:	ec55 4b10 	vmov	r4, r5, d0
 800a97a:	f000 ff61 	bl	800b840 <__ieee754_sqrt>
 800a97e:	4622      	mov	r2, r4
 800a980:	462b      	mov	r3, r5
 800a982:	4620      	mov	r0, r4
 800a984:	4629      	mov	r1, r5
 800a986:	eeb0 8a40 	vmov.f32	s16, s0
 800a98a:	eef0 8a60 	vmov.f32	s17, s1
 800a98e:	f7f6 f8ed 	bl	8000b6c <__aeabi_dcmpun>
 800a992:	b990      	cbnz	r0, 800a9ba <sqrt+0x4a>
 800a994:	2200      	movs	r2, #0
 800a996:	2300      	movs	r3, #0
 800a998:	4620      	mov	r0, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	f7f6 f8be 	bl	8000b1c <__aeabi_dcmplt>
 800a9a0:	b158      	cbz	r0, 800a9ba <sqrt+0x4a>
 800a9a2:	f7ff f9bf 	bl	8009d24 <__errno>
 800a9a6:	2321      	movs	r3, #33	; 0x21
 800a9a8:	6003      	str	r3, [r0, #0]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f7f5 ff6b 	bl	800088c <__aeabi_ddiv>
 800a9b6:	ec41 0b18 	vmov	d8, r0, r1
 800a9ba:	eeb0 0a48 	vmov.f32	s0, s16
 800a9be:	eef0 0a68 	vmov.f32	s1, s17
 800a9c2:	ecbd 8b02 	vpop	{d8}
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}

0800a9c8 <__ieee754_pow>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	ed2d 8b06 	vpush	{d8-d10}
 800a9d0:	b089      	sub	sp, #36	; 0x24
 800a9d2:	ed8d 1b00 	vstr	d1, [sp]
 800a9d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a9da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a9de:	ea58 0102 	orrs.w	r1, r8, r2
 800a9e2:	ec57 6b10 	vmov	r6, r7, d0
 800a9e6:	d115      	bne.n	800aa14 <__ieee754_pow+0x4c>
 800a9e8:	19b3      	adds	r3, r6, r6
 800a9ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a9ee:	4152      	adcs	r2, r2
 800a9f0:	4299      	cmp	r1, r3
 800a9f2:	4b89      	ldr	r3, [pc, #548]	; (800ac18 <__ieee754_pow+0x250>)
 800a9f4:	4193      	sbcs	r3, r2
 800a9f6:	f080 84d2 	bcs.w	800b39e <__ieee754_pow+0x9d6>
 800a9fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9fe:	4630      	mov	r0, r6
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f5 fc63 	bl	80002cc <__adddf3>
 800aa06:	ec41 0b10 	vmov	d0, r0, r1
 800aa0a:	b009      	add	sp, #36	; 0x24
 800aa0c:	ecbd 8b06 	vpop	{d8-d10}
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa14:	4b81      	ldr	r3, [pc, #516]	; (800ac1c <__ieee754_pow+0x254>)
 800aa16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aa1a:	429c      	cmp	r4, r3
 800aa1c:	ee10 aa10 	vmov	sl, s0
 800aa20:	463d      	mov	r5, r7
 800aa22:	dc06      	bgt.n	800aa32 <__ieee754_pow+0x6a>
 800aa24:	d101      	bne.n	800aa2a <__ieee754_pow+0x62>
 800aa26:	2e00      	cmp	r6, #0
 800aa28:	d1e7      	bne.n	800a9fa <__ieee754_pow+0x32>
 800aa2a:	4598      	cmp	r8, r3
 800aa2c:	dc01      	bgt.n	800aa32 <__ieee754_pow+0x6a>
 800aa2e:	d10f      	bne.n	800aa50 <__ieee754_pow+0x88>
 800aa30:	b172      	cbz	r2, 800aa50 <__ieee754_pow+0x88>
 800aa32:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aa36:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aa3a:	ea55 050a 	orrs.w	r5, r5, sl
 800aa3e:	d1dc      	bne.n	800a9fa <__ieee754_pow+0x32>
 800aa40:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa44:	18db      	adds	r3, r3, r3
 800aa46:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800aa4a:	4152      	adcs	r2, r2
 800aa4c:	429d      	cmp	r5, r3
 800aa4e:	e7d0      	b.n	800a9f2 <__ieee754_pow+0x2a>
 800aa50:	2d00      	cmp	r5, #0
 800aa52:	da3b      	bge.n	800aacc <__ieee754_pow+0x104>
 800aa54:	4b72      	ldr	r3, [pc, #456]	; (800ac20 <__ieee754_pow+0x258>)
 800aa56:	4598      	cmp	r8, r3
 800aa58:	dc51      	bgt.n	800aafe <__ieee754_pow+0x136>
 800aa5a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800aa5e:	4598      	cmp	r8, r3
 800aa60:	f340 84ac 	ble.w	800b3bc <__ieee754_pow+0x9f4>
 800aa64:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa6c:	2b14      	cmp	r3, #20
 800aa6e:	dd0f      	ble.n	800aa90 <__ieee754_pow+0xc8>
 800aa70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aa74:	fa22 f103 	lsr.w	r1, r2, r3
 800aa78:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	f040 849d 	bne.w	800b3bc <__ieee754_pow+0x9f4>
 800aa82:	f001 0101 	and.w	r1, r1, #1
 800aa86:	f1c1 0302 	rsb	r3, r1, #2
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	b182      	cbz	r2, 800aab0 <__ieee754_pow+0xe8>
 800aa8e:	e05f      	b.n	800ab50 <__ieee754_pow+0x188>
 800aa90:	2a00      	cmp	r2, #0
 800aa92:	d15b      	bne.n	800ab4c <__ieee754_pow+0x184>
 800aa94:	f1c3 0314 	rsb	r3, r3, #20
 800aa98:	fa48 f103 	asr.w	r1, r8, r3
 800aa9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa0:	4543      	cmp	r3, r8
 800aaa2:	f040 8488 	bne.w	800b3b6 <__ieee754_pow+0x9ee>
 800aaa6:	f001 0101 	and.w	r1, r1, #1
 800aaaa:	f1c1 0302 	rsb	r3, r1, #2
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	4b5c      	ldr	r3, [pc, #368]	; (800ac24 <__ieee754_pow+0x25c>)
 800aab2:	4598      	cmp	r8, r3
 800aab4:	d132      	bne.n	800ab1c <__ieee754_pow+0x154>
 800aab6:	f1b9 0f00 	cmp.w	r9, #0
 800aaba:	f280 8478 	bge.w	800b3ae <__ieee754_pow+0x9e6>
 800aabe:	4959      	ldr	r1, [pc, #356]	; (800ac24 <__ieee754_pow+0x25c>)
 800aac0:	4632      	mov	r2, r6
 800aac2:	463b      	mov	r3, r7
 800aac4:	2000      	movs	r0, #0
 800aac6:	f7f5 fee1 	bl	800088c <__aeabi_ddiv>
 800aaca:	e79c      	b.n	800aa06 <__ieee754_pow+0x3e>
 800aacc:	2300      	movs	r3, #0
 800aace:	9304      	str	r3, [sp, #16]
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	d13d      	bne.n	800ab50 <__ieee754_pow+0x188>
 800aad4:	4b51      	ldr	r3, [pc, #324]	; (800ac1c <__ieee754_pow+0x254>)
 800aad6:	4598      	cmp	r8, r3
 800aad8:	d1ea      	bne.n	800aab0 <__ieee754_pow+0xe8>
 800aada:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aade:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aae2:	ea53 030a 	orrs.w	r3, r3, sl
 800aae6:	f000 845a 	beq.w	800b39e <__ieee754_pow+0x9d6>
 800aaea:	4b4f      	ldr	r3, [pc, #316]	; (800ac28 <__ieee754_pow+0x260>)
 800aaec:	429c      	cmp	r4, r3
 800aaee:	dd08      	ble.n	800ab02 <__ieee754_pow+0x13a>
 800aaf0:	f1b9 0f00 	cmp.w	r9, #0
 800aaf4:	f2c0 8457 	blt.w	800b3a6 <__ieee754_pow+0x9de>
 800aaf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aafc:	e783      	b.n	800aa06 <__ieee754_pow+0x3e>
 800aafe:	2302      	movs	r3, #2
 800ab00:	e7e5      	b.n	800aace <__ieee754_pow+0x106>
 800ab02:	f1b9 0f00 	cmp.w	r9, #0
 800ab06:	f04f 0000 	mov.w	r0, #0
 800ab0a:	f04f 0100 	mov.w	r1, #0
 800ab0e:	f6bf af7a 	bge.w	800aa06 <__ieee754_pow+0x3e>
 800ab12:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ab16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ab1a:	e774      	b.n	800aa06 <__ieee754_pow+0x3e>
 800ab1c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ab20:	d106      	bne.n	800ab30 <__ieee754_pow+0x168>
 800ab22:	4632      	mov	r2, r6
 800ab24:	463b      	mov	r3, r7
 800ab26:	4630      	mov	r0, r6
 800ab28:	4639      	mov	r1, r7
 800ab2a:	f7f5 fd85 	bl	8000638 <__aeabi_dmul>
 800ab2e:	e76a      	b.n	800aa06 <__ieee754_pow+0x3e>
 800ab30:	4b3e      	ldr	r3, [pc, #248]	; (800ac2c <__ieee754_pow+0x264>)
 800ab32:	4599      	cmp	r9, r3
 800ab34:	d10c      	bne.n	800ab50 <__ieee754_pow+0x188>
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	db0a      	blt.n	800ab50 <__ieee754_pow+0x188>
 800ab3a:	ec47 6b10 	vmov	d0, r6, r7
 800ab3e:	b009      	add	sp, #36	; 0x24
 800ab40:	ecbd 8b06 	vpop	{d8-d10}
 800ab44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab48:	f000 be7a 	b.w	800b840 <__ieee754_sqrt>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9304      	str	r3, [sp, #16]
 800ab50:	ec47 6b10 	vmov	d0, r6, r7
 800ab54:	f001 fc2e 	bl	800c3b4 <fabs>
 800ab58:	ec51 0b10 	vmov	r0, r1, d0
 800ab5c:	f1ba 0f00 	cmp.w	sl, #0
 800ab60:	d129      	bne.n	800abb6 <__ieee754_pow+0x1ee>
 800ab62:	b124      	cbz	r4, 800ab6e <__ieee754_pow+0x1a6>
 800ab64:	4b2f      	ldr	r3, [pc, #188]	; (800ac24 <__ieee754_pow+0x25c>)
 800ab66:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d123      	bne.n	800abb6 <__ieee754_pow+0x1ee>
 800ab6e:	f1b9 0f00 	cmp.w	r9, #0
 800ab72:	da05      	bge.n	800ab80 <__ieee754_pow+0x1b8>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	2000      	movs	r0, #0
 800ab7a:	492a      	ldr	r1, [pc, #168]	; (800ac24 <__ieee754_pow+0x25c>)
 800ab7c:	f7f5 fe86 	bl	800088c <__aeabi_ddiv>
 800ab80:	2d00      	cmp	r5, #0
 800ab82:	f6bf af40 	bge.w	800aa06 <__ieee754_pow+0x3e>
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ab8c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab90:	4323      	orrs	r3, r4
 800ab92:	d108      	bne.n	800aba6 <__ieee754_pow+0x1de>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	f7f5 fb94 	bl	80002c8 <__aeabi_dsub>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	e78f      	b.n	800aac6 <__ieee754_pow+0xfe>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	f47f af2c 	bne.w	800aa06 <__ieee754_pow+0x3e>
 800abae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abb2:	4619      	mov	r1, r3
 800abb4:	e727      	b.n	800aa06 <__ieee754_pow+0x3e>
 800abb6:	0feb      	lsrs	r3, r5, #31
 800abb8:	3b01      	subs	r3, #1
 800abba:	9306      	str	r3, [sp, #24]
 800abbc:	9a06      	ldr	r2, [sp, #24]
 800abbe:	9b04      	ldr	r3, [sp, #16]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	d102      	bne.n	800abca <__ieee754_pow+0x202>
 800abc4:	4632      	mov	r2, r6
 800abc6:	463b      	mov	r3, r7
 800abc8:	e7e6      	b.n	800ab98 <__ieee754_pow+0x1d0>
 800abca:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <__ieee754_pow+0x268>)
 800abcc:	4598      	cmp	r8, r3
 800abce:	f340 80fb 	ble.w	800adc8 <__ieee754_pow+0x400>
 800abd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800abd6:	4598      	cmp	r8, r3
 800abd8:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <__ieee754_pow+0x260>)
 800abda:	dd0c      	ble.n	800abf6 <__ieee754_pow+0x22e>
 800abdc:	429c      	cmp	r4, r3
 800abde:	dc0f      	bgt.n	800ac00 <__ieee754_pow+0x238>
 800abe0:	f1b9 0f00 	cmp.w	r9, #0
 800abe4:	da0f      	bge.n	800ac06 <__ieee754_pow+0x23e>
 800abe6:	2000      	movs	r0, #0
 800abe8:	b009      	add	sp, #36	; 0x24
 800abea:	ecbd 8b06 	vpop	{d8-d10}
 800abee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf2:	f001 bbd6 	b.w	800c3a2 <__math_oflow>
 800abf6:	429c      	cmp	r4, r3
 800abf8:	dbf2      	blt.n	800abe0 <__ieee754_pow+0x218>
 800abfa:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <__ieee754_pow+0x25c>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	dd19      	ble.n	800ac34 <__ieee754_pow+0x26c>
 800ac00:	f1b9 0f00 	cmp.w	r9, #0
 800ac04:	dcef      	bgt.n	800abe6 <__ieee754_pow+0x21e>
 800ac06:	2000      	movs	r0, #0
 800ac08:	b009      	add	sp, #36	; 0x24
 800ac0a:	ecbd 8b06 	vpop	{d8-d10}
 800ac0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac12:	f001 bbbd 	b.w	800c390 <__math_uflow>
 800ac16:	bf00      	nop
 800ac18:	fff00000 	.word	0xfff00000
 800ac1c:	7ff00000 	.word	0x7ff00000
 800ac20:	433fffff 	.word	0x433fffff
 800ac24:	3ff00000 	.word	0x3ff00000
 800ac28:	3fefffff 	.word	0x3fefffff
 800ac2c:	3fe00000 	.word	0x3fe00000
 800ac30:	41e00000 	.word	0x41e00000
 800ac34:	4b60      	ldr	r3, [pc, #384]	; (800adb8 <__ieee754_pow+0x3f0>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	f7f5 fb46 	bl	80002c8 <__aeabi_dsub>
 800ac3c:	a354      	add	r3, pc, #336	; (adr r3, 800ad90 <__ieee754_pow+0x3c8>)
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	4604      	mov	r4, r0
 800ac44:	460d      	mov	r5, r1
 800ac46:	f7f5 fcf7 	bl	8000638 <__aeabi_dmul>
 800ac4a:	a353      	add	r3, pc, #332	; (adr r3, 800ad98 <__ieee754_pow+0x3d0>)
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	4606      	mov	r6, r0
 800ac52:	460f      	mov	r7, r1
 800ac54:	4620      	mov	r0, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 fcee 	bl	8000638 <__aeabi_dmul>
 800ac5c:	4b57      	ldr	r3, [pc, #348]	; (800adbc <__ieee754_pow+0x3f4>)
 800ac5e:	4682      	mov	sl, r0
 800ac60:	468b      	mov	fp, r1
 800ac62:	2200      	movs	r2, #0
 800ac64:	4620      	mov	r0, r4
 800ac66:	4629      	mov	r1, r5
 800ac68:	f7f5 fce6 	bl	8000638 <__aeabi_dmul>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	a14b      	add	r1, pc, #300	; (adr r1, 800ada0 <__ieee754_pow+0x3d8>)
 800ac72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac76:	f7f5 fb27 	bl	80002c8 <__aeabi_dsub>
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	f7f5 fcdb 	bl	8000638 <__aeabi_dmul>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	2000      	movs	r0, #0
 800ac88:	494d      	ldr	r1, [pc, #308]	; (800adc0 <__ieee754_pow+0x3f8>)
 800ac8a:	f7f5 fb1d 	bl	80002c8 <__aeabi_dsub>
 800ac8e:	4622      	mov	r2, r4
 800ac90:	4680      	mov	r8, r0
 800ac92:	4689      	mov	r9, r1
 800ac94:	462b      	mov	r3, r5
 800ac96:	4620      	mov	r0, r4
 800ac98:	4629      	mov	r1, r5
 800ac9a:	f7f5 fccd 	bl	8000638 <__aeabi_dmul>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f7f5 fcc7 	bl	8000638 <__aeabi_dmul>
 800acaa:	a33f      	add	r3, pc, #252	; (adr r3, 800ada8 <__ieee754_pow+0x3e0>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f7f5 fcc2 	bl	8000638 <__aeabi_dmul>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4650      	mov	r0, sl
 800acba:	4659      	mov	r1, fp
 800acbc:	f7f5 fb04 	bl	80002c8 <__aeabi_dsub>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4680      	mov	r8, r0
 800acc6:	4689      	mov	r9, r1
 800acc8:	4630      	mov	r0, r6
 800acca:	4639      	mov	r1, r7
 800accc:	f7f5 fafe 	bl	80002cc <__adddf3>
 800acd0:	2000      	movs	r0, #0
 800acd2:	4632      	mov	r2, r6
 800acd4:	463b      	mov	r3, r7
 800acd6:	4604      	mov	r4, r0
 800acd8:	460d      	mov	r5, r1
 800acda:	f7f5 faf5 	bl	80002c8 <__aeabi_dsub>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f7f5 faef 	bl	80002c8 <__aeabi_dsub>
 800acea:	9b04      	ldr	r3, [sp, #16]
 800acec:	9a06      	ldr	r2, [sp, #24]
 800acee:	3b01      	subs	r3, #1
 800acf0:	4313      	orrs	r3, r2
 800acf2:	4682      	mov	sl, r0
 800acf4:	468b      	mov	fp, r1
 800acf6:	f040 81e7 	bne.w	800b0c8 <__ieee754_pow+0x700>
 800acfa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800adb0 <__ieee754_pow+0x3e8>
 800acfe:	eeb0 8a47 	vmov.f32	s16, s14
 800ad02:	eef0 8a67 	vmov.f32	s17, s15
 800ad06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ad0a:	2600      	movs	r6, #0
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	463b      	mov	r3, r7
 800ad10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad14:	f7f5 fad8 	bl	80002c8 <__aeabi_dsub>
 800ad18:	4622      	mov	r2, r4
 800ad1a:	462b      	mov	r3, r5
 800ad1c:	f7f5 fc8c 	bl	8000638 <__aeabi_dmul>
 800ad20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad24:	4680      	mov	r8, r0
 800ad26:	4689      	mov	r9, r1
 800ad28:	4650      	mov	r0, sl
 800ad2a:	4659      	mov	r1, fp
 800ad2c:	f7f5 fc84 	bl	8000638 <__aeabi_dmul>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4640      	mov	r0, r8
 800ad36:	4649      	mov	r1, r9
 800ad38:	f7f5 fac8 	bl	80002cc <__adddf3>
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	463b      	mov	r3, r7
 800ad40:	4680      	mov	r8, r0
 800ad42:	4689      	mov	r9, r1
 800ad44:	4620      	mov	r0, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	f7f5 fc76 	bl	8000638 <__aeabi_dmul>
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	4602      	mov	r2, r0
 800ad54:	4649      	mov	r1, r9
 800ad56:	4640      	mov	r0, r8
 800ad58:	f7f5 fab8 	bl	80002cc <__adddf3>
 800ad5c:	4b19      	ldr	r3, [pc, #100]	; (800adc4 <__ieee754_pow+0x3fc>)
 800ad5e:	4299      	cmp	r1, r3
 800ad60:	ec45 4b19 	vmov	d9, r4, r5
 800ad64:	4606      	mov	r6, r0
 800ad66:	460f      	mov	r7, r1
 800ad68:	468b      	mov	fp, r1
 800ad6a:	f340 82f1 	ble.w	800b350 <__ieee754_pow+0x988>
 800ad6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ad72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ad76:	4303      	orrs	r3, r0
 800ad78:	f000 81e4 	beq.w	800b144 <__ieee754_pow+0x77c>
 800ad7c:	ec51 0b18 	vmov	r0, r1, d8
 800ad80:	2200      	movs	r2, #0
 800ad82:	2300      	movs	r3, #0
 800ad84:	f7f5 feca 	bl	8000b1c <__aeabi_dcmplt>
 800ad88:	3800      	subs	r0, #0
 800ad8a:	bf18      	it	ne
 800ad8c:	2001      	movne	r0, #1
 800ad8e:	e72b      	b.n	800abe8 <__ieee754_pow+0x220>
 800ad90:	60000000 	.word	0x60000000
 800ad94:	3ff71547 	.word	0x3ff71547
 800ad98:	f85ddf44 	.word	0xf85ddf44
 800ad9c:	3e54ae0b 	.word	0x3e54ae0b
 800ada0:	55555555 	.word	0x55555555
 800ada4:	3fd55555 	.word	0x3fd55555
 800ada8:	652b82fe 	.word	0x652b82fe
 800adac:	3ff71547 	.word	0x3ff71547
 800adb0:	00000000 	.word	0x00000000
 800adb4:	bff00000 	.word	0xbff00000
 800adb8:	3ff00000 	.word	0x3ff00000
 800adbc:	3fd00000 	.word	0x3fd00000
 800adc0:	3fe00000 	.word	0x3fe00000
 800adc4:	408fffff 	.word	0x408fffff
 800adc8:	4bd5      	ldr	r3, [pc, #852]	; (800b120 <__ieee754_pow+0x758>)
 800adca:	402b      	ands	r3, r5
 800adcc:	2200      	movs	r2, #0
 800adce:	b92b      	cbnz	r3, 800addc <__ieee754_pow+0x414>
 800add0:	4bd4      	ldr	r3, [pc, #848]	; (800b124 <__ieee754_pow+0x75c>)
 800add2:	f7f5 fc31 	bl	8000638 <__aeabi_dmul>
 800add6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800adda:	460c      	mov	r4, r1
 800addc:	1523      	asrs	r3, r4, #20
 800adde:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ade2:	4413      	add	r3, r2
 800ade4:	9305      	str	r3, [sp, #20]
 800ade6:	4bd0      	ldr	r3, [pc, #832]	; (800b128 <__ieee754_pow+0x760>)
 800ade8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800adec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800adf0:	429c      	cmp	r4, r3
 800adf2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800adf6:	dd08      	ble.n	800ae0a <__ieee754_pow+0x442>
 800adf8:	4bcc      	ldr	r3, [pc, #816]	; (800b12c <__ieee754_pow+0x764>)
 800adfa:	429c      	cmp	r4, r3
 800adfc:	f340 8162 	ble.w	800b0c4 <__ieee754_pow+0x6fc>
 800ae00:	9b05      	ldr	r3, [sp, #20]
 800ae02:	3301      	adds	r3, #1
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ae0a:	2400      	movs	r4, #0
 800ae0c:	00e3      	lsls	r3, r4, #3
 800ae0e:	9307      	str	r3, [sp, #28]
 800ae10:	4bc7      	ldr	r3, [pc, #796]	; (800b130 <__ieee754_pow+0x768>)
 800ae12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae16:	ed93 7b00 	vldr	d7, [r3]
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	ec53 2b17 	vmov	r2, r3, d7
 800ae20:	eeb0 9a47 	vmov.f32	s18, s14
 800ae24:	eef0 9a67 	vmov.f32	s19, s15
 800ae28:	4682      	mov	sl, r0
 800ae2a:	f7f5 fa4d 	bl	80002c8 <__aeabi_dsub>
 800ae2e:	4652      	mov	r2, sl
 800ae30:	4606      	mov	r6, r0
 800ae32:	460f      	mov	r7, r1
 800ae34:	462b      	mov	r3, r5
 800ae36:	ec51 0b19 	vmov	r0, r1, d9
 800ae3a:	f7f5 fa47 	bl	80002cc <__adddf3>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	2000      	movs	r0, #0
 800ae44:	49bb      	ldr	r1, [pc, #748]	; (800b134 <__ieee754_pow+0x76c>)
 800ae46:	f7f5 fd21 	bl	800088c <__aeabi_ddiv>
 800ae4a:	ec41 0b1a 	vmov	d10, r0, r1
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4630      	mov	r0, r6
 800ae54:	4639      	mov	r1, r7
 800ae56:	f7f5 fbef 	bl	8000638 <__aeabi_dmul>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae60:	9302      	str	r3, [sp, #8]
 800ae62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae66:	46ab      	mov	fp, r5
 800ae68:	106d      	asrs	r5, r5, #1
 800ae6a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ae6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ae72:	ec41 0b18 	vmov	d8, r0, r1
 800ae76:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	4649      	mov	r1, r9
 800ae80:	4614      	mov	r4, r2
 800ae82:	461d      	mov	r5, r3
 800ae84:	f7f5 fbd8 	bl	8000638 <__aeabi_dmul>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	4639      	mov	r1, r7
 800ae90:	f7f5 fa1a 	bl	80002c8 <__aeabi_dsub>
 800ae94:	ec53 2b19 	vmov	r2, r3, d9
 800ae98:	4606      	mov	r6, r0
 800ae9a:	460f      	mov	r7, r1
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 fa12 	bl	80002c8 <__aeabi_dsub>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4650      	mov	r0, sl
 800aeaa:	4659      	mov	r1, fp
 800aeac:	f7f5 fa0c 	bl	80002c8 <__aeabi_dsub>
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	f7f5 fbc0 	bl	8000638 <__aeabi_dmul>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4630      	mov	r0, r6
 800aebe:	4639      	mov	r1, r7
 800aec0:	f7f5 fa02 	bl	80002c8 <__aeabi_dsub>
 800aec4:	ec53 2b1a 	vmov	r2, r3, d10
 800aec8:	f7f5 fbb6 	bl	8000638 <__aeabi_dmul>
 800aecc:	ec53 2b18 	vmov	r2, r3, d8
 800aed0:	ec41 0b19 	vmov	d9, r0, r1
 800aed4:	ec51 0b18 	vmov	r0, r1, d8
 800aed8:	f7f5 fbae 	bl	8000638 <__aeabi_dmul>
 800aedc:	a37c      	add	r3, pc, #496	; (adr r3, 800b0d0 <__ieee754_pow+0x708>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	4604      	mov	r4, r0
 800aee4:	460d      	mov	r5, r1
 800aee6:	f7f5 fba7 	bl	8000638 <__aeabi_dmul>
 800aeea:	a37b      	add	r3, pc, #492	; (adr r3, 800b0d8 <__ieee754_pow+0x710>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 f9ec 	bl	80002cc <__adddf3>
 800aef4:	4622      	mov	r2, r4
 800aef6:	462b      	mov	r3, r5
 800aef8:	f7f5 fb9e 	bl	8000638 <__aeabi_dmul>
 800aefc:	a378      	add	r3, pc, #480	; (adr r3, 800b0e0 <__ieee754_pow+0x718>)
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f7f5 f9e3 	bl	80002cc <__adddf3>
 800af06:	4622      	mov	r2, r4
 800af08:	462b      	mov	r3, r5
 800af0a:	f7f5 fb95 	bl	8000638 <__aeabi_dmul>
 800af0e:	a376      	add	r3, pc, #472	; (adr r3, 800b0e8 <__ieee754_pow+0x720>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 f9da 	bl	80002cc <__adddf3>
 800af18:	4622      	mov	r2, r4
 800af1a:	462b      	mov	r3, r5
 800af1c:	f7f5 fb8c 	bl	8000638 <__aeabi_dmul>
 800af20:	a373      	add	r3, pc, #460	; (adr r3, 800b0f0 <__ieee754_pow+0x728>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 f9d1 	bl	80002cc <__adddf3>
 800af2a:	4622      	mov	r2, r4
 800af2c:	462b      	mov	r3, r5
 800af2e:	f7f5 fb83 	bl	8000638 <__aeabi_dmul>
 800af32:	a371      	add	r3, pc, #452	; (adr r3, 800b0f8 <__ieee754_pow+0x730>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f7f5 f9c8 	bl	80002cc <__adddf3>
 800af3c:	4622      	mov	r2, r4
 800af3e:	4606      	mov	r6, r0
 800af40:	460f      	mov	r7, r1
 800af42:	462b      	mov	r3, r5
 800af44:	4620      	mov	r0, r4
 800af46:	4629      	mov	r1, r5
 800af48:	f7f5 fb76 	bl	8000638 <__aeabi_dmul>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4630      	mov	r0, r6
 800af52:	4639      	mov	r1, r7
 800af54:	f7f5 fb70 	bl	8000638 <__aeabi_dmul>
 800af58:	4642      	mov	r2, r8
 800af5a:	4604      	mov	r4, r0
 800af5c:	460d      	mov	r5, r1
 800af5e:	464b      	mov	r3, r9
 800af60:	ec51 0b18 	vmov	r0, r1, d8
 800af64:	f7f5 f9b2 	bl	80002cc <__adddf3>
 800af68:	ec53 2b19 	vmov	r2, r3, d9
 800af6c:	f7f5 fb64 	bl	8000638 <__aeabi_dmul>
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	f7f5 f9aa 	bl	80002cc <__adddf3>
 800af78:	4642      	mov	r2, r8
 800af7a:	4682      	mov	sl, r0
 800af7c:	468b      	mov	fp, r1
 800af7e:	464b      	mov	r3, r9
 800af80:	4640      	mov	r0, r8
 800af82:	4649      	mov	r1, r9
 800af84:	f7f5 fb58 	bl	8000638 <__aeabi_dmul>
 800af88:	4b6b      	ldr	r3, [pc, #428]	; (800b138 <__ieee754_pow+0x770>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	4606      	mov	r6, r0
 800af8e:	460f      	mov	r7, r1
 800af90:	f7f5 f99c 	bl	80002cc <__adddf3>
 800af94:	4652      	mov	r2, sl
 800af96:	465b      	mov	r3, fp
 800af98:	f7f5 f998 	bl	80002cc <__adddf3>
 800af9c:	2000      	movs	r0, #0
 800af9e:	4604      	mov	r4, r0
 800afa0:	460d      	mov	r5, r1
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	4640      	mov	r0, r8
 800afa8:	4649      	mov	r1, r9
 800afaa:	f7f5 fb45 	bl	8000638 <__aeabi_dmul>
 800afae:	4b62      	ldr	r3, [pc, #392]	; (800b138 <__ieee754_pow+0x770>)
 800afb0:	4680      	mov	r8, r0
 800afb2:	4689      	mov	r9, r1
 800afb4:	2200      	movs	r2, #0
 800afb6:	4620      	mov	r0, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 f985 	bl	80002c8 <__aeabi_dsub>
 800afbe:	4632      	mov	r2, r6
 800afc0:	463b      	mov	r3, r7
 800afc2:	f7f5 f981 	bl	80002c8 <__aeabi_dsub>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4650      	mov	r0, sl
 800afcc:	4659      	mov	r1, fp
 800afce:	f7f5 f97b 	bl	80002c8 <__aeabi_dsub>
 800afd2:	ec53 2b18 	vmov	r2, r3, d8
 800afd6:	f7f5 fb2f 	bl	8000638 <__aeabi_dmul>
 800afda:	4622      	mov	r2, r4
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
 800afe0:	462b      	mov	r3, r5
 800afe2:	ec51 0b19 	vmov	r0, r1, d9
 800afe6:	f7f5 fb27 	bl	8000638 <__aeabi_dmul>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 f96b 	bl	80002cc <__adddf3>
 800aff6:	4606      	mov	r6, r0
 800aff8:	460f      	mov	r7, r1
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4640      	mov	r0, r8
 800b000:	4649      	mov	r1, r9
 800b002:	f7f5 f963 	bl	80002cc <__adddf3>
 800b006:	a33e      	add	r3, pc, #248	; (adr r3, 800b100 <__ieee754_pow+0x738>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	2000      	movs	r0, #0
 800b00e:	4604      	mov	r4, r0
 800b010:	460d      	mov	r5, r1
 800b012:	f7f5 fb11 	bl	8000638 <__aeabi_dmul>
 800b016:	4642      	mov	r2, r8
 800b018:	ec41 0b18 	vmov	d8, r0, r1
 800b01c:	464b      	mov	r3, r9
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 f951 	bl	80002c8 <__aeabi_dsub>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 f94b 	bl	80002c8 <__aeabi_dsub>
 800b032:	a335      	add	r3, pc, #212	; (adr r3, 800b108 <__ieee754_pow+0x740>)
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	f7f5 fafe 	bl	8000638 <__aeabi_dmul>
 800b03c:	a334      	add	r3, pc, #208	; (adr r3, 800b110 <__ieee754_pow+0x748>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	4606      	mov	r6, r0
 800b044:	460f      	mov	r7, r1
 800b046:	4620      	mov	r0, r4
 800b048:	4629      	mov	r1, r5
 800b04a:	f7f5 faf5 	bl	8000638 <__aeabi_dmul>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 f939 	bl	80002cc <__adddf3>
 800b05a:	9a07      	ldr	r2, [sp, #28]
 800b05c:	4b37      	ldr	r3, [pc, #220]	; (800b13c <__ieee754_pow+0x774>)
 800b05e:	4413      	add	r3, r2
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 f932 	bl	80002cc <__adddf3>
 800b068:	4682      	mov	sl, r0
 800b06a:	9805      	ldr	r0, [sp, #20]
 800b06c:	468b      	mov	fp, r1
 800b06e:	f7f5 fa79 	bl	8000564 <__aeabi_i2d>
 800b072:	9a07      	ldr	r2, [sp, #28]
 800b074:	4b32      	ldr	r3, [pc, #200]	; (800b140 <__ieee754_pow+0x778>)
 800b076:	4413      	add	r3, r2
 800b078:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b07c:	4606      	mov	r6, r0
 800b07e:	460f      	mov	r7, r1
 800b080:	4652      	mov	r2, sl
 800b082:	465b      	mov	r3, fp
 800b084:	ec51 0b18 	vmov	r0, r1, d8
 800b088:	f7f5 f920 	bl	80002cc <__adddf3>
 800b08c:	4642      	mov	r2, r8
 800b08e:	464b      	mov	r3, r9
 800b090:	f7f5 f91c 	bl	80002cc <__adddf3>
 800b094:	4632      	mov	r2, r6
 800b096:	463b      	mov	r3, r7
 800b098:	f7f5 f918 	bl	80002cc <__adddf3>
 800b09c:	2000      	movs	r0, #0
 800b09e:	4632      	mov	r2, r6
 800b0a0:	463b      	mov	r3, r7
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	460d      	mov	r5, r1
 800b0a6:	f7f5 f90f 	bl	80002c8 <__aeabi_dsub>
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	f7f5 f90b 	bl	80002c8 <__aeabi_dsub>
 800b0b2:	ec53 2b18 	vmov	r2, r3, d8
 800b0b6:	f7f5 f907 	bl	80002c8 <__aeabi_dsub>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4650      	mov	r0, sl
 800b0c0:	4659      	mov	r1, fp
 800b0c2:	e610      	b.n	800ace6 <__ieee754_pow+0x31e>
 800b0c4:	2401      	movs	r4, #1
 800b0c6:	e6a1      	b.n	800ae0c <__ieee754_pow+0x444>
 800b0c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b118 <__ieee754_pow+0x750>
 800b0cc:	e617      	b.n	800acfe <__ieee754_pow+0x336>
 800b0ce:	bf00      	nop
 800b0d0:	4a454eef 	.word	0x4a454eef
 800b0d4:	3fca7e28 	.word	0x3fca7e28
 800b0d8:	93c9db65 	.word	0x93c9db65
 800b0dc:	3fcd864a 	.word	0x3fcd864a
 800b0e0:	a91d4101 	.word	0xa91d4101
 800b0e4:	3fd17460 	.word	0x3fd17460
 800b0e8:	518f264d 	.word	0x518f264d
 800b0ec:	3fd55555 	.word	0x3fd55555
 800b0f0:	db6fabff 	.word	0xdb6fabff
 800b0f4:	3fdb6db6 	.word	0x3fdb6db6
 800b0f8:	33333303 	.word	0x33333303
 800b0fc:	3fe33333 	.word	0x3fe33333
 800b100:	e0000000 	.word	0xe0000000
 800b104:	3feec709 	.word	0x3feec709
 800b108:	dc3a03fd 	.word	0xdc3a03fd
 800b10c:	3feec709 	.word	0x3feec709
 800b110:	145b01f5 	.word	0x145b01f5
 800b114:	be3e2fe0 	.word	0xbe3e2fe0
 800b118:	00000000 	.word	0x00000000
 800b11c:	3ff00000 	.word	0x3ff00000
 800b120:	7ff00000 	.word	0x7ff00000
 800b124:	43400000 	.word	0x43400000
 800b128:	0003988e 	.word	0x0003988e
 800b12c:	000bb679 	.word	0x000bb679
 800b130:	0800c8d8 	.word	0x0800c8d8
 800b134:	3ff00000 	.word	0x3ff00000
 800b138:	40080000 	.word	0x40080000
 800b13c:	0800c8f8 	.word	0x0800c8f8
 800b140:	0800c8e8 	.word	0x0800c8e8
 800b144:	a3b5      	add	r3, pc, #724	; (adr r3, 800b41c <__ieee754_pow+0xa54>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	f7f5 f8bd 	bl	80002cc <__adddf3>
 800b152:	4622      	mov	r2, r4
 800b154:	ec41 0b1a 	vmov	d10, r0, r1
 800b158:	462b      	mov	r3, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	4639      	mov	r1, r7
 800b15e:	f7f5 f8b3 	bl	80002c8 <__aeabi_dsub>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	ec51 0b1a 	vmov	r0, r1, d10
 800b16a:	f7f5 fcf5 	bl	8000b58 <__aeabi_dcmpgt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f47f ae04 	bne.w	800ad7c <__ieee754_pow+0x3b4>
 800b174:	4aa4      	ldr	r2, [pc, #656]	; (800b408 <__ieee754_pow+0xa40>)
 800b176:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b17a:	4293      	cmp	r3, r2
 800b17c:	f340 8108 	ble.w	800b390 <__ieee754_pow+0x9c8>
 800b180:	151b      	asrs	r3, r3, #20
 800b182:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b186:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b18a:	fa4a f303 	asr.w	r3, sl, r3
 800b18e:	445b      	add	r3, fp
 800b190:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b194:	4e9d      	ldr	r6, [pc, #628]	; (800b40c <__ieee754_pow+0xa44>)
 800b196:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b19a:	4116      	asrs	r6, r2
 800b19c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	ea23 0106 	bic.w	r1, r3, r6
 800b1a6:	f1c2 0214 	rsb	r2, r2, #20
 800b1aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b1ae:	fa4a fa02 	asr.w	sl, sl, r2
 800b1b2:	f1bb 0f00 	cmp.w	fp, #0
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	4629      	mov	r1, r5
 800b1be:	bfb8      	it	lt
 800b1c0:	f1ca 0a00 	rsblt	sl, sl, #0
 800b1c4:	f7f5 f880 	bl	80002c8 <__aeabi_dsub>
 800b1c8:	ec41 0b19 	vmov	d9, r0, r1
 800b1cc:	4642      	mov	r2, r8
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	ec51 0b19 	vmov	r0, r1, d9
 800b1d4:	f7f5 f87a 	bl	80002cc <__adddf3>
 800b1d8:	a37b      	add	r3, pc, #492	; (adr r3, 800b3c8 <__ieee754_pow+0xa00>)
 800b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1de:	2000      	movs	r0, #0
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	f7f5 fa28 	bl	8000638 <__aeabi_dmul>
 800b1e8:	ec53 2b19 	vmov	r2, r3, d9
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	460f      	mov	r7, r1
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	f7f5 f868 	bl	80002c8 <__aeabi_dsub>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 f862 	bl	80002c8 <__aeabi_dsub>
 800b204:	a372      	add	r3, pc, #456	; (adr r3, 800b3d0 <__ieee754_pow+0xa08>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f7f5 fa15 	bl	8000638 <__aeabi_dmul>
 800b20e:	a372      	add	r3, pc, #456	; (adr r3, 800b3d8 <__ieee754_pow+0xa10>)
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	4680      	mov	r8, r0
 800b216:	4689      	mov	r9, r1
 800b218:	4620      	mov	r0, r4
 800b21a:	4629      	mov	r1, r5
 800b21c:	f7f5 fa0c 	bl	8000638 <__aeabi_dmul>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	4640      	mov	r0, r8
 800b226:	4649      	mov	r1, r9
 800b228:	f7f5 f850 	bl	80002cc <__adddf3>
 800b22c:	4604      	mov	r4, r0
 800b22e:	460d      	mov	r5, r1
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4630      	mov	r0, r6
 800b236:	4639      	mov	r1, r7
 800b238:	f7f5 f848 	bl	80002cc <__adddf3>
 800b23c:	4632      	mov	r2, r6
 800b23e:	463b      	mov	r3, r7
 800b240:	4680      	mov	r8, r0
 800b242:	4689      	mov	r9, r1
 800b244:	f7f5 f840 	bl	80002c8 <__aeabi_dsub>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f83a 	bl	80002c8 <__aeabi_dsub>
 800b254:	4642      	mov	r2, r8
 800b256:	4606      	mov	r6, r0
 800b258:	460f      	mov	r7, r1
 800b25a:	464b      	mov	r3, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 f9ea 	bl	8000638 <__aeabi_dmul>
 800b264:	a35e      	add	r3, pc, #376	; (adr r3, 800b3e0 <__ieee754_pow+0xa18>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	4604      	mov	r4, r0
 800b26c:	460d      	mov	r5, r1
 800b26e:	f7f5 f9e3 	bl	8000638 <__aeabi_dmul>
 800b272:	a35d      	add	r3, pc, #372	; (adr r3, 800b3e8 <__ieee754_pow+0xa20>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f5 f826 	bl	80002c8 <__aeabi_dsub>
 800b27c:	4622      	mov	r2, r4
 800b27e:	462b      	mov	r3, r5
 800b280:	f7f5 f9da 	bl	8000638 <__aeabi_dmul>
 800b284:	a35a      	add	r3, pc, #360	; (adr r3, 800b3f0 <__ieee754_pow+0xa28>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f7f5 f81f 	bl	80002cc <__adddf3>
 800b28e:	4622      	mov	r2, r4
 800b290:	462b      	mov	r3, r5
 800b292:	f7f5 f9d1 	bl	8000638 <__aeabi_dmul>
 800b296:	a358      	add	r3, pc, #352	; (adr r3, 800b3f8 <__ieee754_pow+0xa30>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	f7f5 f814 	bl	80002c8 <__aeabi_dsub>
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	462b      	mov	r3, r5
 800b2a4:	f7f5 f9c8 	bl	8000638 <__aeabi_dmul>
 800b2a8:	a355      	add	r3, pc, #340	; (adr r3, 800b400 <__ieee754_pow+0xa38>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f5 f80d 	bl	80002cc <__adddf3>
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	f7f5 f9bf 	bl	8000638 <__aeabi_dmul>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4640      	mov	r0, r8
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	f7f5 f801 	bl	80002c8 <__aeabi_dsub>
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	f7f5 f9b1 	bl	8000638 <__aeabi_dmul>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	ec41 0b19 	vmov	d9, r0, r1
 800b2dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f4 fff0 	bl	80002c8 <__aeabi_dsub>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	ec51 0b19 	vmov	r0, r1, d9
 800b2f0:	f7f5 facc 	bl	800088c <__aeabi_ddiv>
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	463b      	mov	r3, r7
 800b2fc:	4640      	mov	r0, r8
 800b2fe:	4649      	mov	r1, r9
 800b300:	f7f5 f99a 	bl	8000638 <__aeabi_dmul>
 800b304:	4632      	mov	r2, r6
 800b306:	463b      	mov	r3, r7
 800b308:	f7f4 ffe0 	bl	80002cc <__adddf3>
 800b30c:	4602      	mov	r2, r0
 800b30e:	460b      	mov	r3, r1
 800b310:	4620      	mov	r0, r4
 800b312:	4629      	mov	r1, r5
 800b314:	f7f4 ffd8 	bl	80002c8 <__aeabi_dsub>
 800b318:	4642      	mov	r2, r8
 800b31a:	464b      	mov	r3, r9
 800b31c:	f7f4 ffd4 	bl	80002c8 <__aeabi_dsub>
 800b320:	460b      	mov	r3, r1
 800b322:	4602      	mov	r2, r0
 800b324:	493a      	ldr	r1, [pc, #232]	; (800b410 <__ieee754_pow+0xa48>)
 800b326:	2000      	movs	r0, #0
 800b328:	f7f4 ffce 	bl	80002c8 <__aeabi_dsub>
 800b32c:	ec41 0b10 	vmov	d0, r0, r1
 800b330:	ee10 3a90 	vmov	r3, s1
 800b334:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b33c:	da2b      	bge.n	800b396 <__ieee754_pow+0x9ce>
 800b33e:	4650      	mov	r0, sl
 800b340:	f001 f8ce 	bl	800c4e0 <scalbn>
 800b344:	ec51 0b10 	vmov	r0, r1, d0
 800b348:	ec53 2b18 	vmov	r2, r3, d8
 800b34c:	f7ff bbed 	b.w	800ab2a <__ieee754_pow+0x162>
 800b350:	4b30      	ldr	r3, [pc, #192]	; (800b414 <__ieee754_pow+0xa4c>)
 800b352:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b356:	429e      	cmp	r6, r3
 800b358:	f77f af0c 	ble.w	800b174 <__ieee754_pow+0x7ac>
 800b35c:	4b2e      	ldr	r3, [pc, #184]	; (800b418 <__ieee754_pow+0xa50>)
 800b35e:	440b      	add	r3, r1
 800b360:	4303      	orrs	r3, r0
 800b362:	d009      	beq.n	800b378 <__ieee754_pow+0x9b0>
 800b364:	ec51 0b18 	vmov	r0, r1, d8
 800b368:	2200      	movs	r2, #0
 800b36a:	2300      	movs	r3, #0
 800b36c:	f7f5 fbd6 	bl	8000b1c <__aeabi_dcmplt>
 800b370:	3800      	subs	r0, #0
 800b372:	bf18      	it	ne
 800b374:	2001      	movne	r0, #1
 800b376:	e447      	b.n	800ac08 <__ieee754_pow+0x240>
 800b378:	4622      	mov	r2, r4
 800b37a:	462b      	mov	r3, r5
 800b37c:	f7f4 ffa4 	bl	80002c8 <__aeabi_dsub>
 800b380:	4642      	mov	r2, r8
 800b382:	464b      	mov	r3, r9
 800b384:	f7f5 fbde 	bl	8000b44 <__aeabi_dcmpge>
 800b388:	2800      	cmp	r0, #0
 800b38a:	f43f aef3 	beq.w	800b174 <__ieee754_pow+0x7ac>
 800b38e:	e7e9      	b.n	800b364 <__ieee754_pow+0x99c>
 800b390:	f04f 0a00 	mov.w	sl, #0
 800b394:	e71a      	b.n	800b1cc <__ieee754_pow+0x804>
 800b396:	ec51 0b10 	vmov	r0, r1, d0
 800b39a:	4619      	mov	r1, r3
 800b39c:	e7d4      	b.n	800b348 <__ieee754_pow+0x980>
 800b39e:	491c      	ldr	r1, [pc, #112]	; (800b410 <__ieee754_pow+0xa48>)
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	f7ff bb30 	b.w	800aa06 <__ieee754_pow+0x3e>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	f7ff bb2c 	b.w	800aa06 <__ieee754_pow+0x3e>
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	f7ff bb28 	b.w	800aa06 <__ieee754_pow+0x3e>
 800b3b6:	9204      	str	r2, [sp, #16]
 800b3b8:	f7ff bb7a 	b.w	800aab0 <__ieee754_pow+0xe8>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f7ff bb64 	b.w	800aa8a <__ieee754_pow+0xc2>
 800b3c2:	bf00      	nop
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	00000000 	.word	0x00000000
 800b3cc:	3fe62e43 	.word	0x3fe62e43
 800b3d0:	fefa39ef 	.word	0xfefa39ef
 800b3d4:	3fe62e42 	.word	0x3fe62e42
 800b3d8:	0ca86c39 	.word	0x0ca86c39
 800b3dc:	be205c61 	.word	0xbe205c61
 800b3e0:	72bea4d0 	.word	0x72bea4d0
 800b3e4:	3e663769 	.word	0x3e663769
 800b3e8:	c5d26bf1 	.word	0xc5d26bf1
 800b3ec:	3ebbbd41 	.word	0x3ebbbd41
 800b3f0:	af25de2c 	.word	0xaf25de2c
 800b3f4:	3f11566a 	.word	0x3f11566a
 800b3f8:	16bebd93 	.word	0x16bebd93
 800b3fc:	3f66c16c 	.word	0x3f66c16c
 800b400:	5555553e 	.word	0x5555553e
 800b404:	3fc55555 	.word	0x3fc55555
 800b408:	3fe00000 	.word	0x3fe00000
 800b40c:	000fffff 	.word	0x000fffff
 800b410:	3ff00000 	.word	0x3ff00000
 800b414:	4090cbff 	.word	0x4090cbff
 800b418:	3f6f3400 	.word	0x3f6f3400
 800b41c:	652b82fe 	.word	0x652b82fe
 800b420:	3c971547 	.word	0x3c971547
 800b424:	00000000 	.word	0x00000000

0800b428 <__ieee754_rem_pio2>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	ed2d 8b02 	vpush	{d8}
 800b430:	ec55 4b10 	vmov	r4, r5, d0
 800b434:	4bca      	ldr	r3, [pc, #808]	; (800b760 <__ieee754_rem_pio2+0x338>)
 800b436:	b08b      	sub	sp, #44	; 0x2c
 800b438:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b43c:	4598      	cmp	r8, r3
 800b43e:	4682      	mov	sl, r0
 800b440:	9502      	str	r5, [sp, #8]
 800b442:	dc08      	bgt.n	800b456 <__ieee754_rem_pio2+0x2e>
 800b444:	2200      	movs	r2, #0
 800b446:	2300      	movs	r3, #0
 800b448:	ed80 0b00 	vstr	d0, [r0]
 800b44c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b450:	f04f 0b00 	mov.w	fp, #0
 800b454:	e028      	b.n	800b4a8 <__ieee754_rem_pio2+0x80>
 800b456:	4bc3      	ldr	r3, [pc, #780]	; (800b764 <__ieee754_rem_pio2+0x33c>)
 800b458:	4598      	cmp	r8, r3
 800b45a:	dc78      	bgt.n	800b54e <__ieee754_rem_pio2+0x126>
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	4ec2      	ldr	r6, [pc, #776]	; (800b768 <__ieee754_rem_pio2+0x340>)
 800b460:	2b00      	cmp	r3, #0
 800b462:	ee10 0a10 	vmov	r0, s0
 800b466:	a3b0      	add	r3, pc, #704	; (adr r3, 800b728 <__ieee754_rem_pio2+0x300>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	4629      	mov	r1, r5
 800b46e:	dd39      	ble.n	800b4e4 <__ieee754_rem_pio2+0xbc>
 800b470:	f7f4 ff2a 	bl	80002c8 <__aeabi_dsub>
 800b474:	45b0      	cmp	r8, r6
 800b476:	4604      	mov	r4, r0
 800b478:	460d      	mov	r5, r1
 800b47a:	d01b      	beq.n	800b4b4 <__ieee754_rem_pio2+0x8c>
 800b47c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b730 <__ieee754_rem_pio2+0x308>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	f7f4 ff21 	bl	80002c8 <__aeabi_dsub>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	e9ca 2300 	strd	r2, r3, [sl]
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f4 ff19 	bl	80002c8 <__aeabi_dsub>
 800b496:	a3a6      	add	r3, pc, #664	; (adr r3, 800b730 <__ieee754_rem_pio2+0x308>)
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f7f4 ff14 	bl	80002c8 <__aeabi_dsub>
 800b4a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b4a4:	f04f 0b01 	mov.w	fp, #1
 800b4a8:	4658      	mov	r0, fp
 800b4aa:	b00b      	add	sp, #44	; 0x2c
 800b4ac:	ecbd 8b02 	vpop	{d8}
 800b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b738 <__ieee754_rem_pio2+0x310>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f7f4 ff05 	bl	80002c8 <__aeabi_dsub>
 800b4be:	a3a0      	add	r3, pc, #640	; (adr r3, 800b740 <__ieee754_rem_pio2+0x318>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	460d      	mov	r5, r1
 800b4c8:	f7f4 fefe 	bl	80002c8 <__aeabi_dsub>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	e9ca 2300 	strd	r2, r3, [sl]
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	f7f4 fef6 	bl	80002c8 <__aeabi_dsub>
 800b4dc:	a398      	add	r3, pc, #608	; (adr r3, 800b740 <__ieee754_rem_pio2+0x318>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	e7db      	b.n	800b49c <__ieee754_rem_pio2+0x74>
 800b4e4:	f7f4 fef2 	bl	80002cc <__adddf3>
 800b4e8:	45b0      	cmp	r8, r6
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	d016      	beq.n	800b51e <__ieee754_rem_pio2+0xf6>
 800b4f0:	a38f      	add	r3, pc, #572	; (adr r3, 800b730 <__ieee754_rem_pio2+0x308>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f4 fee9 	bl	80002cc <__adddf3>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	e9ca 2300 	strd	r2, r3, [sl]
 800b502:	4620      	mov	r0, r4
 800b504:	4629      	mov	r1, r5
 800b506:	f7f4 fedf 	bl	80002c8 <__aeabi_dsub>
 800b50a:	a389      	add	r3, pc, #548	; (adr r3, 800b730 <__ieee754_rem_pio2+0x308>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f4 fedc 	bl	80002cc <__adddf3>
 800b514:	f04f 3bff 	mov.w	fp, #4294967295
 800b518:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b51c:	e7c4      	b.n	800b4a8 <__ieee754_rem_pio2+0x80>
 800b51e:	a386      	add	r3, pc, #536	; (adr r3, 800b738 <__ieee754_rem_pio2+0x310>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 fed2 	bl	80002cc <__adddf3>
 800b528:	a385      	add	r3, pc, #532	; (adr r3, 800b740 <__ieee754_rem_pio2+0x318>)
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	4604      	mov	r4, r0
 800b530:	460d      	mov	r5, r1
 800b532:	f7f4 fecb 	bl	80002cc <__adddf3>
 800b536:	4602      	mov	r2, r0
 800b538:	460b      	mov	r3, r1
 800b53a:	e9ca 2300 	strd	r2, r3, [sl]
 800b53e:	4620      	mov	r0, r4
 800b540:	4629      	mov	r1, r5
 800b542:	f7f4 fec1 	bl	80002c8 <__aeabi_dsub>
 800b546:	a37e      	add	r3, pc, #504	; (adr r3, 800b740 <__ieee754_rem_pio2+0x318>)
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	e7e0      	b.n	800b510 <__ieee754_rem_pio2+0xe8>
 800b54e:	4b87      	ldr	r3, [pc, #540]	; (800b76c <__ieee754_rem_pio2+0x344>)
 800b550:	4598      	cmp	r8, r3
 800b552:	f300 80d9 	bgt.w	800b708 <__ieee754_rem_pio2+0x2e0>
 800b556:	f000 ff2d 	bl	800c3b4 <fabs>
 800b55a:	ec55 4b10 	vmov	r4, r5, d0
 800b55e:	ee10 0a10 	vmov	r0, s0
 800b562:	a379      	add	r3, pc, #484	; (adr r3, 800b748 <__ieee754_rem_pio2+0x320>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	4629      	mov	r1, r5
 800b56a:	f7f5 f865 	bl	8000638 <__aeabi_dmul>
 800b56e:	4b80      	ldr	r3, [pc, #512]	; (800b770 <__ieee754_rem_pio2+0x348>)
 800b570:	2200      	movs	r2, #0
 800b572:	f7f4 feab 	bl	80002cc <__adddf3>
 800b576:	f7f5 fb0f 	bl	8000b98 <__aeabi_d2iz>
 800b57a:	4683      	mov	fp, r0
 800b57c:	f7f4 fff2 	bl	8000564 <__aeabi_i2d>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	ec43 2b18 	vmov	d8, r2, r3
 800b588:	a367      	add	r3, pc, #412	; (adr r3, 800b728 <__ieee754_rem_pio2+0x300>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f5 f853 	bl	8000638 <__aeabi_dmul>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4620      	mov	r0, r4
 800b598:	4629      	mov	r1, r5
 800b59a:	f7f4 fe95 	bl	80002c8 <__aeabi_dsub>
 800b59e:	a364      	add	r3, pc, #400	; (adr r3, 800b730 <__ieee754_rem_pio2+0x308>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	460f      	mov	r7, r1
 800b5a8:	ec51 0b18 	vmov	r0, r1, d8
 800b5ac:	f7f5 f844 	bl	8000638 <__aeabi_dmul>
 800b5b0:	f1bb 0f1f 	cmp.w	fp, #31
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	dc0d      	bgt.n	800b5d6 <__ieee754_rem_pio2+0x1ae>
 800b5ba:	4b6e      	ldr	r3, [pc, #440]	; (800b774 <__ieee754_rem_pio2+0x34c>)
 800b5bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c4:	4543      	cmp	r3, r8
 800b5c6:	d006      	beq.n	800b5d6 <__ieee754_rem_pio2+0x1ae>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	f7f4 fe7a 	bl	80002c8 <__aeabi_dsub>
 800b5d4:	e00f      	b.n	800b5f6 <__ieee754_rem_pio2+0x1ce>
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	f7f4 fe73 	bl	80002c8 <__aeabi_dsub>
 800b5e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b5f0:	f1b8 0f10 	cmp.w	r8, #16
 800b5f4:	dc02      	bgt.n	800b5fc <__ieee754_rem_pio2+0x1d4>
 800b5f6:	e9ca 0100 	strd	r0, r1, [sl]
 800b5fa:	e039      	b.n	800b670 <__ieee754_rem_pio2+0x248>
 800b5fc:	a34e      	add	r3, pc, #312	; (adr r3, 800b738 <__ieee754_rem_pio2+0x310>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	ec51 0b18 	vmov	r0, r1, d8
 800b606:	f7f5 f817 	bl	8000638 <__aeabi_dmul>
 800b60a:	4604      	mov	r4, r0
 800b60c:	460d      	mov	r5, r1
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f7f4 fe57 	bl	80002c8 <__aeabi_dsub>
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	4680      	mov	r8, r0
 800b620:	4689      	mov	r9, r1
 800b622:	4630      	mov	r0, r6
 800b624:	4639      	mov	r1, r7
 800b626:	f7f4 fe4f 	bl	80002c8 <__aeabi_dsub>
 800b62a:	4622      	mov	r2, r4
 800b62c:	462b      	mov	r3, r5
 800b62e:	f7f4 fe4b 	bl	80002c8 <__aeabi_dsub>
 800b632:	a343      	add	r3, pc, #268	; (adr r3, 800b740 <__ieee754_rem_pio2+0x318>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	ec51 0b18 	vmov	r0, r1, d8
 800b640:	f7f4 fffa 	bl	8000638 <__aeabi_dmul>
 800b644:	4622      	mov	r2, r4
 800b646:	462b      	mov	r3, r5
 800b648:	f7f4 fe3e 	bl	80002c8 <__aeabi_dsub>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4604      	mov	r4, r0
 800b652:	460d      	mov	r5, r1
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7f4 fe36 	bl	80002c8 <__aeabi_dsub>
 800b65c:	9a03      	ldr	r2, [sp, #12]
 800b65e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	2b31      	cmp	r3, #49	; 0x31
 800b666:	dc24      	bgt.n	800b6b2 <__ieee754_rem_pio2+0x28a>
 800b668:	e9ca 0100 	strd	r0, r1, [sl]
 800b66c:	4646      	mov	r6, r8
 800b66e:	464f      	mov	r7, r9
 800b670:	e9da 8900 	ldrd	r8, r9, [sl]
 800b674:	4630      	mov	r0, r6
 800b676:	4642      	mov	r2, r8
 800b678:	464b      	mov	r3, r9
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f4 fe24 	bl	80002c8 <__aeabi_dsub>
 800b680:	462b      	mov	r3, r5
 800b682:	4622      	mov	r2, r4
 800b684:	f7f4 fe20 	bl	80002c8 <__aeabi_dsub>
 800b688:	9b02      	ldr	r3, [sp, #8]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b690:	f6bf af0a 	bge.w	800b4a8 <__ieee754_rem_pio2+0x80>
 800b694:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b698:	f8ca 3004 	str.w	r3, [sl, #4]
 800b69c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6a0:	f8ca 8000 	str.w	r8, [sl]
 800b6a4:	f8ca 0008 	str.w	r0, [sl, #8]
 800b6a8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b6ac:	f1cb 0b00 	rsb	fp, fp, #0
 800b6b0:	e6fa      	b.n	800b4a8 <__ieee754_rem_pio2+0x80>
 800b6b2:	a327      	add	r3, pc, #156	; (adr r3, 800b750 <__ieee754_rem_pio2+0x328>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	ec51 0b18 	vmov	r0, r1, d8
 800b6bc:	f7f4 ffbc 	bl	8000638 <__aeabi_dmul>
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	f7f4 fdfc 	bl	80002c8 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	460f      	mov	r7, r1
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f4 fdf4 	bl	80002c8 <__aeabi_dsub>
 800b6e0:	4622      	mov	r2, r4
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	f7f4 fdf0 	bl	80002c8 <__aeabi_dsub>
 800b6e8:	a31b      	add	r3, pc, #108	; (adr r3, 800b758 <__ieee754_rem_pio2+0x330>)
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	ec51 0b18 	vmov	r0, r1, d8
 800b6f6:	f7f4 ff9f 	bl	8000638 <__aeabi_dmul>
 800b6fa:	4622      	mov	r2, r4
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	f7f4 fde3 	bl	80002c8 <__aeabi_dsub>
 800b702:	4604      	mov	r4, r0
 800b704:	460d      	mov	r5, r1
 800b706:	e75f      	b.n	800b5c8 <__ieee754_rem_pio2+0x1a0>
 800b708:	4b1b      	ldr	r3, [pc, #108]	; (800b778 <__ieee754_rem_pio2+0x350>)
 800b70a:	4598      	cmp	r8, r3
 800b70c:	dd36      	ble.n	800b77c <__ieee754_rem_pio2+0x354>
 800b70e:	ee10 2a10 	vmov	r2, s0
 800b712:	462b      	mov	r3, r5
 800b714:	4620      	mov	r0, r4
 800b716:	4629      	mov	r1, r5
 800b718:	f7f4 fdd6 	bl	80002c8 <__aeabi_dsub>
 800b71c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b720:	e9ca 0100 	strd	r0, r1, [sl]
 800b724:	e694      	b.n	800b450 <__ieee754_rem_pio2+0x28>
 800b726:	bf00      	nop
 800b728:	54400000 	.word	0x54400000
 800b72c:	3ff921fb 	.word	0x3ff921fb
 800b730:	1a626331 	.word	0x1a626331
 800b734:	3dd0b461 	.word	0x3dd0b461
 800b738:	1a600000 	.word	0x1a600000
 800b73c:	3dd0b461 	.word	0x3dd0b461
 800b740:	2e037073 	.word	0x2e037073
 800b744:	3ba3198a 	.word	0x3ba3198a
 800b748:	6dc9c883 	.word	0x6dc9c883
 800b74c:	3fe45f30 	.word	0x3fe45f30
 800b750:	2e000000 	.word	0x2e000000
 800b754:	3ba3198a 	.word	0x3ba3198a
 800b758:	252049c1 	.word	0x252049c1
 800b75c:	397b839a 	.word	0x397b839a
 800b760:	3fe921fb 	.word	0x3fe921fb
 800b764:	4002d97b 	.word	0x4002d97b
 800b768:	3ff921fb 	.word	0x3ff921fb
 800b76c:	413921fb 	.word	0x413921fb
 800b770:	3fe00000 	.word	0x3fe00000
 800b774:	0800c908 	.word	0x0800c908
 800b778:	7fefffff 	.word	0x7fefffff
 800b77c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b780:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b784:	ee10 0a10 	vmov	r0, s0
 800b788:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b78c:	ee10 6a10 	vmov	r6, s0
 800b790:	460f      	mov	r7, r1
 800b792:	f7f5 fa01 	bl	8000b98 <__aeabi_d2iz>
 800b796:	f7f4 fee5 	bl	8000564 <__aeabi_i2d>
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7a6:	f7f4 fd8f 	bl	80002c8 <__aeabi_dsub>
 800b7aa:	4b23      	ldr	r3, [pc, #140]	; (800b838 <__ieee754_rem_pio2+0x410>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f7f4 ff43 	bl	8000638 <__aeabi_dmul>
 800b7b2:	460f      	mov	r7, r1
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	f7f5 f9ef 	bl	8000b98 <__aeabi_d2iz>
 800b7ba:	f7f4 fed3 	bl	8000564 <__aeabi_i2d>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7ca:	f7f4 fd7d 	bl	80002c8 <__aeabi_dsub>
 800b7ce:	4b1a      	ldr	r3, [pc, #104]	; (800b838 <__ieee754_rem_pio2+0x410>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f7f4 ff31 	bl	8000638 <__aeabi_dmul>
 800b7d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7da:	ad04      	add	r5, sp, #16
 800b7dc:	f04f 0803 	mov.w	r8, #3
 800b7e0:	46a9      	mov	r9, r5
 800b7e2:	2600      	movs	r6, #0
 800b7e4:	2700      	movs	r7, #0
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b7ee:	46c3      	mov	fp, r8
 800b7f0:	3d08      	subs	r5, #8
 800b7f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7f6:	f7f5 f987 	bl	8000b08 <__aeabi_dcmpeq>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d1f3      	bne.n	800b7e6 <__ieee754_rem_pio2+0x3be>
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <__ieee754_rem_pio2+0x414>)
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	2302      	movs	r3, #2
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	4622      	mov	r2, r4
 800b808:	465b      	mov	r3, fp
 800b80a:	4651      	mov	r1, sl
 800b80c:	4648      	mov	r0, r9
 800b80e:	f000 f993 	bl	800bb38 <__kernel_rem_pio2>
 800b812:	9b02      	ldr	r3, [sp, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	4683      	mov	fp, r0
 800b818:	f6bf ae46 	bge.w	800b4a8 <__ieee754_rem_pio2+0x80>
 800b81c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b820:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b824:	e9ca 2300 	strd	r2, r3, [sl]
 800b828:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b830:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b834:	e73a      	b.n	800b6ac <__ieee754_rem_pio2+0x284>
 800b836:	bf00      	nop
 800b838:	41700000 	.word	0x41700000
 800b83c:	0800c988 	.word	0x0800c988

0800b840 <__ieee754_sqrt>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	ec55 4b10 	vmov	r4, r5, d0
 800b848:	4e55      	ldr	r6, [pc, #340]	; (800b9a0 <__ieee754_sqrt+0x160>)
 800b84a:	43ae      	bics	r6, r5
 800b84c:	ee10 0a10 	vmov	r0, s0
 800b850:	ee10 3a10 	vmov	r3, s0
 800b854:	462a      	mov	r2, r5
 800b856:	4629      	mov	r1, r5
 800b858:	d110      	bne.n	800b87c <__ieee754_sqrt+0x3c>
 800b85a:	ee10 2a10 	vmov	r2, s0
 800b85e:	462b      	mov	r3, r5
 800b860:	f7f4 feea 	bl	8000638 <__aeabi_dmul>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4620      	mov	r0, r4
 800b86a:	4629      	mov	r1, r5
 800b86c:	f7f4 fd2e 	bl	80002cc <__adddf3>
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	ec45 4b10 	vmov	d0, r4, r5
 800b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87c:	2d00      	cmp	r5, #0
 800b87e:	dc10      	bgt.n	800b8a2 <__ieee754_sqrt+0x62>
 800b880:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b884:	4330      	orrs	r0, r6
 800b886:	d0f5      	beq.n	800b874 <__ieee754_sqrt+0x34>
 800b888:	b15d      	cbz	r5, 800b8a2 <__ieee754_sqrt+0x62>
 800b88a:	ee10 2a10 	vmov	r2, s0
 800b88e:	462b      	mov	r3, r5
 800b890:	ee10 0a10 	vmov	r0, s0
 800b894:	f7f4 fd18 	bl	80002c8 <__aeabi_dsub>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	f7f4 fff6 	bl	800088c <__aeabi_ddiv>
 800b8a0:	e7e6      	b.n	800b870 <__ieee754_sqrt+0x30>
 800b8a2:	1512      	asrs	r2, r2, #20
 800b8a4:	d074      	beq.n	800b990 <__ieee754_sqrt+0x150>
 800b8a6:	07d4      	lsls	r4, r2, #31
 800b8a8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b8ac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b8b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b8b4:	bf5e      	ittt	pl
 800b8b6:	0fda      	lsrpl	r2, r3, #31
 800b8b8:	005b      	lslpl	r3, r3, #1
 800b8ba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b8be:	2400      	movs	r4, #0
 800b8c0:	0fda      	lsrs	r2, r3, #31
 800b8c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b8c6:	107f      	asrs	r7, r7, #1
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	2516      	movs	r5, #22
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b8d2:	1886      	adds	r6, r0, r2
 800b8d4:	428e      	cmp	r6, r1
 800b8d6:	bfde      	ittt	le
 800b8d8:	1b89      	suble	r1, r1, r6
 800b8da:	18b0      	addle	r0, r6, r2
 800b8dc:	18a4      	addle	r4, r4, r2
 800b8de:	0049      	lsls	r1, r1, #1
 800b8e0:	3d01      	subs	r5, #1
 800b8e2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b8e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b8ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b8ee:	d1f0      	bne.n	800b8d2 <__ieee754_sqrt+0x92>
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	f04f 0e20 	mov.w	lr, #32
 800b8f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b8fa:	4281      	cmp	r1, r0
 800b8fc:	eb06 0c05 	add.w	ip, r6, r5
 800b900:	dc02      	bgt.n	800b908 <__ieee754_sqrt+0xc8>
 800b902:	d113      	bne.n	800b92c <__ieee754_sqrt+0xec>
 800b904:	459c      	cmp	ip, r3
 800b906:	d811      	bhi.n	800b92c <__ieee754_sqrt+0xec>
 800b908:	f1bc 0f00 	cmp.w	ip, #0
 800b90c:	eb0c 0506 	add.w	r5, ip, r6
 800b910:	da43      	bge.n	800b99a <__ieee754_sqrt+0x15a>
 800b912:	2d00      	cmp	r5, #0
 800b914:	db41      	blt.n	800b99a <__ieee754_sqrt+0x15a>
 800b916:	f100 0801 	add.w	r8, r0, #1
 800b91a:	1a09      	subs	r1, r1, r0
 800b91c:	459c      	cmp	ip, r3
 800b91e:	bf88      	it	hi
 800b920:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b924:	eba3 030c 	sub.w	r3, r3, ip
 800b928:	4432      	add	r2, r6
 800b92a:	4640      	mov	r0, r8
 800b92c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b930:	f1be 0e01 	subs.w	lr, lr, #1
 800b934:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b938:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b93c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b940:	d1db      	bne.n	800b8fa <__ieee754_sqrt+0xba>
 800b942:	430b      	orrs	r3, r1
 800b944:	d006      	beq.n	800b954 <__ieee754_sqrt+0x114>
 800b946:	1c50      	adds	r0, r2, #1
 800b948:	bf13      	iteet	ne
 800b94a:	3201      	addne	r2, #1
 800b94c:	3401      	addeq	r4, #1
 800b94e:	4672      	moveq	r2, lr
 800b950:	f022 0201 	bicne.w	r2, r2, #1
 800b954:	1063      	asrs	r3, r4, #1
 800b956:	0852      	lsrs	r2, r2, #1
 800b958:	07e1      	lsls	r1, r4, #31
 800b95a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b95e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b962:	bf48      	it	mi
 800b964:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b968:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b96c:	4614      	mov	r4, r2
 800b96e:	e781      	b.n	800b874 <__ieee754_sqrt+0x34>
 800b970:	0ad9      	lsrs	r1, r3, #11
 800b972:	3815      	subs	r0, #21
 800b974:	055b      	lsls	r3, r3, #21
 800b976:	2900      	cmp	r1, #0
 800b978:	d0fa      	beq.n	800b970 <__ieee754_sqrt+0x130>
 800b97a:	02cd      	lsls	r5, r1, #11
 800b97c:	d50a      	bpl.n	800b994 <__ieee754_sqrt+0x154>
 800b97e:	f1c2 0420 	rsb	r4, r2, #32
 800b982:	fa23 f404 	lsr.w	r4, r3, r4
 800b986:	1e55      	subs	r5, r2, #1
 800b988:	4093      	lsls	r3, r2
 800b98a:	4321      	orrs	r1, r4
 800b98c:	1b42      	subs	r2, r0, r5
 800b98e:	e78a      	b.n	800b8a6 <__ieee754_sqrt+0x66>
 800b990:	4610      	mov	r0, r2
 800b992:	e7f0      	b.n	800b976 <__ieee754_sqrt+0x136>
 800b994:	0049      	lsls	r1, r1, #1
 800b996:	3201      	adds	r2, #1
 800b998:	e7ef      	b.n	800b97a <__ieee754_sqrt+0x13a>
 800b99a:	4680      	mov	r8, r0
 800b99c:	e7bd      	b.n	800b91a <__ieee754_sqrt+0xda>
 800b99e:	bf00      	nop
 800b9a0:	7ff00000 	.word	0x7ff00000
 800b9a4:	00000000 	.word	0x00000000

0800b9a8 <__kernel_cos>:
 800b9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	ec57 6b10 	vmov	r6, r7, d0
 800b9b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b9b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b9b8:	ed8d 1b00 	vstr	d1, [sp]
 800b9bc:	da07      	bge.n	800b9ce <__kernel_cos+0x26>
 800b9be:	ee10 0a10 	vmov	r0, s0
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f5 f8e8 	bl	8000b98 <__aeabi_d2iz>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	f000 8088 	beq.w	800bade <__kernel_cos+0x136>
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	463b      	mov	r3, r7
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	f7f4 fe2f 	bl	8000638 <__aeabi_dmul>
 800b9da:	4b51      	ldr	r3, [pc, #324]	; (800bb20 <__kernel_cos+0x178>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	f7f4 fe29 	bl	8000638 <__aeabi_dmul>
 800b9e6:	a340      	add	r3, pc, #256	; (adr r3, 800bae8 <__kernel_cos+0x140>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	468b      	mov	fp, r1
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	f7f4 fe20 	bl	8000638 <__aeabi_dmul>
 800b9f8:	a33d      	add	r3, pc, #244	; (adr r3, 800baf0 <__kernel_cos+0x148>)
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	f7f4 fc65 	bl	80002cc <__adddf3>
 800ba02:	4622      	mov	r2, r4
 800ba04:	462b      	mov	r3, r5
 800ba06:	f7f4 fe17 	bl	8000638 <__aeabi_dmul>
 800ba0a:	a33b      	add	r3, pc, #236	; (adr r3, 800baf8 <__kernel_cos+0x150>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fc5a 	bl	80002c8 <__aeabi_dsub>
 800ba14:	4622      	mov	r2, r4
 800ba16:	462b      	mov	r3, r5
 800ba18:	f7f4 fe0e 	bl	8000638 <__aeabi_dmul>
 800ba1c:	a338      	add	r3, pc, #224	; (adr r3, 800bb00 <__kernel_cos+0x158>)
 800ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba22:	f7f4 fc53 	bl	80002cc <__adddf3>
 800ba26:	4622      	mov	r2, r4
 800ba28:	462b      	mov	r3, r5
 800ba2a:	f7f4 fe05 	bl	8000638 <__aeabi_dmul>
 800ba2e:	a336      	add	r3, pc, #216	; (adr r3, 800bb08 <__kernel_cos+0x160>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f4 fc48 	bl	80002c8 <__aeabi_dsub>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	f7f4 fdfc 	bl	8000638 <__aeabi_dmul>
 800ba40:	a333      	add	r3, pc, #204	; (adr r3, 800bb10 <__kernel_cos+0x168>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fc41 	bl	80002cc <__adddf3>
 800ba4a:	4622      	mov	r2, r4
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	f7f4 fdf3 	bl	8000638 <__aeabi_dmul>
 800ba52:	4622      	mov	r2, r4
 800ba54:	462b      	mov	r3, r5
 800ba56:	f7f4 fdef 	bl	8000638 <__aeabi_dmul>
 800ba5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba5e:	4604      	mov	r4, r0
 800ba60:	460d      	mov	r5, r1
 800ba62:	4630      	mov	r0, r6
 800ba64:	4639      	mov	r1, r7
 800ba66:	f7f4 fde7 	bl	8000638 <__aeabi_dmul>
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4620      	mov	r0, r4
 800ba72:	f7f4 fc29 	bl	80002c8 <__aeabi_dsub>
 800ba76:	4b2b      	ldr	r3, [pc, #172]	; (800bb24 <__kernel_cos+0x17c>)
 800ba78:	4598      	cmp	r8, r3
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	460f      	mov	r7, r1
 800ba7e:	dc10      	bgt.n	800baa2 <__kernel_cos+0xfa>
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	4650      	mov	r0, sl
 800ba86:	4659      	mov	r1, fp
 800ba88:	f7f4 fc1e 	bl	80002c8 <__aeabi_dsub>
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4926      	ldr	r1, [pc, #152]	; (800bb28 <__kernel_cos+0x180>)
 800ba90:	4602      	mov	r2, r0
 800ba92:	2000      	movs	r0, #0
 800ba94:	f7f4 fc18 	bl	80002c8 <__aeabi_dsub>
 800ba98:	ec41 0b10 	vmov	d0, r0, r1
 800ba9c:	b003      	add	sp, #12
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	4b22      	ldr	r3, [pc, #136]	; (800bb2c <__kernel_cos+0x184>)
 800baa4:	4920      	ldr	r1, [pc, #128]	; (800bb28 <__kernel_cos+0x180>)
 800baa6:	4598      	cmp	r8, r3
 800baa8:	bfcc      	ite	gt
 800baaa:	4d21      	ldrgt	r5, [pc, #132]	; (800bb30 <__kernel_cos+0x188>)
 800baac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bab0:	2400      	movs	r4, #0
 800bab2:	4622      	mov	r2, r4
 800bab4:	462b      	mov	r3, r5
 800bab6:	2000      	movs	r0, #0
 800bab8:	f7f4 fc06 	bl	80002c8 <__aeabi_dsub>
 800babc:	4622      	mov	r2, r4
 800babe:	4680      	mov	r8, r0
 800bac0:	4689      	mov	r9, r1
 800bac2:	462b      	mov	r3, r5
 800bac4:	4650      	mov	r0, sl
 800bac6:	4659      	mov	r1, fp
 800bac8:	f7f4 fbfe 	bl	80002c8 <__aeabi_dsub>
 800bacc:	4632      	mov	r2, r6
 800bace:	463b      	mov	r3, r7
 800bad0:	f7f4 fbfa 	bl	80002c8 <__aeabi_dsub>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4640      	mov	r0, r8
 800bada:	4649      	mov	r1, r9
 800badc:	e7da      	b.n	800ba94 <__kernel_cos+0xec>
 800bade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bb18 <__kernel_cos+0x170>
 800bae2:	e7db      	b.n	800ba9c <__kernel_cos+0xf4>
 800bae4:	f3af 8000 	nop.w
 800bae8:	be8838d4 	.word	0xbe8838d4
 800baec:	bda8fae9 	.word	0xbda8fae9
 800baf0:	bdb4b1c4 	.word	0xbdb4b1c4
 800baf4:	3e21ee9e 	.word	0x3e21ee9e
 800baf8:	809c52ad 	.word	0x809c52ad
 800bafc:	3e927e4f 	.word	0x3e927e4f
 800bb00:	19cb1590 	.word	0x19cb1590
 800bb04:	3efa01a0 	.word	0x3efa01a0
 800bb08:	16c15177 	.word	0x16c15177
 800bb0c:	3f56c16c 	.word	0x3f56c16c
 800bb10:	5555554c 	.word	0x5555554c
 800bb14:	3fa55555 	.word	0x3fa55555
 800bb18:	00000000 	.word	0x00000000
 800bb1c:	3ff00000 	.word	0x3ff00000
 800bb20:	3fe00000 	.word	0x3fe00000
 800bb24:	3fd33332 	.word	0x3fd33332
 800bb28:	3ff00000 	.word	0x3ff00000
 800bb2c:	3fe90000 	.word	0x3fe90000
 800bb30:	3fd20000 	.word	0x3fd20000
 800bb34:	00000000 	.word	0x00000000

0800bb38 <__kernel_rem_pio2>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	ed2d 8b02 	vpush	{d8}
 800bb40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bb44:	f112 0f14 	cmn.w	r2, #20
 800bb48:	9308      	str	r3, [sp, #32]
 800bb4a:	9101      	str	r1, [sp, #4]
 800bb4c:	4bc4      	ldr	r3, [pc, #784]	; (800be60 <__kernel_rem_pio2+0x328>)
 800bb4e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bb50:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb56:	9302      	str	r3, [sp, #8]
 800bb58:	9b08      	ldr	r3, [sp, #32]
 800bb5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb5e:	bfa8      	it	ge
 800bb60:	1ed4      	subge	r4, r2, #3
 800bb62:	9306      	str	r3, [sp, #24]
 800bb64:	bfb2      	itee	lt
 800bb66:	2400      	movlt	r4, #0
 800bb68:	2318      	movge	r3, #24
 800bb6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800bb6e:	f06f 0317 	mvn.w	r3, #23
 800bb72:	fb04 3303 	mla	r3, r4, r3, r3
 800bb76:	eb03 0a02 	add.w	sl, r3, r2
 800bb7a:	9b02      	ldr	r3, [sp, #8]
 800bb7c:	9a06      	ldr	r2, [sp, #24]
 800bb7e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800be50 <__kernel_rem_pio2+0x318>
 800bb82:	eb03 0802 	add.w	r8, r3, r2
 800bb86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bb88:	1aa7      	subs	r7, r4, r2
 800bb8a:	ae22      	add	r6, sp, #136	; 0x88
 800bb8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bb90:	2500      	movs	r5, #0
 800bb92:	4545      	cmp	r5, r8
 800bb94:	dd13      	ble.n	800bbbe <__kernel_rem_pio2+0x86>
 800bb96:	9b08      	ldr	r3, [sp, #32]
 800bb98:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800be50 <__kernel_rem_pio2+0x318>
 800bb9c:	aa22      	add	r2, sp, #136	; 0x88
 800bb9e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bba2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bba6:	f04f 0800 	mov.w	r8, #0
 800bbaa:	9b02      	ldr	r3, [sp, #8]
 800bbac:	4598      	cmp	r8, r3
 800bbae:	dc2f      	bgt.n	800bc10 <__kernel_rem_pio2+0xd8>
 800bbb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bbb4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bbb8:	462f      	mov	r7, r5
 800bbba:	2600      	movs	r6, #0
 800bbbc:	e01b      	b.n	800bbf6 <__kernel_rem_pio2+0xbe>
 800bbbe:	42ef      	cmn	r7, r5
 800bbc0:	d407      	bmi.n	800bbd2 <__kernel_rem_pio2+0x9a>
 800bbc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bbc6:	f7f4 fccd 	bl	8000564 <__aeabi_i2d>
 800bbca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bbce:	3501      	adds	r5, #1
 800bbd0:	e7df      	b.n	800bb92 <__kernel_rem_pio2+0x5a>
 800bbd2:	ec51 0b18 	vmov	r0, r1, d8
 800bbd6:	e7f8      	b.n	800bbca <__kernel_rem_pio2+0x92>
 800bbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bbe0:	f7f4 fd2a 	bl	8000638 <__aeabi_dmul>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbec:	f7f4 fb6e 	bl	80002cc <__adddf3>
 800bbf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbf4:	3601      	adds	r6, #1
 800bbf6:	9b06      	ldr	r3, [sp, #24]
 800bbf8:	429e      	cmp	r6, r3
 800bbfa:	f1a7 0708 	sub.w	r7, r7, #8
 800bbfe:	ddeb      	ble.n	800bbd8 <__kernel_rem_pio2+0xa0>
 800bc00:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bc04:	f108 0801 	add.w	r8, r8, #1
 800bc08:	ecab 7b02 	vstmia	fp!, {d7}
 800bc0c:	3508      	adds	r5, #8
 800bc0e:	e7cc      	b.n	800bbaa <__kernel_rem_pio2+0x72>
 800bc10:	9b02      	ldr	r3, [sp, #8]
 800bc12:	aa0e      	add	r2, sp, #56	; 0x38
 800bc14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc18:	930d      	str	r3, [sp, #52]	; 0x34
 800bc1a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bc1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bc20:	9c02      	ldr	r4, [sp, #8]
 800bc22:	930c      	str	r3, [sp, #48]	; 0x30
 800bc24:	00e3      	lsls	r3, r4, #3
 800bc26:	930a      	str	r3, [sp, #40]	; 0x28
 800bc28:	ab9a      	add	r3, sp, #616	; 0x268
 800bc2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc2e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bc32:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bc36:	ab72      	add	r3, sp, #456	; 0x1c8
 800bc38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bc3c:	46c3      	mov	fp, r8
 800bc3e:	46a1      	mov	r9, r4
 800bc40:	f1b9 0f00 	cmp.w	r9, #0
 800bc44:	f1a5 0508 	sub.w	r5, r5, #8
 800bc48:	dc77      	bgt.n	800bd3a <__kernel_rem_pio2+0x202>
 800bc4a:	ec47 6b10 	vmov	d0, r6, r7
 800bc4e:	4650      	mov	r0, sl
 800bc50:	f000 fc46 	bl	800c4e0 <scalbn>
 800bc54:	ec57 6b10 	vmov	r6, r7, d0
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bc5e:	ee10 0a10 	vmov	r0, s0
 800bc62:	4639      	mov	r1, r7
 800bc64:	f7f4 fce8 	bl	8000638 <__aeabi_dmul>
 800bc68:	ec41 0b10 	vmov	d0, r0, r1
 800bc6c:	f000 fbb8 	bl	800c3e0 <floor>
 800bc70:	4b7c      	ldr	r3, [pc, #496]	; (800be64 <__kernel_rem_pio2+0x32c>)
 800bc72:	ec51 0b10 	vmov	r0, r1, d0
 800bc76:	2200      	movs	r2, #0
 800bc78:	f7f4 fcde 	bl	8000638 <__aeabi_dmul>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4630      	mov	r0, r6
 800bc82:	4639      	mov	r1, r7
 800bc84:	f7f4 fb20 	bl	80002c8 <__aeabi_dsub>
 800bc88:	460f      	mov	r7, r1
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	f7f4 ff84 	bl	8000b98 <__aeabi_d2iz>
 800bc90:	9004      	str	r0, [sp, #16]
 800bc92:	f7f4 fc67 	bl	8000564 <__aeabi_i2d>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	f7f4 fb13 	bl	80002c8 <__aeabi_dsub>
 800bca2:	f1ba 0f00 	cmp.w	sl, #0
 800bca6:	4606      	mov	r6, r0
 800bca8:	460f      	mov	r7, r1
 800bcaa:	dd6d      	ble.n	800bd88 <__kernel_rem_pio2+0x250>
 800bcac:	1e62      	subs	r2, r4, #1
 800bcae:	ab0e      	add	r3, sp, #56	; 0x38
 800bcb0:	9d04      	ldr	r5, [sp, #16]
 800bcb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bcb6:	f1ca 0118 	rsb	r1, sl, #24
 800bcba:	fa40 f301 	asr.w	r3, r0, r1
 800bcbe:	441d      	add	r5, r3
 800bcc0:	408b      	lsls	r3, r1
 800bcc2:	1ac0      	subs	r0, r0, r3
 800bcc4:	ab0e      	add	r3, sp, #56	; 0x38
 800bcc6:	9504      	str	r5, [sp, #16]
 800bcc8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bccc:	f1ca 0317 	rsb	r3, sl, #23
 800bcd0:	fa40 fb03 	asr.w	fp, r0, r3
 800bcd4:	f1bb 0f00 	cmp.w	fp, #0
 800bcd8:	dd65      	ble.n	800bda6 <__kernel_rem_pio2+0x26e>
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	3301      	adds	r3, #1
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	4615      	mov	r5, r2
 800bce4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bce8:	4294      	cmp	r4, r2
 800bcea:	f300 809c 	bgt.w	800be26 <__kernel_rem_pio2+0x2ee>
 800bcee:	f1ba 0f00 	cmp.w	sl, #0
 800bcf2:	dd07      	ble.n	800bd04 <__kernel_rem_pio2+0x1cc>
 800bcf4:	f1ba 0f01 	cmp.w	sl, #1
 800bcf8:	f000 80c0 	beq.w	800be7c <__kernel_rem_pio2+0x344>
 800bcfc:	f1ba 0f02 	cmp.w	sl, #2
 800bd00:	f000 80c6 	beq.w	800be90 <__kernel_rem_pio2+0x358>
 800bd04:	f1bb 0f02 	cmp.w	fp, #2
 800bd08:	d14d      	bne.n	800bda6 <__kernel_rem_pio2+0x26e>
 800bd0a:	4632      	mov	r2, r6
 800bd0c:	463b      	mov	r3, r7
 800bd0e:	4956      	ldr	r1, [pc, #344]	; (800be68 <__kernel_rem_pio2+0x330>)
 800bd10:	2000      	movs	r0, #0
 800bd12:	f7f4 fad9 	bl	80002c8 <__aeabi_dsub>
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	2d00      	cmp	r5, #0
 800bd1c:	d043      	beq.n	800bda6 <__kernel_rem_pio2+0x26e>
 800bd1e:	4650      	mov	r0, sl
 800bd20:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800be58 <__kernel_rem_pio2+0x320>
 800bd24:	f000 fbdc 	bl	800c4e0 <scalbn>
 800bd28:	4630      	mov	r0, r6
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	ec53 2b10 	vmov	r2, r3, d0
 800bd30:	f7f4 faca 	bl	80002c8 <__aeabi_dsub>
 800bd34:	4606      	mov	r6, r0
 800bd36:	460f      	mov	r7, r1
 800bd38:	e035      	b.n	800bda6 <__kernel_rem_pio2+0x26e>
 800bd3a:	4b4c      	ldr	r3, [pc, #304]	; (800be6c <__kernel_rem_pio2+0x334>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 fc79 	bl	8000638 <__aeabi_dmul>
 800bd46:	f7f4 ff27 	bl	8000b98 <__aeabi_d2iz>
 800bd4a:	f7f4 fc0b 	bl	8000564 <__aeabi_i2d>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	ec43 2b18 	vmov	d8, r2, r3
 800bd56:	4b46      	ldr	r3, [pc, #280]	; (800be70 <__kernel_rem_pio2+0x338>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f7f4 fc6d 	bl	8000638 <__aeabi_dmul>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4630      	mov	r0, r6
 800bd64:	4639      	mov	r1, r7
 800bd66:	f7f4 faaf 	bl	80002c8 <__aeabi_dsub>
 800bd6a:	f7f4 ff15 	bl	8000b98 <__aeabi_d2iz>
 800bd6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd72:	f84b 0b04 	str.w	r0, [fp], #4
 800bd76:	ec51 0b18 	vmov	r0, r1, d8
 800bd7a:	f7f4 faa7 	bl	80002cc <__adddf3>
 800bd7e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd82:	4606      	mov	r6, r0
 800bd84:	460f      	mov	r7, r1
 800bd86:	e75b      	b.n	800bc40 <__kernel_rem_pio2+0x108>
 800bd88:	d106      	bne.n	800bd98 <__kernel_rem_pio2+0x260>
 800bd8a:	1e63      	subs	r3, r4, #1
 800bd8c:	aa0e      	add	r2, sp, #56	; 0x38
 800bd8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bd92:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bd96:	e79d      	b.n	800bcd4 <__kernel_rem_pio2+0x19c>
 800bd98:	4b36      	ldr	r3, [pc, #216]	; (800be74 <__kernel_rem_pio2+0x33c>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f7f4 fed2 	bl	8000b44 <__aeabi_dcmpge>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d13d      	bne.n	800be20 <__kernel_rem_pio2+0x2e8>
 800bda4:	4683      	mov	fp, r0
 800bda6:	2200      	movs	r2, #0
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4630      	mov	r0, r6
 800bdac:	4639      	mov	r1, r7
 800bdae:	f7f4 feab 	bl	8000b08 <__aeabi_dcmpeq>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	f000 80c0 	beq.w	800bf38 <__kernel_rem_pio2+0x400>
 800bdb8:	1e65      	subs	r5, r4, #1
 800bdba:	462b      	mov	r3, r5
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	9902      	ldr	r1, [sp, #8]
 800bdc0:	428b      	cmp	r3, r1
 800bdc2:	da6c      	bge.n	800be9e <__kernel_rem_pio2+0x366>
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	f000 8089 	beq.w	800bedc <__kernel_rem_pio2+0x3a4>
 800bdca:	ab0e      	add	r3, sp, #56	; 0x38
 800bdcc:	f1aa 0a18 	sub.w	sl, sl, #24
 800bdd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 80ad 	beq.w	800bf34 <__kernel_rem_pio2+0x3fc>
 800bdda:	4650      	mov	r0, sl
 800bddc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800be58 <__kernel_rem_pio2+0x320>
 800bde0:	f000 fb7e 	bl	800c4e0 <scalbn>
 800bde4:	ab9a      	add	r3, sp, #616	; 0x268
 800bde6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bdea:	ec57 6b10 	vmov	r6, r7, d0
 800bdee:	00ec      	lsls	r4, r5, #3
 800bdf0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bdf4:	46aa      	mov	sl, r5
 800bdf6:	f1ba 0f00 	cmp.w	sl, #0
 800bdfa:	f280 80d6 	bge.w	800bfaa <__kernel_rem_pio2+0x472>
 800bdfe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800be50 <__kernel_rem_pio2+0x318>
 800be02:	462e      	mov	r6, r5
 800be04:	2e00      	cmp	r6, #0
 800be06:	f2c0 8104 	blt.w	800c012 <__kernel_rem_pio2+0x4da>
 800be0a:	ab72      	add	r3, sp, #456	; 0x1c8
 800be0c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800be10:	f8df a064 	ldr.w	sl, [pc, #100]	; 800be78 <__kernel_rem_pio2+0x340>
 800be14:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800be18:	f04f 0800 	mov.w	r8, #0
 800be1c:	1baf      	subs	r7, r5, r6
 800be1e:	e0ea      	b.n	800bff6 <__kernel_rem_pio2+0x4be>
 800be20:	f04f 0b02 	mov.w	fp, #2
 800be24:	e759      	b.n	800bcda <__kernel_rem_pio2+0x1a2>
 800be26:	f8d8 3000 	ldr.w	r3, [r8]
 800be2a:	b955      	cbnz	r5, 800be42 <__kernel_rem_pio2+0x30a>
 800be2c:	b123      	cbz	r3, 800be38 <__kernel_rem_pio2+0x300>
 800be2e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800be32:	f8c8 3000 	str.w	r3, [r8]
 800be36:	2301      	movs	r3, #1
 800be38:	3201      	adds	r2, #1
 800be3a:	f108 0804 	add.w	r8, r8, #4
 800be3e:	461d      	mov	r5, r3
 800be40:	e752      	b.n	800bce8 <__kernel_rem_pio2+0x1b0>
 800be42:	1acb      	subs	r3, r1, r3
 800be44:	f8c8 3000 	str.w	r3, [r8]
 800be48:	462b      	mov	r3, r5
 800be4a:	e7f5      	b.n	800be38 <__kernel_rem_pio2+0x300>
 800be4c:	f3af 8000 	nop.w
	...
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	0800cad0 	.word	0x0800cad0
 800be64:	40200000 	.word	0x40200000
 800be68:	3ff00000 	.word	0x3ff00000
 800be6c:	3e700000 	.word	0x3e700000
 800be70:	41700000 	.word	0x41700000
 800be74:	3fe00000 	.word	0x3fe00000
 800be78:	0800ca90 	.word	0x0800ca90
 800be7c:	1e62      	subs	r2, r4, #1
 800be7e:	ab0e      	add	r3, sp, #56	; 0x38
 800be80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800be88:	a90e      	add	r1, sp, #56	; 0x38
 800be8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800be8e:	e739      	b.n	800bd04 <__kernel_rem_pio2+0x1cc>
 800be90:	1e62      	subs	r2, r4, #1
 800be92:	ab0e      	add	r3, sp, #56	; 0x38
 800be94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800be9c:	e7f4      	b.n	800be88 <__kernel_rem_pio2+0x350>
 800be9e:	a90e      	add	r1, sp, #56	; 0x38
 800bea0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	430a      	orrs	r2, r1
 800bea8:	e789      	b.n	800bdbe <__kernel_rem_pio2+0x286>
 800beaa:	3301      	adds	r3, #1
 800beac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800beb0:	2900      	cmp	r1, #0
 800beb2:	d0fa      	beq.n	800beaa <__kernel_rem_pio2+0x372>
 800beb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beb6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800beba:	446a      	add	r2, sp
 800bebc:	3a98      	subs	r2, #152	; 0x98
 800bebe:	920a      	str	r2, [sp, #40]	; 0x28
 800bec0:	9a08      	ldr	r2, [sp, #32]
 800bec2:	18e3      	adds	r3, r4, r3
 800bec4:	18a5      	adds	r5, r4, r2
 800bec6:	aa22      	add	r2, sp, #136	; 0x88
 800bec8:	f104 0801 	add.w	r8, r4, #1
 800becc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	9b04      	ldr	r3, [sp, #16]
 800bed4:	4543      	cmp	r3, r8
 800bed6:	da04      	bge.n	800bee2 <__kernel_rem_pio2+0x3aa>
 800bed8:	461c      	mov	r4, r3
 800beda:	e6a3      	b.n	800bc24 <__kernel_rem_pio2+0xec>
 800bedc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bede:	2301      	movs	r3, #1
 800bee0:	e7e4      	b.n	800beac <__kernel_rem_pio2+0x374>
 800bee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bee8:	f7f4 fb3c 	bl	8000564 <__aeabi_i2d>
 800beec:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bef2:	46ab      	mov	fp, r5
 800bef4:	461c      	mov	r4, r3
 800bef6:	f04f 0900 	mov.w	r9, #0
 800befa:	2600      	movs	r6, #0
 800befc:	2700      	movs	r7, #0
 800befe:	9b06      	ldr	r3, [sp, #24]
 800bf00:	4599      	cmp	r9, r3
 800bf02:	dd06      	ble.n	800bf12 <__kernel_rem_pio2+0x3da>
 800bf04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf06:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bf0a:	f108 0801 	add.w	r8, r8, #1
 800bf0e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf10:	e7df      	b.n	800bed2 <__kernel_rem_pio2+0x39a>
 800bf12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bf16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bf1a:	f7f4 fb8d 	bl	8000638 <__aeabi_dmul>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4630      	mov	r0, r6
 800bf24:	4639      	mov	r1, r7
 800bf26:	f7f4 f9d1 	bl	80002cc <__adddf3>
 800bf2a:	f109 0901 	add.w	r9, r9, #1
 800bf2e:	4606      	mov	r6, r0
 800bf30:	460f      	mov	r7, r1
 800bf32:	e7e4      	b.n	800befe <__kernel_rem_pio2+0x3c6>
 800bf34:	3d01      	subs	r5, #1
 800bf36:	e748      	b.n	800bdca <__kernel_rem_pio2+0x292>
 800bf38:	ec47 6b10 	vmov	d0, r6, r7
 800bf3c:	f1ca 0000 	rsb	r0, sl, #0
 800bf40:	f000 face 	bl	800c4e0 <scalbn>
 800bf44:	ec57 6b10 	vmov	r6, r7, d0
 800bf48:	4ba0      	ldr	r3, [pc, #640]	; (800c1cc <__kernel_rem_pio2+0x694>)
 800bf4a:	ee10 0a10 	vmov	r0, s0
 800bf4e:	2200      	movs	r2, #0
 800bf50:	4639      	mov	r1, r7
 800bf52:	f7f4 fdf7 	bl	8000b44 <__aeabi_dcmpge>
 800bf56:	b1f8      	cbz	r0, 800bf98 <__kernel_rem_pio2+0x460>
 800bf58:	4b9d      	ldr	r3, [pc, #628]	; (800c1d0 <__kernel_rem_pio2+0x698>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 fb6a 	bl	8000638 <__aeabi_dmul>
 800bf64:	f7f4 fe18 	bl	8000b98 <__aeabi_d2iz>
 800bf68:	4680      	mov	r8, r0
 800bf6a:	f7f4 fafb 	bl	8000564 <__aeabi_i2d>
 800bf6e:	4b97      	ldr	r3, [pc, #604]	; (800c1cc <__kernel_rem_pio2+0x694>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	f7f4 fb61 	bl	8000638 <__aeabi_dmul>
 800bf76:	460b      	mov	r3, r1
 800bf78:	4602      	mov	r2, r0
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7f4 f9a3 	bl	80002c8 <__aeabi_dsub>
 800bf82:	f7f4 fe09 	bl	8000b98 <__aeabi_d2iz>
 800bf86:	1c65      	adds	r5, r4, #1
 800bf88:	ab0e      	add	r3, sp, #56	; 0x38
 800bf8a:	f10a 0a18 	add.w	sl, sl, #24
 800bf8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bf92:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bf96:	e720      	b.n	800bdda <__kernel_rem_pio2+0x2a2>
 800bf98:	4630      	mov	r0, r6
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	f7f4 fdfc 	bl	8000b98 <__aeabi_d2iz>
 800bfa0:	ab0e      	add	r3, sp, #56	; 0x38
 800bfa2:	4625      	mov	r5, r4
 800bfa4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bfa8:	e717      	b.n	800bdda <__kernel_rem_pio2+0x2a2>
 800bfaa:	ab0e      	add	r3, sp, #56	; 0x38
 800bfac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bfb0:	f7f4 fad8 	bl	8000564 <__aeabi_i2d>
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	463b      	mov	r3, r7
 800bfb8:	f7f4 fb3e 	bl	8000638 <__aeabi_dmul>
 800bfbc:	4b84      	ldr	r3, [pc, #528]	; (800c1d0 <__kernel_rem_pio2+0x698>)
 800bfbe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	f7f4 fb36 	bl	8000638 <__aeabi_dmul>
 800bfcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	460f      	mov	r7, r1
 800bfd4:	e70f      	b.n	800bdf6 <__kernel_rem_pio2+0x2be>
 800bfd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bfda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bfde:	f7f4 fb2b 	bl	8000638 <__aeabi_dmul>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfea:	f7f4 f96f 	bl	80002cc <__adddf3>
 800bfee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bff2:	f108 0801 	add.w	r8, r8, #1
 800bff6:	9b02      	ldr	r3, [sp, #8]
 800bff8:	4598      	cmp	r8, r3
 800bffa:	dc01      	bgt.n	800c000 <__kernel_rem_pio2+0x4c8>
 800bffc:	45b8      	cmp	r8, r7
 800bffe:	ddea      	ble.n	800bfd6 <__kernel_rem_pio2+0x49e>
 800c000:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c004:	ab4a      	add	r3, sp, #296	; 0x128
 800c006:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c00a:	ed87 7b00 	vstr	d7, [r7]
 800c00e:	3e01      	subs	r6, #1
 800c010:	e6f8      	b.n	800be04 <__kernel_rem_pio2+0x2cc>
 800c012:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c014:	2b02      	cmp	r3, #2
 800c016:	dc0b      	bgt.n	800c030 <__kernel_rem_pio2+0x4f8>
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dc35      	bgt.n	800c088 <__kernel_rem_pio2+0x550>
 800c01c:	d059      	beq.n	800c0d2 <__kernel_rem_pio2+0x59a>
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	f003 0007 	and.w	r0, r3, #7
 800c024:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c028:	ecbd 8b02 	vpop	{d8}
 800c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c030:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c032:	2b03      	cmp	r3, #3
 800c034:	d1f3      	bne.n	800c01e <__kernel_rem_pio2+0x4e6>
 800c036:	ab4a      	add	r3, sp, #296	; 0x128
 800c038:	4423      	add	r3, r4
 800c03a:	9306      	str	r3, [sp, #24]
 800c03c:	461c      	mov	r4, r3
 800c03e:	469a      	mov	sl, r3
 800c040:	9502      	str	r5, [sp, #8]
 800c042:	9b02      	ldr	r3, [sp, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f1aa 0a08 	sub.w	sl, sl, #8
 800c04a:	dc6b      	bgt.n	800c124 <__kernel_rem_pio2+0x5ec>
 800c04c:	46aa      	mov	sl, r5
 800c04e:	f1ba 0f01 	cmp.w	sl, #1
 800c052:	f1a4 0408 	sub.w	r4, r4, #8
 800c056:	f300 8085 	bgt.w	800c164 <__kernel_rem_pio2+0x62c>
 800c05a:	9c06      	ldr	r4, [sp, #24]
 800c05c:	2000      	movs	r0, #0
 800c05e:	3408      	adds	r4, #8
 800c060:	2100      	movs	r1, #0
 800c062:	2d01      	cmp	r5, #1
 800c064:	f300 809d 	bgt.w	800c1a2 <__kernel_rem_pio2+0x66a>
 800c068:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c06c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c070:	f1bb 0f00 	cmp.w	fp, #0
 800c074:	f040 809b 	bne.w	800c1ae <__kernel_rem_pio2+0x676>
 800c078:	9b01      	ldr	r3, [sp, #4]
 800c07a:	e9c3 5600 	strd	r5, r6, [r3]
 800c07e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c082:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c086:	e7ca      	b.n	800c01e <__kernel_rem_pio2+0x4e6>
 800c088:	3408      	adds	r4, #8
 800c08a:	ab4a      	add	r3, sp, #296	; 0x128
 800c08c:	441c      	add	r4, r3
 800c08e:	462e      	mov	r6, r5
 800c090:	2000      	movs	r0, #0
 800c092:	2100      	movs	r1, #0
 800c094:	2e00      	cmp	r6, #0
 800c096:	da36      	bge.n	800c106 <__kernel_rem_pio2+0x5ce>
 800c098:	f1bb 0f00 	cmp.w	fp, #0
 800c09c:	d039      	beq.n	800c112 <__kernel_rem_pio2+0x5da>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0a4:	9c01      	ldr	r4, [sp, #4]
 800c0a6:	e9c4 2300 	strd	r2, r3, [r4]
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c0b2:	f7f4 f909 	bl	80002c8 <__aeabi_dsub>
 800c0b6:	ae4c      	add	r6, sp, #304	; 0x130
 800c0b8:	2401      	movs	r4, #1
 800c0ba:	42a5      	cmp	r5, r4
 800c0bc:	da2c      	bge.n	800c118 <__kernel_rem_pio2+0x5e0>
 800c0be:	f1bb 0f00 	cmp.w	fp, #0
 800c0c2:	d002      	beq.n	800c0ca <__kernel_rem_pio2+0x592>
 800c0c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	9b01      	ldr	r3, [sp, #4]
 800c0cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c0d0:	e7a5      	b.n	800c01e <__kernel_rem_pio2+0x4e6>
 800c0d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c0d6:	eb0d 0403 	add.w	r4, sp, r3
 800c0da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c0de:	2000      	movs	r0, #0
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	2d00      	cmp	r5, #0
 800c0e4:	da09      	bge.n	800c0fa <__kernel_rem_pio2+0x5c2>
 800c0e6:	f1bb 0f00 	cmp.w	fp, #0
 800c0ea:	d002      	beq.n	800c0f2 <__kernel_rem_pio2+0x5ba>
 800c0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	e9c3 0100 	strd	r0, r1, [r3]
 800c0f8:	e791      	b.n	800c01e <__kernel_rem_pio2+0x4e6>
 800c0fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0fe:	f7f4 f8e5 	bl	80002cc <__adddf3>
 800c102:	3d01      	subs	r5, #1
 800c104:	e7ed      	b.n	800c0e2 <__kernel_rem_pio2+0x5aa>
 800c106:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c10a:	f7f4 f8df 	bl	80002cc <__adddf3>
 800c10e:	3e01      	subs	r6, #1
 800c110:	e7c0      	b.n	800c094 <__kernel_rem_pio2+0x55c>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	e7c5      	b.n	800c0a4 <__kernel_rem_pio2+0x56c>
 800c118:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c11c:	f7f4 f8d6 	bl	80002cc <__adddf3>
 800c120:	3401      	adds	r4, #1
 800c122:	e7ca      	b.n	800c0ba <__kernel_rem_pio2+0x582>
 800c124:	e9da 8900 	ldrd	r8, r9, [sl]
 800c128:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c12c:	9b02      	ldr	r3, [sp, #8]
 800c12e:	3b01      	subs	r3, #1
 800c130:	9302      	str	r3, [sp, #8]
 800c132:	4632      	mov	r2, r6
 800c134:	463b      	mov	r3, r7
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 f8c7 	bl	80002cc <__adddf3>
 800c13e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4640      	mov	r0, r8
 800c148:	4649      	mov	r1, r9
 800c14a:	f7f4 f8bd 	bl	80002c8 <__aeabi_dsub>
 800c14e:	4632      	mov	r2, r6
 800c150:	463b      	mov	r3, r7
 800c152:	f7f4 f8bb 	bl	80002cc <__adddf3>
 800c156:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c15a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c15e:	ed8a 7b00 	vstr	d7, [sl]
 800c162:	e76e      	b.n	800c042 <__kernel_rem_pio2+0x50a>
 800c164:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c168:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c16c:	4640      	mov	r0, r8
 800c16e:	4632      	mov	r2, r6
 800c170:	463b      	mov	r3, r7
 800c172:	4649      	mov	r1, r9
 800c174:	f7f4 f8aa 	bl	80002cc <__adddf3>
 800c178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4640      	mov	r0, r8
 800c182:	4649      	mov	r1, r9
 800c184:	f7f4 f8a0 	bl	80002c8 <__aeabi_dsub>
 800c188:	4632      	mov	r2, r6
 800c18a:	463b      	mov	r3, r7
 800c18c:	f7f4 f89e 	bl	80002cc <__adddf3>
 800c190:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c198:	ed84 7b00 	vstr	d7, [r4]
 800c19c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1a0:	e755      	b.n	800c04e <__kernel_rem_pio2+0x516>
 800c1a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c1a6:	f7f4 f891 	bl	80002cc <__adddf3>
 800c1aa:	3d01      	subs	r5, #1
 800c1ac:	e759      	b.n	800c062 <__kernel_rem_pio2+0x52a>
 800c1ae:	9b01      	ldr	r3, [sp, #4]
 800c1b0:	9a01      	ldr	r2, [sp, #4]
 800c1b2:	601d      	str	r5, [r3, #0]
 800c1b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c1b8:	605c      	str	r4, [r3, #4]
 800c1ba:	609f      	str	r7, [r3, #8]
 800c1bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c1c0:	60d3      	str	r3, [r2, #12]
 800c1c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1c6:	6110      	str	r0, [r2, #16]
 800c1c8:	6153      	str	r3, [r2, #20]
 800c1ca:	e728      	b.n	800c01e <__kernel_rem_pio2+0x4e6>
 800c1cc:	41700000 	.word	0x41700000
 800c1d0:	3e700000 	.word	0x3e700000
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <__kernel_sin>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	ed2d 8b04 	vpush	{d8-d9}
 800c1e0:	eeb0 8a41 	vmov.f32	s16, s2
 800c1e4:	eef0 8a61 	vmov.f32	s17, s3
 800c1e8:	ec55 4b10 	vmov	r4, r5, d0
 800c1ec:	b083      	sub	sp, #12
 800c1ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c1f6:	9001      	str	r0, [sp, #4]
 800c1f8:	da06      	bge.n	800c208 <__kernel_sin+0x30>
 800c1fa:	ee10 0a10 	vmov	r0, s0
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7f4 fcca 	bl	8000b98 <__aeabi_d2iz>
 800c204:	2800      	cmp	r0, #0
 800c206:	d051      	beq.n	800c2ac <__kernel_sin+0xd4>
 800c208:	4622      	mov	r2, r4
 800c20a:	462b      	mov	r3, r5
 800c20c:	4620      	mov	r0, r4
 800c20e:	4629      	mov	r1, r5
 800c210:	f7f4 fa12 	bl	8000638 <__aeabi_dmul>
 800c214:	4682      	mov	sl, r0
 800c216:	468b      	mov	fp, r1
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4620      	mov	r0, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 fa0a 	bl	8000638 <__aeabi_dmul>
 800c224:	a341      	add	r3, pc, #260	; (adr r3, 800c32c <__kernel_sin+0x154>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	4680      	mov	r8, r0
 800c22c:	4689      	mov	r9, r1
 800c22e:	4650      	mov	r0, sl
 800c230:	4659      	mov	r1, fp
 800c232:	f7f4 fa01 	bl	8000638 <__aeabi_dmul>
 800c236:	a33f      	add	r3, pc, #252	; (adr r3, 800c334 <__kernel_sin+0x15c>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	f7f4 f844 	bl	80002c8 <__aeabi_dsub>
 800c240:	4652      	mov	r2, sl
 800c242:	465b      	mov	r3, fp
 800c244:	f7f4 f9f8 	bl	8000638 <__aeabi_dmul>
 800c248:	a33c      	add	r3, pc, #240	; (adr r3, 800c33c <__kernel_sin+0x164>)
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	f7f4 f83d 	bl	80002cc <__adddf3>
 800c252:	4652      	mov	r2, sl
 800c254:	465b      	mov	r3, fp
 800c256:	f7f4 f9ef 	bl	8000638 <__aeabi_dmul>
 800c25a:	a33a      	add	r3, pc, #232	; (adr r3, 800c344 <__kernel_sin+0x16c>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f7f4 f832 	bl	80002c8 <__aeabi_dsub>
 800c264:	4652      	mov	r2, sl
 800c266:	465b      	mov	r3, fp
 800c268:	f7f4 f9e6 	bl	8000638 <__aeabi_dmul>
 800c26c:	a337      	add	r3, pc, #220	; (adr r3, 800c34c <__kernel_sin+0x174>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	f7f4 f82b 	bl	80002cc <__adddf3>
 800c276:	9b01      	ldr	r3, [sp, #4]
 800c278:	4606      	mov	r6, r0
 800c27a:	460f      	mov	r7, r1
 800c27c:	b9eb      	cbnz	r3, 800c2ba <__kernel_sin+0xe2>
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	4650      	mov	r0, sl
 800c284:	4659      	mov	r1, fp
 800c286:	f7f4 f9d7 	bl	8000638 <__aeabi_dmul>
 800c28a:	a325      	add	r3, pc, #148	; (adr r3, 800c320 <__kernel_sin+0x148>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	f7f4 f81a 	bl	80002c8 <__aeabi_dsub>
 800c294:	4642      	mov	r2, r8
 800c296:	464b      	mov	r3, r9
 800c298:	f7f4 f9ce 	bl	8000638 <__aeabi_dmul>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	f7f4 f812 	bl	80002cc <__adddf3>
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	ec45 4b10 	vmov	d0, r4, r5
 800c2b0:	b003      	add	sp, #12
 800c2b2:	ecbd 8b04 	vpop	{d8-d9}
 800c2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ba:	4b1b      	ldr	r3, [pc, #108]	; (800c328 <__kernel_sin+0x150>)
 800c2bc:	ec51 0b18 	vmov	r0, r1, d8
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f7f4 f9b9 	bl	8000638 <__aeabi_dmul>
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	ec41 0b19 	vmov	d9, r0, r1
 800c2cc:	463b      	mov	r3, r7
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	f7f4 f9b1 	bl	8000638 <__aeabi_dmul>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	ec51 0b19 	vmov	r0, r1, d9
 800c2de:	f7f3 fff3 	bl	80002c8 <__aeabi_dsub>
 800c2e2:	4652      	mov	r2, sl
 800c2e4:	465b      	mov	r3, fp
 800c2e6:	f7f4 f9a7 	bl	8000638 <__aeabi_dmul>
 800c2ea:	ec53 2b18 	vmov	r2, r3, d8
 800c2ee:	f7f3 ffeb 	bl	80002c8 <__aeabi_dsub>
 800c2f2:	a30b      	add	r3, pc, #44	; (adr r3, 800c320 <__kernel_sin+0x148>)
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	460f      	mov	r7, r1
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	4649      	mov	r1, r9
 800c300:	f7f4 f99a 	bl	8000638 <__aeabi_dmul>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4630      	mov	r0, r6
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f3 ffde 	bl	80002cc <__adddf3>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	f7f3 ffd6 	bl	80002c8 <__aeabi_dsub>
 800c31c:	e7c4      	b.n	800c2a8 <__kernel_sin+0xd0>
 800c31e:	bf00      	nop
 800c320:	55555549 	.word	0x55555549
 800c324:	3fc55555 	.word	0x3fc55555
 800c328:	3fe00000 	.word	0x3fe00000
 800c32c:	5acfd57c 	.word	0x5acfd57c
 800c330:	3de5d93a 	.word	0x3de5d93a
 800c334:	8a2b9ceb 	.word	0x8a2b9ceb
 800c338:	3e5ae5e6 	.word	0x3e5ae5e6
 800c33c:	57b1fe7d 	.word	0x57b1fe7d
 800c340:	3ec71de3 	.word	0x3ec71de3
 800c344:	19c161d5 	.word	0x19c161d5
 800c348:	3f2a01a0 	.word	0x3f2a01a0
 800c34c:	1110f8a6 	.word	0x1110f8a6
 800c350:	3f811111 	.word	0x3f811111

0800c354 <with_errno>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	4604      	mov	r4, r0
 800c358:	460d      	mov	r5, r1
 800c35a:	4616      	mov	r6, r2
 800c35c:	f7fd fce2 	bl	8009d24 <__errno>
 800c360:	4629      	mov	r1, r5
 800c362:	6006      	str	r6, [r0, #0]
 800c364:	4620      	mov	r0, r4
 800c366:	bd70      	pop	{r4, r5, r6, pc}

0800c368 <xflow>:
 800c368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c36a:	4614      	mov	r4, r2
 800c36c:	461d      	mov	r5, r3
 800c36e:	b108      	cbz	r0, 800c374 <xflow+0xc>
 800c370:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c374:	e9cd 2300 	strd	r2, r3, [sp]
 800c378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f4 f95a 	bl	8000638 <__aeabi_dmul>
 800c384:	2222      	movs	r2, #34	; 0x22
 800c386:	b003      	add	sp, #12
 800c388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c38c:	f7ff bfe2 	b.w	800c354 <with_errno>

0800c390 <__math_uflow>:
 800c390:	b508      	push	{r3, lr}
 800c392:	2200      	movs	r2, #0
 800c394:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c398:	f7ff ffe6 	bl	800c368 <xflow>
 800c39c:	ec41 0b10 	vmov	d0, r0, r1
 800c3a0:	bd08      	pop	{r3, pc}

0800c3a2 <__math_oflow>:
 800c3a2:	b508      	push	{r3, lr}
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c3aa:	f7ff ffdd 	bl	800c368 <xflow>
 800c3ae:	ec41 0b10 	vmov	d0, r0, r1
 800c3b2:	bd08      	pop	{r3, pc}

0800c3b4 <fabs>:
 800c3b4:	ec51 0b10 	vmov	r0, r1, d0
 800c3b8:	ee10 2a10 	vmov	r2, s0
 800c3bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3c0:	ec43 2b10 	vmov	d0, r2, r3
 800c3c4:	4770      	bx	lr

0800c3c6 <finite>:
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	ed8d 0b00 	vstr	d0, [sp]
 800c3cc:	9801      	ldr	r0, [sp, #4]
 800c3ce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c3d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c3d6:	0fc0      	lsrs	r0, r0, #31
 800c3d8:	b002      	add	sp, #8
 800c3da:	4770      	bx	lr
 800c3dc:	0000      	movs	r0, r0
	...

0800c3e0 <floor>:
 800c3e0:	ec51 0b10 	vmov	r0, r1, d0
 800c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c3ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c3f0:	2e13      	cmp	r6, #19
 800c3f2:	ee10 5a10 	vmov	r5, s0
 800c3f6:	ee10 8a10 	vmov	r8, s0
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	dc32      	bgt.n	800c464 <floor+0x84>
 800c3fe:	2e00      	cmp	r6, #0
 800c400:	da14      	bge.n	800c42c <floor+0x4c>
 800c402:	a333      	add	r3, pc, #204	; (adr r3, 800c4d0 <floor+0xf0>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f7f3 ff60 	bl	80002cc <__adddf3>
 800c40c:	2200      	movs	r2, #0
 800c40e:	2300      	movs	r3, #0
 800c410:	f7f4 fba2 	bl	8000b58 <__aeabi_dcmpgt>
 800c414:	b138      	cbz	r0, 800c426 <floor+0x46>
 800c416:	2c00      	cmp	r4, #0
 800c418:	da57      	bge.n	800c4ca <floor+0xea>
 800c41a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c41e:	431d      	orrs	r5, r3
 800c420:	d001      	beq.n	800c426 <floor+0x46>
 800c422:	4c2d      	ldr	r4, [pc, #180]	; (800c4d8 <floor+0xf8>)
 800c424:	2500      	movs	r5, #0
 800c426:	4621      	mov	r1, r4
 800c428:	4628      	mov	r0, r5
 800c42a:	e025      	b.n	800c478 <floor+0x98>
 800c42c:	4f2b      	ldr	r7, [pc, #172]	; (800c4dc <floor+0xfc>)
 800c42e:	4137      	asrs	r7, r6
 800c430:	ea01 0307 	and.w	r3, r1, r7
 800c434:	4303      	orrs	r3, r0
 800c436:	d01f      	beq.n	800c478 <floor+0x98>
 800c438:	a325      	add	r3, pc, #148	; (adr r3, 800c4d0 <floor+0xf0>)
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	f7f3 ff45 	bl	80002cc <__adddf3>
 800c442:	2200      	movs	r2, #0
 800c444:	2300      	movs	r3, #0
 800c446:	f7f4 fb87 	bl	8000b58 <__aeabi_dcmpgt>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d0eb      	beq.n	800c426 <floor+0x46>
 800c44e:	2c00      	cmp	r4, #0
 800c450:	bfbe      	ittt	lt
 800c452:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c456:	fa43 f606 	asrlt.w	r6, r3, r6
 800c45a:	19a4      	addlt	r4, r4, r6
 800c45c:	ea24 0407 	bic.w	r4, r4, r7
 800c460:	2500      	movs	r5, #0
 800c462:	e7e0      	b.n	800c426 <floor+0x46>
 800c464:	2e33      	cmp	r6, #51	; 0x33
 800c466:	dd0b      	ble.n	800c480 <floor+0xa0>
 800c468:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c46c:	d104      	bne.n	800c478 <floor+0x98>
 800c46e:	ee10 2a10 	vmov	r2, s0
 800c472:	460b      	mov	r3, r1
 800c474:	f7f3 ff2a 	bl	80002cc <__adddf3>
 800c478:	ec41 0b10 	vmov	d0, r0, r1
 800c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c480:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c484:	f04f 33ff 	mov.w	r3, #4294967295
 800c488:	fa23 f707 	lsr.w	r7, r3, r7
 800c48c:	4207      	tst	r7, r0
 800c48e:	d0f3      	beq.n	800c478 <floor+0x98>
 800c490:	a30f      	add	r3, pc, #60	; (adr r3, 800c4d0 <floor+0xf0>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f3 ff19 	bl	80002cc <__adddf3>
 800c49a:	2200      	movs	r2, #0
 800c49c:	2300      	movs	r3, #0
 800c49e:	f7f4 fb5b 	bl	8000b58 <__aeabi_dcmpgt>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d0bf      	beq.n	800c426 <floor+0x46>
 800c4a6:	2c00      	cmp	r4, #0
 800c4a8:	da02      	bge.n	800c4b0 <floor+0xd0>
 800c4aa:	2e14      	cmp	r6, #20
 800c4ac:	d103      	bne.n	800c4b6 <floor+0xd6>
 800c4ae:	3401      	adds	r4, #1
 800c4b0:	ea25 0507 	bic.w	r5, r5, r7
 800c4b4:	e7b7      	b.n	800c426 <floor+0x46>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c4bc:	fa03 f606 	lsl.w	r6, r3, r6
 800c4c0:	4435      	add	r5, r6
 800c4c2:	4545      	cmp	r5, r8
 800c4c4:	bf38      	it	cc
 800c4c6:	18e4      	addcc	r4, r4, r3
 800c4c8:	e7f2      	b.n	800c4b0 <floor+0xd0>
 800c4ca:	2500      	movs	r5, #0
 800c4cc:	462c      	mov	r4, r5
 800c4ce:	e7aa      	b.n	800c426 <floor+0x46>
 800c4d0:	8800759c 	.word	0x8800759c
 800c4d4:	7e37e43c 	.word	0x7e37e43c
 800c4d8:	bff00000 	.word	0xbff00000
 800c4dc:	000fffff 	.word	0x000fffff

0800c4e0 <scalbn>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	ec55 4b10 	vmov	r4, r5, d0
 800c4e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	b99a      	cbnz	r2, 800c518 <scalbn+0x38>
 800c4f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4f4:	4323      	orrs	r3, r4
 800c4f6:	d036      	beq.n	800c566 <scalbn+0x86>
 800c4f8:	4b39      	ldr	r3, [pc, #228]	; (800c5e0 <scalbn+0x100>)
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	ee10 0a10 	vmov	r0, s0
 800c500:	2200      	movs	r2, #0
 800c502:	f7f4 f899 	bl	8000638 <__aeabi_dmul>
 800c506:	4b37      	ldr	r3, [pc, #220]	; (800c5e4 <scalbn+0x104>)
 800c508:	429e      	cmp	r6, r3
 800c50a:	4604      	mov	r4, r0
 800c50c:	460d      	mov	r5, r1
 800c50e:	da10      	bge.n	800c532 <scalbn+0x52>
 800c510:	a32b      	add	r3, pc, #172	; (adr r3, 800c5c0 <scalbn+0xe0>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	e03a      	b.n	800c58e <scalbn+0xae>
 800c518:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c51c:	428a      	cmp	r2, r1
 800c51e:	d10c      	bne.n	800c53a <scalbn+0x5a>
 800c520:	ee10 2a10 	vmov	r2, s0
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f3 fed0 	bl	80002cc <__adddf3>
 800c52c:	4604      	mov	r4, r0
 800c52e:	460d      	mov	r5, r1
 800c530:	e019      	b.n	800c566 <scalbn+0x86>
 800c532:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c536:	460b      	mov	r3, r1
 800c538:	3a36      	subs	r2, #54	; 0x36
 800c53a:	4432      	add	r2, r6
 800c53c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c540:	428a      	cmp	r2, r1
 800c542:	dd08      	ble.n	800c556 <scalbn+0x76>
 800c544:	2d00      	cmp	r5, #0
 800c546:	a120      	add	r1, pc, #128	; (adr r1, 800c5c8 <scalbn+0xe8>)
 800c548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c54c:	da1c      	bge.n	800c588 <scalbn+0xa8>
 800c54e:	a120      	add	r1, pc, #128	; (adr r1, 800c5d0 <scalbn+0xf0>)
 800c550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c554:	e018      	b.n	800c588 <scalbn+0xa8>
 800c556:	2a00      	cmp	r2, #0
 800c558:	dd08      	ble.n	800c56c <scalbn+0x8c>
 800c55a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c55e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c562:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c566:	ec45 4b10 	vmov	d0, r4, r5
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c570:	da19      	bge.n	800c5a6 <scalbn+0xc6>
 800c572:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c576:	429e      	cmp	r6, r3
 800c578:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c57c:	dd0a      	ble.n	800c594 <scalbn+0xb4>
 800c57e:	a112      	add	r1, pc, #72	; (adr r1, 800c5c8 <scalbn+0xe8>)
 800c580:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1e2      	bne.n	800c54e <scalbn+0x6e>
 800c588:	a30f      	add	r3, pc, #60	; (adr r3, 800c5c8 <scalbn+0xe8>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f7f4 f853 	bl	8000638 <__aeabi_dmul>
 800c592:	e7cb      	b.n	800c52c <scalbn+0x4c>
 800c594:	a10a      	add	r1, pc, #40	; (adr r1, 800c5c0 <scalbn+0xe0>)
 800c596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d0b8      	beq.n	800c510 <scalbn+0x30>
 800c59e:	a10e      	add	r1, pc, #56	; (adr r1, 800c5d8 <scalbn+0xf8>)
 800c5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a4:	e7b4      	b.n	800c510 <scalbn+0x30>
 800c5a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5aa:	3236      	adds	r2, #54	; 0x36
 800c5ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	; (800c5e8 <scalbn+0x108>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	e7e8      	b.n	800c58e <scalbn+0xae>
 800c5bc:	f3af 8000 	nop.w
 800c5c0:	c2f8f359 	.word	0xc2f8f359
 800c5c4:	01a56e1f 	.word	0x01a56e1f
 800c5c8:	8800759c 	.word	0x8800759c
 800c5cc:	7e37e43c 	.word	0x7e37e43c
 800c5d0:	8800759c 	.word	0x8800759c
 800c5d4:	fe37e43c 	.word	0xfe37e43c
 800c5d8:	c2f8f359 	.word	0xc2f8f359
 800c5dc:	81a56e1f 	.word	0x81a56e1f
 800c5e0:	43500000 	.word	0x43500000
 800c5e4:	ffff3cb0 	.word	0xffff3cb0
 800c5e8:	3c900000 	.word	0x3c900000

0800c5ec <_init>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr

0800c5f8 <_fini>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	bf00      	nop
 800c5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fe:	bc08      	pop	{r3}
 800c600:	469e      	mov	lr, r3
 800c602:	4770      	bx	lr
