
seguidorLinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800c5b8  0800c5b8  0001c5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca90  0800ca90  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca90  0800ca90  0001ca90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca98  0800ca98  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca98  0800ca98  0001ca98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca9c  0800ca9c  0001ca9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800caa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025e4  20000080  0800cb20  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002664  0800cb20  00022664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f871  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e31  00000000  00000000  0003f921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00043758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00045010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029936  00000000  00000000  00046740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0a9  00000000  00000000  00070076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001076e5  00000000  00000000  0008c11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073bc  00000000  00000000  00193854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c59c 	.word	0x0800c59c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800c59c 	.word	0x0800c59c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_FREERTOS_Init+0x78>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	2001      	movs	r0, #1
 8000f96:	f006 f9dc 	bl	8007352 <osSemaphoreNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_FREERTOS_Init+0x7c>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <MX_FREERTOS_Init+0x80>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f006 f9d4 	bl	8007352 <osSemaphoreNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_FREERTOS_Init+0x84>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_FREERTOS_Init+0x88>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_FREERTOS_Init+0x8c>)
 8000fb6:	f006 f91f 	bl	80071f8 <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_FREERTOS_Init+0x90>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <MX_FREERTOS_Init+0x94>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_FREERTOS_Init+0x98>)
 8000fc6:	f006 f917 	bl	80071f8 <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a16      	ldr	r2, [pc, #88]	; (8001028 <MX_FREERTOS_Init+0x9c>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_FREERTOS_Init+0xa0>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <MX_FREERTOS_Init+0xa4>)
 8000fd6:	f006 f90f 	bl	80071f8 <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <MX_FREERTOS_Init+0xa8>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <MX_FREERTOS_Init+0xac>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <MX_FREERTOS_Init+0xb0>)
 8000fe6:	f006 f907 	bl	80071f8 <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <MX_FREERTOS_Init+0xb4>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <MX_FREERTOS_Init+0xb8>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_FREERTOS_Init+0xbc>)
 8000ff6:	f006 f8ff 	bl	80071f8 <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <MX_FREERTOS_Init+0xc0>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800c790 	.word	0x0800c790
 8001008:	20000160 	.word	0x20000160
 800100c:	0800c7a0 	.word	0x0800c7a0
 8001010:	20000164 	.word	0x20000164
 8001014:	0800c6dc 	.word	0x0800c6dc
 8001018:	08001051 	.word	0x08001051
 800101c:	2000014c 	.word	0x2000014c
 8001020:	0800c700 	.word	0x0800c700
 8001024:	080010a1 	.word	0x080010a1
 8001028:	20000150 	.word	0x20000150
 800102c:	0800c724 	.word	0x0800c724
 8001030:	0800134d 	.word	0x0800134d
 8001034:	20000154 	.word	0x20000154
 8001038:	0800c748 	.word	0x0800c748
 800103c:	08001575 	.word	0x08001575
 8001040:	20000158 	.word	0x20000158
 8001044:	0800c76c 	.word	0x0800c76c
 8001048:	08001721 	.word	0x08001721
 800104c:	2000015c 	.word	0x2000015c

08001050 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001058:	2108      	movs	r1, #8
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <FunctionUltrassom+0x4c>)
 800105c:	f003 fc4e 	bl	80048fc <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <FunctionUltrassom+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <FunctionUltrassom+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0208 	orr.w	r2, r2, #8
 800106e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f002 f8db 	bl	8003234 <HAL_GPIO_WritePin>
		osDelay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f006 f94c 	bl	800731c <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f002 f8d1 	bl	8003234 <HAL_GPIO_WritePin>
		osDelay(500);
 8001092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001096:	f006 f941 	bl	800731c <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 800109a:	e7e1      	b.n	8001060 <FunctionUltrassom+0x10>
 800109c:	200001ac 	.word	0x200001ac

080010a0 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	; 0x48
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80010a8:	4b95      	ldr	r3, [pc, #596]	; (8001300 <FunctionComunica+0x260>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	21c8      	movs	r1, #200	; 0xc8
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 f9d8 	bl	8007464 <osSemaphoreAcquire>
	  HAL_UART_Receive(&huart1, (uint8_t *)&cData, sizeof(cData),100);
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	4992      	ldr	r1, [pc, #584]	; (8001304 <FunctionComunica+0x264>)
 80010ba:	4893      	ldr	r0, [pc, #588]	; (8001308 <FunctionComunica+0x268>)
 80010bc:	f005 f996 	bl	80063ec <HAL_UART_Receive>
	  if(uiBloqueado){
 80010c0:	4b92      	ldr	r3, [pc, #584]	; (800130c <FunctionComunica+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <FunctionComunica+0x70>
		  int dist1 = (int)fDistancia;
 80010c8:	4b91      	ldr	r3, [pc, #580]	; (8001310 <FunctionComunica+0x270>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 3a90 	vmov	r3, s15
 80010d6:	60fb      	str	r3, [r7, #12]
		  int dist2 = (fDistancia-(int)fDistancia)*100;
 80010d8:	4b8d      	ldr	r3, [pc, #564]	; (8001310 <FunctionComunica+0x270>)
 80010da:	ed93 7a00 	vldr	s14, [r3]
 80010de:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <FunctionComunica+0x270>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001314 <FunctionComunica+0x274>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	60bb      	str	r3, [r7, #8]

		  sprintf(cMostrar,"Blockeado: %d.%02d \r \n ",dist1,dist2);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4984      	ldr	r1, [pc, #528]	; (8001318 <FunctionComunica+0x278>)
 8001108:	4884      	ldr	r0, [pc, #528]	; (800131c <FunctionComunica+0x27c>)
 800110a:	f008 ff33 	bl	8009f74 <siprintf>
 800110e:	e0e2      	b.n	80012d6 <FunctionComunica+0x236>
	  } else if(!uiStart){
 8001110:	4b83      	ldr	r3, [pc, #524]	; (8001320 <FunctionComunica+0x280>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <FunctionComunica+0x82>
		  sprintf(cMostrar,"Aguardando Start!! \r \n ");
 8001118:	4982      	ldr	r1, [pc, #520]	; (8001324 <FunctionComunica+0x284>)
 800111a:	4880      	ldr	r0, [pc, #512]	; (800131c <FunctionComunica+0x27c>)
 800111c:	f008 ff2a 	bl	8009f74 <siprintf>
 8001120:	e0d9      	b.n	80012d6 <FunctionComunica+0x236>
	  } else{
		  if(cData == 'O' || cData == 'o'){
 8001122:	4b78      	ldr	r3, [pc, #480]	; (8001304 <FunctionComunica+0x264>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b4f      	cmp	r3, #79	; 0x4f
 8001128:	d003      	beq.n	8001132 <FunctionComunica+0x92>
 800112a:	4b76      	ldr	r3, [pc, #472]	; (8001304 <FunctionComunica+0x264>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b6f      	cmp	r3, #111	; 0x6f
 8001130:	d123      	bne.n	800117a <FunctionComunica+0xda>
			  int valor1 = (int)fDistanciaO;
 8001132:	4b7d      	ldr	r3, [pc, #500]	; (8001328 <FunctionComunica+0x288>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113c:	ee17 3a90 	vmov	r3, s15
 8001140:	617b      	str	r3, [r7, #20]
			  int valor2 = (fDistanciaO-(int)fDistanciaO)*100;
 8001142:	4b79      	ldr	r3, [pc, #484]	; (8001328 <FunctionComunica+0x288>)
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	4b77      	ldr	r3, [pc, #476]	; (8001328 <FunctionComunica+0x288>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001314 <FunctionComunica+0x274>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 3a90 	vmov	r3, s15
 800116a:	613b      	str	r3, [r7, #16]

			  sprintf(cMostrar,"Distancia Percorrida: %d.%02dm \r \n ",valor1,valor2);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	496e      	ldr	r1, [pc, #440]	; (800132c <FunctionComunica+0x28c>)
 8001172:	486a      	ldr	r0, [pc, #424]	; (800131c <FunctionComunica+0x27c>)
 8001174:	f008 fefe 	bl	8009f74 <siprintf>
		  if(cData == 'O' || cData == 'o'){
 8001178:	e0ad      	b.n	80012d6 <FunctionComunica+0x236>
		  }else if(cData == 'V' || cData == 'v'){
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <FunctionComunica+0x264>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b56      	cmp	r3, #86	; 0x56
 8001180:	d003      	beq.n	800118a <FunctionComunica+0xea>
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <FunctionComunica+0x264>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b76      	cmp	r3, #118	; 0x76
 8001188:	d144      	bne.n	8001214 <FunctionComunica+0x174>
			  int valor1 = (int)fWE;
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <FunctionComunica+0x290>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001194:	ee17 3a90 	vmov	r3, s15
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
			  int valor2 = (fWE-(int)fWE)*100;
 800119a:	4b65      	ldr	r3, [pc, #404]	; (8001330 <FunctionComunica+0x290>)
 800119c:	ed93 7a00 	vldr	s14, [r3]
 80011a0:	4b63      	ldr	r3, [pc, #396]	; (8001330 <FunctionComunica+0x290>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001314 <FunctionComunica+0x274>
 80011b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011be:	ee17 3a90 	vmov	r3, s15
 80011c2:	623b      	str	r3, [r7, #32]

			  int valor3 = (int)fWD;
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <FunctionComunica+0x294>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	61fb      	str	r3, [r7, #28]
			  int valor4 = (fWD-(int)fWD)*100;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <FunctionComunica+0x294>)
 80011d6:	ed93 7a00 	vldr	s14, [r3]
 80011da:	4b56      	ldr	r3, [pc, #344]	; (8001334 <FunctionComunica+0x294>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001314 <FunctionComunica+0x274>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f8:	ee17 3a90 	vmov	r3, s15
 80011fc:	61bb      	str	r3, [r7, #24]

			  sprintf(cMostrar,"MotorE: %d.%02d m/s -- MotorD: %d.%02d m/s \r \n ",valor1,valor2,valor3,valor4);
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120a:	494b      	ldr	r1, [pc, #300]	; (8001338 <FunctionComunica+0x298>)
 800120c:	4843      	ldr	r0, [pc, #268]	; (800131c <FunctionComunica+0x27c>)
 800120e:	f008 feb1 	bl	8009f74 <siprintf>
		  }else if(cData == 'V' || cData == 'v'){
 8001212:	e060      	b.n	80012d6 <FunctionComunica+0x236>
		  }else{
			  cData = 'M';
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <FunctionComunica+0x264>)
 8001216:	224d      	movs	r2, #77	; 0x4d
 8001218:	701a      	strb	r2, [r3, #0]
			  float valE = ((float)ulPulsesE/FUROS)*10;
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <FunctionComunica+0x29c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001226:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800122a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			  float valD = ((float)ulPulsesD/FUROS)*10;
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <FunctionComunica+0x2a0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001246:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

			  int valor1 = (int)valE;
 800125a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800125e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001262:	ee17 3a90 	vmov	r3, s15
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
			  int valor2 = (valE-(int)valE)*100;
 8001268:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001314 <FunctionComunica+0x274>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001288:	ee17 3a90 	vmov	r3, s15
 800128c:	633b      	str	r3, [r7, #48]	; 0x30

			  int valor3 = (int)valD;
 800128e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001296:	ee17 3a90 	vmov	r3, s15
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
			  int valor4 = (valD-(int)valD)*100;
 800129c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001314 <FunctionComunica+0x274>
 80012b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012bc:	ee17 3a90 	vmov	r3, s15
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28

			  sprintf(cMostrar,"RPS_E: %d.%02d -- RPS_D: %d.%02d \r \n ",valor1,valor2,valor3,valor4);
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ce:	491d      	ldr	r1, [pc, #116]	; (8001344 <FunctionComunica+0x2a4>)
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <FunctionComunica+0x27c>)
 80012d2:	f008 fe4f 	bl	8009f74 <siprintf>
		  }
	  }
	  HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	2264      	movs	r2, #100	; 0x64
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <FunctionComunica+0x27c>)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <FunctionComunica+0x268>)
 80012de:	f004 ffef 	bl	80062c0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <FunctionComunica+0x27c>)
 80012e8:	4817      	ldr	r0, [pc, #92]	; (8001348 <FunctionComunica+0x2a8>)
 80012ea:	f004 ffe9 	bl	80062c0 <HAL_UART_Transmit>

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <FunctionComunica+0x260>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f908 	bl	8007508 <osSemaphoreRelease>
	  osDelay(100);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f006 f80f 	bl	800731c <osDelay>
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80012fe:	e6d3      	b.n	80010a8 <FunctionComunica+0x8>
 8001300:	20000164 	.word	0x20000164
 8001304:	20000008 	.word	0x20000008
 8001308:	200003b8 	.word	0x200003b8
 800130c:	200000e0 	.word	0x200000e0
 8001310:	200000a8 	.word	0x200000a8
 8001314:	42c80000 	.word	0x42c80000
 8001318:	0800c618 	.word	0x0800c618
 800131c:	200000e8 	.word	0x200000e8
 8001320:	200000dc 	.word	0x200000dc
 8001324:	0800c630 	.word	0x0800c630
 8001328:	200000c8 	.word	0x200000c8
 800132c:	0800c648 	.word	0x0800c648
 8001330:	200000d0 	.word	0x200000d0
 8001334:	200000d8 	.word	0x200000d8
 8001338:	0800c66c 	.word	0x0800c66c
 800133c:	200000cc 	.word	0x200000cc
 8001340:	200000d4 	.word	0x200000d4
 8001344:	0800c69c 	.word	0x0800c69c
 8001348:	20000328 	.word	0x20000328

0800134c <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135c:	f001 ff52 	bl	8003204 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8001364:	2120      	movs	r1, #32
 8001366:	487a      	ldr	r0, [pc, #488]	; (8001550 <FunctionSeguidor+0x204>)
 8001368:	f001 ff4c 	bl	8003204 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8001370:	2140      	movs	r1, #64	; 0x40
 8001372:	4877      	ldr	r0, [pc, #476]	; (8001550 <FunctionSeguidor+0x204>)
 8001374:	f001 ff46 	bl	8003204 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 800137c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001380:	4873      	ldr	r0, [pc, #460]	; (8001550 <FunctionSeguidor+0x204>)
 8001382:	f001 ff3f 	bl	8003204 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <FunctionSeguidor+0x208>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	21c8      	movs	r1, #200	; 0xc8
 8001390:	4618      	mov	r0, r3
 8001392:	f006 f867 	bl	8007464 <osSemaphoreAcquire>

    if(uiBloqueado){
 8001396:	4b70      	ldr	r3, [pc, #448]	; (8001558 <FunctionSeguidor+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d016      	beq.n	80013cc <FunctionSeguidor+0x80>
    	fWAngularD = 0;
 800139e:	4b6f      	ldr	r3, [pc, #444]	; (800155c <FunctionSeguidor+0x210>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 80013a6:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <FunctionSeguidor+0x214>)
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2104      	movs	r1, #4
 80013b2:	486c      	ldr	r0, [pc, #432]	; (8001564 <FunctionSeguidor+0x218>)
 80013b4:	f001 ff3e 	bl	8003234 <HAL_GPIO_WritePin>
		osDelay(500);
 80013b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013bc:	f005 ffae 	bl	800731c <osDelay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2104      	movs	r1, #4
 80013c4:	4867      	ldr	r0, [pc, #412]	; (8001564 <FunctionSeguidor+0x218>)
 80013c6:	f001 ff35 	bl	8003234 <HAL_GPIO_WritePin>
 80013ca:	e0b8      	b.n	800153e <FunctionSeguidor+0x1f2>
    }else if(uiBTN){
 80013cc:	7b3b      	ldrb	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d027      	beq.n	8001422 <FunctionSeguidor+0xd6>
    	uiStart = uiStart?0:1;
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <FunctionSeguidor+0x21c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf0c      	ite	eq
 80013da:	2301      	moveq	r3, #1
 80013dc:	2300      	movne	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b61      	ldr	r3, [pc, #388]	; (8001568 <FunctionSeguidor+0x21c>)
 80013e4:	601a      	str	r2, [r3, #0]
    	uiCountSeguidor = 0;
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <FunctionSeguidor+0x220>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
    	fWAngularD = 0;
 80013ec:	4b5b      	ldr	r3, [pc, #364]	; (800155c <FunctionSeguidor+0x210>)
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
    	fWAngularE = 0;
 80013f4:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <FunctionSeguidor+0x214>)
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2104      	movs	r1, #4
 8001400:	4858      	ldr	r0, [pc, #352]	; (8001564 <FunctionSeguidor+0x218>)
 8001402:	f001 ff17 	bl	8003234 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140a:	f005 ff87 	bl	800731c <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	4854      	ldr	r0, [pc, #336]	; (8001564 <FunctionSeguidor+0x218>)
 8001414:	f001 ff0e 	bl	8003234 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141c:	f005 ff7e 	bl	800731c <osDelay>
 8001420:	e08d      	b.n	800153e <FunctionSeguidor+0x1f2>
    }else if(uiStart && uiCountSeguidor < 50){
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <FunctionSeguidor+0x21c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d078      	beq.n	800151c <FunctionSeguidor+0x1d0>
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <FunctionSeguidor+0x220>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b31      	cmp	r3, #49	; 0x31
 8001430:	d874      	bhi.n	800151c <FunctionSeguidor+0x1d0>
    	if(uiS2 && uiS3 && !uiS4){
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d011      	beq.n	800145c <FunctionSeguidor+0x110>
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00e      	beq.n	800145c <FunctionSeguidor+0x110>
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <FunctionSeguidor+0x110>
    		uiCountSeguidor = 0;
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <FunctionSeguidor+0x220>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
			fWAngularE = fVelocidade;
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <FunctionSeguidor+0x224>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a44      	ldr	r2, [pc, #272]	; (8001560 <FunctionSeguidor+0x214>)
 8001450:	6013      	str	r3, [r2, #0]
			fWAngularD = 0;
 8001452:	4b42      	ldr	r3, [pc, #264]	; (800155c <FunctionSeguidor+0x210>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e050      	b.n	80014fe <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && uiS3 && uiS4){
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d111      	bne.n	8001486 <FunctionSeguidor+0x13a>
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00e      	beq.n	8001486 <FunctionSeguidor+0x13a>
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <FunctionSeguidor+0x13a>
			uiCountSeguidor = 0;
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <FunctionSeguidor+0x220>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <FunctionSeguidor+0x214>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <FunctionSeguidor+0x224>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a36      	ldr	r2, [pc, #216]	; (800155c <FunctionSeguidor+0x210>)
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e03b      	b.n	80014fe <FunctionSeguidor+0x1b2>
		}else if(uiS2 && !uiS3 && uiS4){
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d011      	beq.n	80014b0 <FunctionSeguidor+0x164>
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10e      	bne.n	80014b0 <FunctionSeguidor+0x164>
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <FunctionSeguidor+0x164>
			uiCountSeguidor = 0;
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <FunctionSeguidor+0x220>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <FunctionSeguidor+0x224>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <FunctionSeguidor+0x210>)
 80014a4:	6013      	str	r3, [r2, #0]
			fWAngularE = fVelocidade;
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <FunctionSeguidor+0x224>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <FunctionSeguidor+0x214>)
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e026      	b.n	80014fe <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && !uiS3 && !uiS4){
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d123      	bne.n	80014fe <FunctionSeguidor+0x1b2>
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d120      	bne.n	80014fe <FunctionSeguidor+0x1b2>
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d11d      	bne.n	80014fe <FunctionSeguidor+0x1b2>
			uiCountSeguidor = 0;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <FunctionSeguidor+0x220>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
			fWAngularD = 0;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <FunctionSeguidor+0x210>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <FunctionSeguidor+0x214>)
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
			uiStart = 0;
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <FunctionSeguidor+0x21c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2104      	movs	r1, #4
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <FunctionSeguidor+0x218>)
 80014e4:	f001 fea6 	bl	8003234 <HAL_GPIO_WritePin>
			osDelay(100);
 80014e8:	2064      	movs	r0, #100	; 0x64
 80014ea:	f005 ff17 	bl	800731c <osDelay>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	481c      	ldr	r0, [pc, #112]	; (8001564 <FunctionSeguidor+0x218>)
 80014f4:	f001 fe9e 	bl	8003234 <HAL_GPIO_WritePin>
			osDelay(100);
 80014f8:	2064      	movs	r0, #100	; 0x64
 80014fa:	f005 ff0f 	bl	800731c <osDelay>
		}
    	if(uiS2 && uiS3 && uiS4){
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01b      	beq.n	800153c <FunctionSeguidor+0x1f0>
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d018      	beq.n	800153c <FunctionSeguidor+0x1f0>
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d015      	beq.n	800153c <FunctionSeguidor+0x1f0>
    		uiCountSeguidor++;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <FunctionSeguidor+0x220>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <FunctionSeguidor+0x220>)
 8001518:	6013      	str	r3, [r2, #0]
    	if(uiS2 && uiS3 && uiS4){
 800151a:	e00f      	b.n	800153c <FunctionSeguidor+0x1f0>
		}
    }else{
    	if(uiCountSeguidor >= 50){
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <FunctionSeguidor+0x220>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b31      	cmp	r3, #49	; 0x31
 8001522:	d902      	bls.n	800152a <FunctionSeguidor+0x1de>
    		uiBloqueado = 1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <FunctionSeguidor+0x20c>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
    	}
    	fWAngularD = 0;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <FunctionSeguidor+0x210>)
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <FunctionSeguidor+0x214>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e000      	b.n	800153e <FunctionSeguidor+0x1f2>
    	if(uiS2 && uiS3 && uiS4){
 800153c:	bf00      	nop
    }
    osDelay(100);
 800153e:	2064      	movs	r0, #100	; 0x64
 8001540:	f005 feec 	bl	800731c <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <FunctionSeguidor+0x208>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f005 ffdd 	bl	8007508 <osSemaphoreRelease>
  {
 800154e:	e701      	b.n	8001354 <FunctionSeguidor+0x8>
 8001550:	48000800 	.word	0x48000800
 8001554:	20000160 	.word	0x20000160
 8001558:	200000e0 	.word	0x200000e0
 800155c:	200000ac 	.word	0x200000ac
 8001560:	200000b0 	.word	0x200000b0
 8001564:	48000c00 	.word	0x48000c00
 8001568:	200000dc 	.word	0x200000dc
 800156c:	200000e4 	.word	0x200000e4
 8001570:	20000004 	.word	0x20000004

08001574 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800157c:	2100      	movs	r1, #0
 800157e:	4858      	ldr	r0, [pc, #352]	; (80016e0 <FunctionAtivarMotores+0x16c>)
 8001580:	f003 f848 	bl	8004614 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001584:	2104      	movs	r1, #4
 8001586:	4856      	ldr	r0, [pc, #344]	; (80016e0 <FunctionAtivarMotores+0x16c>)
 8001588:	f003 f844 	bl	8004614 <HAL_TIM_PWM_Start>

	sPID_D pid_D;
	sPID_E pid_E;

	pid_E.fKpE = 500;
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <FunctionAtivarMotores+0x170>)
 800158e:	60bb      	str	r3, [r7, #8]
	pid_E.fKiE = 10;
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <FunctionAtivarMotores+0x174>)
 8001592:	60fb      	str	r3, [r7, #12]
	pid_E.fKdE = 0.001;
 8001594:	4b55      	ldr	r3, [pc, #340]	; (80016ec <FunctionAtivarMotores+0x178>)
 8001596:	613b      	str	r3, [r7, #16]
	pid_E.fTsE = 200000;
 8001598:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <FunctionAtivarMotores+0x17c>)
 800159a:	617b      	str	r3, [r7, #20]
	pid_E.fOutminE = 0;
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
	pid_E.fOutmaxE = 100;
 80015a2:	4b54      	ldr	r3, [pc, #336]	; (80016f4 <FunctionAtivarMotores+0x180>)
 80015a4:	61fb      	str	r3, [r7, #28]
	PID_init_E(&pid_E);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fcbc 	bl	8001f28 <PID_init_E>

	pid_D.fKpD = 500;
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <FunctionAtivarMotores+0x170>)
 80015b2:	623b      	str	r3, [r7, #32]
	pid_D.fKiD = 10;
 80015b4:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <FunctionAtivarMotores+0x174>)
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
	pid_D.fKdD = 0.001;
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <FunctionAtivarMotores+0x178>)
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
	pid_D.fTsD = 200000;
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <FunctionAtivarMotores+0x17c>)
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
	pid_D.fOutminD = 0;
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
	pid_D.fOutmaxD = 100;
 80015c6:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <FunctionAtivarMotores+0x180>)
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
	PID_init_D(&pid_D);
 80015ca:	f107 0320 	add.w	r3, r7, #32
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fc74 	bl	8001ebc <PID_init_D>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80015d4:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <FunctionAtivarMotores+0x184>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	21c8      	movs	r1, #200	; 0xc8
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 ff42 	bl	8007464 <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f001 fe23 	bl	8003234 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f001 fe1c 	bl	8003234 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	483e      	ldr	r0, [pc, #248]	; (80016fc <FunctionAtivarMotores+0x188>)
 8001602:	f001 fe17 	bl	8003234 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	483d      	ldr	r0, [pc, #244]	; (8001700 <FunctionAtivarMotores+0x18c>)
 800160c:	f001 fe12 	bl	8003234 <HAL_GPIO_WritePin>

	  if(!fWAngularD && !fWAngularE){
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <FunctionAtivarMotores+0x190>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d11f      	bne.n	8001660 <FunctionAtivarMotores+0xec>
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <FunctionAtivarMotores+0x194>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	d117      	bne.n	8001660 <FunctionAtivarMotores+0xec>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f001 fdfb 	bl	8003234 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 fdf4 	bl	8003234 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	482a      	ldr	r0, [pc, #168]	; (80016fc <FunctionAtivarMotores+0x188>)
 8001652:	f001 fdef 	bl	8003234 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2140      	movs	r1, #64	; 0x40
 800165a:	4829      	ldr	r0, [pc, #164]	; (8001700 <FunctionAtivarMotores+0x18c>)
 800165c:	f001 fdea 	bl	8003234 <HAL_GPIO_WritePin>
	  }

	  fPIDVal_E = PID_E(fWE, fWAngularE);
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <FunctionAtivarMotores+0x198>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <FunctionAtivarMotores+0x194>)
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	eef0 0a47 	vmov.f32	s1, s14
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f000 fc8e 	bl	8001f94 <PID_E>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <FunctionAtivarMotores+0x19c>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
	  fPIDVal_D = PID_D(fWD, fWAngularD);
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <FunctionAtivarMotores+0x1a0>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <FunctionAtivarMotores+0x190>)
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	eef0 0a47 	vmov.f32	s1, s14
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	f000 fd07 	bl	80020a8 <PID_D>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <FunctionAtivarMotores+0x1a4>)
 80016a0:	edc3 7a00 	vstr	s15, [r3]

	  htim3.Instance->CCR1 = fPIDVal_D;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <FunctionAtivarMotores+0x1a4>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <FunctionAtivarMotores+0x16c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b2:	ee17 2a90 	vmov	r2, s15
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = fPIDVal_E;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <FunctionAtivarMotores+0x19c>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <FunctionAtivarMotores+0x16c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c6:	ee17 2a90 	vmov	r2, s15
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38

	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <FunctionAtivarMotores+0x184>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 ff19 	bl	8007508 <osSemaphoreRelease>
	  osDelay(100);
 80016d6:	2064      	movs	r0, #100	; 0x64
 80016d8:	f005 fe20 	bl	800731c <osDelay>
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80016dc:	e77a      	b.n	80015d4 <FunctionAtivarMotores+0x60>
 80016de:	bf00      	nop
 80016e0:	20000244 	.word	0x20000244
 80016e4:	43fa0000 	.word	0x43fa0000
 80016e8:	41200000 	.word	0x41200000
 80016ec:	3a83126f 	.word	0x3a83126f
 80016f0:	48435000 	.word	0x48435000
 80016f4:	42c80000 	.word	0x42c80000
 80016f8:	20000160 	.word	0x20000160
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000400 	.word	0x48000400
 8001704:	200000ac 	.word	0x200000ac
 8001708:	200000b0 	.word	0x200000b0
 800170c:	200000d0 	.word	0x200000d0
 8001710:	200000b8 	.word	0x200000b8
 8001714:	200000d8 	.word	0x200000d8
 8001718:	200000b4 	.word	0x200000b4
 800171c:	00000000 	.word	0x00000000

08001720 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 8001720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_Base_Start_IT(&htim6);
 800172a:	4897      	ldr	r0, [pc, #604]	; (8001988 <FunctionOdometria+0x268>)
 800172c:	f002 fea2 	bl	8004474 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8001730:	4896      	ldr	r0, [pc, #600]	; (800198c <FunctionOdometria+0x26c>)
 8001732:	f002 fe2f 	bl	8004394 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 8001736:	4896      	ldr	r0, [pc, #600]	; (8001990 <FunctionOdometria+0x270>)
 8001738:	f002 fe2c 	bl	8004394 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 100);
 800173c:	4b95      	ldr	r3, [pc, #596]	; (8001994 <FunctionOdometria+0x274>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2164      	movs	r1, #100	; 0x64
 8001742:	4618      	mov	r0, r3
 8001744:	f005 fe8e 	bl	8007464 <osSemaphoreAcquire>

	  float fVE = fWE*RAIO;
 8001748:	4b93      	ldr	r3, [pc, #588]	; (8001998 <FunctionOdometria+0x278>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff1b 	bl	8000588 <__aeabi_f2d>
 8001752:	a385      	add	r3, pc, #532	; (adr r3, 8001968 <FunctionOdometria+0x248>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff6e 	bl	8000638 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff fa40 	bl	8000be8 <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	60fb      	str	r3, [r7, #12]
	  float fVD = fWE*RAIO;
 800176c:	4b8a      	ldr	r3, [pc, #552]	; (8001998 <FunctionOdometria+0x278>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff09 	bl	8000588 <__aeabi_f2d>
 8001776:	a37c      	add	r3, pc, #496	; (adr r3, 8001968 <FunctionOdometria+0x248>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff5c 	bl	8000638 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff fa2e 	bl	8000be8 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	60bb      	str	r3, [r7, #8]

	  fTeta = fTeta + ((fVD-fVE)/(COMPRIMENTO+LARGURA))*fTs;
 8001790:	4b82      	ldr	r3, [pc, #520]	; (800199c <FunctionOdometria+0x27c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fef7 	bl	8000588 <__aeabi_f2d>
 800179a:	4604      	mov	r4, r0
 800179c:	460d      	mov	r5, r1
 800179e:	ed97 7a02 	vldr	s14, [r7, #8]
 80017a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017aa:	ee17 0a90 	vmov	r0, s15
 80017ae:	f7fe feeb 	bl	8000588 <__aeabi_f2d>
 80017b2:	a36f      	add	r3, pc, #444	; (adr r3, 8001970 <FunctionOdometria+0x250>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7ff f868 	bl	800088c <__aeabi_ddiv>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	a36c      	add	r3, pc, #432	; (adr r3, 8001978 <FunctionOdometria+0x258>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe ff35 	bl	8000638 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4620      	mov	r0, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	f7fe fd79 	bl	80002cc <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa01 	bl	8000be8 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a6c      	ldr	r2, [pc, #432]	; (800199c <FunctionOdometria+0x27c>)
 80017ea:	6013      	str	r3, [r2, #0]

	  fX = fX + ((fVD+fVE)/2)*cos(fTeta)*fTs;
 80017ec:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <FunctionOdometria+0x280>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fec9 	bl	8000588 <__aeabi_f2d>
 80017f6:	4604      	mov	r4, r0
 80017f8:	460d      	mov	r5, r1
 80017fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80017fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001806:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800180a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800180e:	ee16 0a90 	vmov	r0, s13
 8001812:	f7fe feb9 	bl	8000588 <__aeabi_f2d>
 8001816:	4680      	mov	r8, r0
 8001818:	4689      	mov	r9, r1
 800181a:	4b60      	ldr	r3, [pc, #384]	; (800199c <FunctionOdometria+0x27c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe feb2 	bl	8000588 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	ec43 2b10 	vmov	d0, r2, r3
 800182c:	f008 ff5c 	bl	800a6e8 <cos>
 8001830:	ec53 2b10 	vmov	r2, r3, d0
 8001834:	4640      	mov	r0, r8
 8001836:	4649      	mov	r1, r9
 8001838:	f7fe fefe 	bl	8000638 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	a34c      	add	r3, pc, #304	; (adr r3, 8001978 <FunctionOdometria+0x258>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fef5 	bl	8000638 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe fd39 	bl	80002cc <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f9c1 	bl	8000be8 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	4a4d      	ldr	r2, [pc, #308]	; (80019a0 <FunctionOdometria+0x280>)
 800186a:	6013      	str	r3, [r2, #0]
	  fY = fY + ((fVD+fVE)/2)*sin(fTeta)*fTs;
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <FunctionOdometria+0x284>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe89 	bl	8000588 <__aeabi_f2d>
 8001876:	4604      	mov	r4, r0
 8001878:	460d      	mov	r5, r1
 800187a:	ed97 7a02 	vldr	s14, [r7, #8]
 800187e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001886:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800188a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800188e:	ee16 0a90 	vmov	r0, s13
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_f2d>
 8001896:	4680      	mov	r8, r0
 8001898:	4689      	mov	r9, r1
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <FunctionOdometria+0x27c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe72 	bl	8000588 <__aeabi_f2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	ec43 2b10 	vmov	d0, r2, r3
 80018ac:	f008 ff70 	bl	800a790 <sin>
 80018b0:	ec53 2b10 	vmov	r2, r3, d0
 80018b4:	4640      	mov	r0, r8
 80018b6:	4649      	mov	r1, r9
 80018b8:	f7fe febe 	bl	8000638 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	a32c      	add	r3, pc, #176	; (adr r3, 8001978 <FunctionOdometria+0x258>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe feb5 	bl	8000638 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fcf9 	bl	80002cc <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f981 	bl	8000be8 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <FunctionOdometria+0x284>)
 80018ea:	6013      	str	r3, [r2, #0]

	  fDistanciaO = sqrt(pow(fX,2) + pow(fY,2));
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <FunctionOdometria+0x280>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe49 	bl	8000588 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001980 <FunctionOdometria+0x260>
 80018fe:	ec43 2b10 	vmov	d0, r2, r3
 8001902:	f008 ff9d 	bl	800a840 <pow>
 8001906:	ec55 4b10 	vmov	r4, r5, d0
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <FunctionOdometria+0x284>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe3a 	bl	8000588 <__aeabi_f2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001980 <FunctionOdometria+0x260>
 800191c:	ec43 2b10 	vmov	d0, r2, r3
 8001920:	f008 ff8e 	bl	800a840 <pow>
 8001924:	ec53 2b10 	vmov	r2, r3, d0
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7fe fcce 	bl	80002cc <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	ec43 2b17 	vmov	d7, r2, r3
 8001938:	eeb0 0a47 	vmov.f32	s0, s14
 800193c:	eef0 0a67 	vmov.f32	s1, s15
 8001940:	f008 ffee 	bl	800a920 <sqrt>
 8001944:	ec53 2b10 	vmov	r2, r3, d0
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f94c 	bl	8000be8 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <FunctionOdometria+0x288>)
 8001954:	6013      	str	r3, [r2, #0]
	  osSemaphoreRelease(SemaphoreComunicaHandle);
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <FunctionOdometria+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f005 fdd4 	bl	8007508 <osSemaphoreRelease>
	  osDelay(100);
 8001960:	2064      	movs	r0, #100	; 0x64
 8001962:	f005 fcdb 	bl	800731c <osDelay>
  {
 8001966:	e6e9      	b.n	800173c <FunctionOdometria+0x1c>
 8001968:	0a3d70a4 	.word	0x0a3d70a4
 800196c:	3fa0a3d7 	.word	0x3fa0a3d7
 8001970:	fbe76c8b 	.word	0xfbe76c8b
 8001974:	3fc2f1a9 	.word	0x3fc2f1a9
 8001978:	9999999a 	.word	0x9999999a
 800197c:	3fb99999 	.word	0x3fb99999
 8001980:	00000000 	.word	0x00000000
 8001984:	40000000 	.word	0x40000000
 8001988:	200002dc 	.word	0x200002dc
 800198c:	200001f8 	.word	0x200001f8
 8001990:	20000290 	.word	0x20000290
 8001994:	20000164 	.word	0x20000164
 8001998:	200000d0 	.word	0x200000d0
 800199c:	200000bc 	.word	0x200000bc
 80019a0:	200000c0 	.word	0x200000c0
 80019a4:	200000c4 	.word	0x200000c4
 80019a8:	200000c8 	.word	0x200000c8
 80019ac:	00000000 	.word	0x00000000

080019b0 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a5f      	ldr	r2, [pc, #380]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x188>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	f040 80b3 	bne.w	8001b28 <HAL_TIM_IC_CaptureCallback+0x178>
		if(uiIsFirst){
 80019c2:	4b5e      	ldr	r3, [pc, #376]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x18c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d01f      	beq.n	8001a0a <HAL_TIM_IC_CaptureCallback+0x5a>
			fDistancia = 0;
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x190>)
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
			lValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80019d2:	2108      	movs	r1, #8
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f003 fd27 	bl	8005428 <HAL_TIM_ReadCapturedValue>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x194>)
 80019e0:	601a      	str	r2, [r3, #0]
			uiIsFirst=0;
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x18c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80019f6:	621a      	str	r2, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a1a      	ldr	r2, [r3, #32]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
		}
	}
}
 8001a08:	e08e      	b.n	8001b28 <HAL_TIM_IC_CaptureCallback+0x178>
			lValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f003 fd0b 	bl	8005428 <HAL_TIM_ReadCapturedValue>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001a18:	601a      	str	r2, [r3, #0]
			uiIsFirst=1;
 8001a1a:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
			fDiferenca = (float)((unsigned)lValor2-(unsigned)lValor1);
 8001a20:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x198>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x194>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a34:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
			fDistancia = ((fDiferenca/2)*0.0001)*340/2 < 100?((fDiferenca/2)*0.0001)*340/2 : fDistancia;
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a48:	ee16 0a90 	vmov	r0, s13
 8001a4c:	f7fe fd9c 	bl	8000588 <__aeabi_f2d>
 8001a50:	a337      	add	r3, pc, #220	; (adr r3, 8001b30 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdef 	bl	8000638 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001a68:	f7fe fde6 	bl	8000638 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7c:	f7fe ff06 	bl	800088c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8001a8e:	f7ff f845 	bl	8000b1c <__aeabi_dcmplt>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d02a      	beq.n	8001aee <HAL_TIM_IC_CaptureCallback+0x13e>
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001aa2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001aa6:	ee16 0a90 	vmov	r0, s13
 8001aaa:	f7fe fd6d 	bl	8000588 <__aeabi_f2d>
 8001aae:	a320      	add	r3, pc, #128	; (adr r3, 8001b30 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fdc0 	bl	8000638 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8001ac6:	f7fe fdb7 	bl	8000638 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ada:	f7fe fed7 	bl	800088c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f87f 	bl	8000be8 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	e001      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x142>
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001af4:	6013      	str	r3, [r2, #0]
			uiBloqueado = 0;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6a1a      	ldr	r2, [r3, #32]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001b0a:	621a      	str	r2, [r3, #32]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a12      	ldr	r2, [r2, #32]
 8001b16:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0208 	bic.w	r2, r2, #8
 8001b26:	60da      	str	r2, [r3, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	eb1c432d 	.word	0xeb1c432d
 8001b34:	3f1a36e2 	.word	0x3f1a36e2
 8001b38:	200001ac 	.word	0x200001ac
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	200000a8 	.word	0x200000a8
 8001b44:	2000009c 	.word	0x2000009c
 8001b48:	200000a0 	.word	0x200000a0
 8001b4c:	200000a4 	.word	0x200000a4
 8001b50:	40754000 	.word	0x40754000
 8001b54:	40590000 	.word	0x40590000
 8001b58:	200000e0 	.word	0x200000e0
 8001b5c:	00000000 	.word	0x00000000

08001b60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d164      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0xda>
		ulPulsesE = __HAL_TIM_GET_COUNTER(&htim2);
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b78:	6013      	str	r3, [r2, #0]
		ulPulsesD = __HAL_TIM_GET_COUNTER(&htim5);
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b82:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001b84:	2120      	movs	r1, #32
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f001 fb6b 	bl	8003264 <HAL_GPIO_TogglePin>

		fWE = (((float)ulPulsesE/FUROS)*2*PI)/fTs;
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ba6:	ee17 0a90 	vmov	r0, s15
 8001baa:	f7fe fced 	bl	8000588 <__aeabi_f2d>
 8001bae:	a326      	add	r3, pc, #152	; (adr r3, 8001c48 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fd40 	bl	8000638 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	a323      	add	r3, pc, #140	; (adr r3, 8001c50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	f7fe fe61 	bl	800088c <__aeabi_ddiv>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f809 	bl	8000be8 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bda:	6013      	str	r3, [r2, #0]
		fWD = (((float)ulPulsesD/FUROS)*2*PI)/fTs;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bf4:	ee17 0a90 	vmov	r0, s15
 8001bf8:	f7fe fcc6 	bl	8000588 <__aeabi_f2d>
 8001bfc:	a312      	add	r3, pc, #72	; (adr r3, 8001c48 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fd19 	bl	8000638 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	a310      	add	r3, pc, #64	; (adr r3, 8001c50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fe3a 	bl	800088c <__aeabi_ddiv>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ffe2 	bl	8000be8 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c28:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim5,0);
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	f3af 8000 	nop.w
 8001c48:	23fee2ca 	.word	0x23fee2ca
 8001c4c:	400921d3 	.word	0x400921d3
 8001c50:	9999999a 	.word	0x9999999a
 8001c54:	3fb99999 	.word	0x3fb99999
 8001c58:	200002dc 	.word	0x200002dc
 8001c5c:	200001f8 	.word	0x200001f8
 8001c60:	200000cc 	.word	0x200000cc
 8001c64:	20000290 	.word	0x20000290
 8001c68:	200000d4 	.word	0x200000d4
 8001c6c:	200000d0 	.word	0x200000d0
 8001c70:	200000d8 	.word	0x200000d8

08001c74 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a49      	ldr	r2, [pc, #292]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a43      	ldr	r2, [pc, #268]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <MX_GPIO_Init+0x158>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	f248 3120 	movw	r1, #33568	; 0x8320
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf4:	f001 fa9e 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	4834      	ldr	r0, [pc, #208]	; (8001dd0 <MX_GPIO_Init+0x15c>)
 8001cfe:	f001 fa99 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2104      	movs	r1, #4
 8001d06:	4833      	ldr	r0, [pc, #204]	; (8001dd4 <MX_GPIO_Init+0x160>)
 8001d08:	f001 fa94 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d12:	4831      	ldr	r0, [pc, #196]	; (8001dd8 <MX_GPIO_Init+0x164>)
 8001d14:	f001 fa8e 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 8001d18:	f242 3360 	movw	r3, #9056	; 0x2360
 8001d1c:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4828      	ldr	r0, [pc, #160]	; (8001dd0 <MX_GPIO_Init+0x15c>)
 8001d2e:	f001 f8e7 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 8001d32:	f248 3320 	movw	r3, #33568	; 0x8320
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f001 f8d7 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <MX_GPIO_Init+0x15c>)
 8001d6a:	f001 f8c9 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f001 f8bb 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <MX_GPIO_Init+0x160>)
 8001da2:	f001 f8ad 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 8001da6:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <MX_GPIO_Init+0x164>)
 8001dc0:	f001 f89e 	bl	8002f00 <HAL_GPIO_Init>

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	48000c00 	.word	0x48000c00
 8001dd8:	48000400 	.word	0x48000400

08001ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de0:	f000 ff0d 	bl	8002bfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de4:	f000 f817 	bl	8001e16 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de8:	f7ff ff44 	bl	8001c74 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001dec:	f000 fa90 	bl	8002310 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001df0:	f000 fb04 	bl	80023fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001df4:	f000 fb56 	bl	80024a4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001df8:	f000 fc0e 	bl	8002618 <MX_TIM6_Init>
  MX_LPUART1_UART_Init();
 8001dfc:	f000 fd66 	bl	80028cc <MX_LPUART1_UART_Init>
  MX_TIM5_Init();
 8001e00:	f000 fbb4 	bl	800256c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001e04:	f000 fdac 	bl	8002960 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e08:	f005 f9ac 	bl	8007164 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e0c:	f7ff f8be 	bl	8000f8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e10:	f005 f9cc 	bl	80071ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <main+0x38>

08001e16 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b094      	sub	sp, #80	; 0x50
 8001e1a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	2238      	movs	r2, #56	; 0x38
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f007 ff8f 	bl	8009d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e3c:	f001 fa2c 	bl	8003298 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e4a:	2340      	movs	r3, #64	; 0x40
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e52:	2302      	movs	r3, #2
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001e56:	2302      	movs	r3, #2
 8001e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001e5a:	2319      	movs	r3, #25
 8001e5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e62:	2302      	movs	r3, #2
 8001e64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e66:	2302      	movs	r3, #2
 8001e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6a:	f107 0318 	add.w	r3, r7, #24
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fab6 	bl	80033e0 <HAL_RCC_OscConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001e7a:	f000 f819 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7e:	230f      	movs	r3, #15
 8001e80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e82:	2303      	movs	r3, #3
 8001e84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e8a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2103      	movs	r1, #3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 fdb9 	bl	8003a10 <HAL_RCC_ClockConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ea4:	f000 f804 	bl	8001eb0 <Error_Handler>
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	3750      	adds	r7, #80	; 0x50
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <Error_Handler+0x8>
	...

08001ebc <PID_init_D>:
float fKpD, fKiD, fKdD, fTsD, fOutminD, fOutmaxD;

float fErrorP_E, fErrorI_E, fErrorD_E;
float fErrorP_D,fErrorI_D,fErrorD_D;

void PID_init_D(sPID_D *par) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	fKpD = par->fKpD;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <PID_init_D+0x50>)
 8001eca:	6013      	str	r3, [r2, #0]
	fKiD = par->fKiD;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <PID_init_D+0x54>)
 8001ed2:	6013      	str	r3, [r2, #0]
	fKdD = par->fKdD;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <PID_init_D+0x58>)
 8001eda:	6013      	str	r3, [r2, #0]
	fTsD = (par->fTsD) / 1000;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ee2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001f18 <PID_init_D+0x5c>
 8001ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <PID_init_D+0x60>)
 8001eec:	edc3 7a00 	vstr	s15, [r3]
	fOutminD = par->fOutminD;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <PID_init_D+0x64>)
 8001ef6:	6013      	str	r3, [r2, #0]
	fOutmaxD = par->fOutmaxD;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <PID_init_D+0x68>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20000180 	.word	0x20000180
 8001f10:	20000184 	.word	0x20000184
 8001f14:	20000188 	.word	0x20000188
 8001f18:	447a0000 	.word	0x447a0000
 8001f1c:	2000018c 	.word	0x2000018c
 8001f20:	20000190 	.word	0x20000190
 8001f24:	20000194 	.word	0x20000194

08001f28 <PID_init_E>:
void PID_init_E(sPID_E *par) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	fKpE = par->fKpE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <PID_init_E+0x50>)
 8001f36:	6013      	str	r3, [r2, #0]
	fKiE = par->fKiE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <PID_init_E+0x54>)
 8001f3e:	6013      	str	r3, [r2, #0]
	fKdE = par->fKdE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <PID_init_E+0x58>)
 8001f46:	6013      	str	r3, [r2, #0]
	fTsE = (par->fTsE) / 1000;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f4e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001f84 <PID_init_E+0x5c>
 8001f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <PID_init_E+0x60>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]
	fOutminE = par->fOutminE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <PID_init_E+0x64>)
 8001f62:	6013      	str	r3, [r2, #0]
	fOutmaxE = par->fOutmaxE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <PID_init_E+0x68>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20000168 	.word	0x20000168
 8001f7c:	2000016c 	.word	0x2000016c
 8001f80:	20000170 	.word	0x20000170
 8001f84:	447a0000 	.word	0x447a0000
 8001f88:	20000174 	.word	0x20000174
 8001f8c:	20000178 	.word	0x20000178
 8001f90:	2000017c 	.word	0x2000017c

08001f94 <PID_E>:

float PID_E(float input, float set_point) {
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f9e:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_E;

	fErrorP_E = (set_point - input);
 8001fa2:	ed97 7a00 	vldr	s14, [r7]
 8001fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fae:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpE * fErrorP_E;
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <PID_E+0xf4>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc0:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_E += fErrorP_E * fTsE;
 8001fc4:	4b31      	ldr	r3, [pc, #196]	; (800208c <PID_E+0xf8>)
 8001fc6:	ed93 7a00 	vldr	s14, [r3]
 8001fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <PID_E+0xfc>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <PID_E+0xfc>)
 8001fde:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiE * fErrorI_E;
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <PID_E+0x100>)
 8001fe4:	ed93 7a00 	vldr	s14, [r3]
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <PID_E+0xfc>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff2:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_E = (fErrorP_E-fErrorD_E)/fTsE;
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <PID_E+0x104>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002000:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <PID_E+0xf8>)
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <PID_E+0x104>)
 8002010:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdE * fErrorD_E;
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <PID_E+0x108>)
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <PID_E+0x104>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 8002028:	ed97 7a05 	vldr	s14, [r7, #20]
 800202c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002034:	ed97 7a03 	vldr	s14, [r7, #12]
 8002038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203c:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxE) {
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <PID_E+0x10c>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ed97 7a07 	vldr	s14, [r7, #28]
 800204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd02      	ble.n	800205a <PID_E+0xc6>
		fOut = fOutmaxE;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <PID_E+0x10c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61fb      	str	r3, [r7, #28]
	}
	if (fOut < fOutminE) {
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <PID_E+0x110>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ed97 7a07 	vldr	s14, [r7, #28]
 8002064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	d502      	bpl.n	8002074 <PID_E+0xe0>
		fOut = fOutminE;
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <PID_E+0x110>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	ee07 3a90 	vmov	s15, r3
}
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	3724      	adds	r7, #36	; 0x24
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	20000168 	.word	0x20000168
 800208c:	20000174 	.word	0x20000174
 8002090:	20000198 	.word	0x20000198
 8002094:	2000016c 	.word	0x2000016c
 8002098:	2000019c 	.word	0x2000019c
 800209c:	20000170 	.word	0x20000170
 80020a0:	2000017c 	.word	0x2000017c
 80020a4:	20000178 	.word	0x20000178

080020a8 <PID_D>:
float PID_D(float input, float set_point) {
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80020b2:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_D;

	fErrorP_D = (set_point - input);
 80020b6:	ed97 7a00 	vldr	s14, [r7]
 80020ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpD * fErrorP_D;
 80020c6:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <PID_D+0xf8>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_D += fErrorP_D * fTsD;
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <PID_D+0xfc>)
 80020da:	ed93 7a00 	vldr	s14, [r3]
 80020de:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <PID_D+0x100>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <PID_D+0x100>)
 80020f2:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiD * fErrorI_D;
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <PID_D+0x104>)
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <PID_D+0x100>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002106:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_D = (fErrorP_D-fErrorD_D)/fTsD;
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <PID_D+0x108>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ed97 7a06 	vldr	s14, [r7, #24]
 8002114:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <PID_D+0xfc>)
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002122:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <PID_D+0x108>)
 8002124:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdD * fErrorD_D;
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <PID_D+0x10c>)
 800212a:	ed93 7a00 	vldr	s14, [r3]
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <PID_D+0x108>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 800213c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002140:	edd7 7a04 	vldr	s15, [r7, #16]
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	ed97 7a03 	vldr	s14, [r7, #12]
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxD) {
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <PID_D+0x110>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ed97 7a07 	vldr	s14, [r7, #28]
 800215e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002166:	dd03      	ble.n	8002170 <PID_D+0xc8>
		fOut = fOutmaxD;
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <PID_D+0x110>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e00c      	b.n	800218a <PID_D+0xe2>
	}else if (fOut < fOutminD) {
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <PID_D+0x114>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ed97 7a07 	vldr	s14, [r7, #28]
 800217a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	d502      	bpl.n	800218a <PID_D+0xe2>
		fOut = fOutminD;
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <PID_D+0x114>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	ee07 3a90 	vmov	s15, r3
}
 8002190:	eeb0 0a67 	vmov.f32	s0, s15
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000180 	.word	0x20000180
 80021a4:	2000018c 	.word	0x2000018c
 80021a8:	200001a0 	.word	0x200001a0
 80021ac:	20000184 	.word	0x20000184
 80021b0:	200001a4 	.word	0x200001a4
 80021b4:	20000188 	.word	0x20000188
 80021b8:	20000194 	.word	0x20000194
 80021bc:	20000190 	.word	0x20000190

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_MspInit+0x4c>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_MspInit+0x4c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6613      	str	r3, [r2, #96]	; 0x60
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_MspInit+0x4c>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_MspInit+0x4c>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_MspInit+0x4c>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_MspInit+0x4c>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	210f      	movs	r1, #15
 80021fa:	f06f 0001 	mvn.w	r0, #1
 80021fe:	f000 fe4a 	bl	8002e96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <NMI_Handler+0x4>

08002216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <HardFault_Handler+0x4>

0800221c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <MemManage_Handler+0x4>

08002222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler+0x4>

0800222e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002240:	f000 fd30 	bl	8002ca4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002244:	f006 fdcc 	bl	8008de0 <xTaskGetSchedulerState>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800224e:	f007 fb5b 	bl	8009908 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM1_CC_IRQHandler+0x10>)
 800225e:	f002 fc9d 	bl	8004b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200001ac 	.word	0x200001ac

0800226c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM6_DAC_IRQHandler+0x10>)
 8002272:	f002 fc93 	bl	8004b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002dc 	.word	0x200002dc

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f007 fd10 	bl	8009cd4 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20020000 	.word	0x20020000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	200001a8 	.word	0x200001a8
 80022e8:	20002668 	.word	0x20002668

080022ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <MX_TIM1_Init+0xe4>)
 800233e:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <MX_TIM1_Init+0xe8>)
 8002340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <MX_TIM1_Init+0xe4>)
 8002344:	2231      	movs	r2, #49	; 0x31
 8002346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <MX_TIM1_Init+0xe4>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <MX_TIM1_Init+0xe4>)
 8002350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <MX_TIM1_Init+0xe4>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <MX_TIM1_Init+0xe4>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <MX_TIM1_Init+0xe4>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002368:	4822      	ldr	r0, [pc, #136]	; (80023f4 <MX_TIM1_Init+0xe4>)
 800236a:	f001 ffbb 	bl	80042e4 <HAL_TIM_Base_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8002374:	f7ff fd9c 	bl	8001eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	4619      	mov	r1, r3
 8002384:	481b      	ldr	r0, [pc, #108]	; (80023f4 <MX_TIM1_Init+0xe4>)
 8002386:	f002 ff39 	bl	80051fc <HAL_TIM_ConfigClockSource>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002390:	f7ff fd8e 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002394:	4817      	ldr	r0, [pc, #92]	; (80023f4 <MX_TIM1_Init+0xe4>)
 8002396:	f002 fa4f 	bl	8004838 <HAL_TIM_IC_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80023a0:	f7ff fd86 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	480f      	ldr	r0, [pc, #60]	; (80023f4 <MX_TIM1_Init+0xe4>)
 80023b8:	f003 fe56 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80023c2:	f7ff fd75 	bl	8001eb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2208      	movs	r2, #8
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_TIM1_Init+0xe4>)
 80023de:	f002 fd5c 	bl	8004e9a <HAL_TIM_IC_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80023e8:	f7ff fd62 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	; 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	200001ac 	.word	0x200001ac
 80023f8:	40012c00 	.word	0x40012c00

080023fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <MX_TIM2_Init+0xa0>)
 800241c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002420:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <MX_TIM2_Init+0xa0>)
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <MX_TIM2_Init+0xa0>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <MX_TIM2_Init+0xa0>)
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <MX_TIM2_Init+0xa4>)
 8002432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <MX_TIM2_Init+0xa0>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <MX_TIM2_Init+0xa0>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002440:	4816      	ldr	r0, [pc, #88]	; (800249c <MX_TIM2_Init+0xa0>)
 8002442:	f001 ff4f 	bl	80042e4 <HAL_TIM_Base_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800244c:	f7ff fd30 	bl	8001eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002454:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4619      	mov	r1, r3
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <MX_TIM2_Init+0xa0>)
 800246a:	f002 fec7 	bl	80051fc <HAL_TIM_ConfigClockSource>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002474:	f7ff fd1c 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_TIM2_Init+0xa0>)
 8002486:	f003 fdef 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002490:	f7ff fd0e 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200001f8 	.word	0x200001f8
 80024a0:	000f423f 	.word	0x000f423f

080024a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b6:	463b      	mov	r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
 80024c4:	615a      	str	r2, [r3, #20]
 80024c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024ca:	4a27      	ldr	r2, [pc, #156]	; (8002568 <MX_TIM3_Init+0xc4>)
 80024cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024d0:	2231      	movs	r2, #49	; 0x31
 80024d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024dc:	2263      	movs	r2, #99	; 0x63
 80024de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ec:	481d      	ldr	r0, [pc, #116]	; (8002564 <MX_TIM3_Init+0xc0>)
 80024ee:	f002 f839 	bl	8004564 <HAL_TIM_PWM_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024f8:	f7ff fcda 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4816      	ldr	r0, [pc, #88]	; (8002564 <MX_TIM3_Init+0xc0>)
 800250c:	f003 fdac 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002516:	f7ff fccb 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251a:	2360      	movs	r3, #96	; 0x60
 800251c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252a:	463b      	mov	r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	4619      	mov	r1, r3
 8002530:	480c      	ldr	r0, [pc, #48]	; (8002564 <MX_TIM3_Init+0xc0>)
 8002532:	f002 fd4f 	bl	8004fd4 <HAL_TIM_PWM_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800253c:	f7ff fcb8 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	2204      	movs	r2, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4807      	ldr	r0, [pc, #28]	; (8002564 <MX_TIM3_Init+0xc0>)
 8002548:	f002 fd44 	bl	8004fd4 <HAL_TIM_PWM_ConfigChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002552:	f7ff fcad 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002556:	4803      	ldr	r0, [pc, #12]	; (8002564 <MX_TIM3_Init+0xc0>)
 8002558:	f000 f980 	bl	800285c <HAL_TIM_MspPostInit>

}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000244 	.word	0x20000244
 8002568:	40000400 	.word	0x40000400

0800256c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <MX_TIM5_Init+0xa0>)
 800258c:	4a20      	ldr	r2, [pc, #128]	; (8002610 <MX_TIM5_Init+0xa4>)
 800258e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <MX_TIM5_Init+0xa0>)
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <MX_TIM5_Init+0xa0>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999999;
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <MX_TIM5_Init+0xa0>)
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <MX_TIM5_Init+0xa8>)
 80025a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_TIM5_Init+0xa0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_TIM5_Init+0xa0>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025ae:	4817      	ldr	r0, [pc, #92]	; (800260c <MX_TIM5_Init+0xa0>)
 80025b0:	f001 fe98 	bl	80042e4 <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80025ba:	f7ff fc79 	bl	8001eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80025be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c2:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4619      	mov	r1, r3
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <MX_TIM5_Init+0xa0>)
 80025d8:	f002 fe10 	bl	80051fc <HAL_TIM_ConfigClockSource>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80025e2:	f7ff fc65 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4806      	ldr	r0, [pc, #24]	; (800260c <MX_TIM5_Init+0xa0>)
 80025f4:	f003 fd38 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80025fe:	f7ff fc57 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000290 	.word	0x20000290
 8002610:	40000c00 	.word	0x40000c00
 8002614:	000f423f 	.word	0x000f423f

08002618 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_TIM6_Init+0x68>)
 800262a:	4a16      	ldr	r2, [pc, #88]	; (8002684 <MX_TIM6_Init+0x6c>)
 800262c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5000-1;
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MX_TIM6_Init+0x68>)
 8002630:	f241 3287 	movw	r2, #4999	; 0x1387
 8002634:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <MX_TIM6_Init+0x68>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <MX_TIM6_Init+0x68>)
 800263e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002642:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <MX_TIM6_Init+0x68>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800264a:	480d      	ldr	r0, [pc, #52]	; (8002680 <MX_TIM6_Init+0x68>)
 800264c:	f001 fe4a 	bl	80042e4 <HAL_TIM_Base_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002656:	f7ff fc2b 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4806      	ldr	r0, [pc, #24]	; (8002680 <MX_TIM6_Init+0x68>)
 8002668:	f003 fcfe 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002672:	f7ff fc1d 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200002dc 	.word	0x200002dc
 8002684:	40001000 	.word	0x40001000

08002688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	; 0x38
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a57      	ldr	r2, [pc, #348]	; (8002804 <HAL_TIM_Base_MspInit+0x17c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d130      	bne.n	800270c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026aa:	4b57      	ldr	r3, [pc, #348]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80026b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026b4:	6613      	str	r3, [r2, #96]	; 0x60
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80026da:	2304      	movs	r3, #4
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026ea:	2302      	movs	r3, #2
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	4845      	ldr	r0, [pc, #276]	; (800280c <HAL_TIM_Base_MspInit+0x184>)
 80026f6:	f000 fc03 	bl	8002f00 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2105      	movs	r1, #5
 80026fe:	201b      	movs	r0, #27
 8002700:	f000 fbc9 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002704:	201b      	movs	r0, #27
 8002706:	f000 fbe0 	bl	8002eca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800270a:	e076      	b.n	80027fa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d129      	bne.n	800276a <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002716:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	4a3b      	ldr	r2, [pc, #236]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6593      	str	r3, [r2, #88]	; 0x58
 8002722:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273a:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 8002746:	2301      	movs	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8002756:	230e      	movs	r3, #14
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 800275a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f000 fbcc 	bl	8002f00 <HAL_GPIO_Init>
}
 8002768:	e047      	b.n	80027fa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM5)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a28      	ldr	r2, [pc, #160]	; (8002810 <HAL_TIM_Base_MspInit+0x188>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d129      	bne.n	80027c8 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
 8002780:	4b21      	ldr	r3, [pc, #132]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 8002792:	f043 0302 	orr.w	r3, r3, #2
 8002796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_D_Pin;
 80027a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027b6:	2302      	movs	r3, #2
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 80027ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027be:	4619      	mov	r1, r3
 80027c0:	4814      	ldr	r0, [pc, #80]	; (8002814 <HAL_TIM_Base_MspInit+0x18c>)
 80027c2:	f000 fb9d 	bl	8002f00 <HAL_GPIO_Init>
}
 80027c6:	e018      	b.n	80027fa <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM6)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <HAL_TIM_Base_MspInit+0x190>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d113      	bne.n	80027fa <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_TIM_Base_MspInit+0x180>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2105      	movs	r1, #5
 80027ee:	2036      	movs	r0, #54	; 0x36
 80027f0:	f000 fb51 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027f4:	2036      	movs	r0, #54	; 0x36
 80027f6:	f000 fb68 	bl	8002eca <HAL_NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3738      	adds	r7, #56	; 0x38
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40012c00 	.word	0x40012c00
 8002808:	40021000 	.word	0x40021000
 800280c:	48000800 	.word	0x48000800
 8002810:	40000c00 	.word	0x40000c00
 8002814:	48000400 	.word	0x48000400
 8002818:	40001000 	.word	0x40001000

0800281c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_TIM_PWM_MspInit+0x38>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10b      	bne.n	8002846 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_TIM_PWM_MspInit+0x3c>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_TIM_PWM_MspInit+0x3c>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_TIM_PWM_MspInit+0x3c>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40000400 	.word	0x40000400
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_TIM_MspPostInit+0x64>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d11b      	bne.n	80028b6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_TIM_MspPostInit+0x68>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_TIM_MspPostInit+0x68>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_TIM_MspPostInit+0x68>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_2_Pin;
 8002896:	2330      	movs	r3, #48	; 0x30
 8002898:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	4619      	mov	r1, r3
 80028b0:	4805      	ldr	r0, [pc, #20]	; (80028c8 <HAL_TIM_MspPostInit+0x6c>)
 80028b2:	f000 fb25 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028b6:	bf00      	nop
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40021000 	.word	0x40021000
 80028c8:	48000400 	.word	0x48000400

080028cc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <MX_LPUART1_UART_Init+0x90>)
 80028d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 800290a:	2200      	movs	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800290e:	4812      	ldr	r0, [pc, #72]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 8002910:	f003 fc86 	bl	8006220 <HAL_UART_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800291a:	f7ff fac9 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291e:	2100      	movs	r1, #0
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 8002922:	f004 fb21 	bl	8006f68 <HAL_UARTEx_SetTxFifoThreshold>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800292c:	f7ff fac0 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002930:	2100      	movs	r1, #0
 8002932:	4809      	ldr	r0, [pc, #36]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 8002934:	f004 fb56 	bl	8006fe4 <HAL_UARTEx_SetRxFifoThreshold>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800293e:	f7ff fab7 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_LPUART1_UART_Init+0x8c>)
 8002944:	f004 fad7 	bl	8006ef6 <HAL_UARTEx_DisableFifoMode>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800294e:	f7ff faaf 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000328 	.word	0x20000328
 800295c:	40008000 	.word	0x40008000

08002960 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002964:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 8002966:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <MX_USART1_UART_Init+0x94>)
 8002968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 800296c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a8:	4811      	ldr	r0, [pc, #68]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 80029aa:	f003 fc39 	bl	8006220 <HAL_UART_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029b4:	f7ff fa7c 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029b8:	2100      	movs	r1, #0
 80029ba:	480d      	ldr	r0, [pc, #52]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 80029bc:	f004 fad4 	bl	8006f68 <HAL_UARTEx_SetTxFifoThreshold>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029c6:	f7ff fa73 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ca:	2100      	movs	r1, #0
 80029cc:	4808      	ldr	r0, [pc, #32]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 80029ce:	f004 fb09 	bl	8006fe4 <HAL_UARTEx_SetRxFifoThreshold>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029d8:	f7ff fa6a 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <MX_USART1_UART_Init+0x90>)
 80029de:	f004 fa8a 	bl	8006ef6 <HAL_UARTEx_DisableFifoMode>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029e8:	f7ff fa62 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200003b8 	.word	0x200003b8
 80029f4:	40013800 	.word	0x40013800

080029f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b0a2      	sub	sp, #136	; 0x88
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	2254      	movs	r2, #84	; 0x54
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f007 f995 	bl	8009d48 <memset>
  if(uartHandle->Instance==LPUART1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5e      	ldr	r2, [pc, #376]	; (8002b9c <HAL_UART_MspInit+0x1a4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d157      	bne.n	8002ad8 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 fa07 	bl	8003e48 <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a40:	f7ff fa36 	bl	8001eb0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a44:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	4a4f      	ldr	r2, [pc, #316]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a68:	4b4d      	ldr	r3, [pc, #308]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a74:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a80:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	483e      	ldr	r0, [pc, #248]	; (8002ba4 <HAL_UART_MspInit+0x1ac>)
 8002aac:	f000 fa28 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad2:	f000 fa15 	bl	8002f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ad6:	e05c      	b.n	8002b92 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <HAL_UART_MspInit+0x1b0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d157      	bne.n	8002b92 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aea:	f107 0320 	add.w	r3, r7, #32
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f9aa 	bl	8003e48 <HAL_RCCEx_PeriphCLKConfig>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_MspInit+0x106>
      Error_Handler();
 8002afa:	f7ff f9d9 	bl	8001eb0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002afe:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b08:	6613      	str	r3, [r2, #96]	; 0x60
 8002b0a:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b22:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_UART_MspInit+0x1a8>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 8002b46:	2310      	movs	r3, #16
 8002b48:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b62:	4619      	mov	r1, r3
 8002b64:	480f      	ldr	r0, [pc, #60]	; (8002ba4 <HAL_UART_MspInit+0x1ac>)
 8002b66:	f000 f9cb 	bl	8002f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 8002b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b7e:	2307      	movs	r3, #7
 8002b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 8002b84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8e:	f000 f9b7 	bl	8002f00 <HAL_GPIO_Init>
}
 8002b92:	bf00      	nop
 8002b94:	3788      	adds	r7, #136	; 0x88
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40008000 	.word	0x40008000
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	48000800 	.word	0x48000800
 8002ba8:	40013800 	.word	0x40013800

08002bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bb2:	490e      	ldr	r1, [pc, #56]	; (8002bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <LoopForever+0xe>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bc8:	4c0b      	ldr	r4, [pc, #44]	; (8002bf8 <LoopForever+0x16>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bd6:	f7ff fb89 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bda:	f007 f881 	bl	8009ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bde:	f7ff f8fd 	bl	8001ddc <main>

08002be2 <LoopForever>:

LoopForever:
    b LoopForever
 8002be2:	e7fe      	b.n	8002be2 <LoopForever>
  ldr   r0, =_estack
 8002be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002bf0:	0800caa0 	.word	0x0800caa0
  ldr r2, =_sbss
 8002bf4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002bf8:	20002664 	.word	0x20002664

08002bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <ADC1_2_IRQHandler>

08002bfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f000 f939 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0e:	200f      	movs	r0, #15
 8002c10:	f000 f80e 	bl	8002c30 <HAL_InitTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	71fb      	strb	r3, [r7, #7]
 8002c1e:	e001      	b.n	8002c24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c20:	f7ff face 	bl	80021c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c24:	79fb      	ldrb	r3, [r7, #7]

}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_InitTick+0x68>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d022      	beq.n	8002c8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_InitTick+0x6c>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_InitTick+0x68>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f944 	bl	8002ee6 <HAL_SYSTICK_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10f      	bne.n	8002c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b0f      	cmp	r3, #15
 8002c68:	d809      	bhi.n	8002c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c72:	f000 f910 	bl	8002e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_InitTick+0x70>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e007      	b.n	8002c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	e004      	b.n	8002c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e001      	b.n	8002c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000014 	.word	0x20000014
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	20000010 	.word	0x20000010

08002ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_IncTick+0x1c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_IncTick+0x20>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <HAL_IncTick+0x1c>)
 8002cb4:	6013      	str	r3, [r2, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	20000448 	.word	0x20000448
 8002cc4:	20000014 	.word	0x20000014

08002cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_GetTick+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000448 	.word	0x20000448

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	; (8002d7c <__NVIC_EnableIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff29 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff40 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff90 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5f 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff33 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffa4 	bl	8002e3c <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f0e:	e15a      	b.n	80031c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 814c 	beq.w	80031c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d005      	beq.n	8002f40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d130      	bne.n	8002fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f76:	2201      	movs	r2, #1
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f003 0201 	and.w	r2, r3, #1
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d017      	beq.n	8002fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d123      	bne.n	8003032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	08da      	lsrs	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3208      	adds	r2, #8
 8002ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	220f      	movs	r2, #15
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	6939      	ldr	r1, [r7, #16]
 800302e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80a6 	beq.w	80031c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003074:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_GPIO_Init+0x2e4>)
 8003076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003078:	4a5a      	ldr	r2, [pc, #360]	; (80031e4 <HAL_GPIO_Init+0x2e4>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6613      	str	r3, [r2, #96]	; 0x60
 8003080:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_GPIO_Init+0x2e4>)
 8003082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308c:	4a56      	ldr	r2, [pc, #344]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030b6:	d01f      	beq.n	80030f8 <HAL_GPIO_Init+0x1f8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a4c      	ldr	r2, [pc, #304]	; (80031ec <HAL_GPIO_Init+0x2ec>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d019      	beq.n	80030f4 <HAL_GPIO_Init+0x1f4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a4b      	ldr	r2, [pc, #300]	; (80031f0 <HAL_GPIO_Init+0x2f0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_GPIO_Init+0x1f0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <HAL_GPIO_Init+0x2f4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00d      	beq.n	80030ec <HAL_GPIO_Init+0x1ec>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a49      	ldr	r2, [pc, #292]	; (80031f8 <HAL_GPIO_Init+0x2f8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <HAL_GPIO_Init+0x1e8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a48      	ldr	r2, [pc, #288]	; (80031fc <HAL_GPIO_Init+0x2fc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_GPIO_Init+0x1e4>
 80030e0:	2305      	movs	r3, #5
 80030e2:	e00a      	b.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030e4:	2306      	movs	r3, #6
 80030e6:	e008      	b.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e006      	b.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030ec:	2303      	movs	r3, #3
 80030ee:	e004      	b.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e002      	b.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_GPIO_Init+0x1fa>
 80030f8:	2300      	movs	r3, #0
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	f002 0203 	and.w	r2, r2, #3
 8003100:	0092      	lsls	r2, r2, #2
 8003102:	4093      	lsls	r3, r2
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800310a:	4937      	ldr	r1, [pc, #220]	; (80031e8 <HAL_GPIO_Init+0x2e8>)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3302      	adds	r3, #2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003118:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_GPIO_Init+0x300>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800313c:	4a30      	ldr	r2, [pc, #192]	; (8003200 <HAL_GPIO_Init+0x300>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_GPIO_Init+0x300>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	43db      	mvns	r3, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003166:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_GPIO_Init+0x300>)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_GPIO_Init+0x300>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_GPIO_Init+0x300>)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_GPIO_Init+0x300>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ba:	4a11      	ldr	r2, [pc, #68]	; (8003200 <HAL_GPIO_Init+0x300>)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3301      	adds	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f ae9d 	bne.w	8002f10 <HAL_GPIO_Init+0x10>
  }
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40010000 	.word	0x40010000
 80031ec:	48000400 	.word	0x48000400
 80031f0:	48000800 	.word	0x48000800
 80031f4:	48000c00 	.word	0x48000c00
 80031f8:	48001000 	.word	0x48001000
 80031fc:	48001400 	.word	0x48001400
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003250:	e002      	b.n	8003258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4013      	ands	r3, r2
 800327c:	041a      	lsls	r2, r3, #16
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43d9      	mvns	r1, r3
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	400b      	ands	r3, r1
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d141      	bne.n	800332a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a6:	4b4b      	ldr	r3, [pc, #300]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d131      	bne.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b4:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ba:	4a46      	ldr	r2, [pc, #280]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032cc:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032d4:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2232      	movs	r2, #50	; 0x32
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	4a3f      	ldr	r2, [pc, #252]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	0c9b      	lsrs	r3, r3, #18
 80032e6:	3301      	adds	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ea:	e002      	b.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d102      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f2      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003306:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d158      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e057      	b.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003318:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331e:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003324:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003328:	e04d      	b.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003330:	d141      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003332:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d131      	bne.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003346:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003358:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800335e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2232      	movs	r2, #50	; 0x32
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003376:	e002      	b.n	800337e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3b01      	subs	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338a:	d102      	bne.n	8003392 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f2      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d112      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e011      	b.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033b4:	e007      	b.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033be:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40007000 	.word	0x40007000
 80033d8:	2000000c 	.word	0x2000000c
 80033dc:	431bde83 	.word	0x431bde83

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e306      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d075      	beq.n	80034ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fe:	4b97      	ldr	r3, [pc, #604]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003408:	4b94      	ldr	r3, [pc, #592]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d102      	bne.n	800341e <HAL_RCC_OscConfig+0x3e>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d002      	beq.n	8003424 <HAL_RCC_OscConfig+0x44>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d10b      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	4b8d      	ldr	r3, [pc, #564]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d05b      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d157      	bne.n	80034e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e2e1      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d106      	bne.n	8003454 <HAL_RCC_OscConfig+0x74>
 8003446:	4b85      	ldr	r3, [pc, #532]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a84      	ldr	r2, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e01d      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b7f      	ldr	r3, [pc, #508]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7e      	ldr	r2, [pc, #504]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b7c      	ldr	r3, [pc, #496]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7b      	ldr	r2, [pc, #492]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003478:	4b78      	ldr	r3, [pc, #480]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a77      	ldr	r2, [pc, #476]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b75      	ldr	r3, [pc, #468]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a74      	ldr	r2, [pc, #464]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800348a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7ff fc16 	bl	8002cc8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7ff fc12 	bl	8002cc8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e2a6      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b2:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0xc0>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7ff fc02 	bl	8002cc8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7ff fbfe 	bl	8002cc8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e292      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034da:	4b60      	ldr	r3, [pc, #384]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0xe8>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d075      	beq.n	80035e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f6:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003500:	4b56      	ldr	r3, [pc, #344]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d102      	bne.n	8003516 <HAL_RCC_OscConfig+0x136>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d002      	beq.n	800351c <HAL_RCC_OscConfig+0x13c>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d11f      	bne.n	800355c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800351c:	4b4f      	ldr	r3, [pc, #316]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x154>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e265      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b49      	ldr	r3, [pc, #292]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	4946      	ldr	r1, [pc, #280]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003548:	4b45      	ldr	r3, [pc, #276]	; (8003660 <HAL_RCC_OscConfig+0x280>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fb6f 	bl	8002c30 <HAL_InitTick>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d043      	beq.n	80035e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e251      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d023      	beq.n	80035ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a3c      	ldr	r2, [pc, #240]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7ff fbaa 	bl	8002cc8 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003578:	f7ff fba6 	bl	8002cc8 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e23a      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358a:	4b34      	ldr	r3, [pc, #208]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	492d      	ldr	r1, [pc, #180]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
 80035aa:	e01a      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2a      	ldr	r2, [pc, #168]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80035b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7ff fb86 	bl	8002cc8 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7ff fb82 	bl	8002cc8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e216      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1e0>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d041      	beq.n	8003672 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01c      	beq.n	8003630 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80035f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fc:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7ff fb5f 	bl	8002cc8 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360e:	f7ff fb5b 	bl	8002cc8 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e1ef      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ef      	beq.n	800360e <HAL_RCC_OscConfig+0x22e>
 800362e:	e020      	b.n	8003672 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003630:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <HAL_RCC_OscConfig+0x27c>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7ff fb42 	bl	8002cc8 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003646:	e00d      	b.n	8003664 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003648:	f7ff fb3e 	bl	8002cc8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d906      	bls.n	8003664 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1d2      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003664:	4b8c      	ldr	r3, [pc, #560]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ea      	bne.n	8003648 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80a6 	beq.w	80037cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003680:	2300      	movs	r3, #0
 8003682:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003684:	4b84      	ldr	r3, [pc, #528]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_OscConfig+0x2b4>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x2b6>
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	4b7f      	ldr	r3, [pc, #508]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4a7e      	ldr	r2, [pc, #504]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
 80036a6:	4b7c      	ldr	r3, [pc, #496]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036b2:	2301      	movs	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b6:	4b79      	ldr	r3, [pc, #484]	; (800389c <HAL_RCC_OscConfig+0x4bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d118      	bne.n	80036f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c2:	4b76      	ldr	r3, [pc, #472]	; (800389c <HAL_RCC_OscConfig+0x4bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a75      	ldr	r2, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x4bc>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ce:	f7ff fafb 	bl	8002cc8 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d6:	f7ff faf7 	bl	8002cc8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e18b      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e8:	4b6c      	ldr	r3, [pc, #432]	; (800389c <HAL_RCC_OscConfig+0x4bc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d108      	bne.n	800370e <HAL_RCC_OscConfig+0x32e>
 80036fc:	4b66      	ldr	r3, [pc, #408]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	4a65      	ldr	r2, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370c:	e024      	b.n	8003758 <HAL_RCC_OscConfig+0x378>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d110      	bne.n	8003738 <HAL_RCC_OscConfig+0x358>
 8003716:	4b60      	ldr	r3, [pc, #384]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	4a5e      	ldr	r2, [pc, #376]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003726:	4b5c      	ldr	r3, [pc, #368]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	4a5a      	ldr	r2, [pc, #360]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003736:	e00f      	b.n	8003758 <HAL_RCC_OscConfig+0x378>
 8003738:	4b57      	ldr	r3, [pc, #348]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	4a56      	ldr	r2, [pc, #344]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d016      	beq.n	800378e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7ff fab2 	bl	8002cc8 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003766:	e00a      	b.n	800377e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7ff faae 	bl	8002cc8 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	; 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e140      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377e:	4b46      	ldr	r3, [pc, #280]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ed      	beq.n	8003768 <HAL_RCC_OscConfig+0x388>
 800378c:	e015      	b.n	80037ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7ff fa9b 	bl	8002cc8 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7ff fa97 	bl	8002cc8 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e129      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ac:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ed      	bne.n	8003796 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ba:	7ffb      	ldrb	r3, [r7, #31]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c0:	4b35      	ldr	r3, [pc, #212]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	4a34      	ldr	r2, [pc, #208]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80037c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d03c      	beq.n	8003852 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01c      	beq.n	800381a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e0:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037e6:	4a2c      	ldr	r2, [pc, #176]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7ff fa6a 	bl	8002cc8 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037f8:	f7ff fa66 	bl	8002cc8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0fa      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800380a:	4b23      	ldr	r3, [pc, #140]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ef      	beq.n	80037f8 <HAL_RCC_OscConfig+0x418>
 8003818:	e01b      	b.n	8003852 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7ff fa4d 	bl	8002cc8 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003832:	f7ff fa49 	bl	8002cc8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0dd      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003844:	4b14      	ldr	r3, [pc, #80]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1ef      	bne.n	8003832 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80d1 	beq.w	80039fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b0c      	cmp	r3, #12
 8003866:	f000 808b 	beq.w	8003980 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d15e      	bne.n	8003930 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x4b8>)
 8003878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7ff fa23 	bl	8002cc8 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003884:	e00c      	b.n	80038a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003886:	f7ff fa1f 	bl	8002cc8 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d905      	bls.n	80038a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e0b3      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a0:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ec      	bne.n	8003886 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ac:	4b56      	ldr	r3, [pc, #344]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4b56      	ldr	r3, [pc, #344]	; (8003a0c <HAL_RCC_OscConfig+0x62c>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6a11      	ldr	r1, [r2, #32]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038bc:	3a01      	subs	r2, #1
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	4311      	orrs	r1, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038c6:	0212      	lsls	r2, r2, #8
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	0552      	lsls	r2, r2, #21
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038da:	0852      	lsrs	r2, r2, #1
 80038dc:	3a01      	subs	r2, #1
 80038de:	0652      	lsls	r2, r2, #25
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038e6:	06d2      	lsls	r2, r2, #27
 80038e8:	430a      	orrs	r2, r1
 80038ea:	4947      	ldr	r1, [pc, #284]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	4b45      	ldr	r3, [pc, #276]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a44      	ldr	r2, [pc, #272]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fc:	4b42      	ldr	r3, [pc, #264]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a41      	ldr	r2, [pc, #260]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003906:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7ff f9de 	bl	8002cc8 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7ff f9da 	bl	8002cc8 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e06e      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x530>
 800392e:	e066      	b.n	80039fe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800393c:	4b32      	ldr	r3, [pc, #200]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a31      	ldr	r2, [pc, #196]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003948:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 800394e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7ff f9b6 	bl	8002cc8 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7ff f9b2 	bl	8002cc8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e046      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003972:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x580>
 800397e:	e03e      	b.n	80039fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e039      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <HAL_RCC_OscConfig+0x628>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	429a      	cmp	r2, r3
 800399e:	d12c      	bne.n	80039fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	3b01      	subs	r3, #1
 80039ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d123      	bne.n	80039fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d11b      	bne.n	80039fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d113      	bne.n	80039fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	3b01      	subs	r3, #1
 80039e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	3b01      	subs	r3, #1
 80039f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	019f800c 	.word	0x019f800c

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e11e      	b.n	8003c66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b91      	ldr	r3, [pc, #580]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d910      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b8e      	ldr	r3, [pc, #568]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	498c      	ldr	r1, [pc, #560]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b8a      	ldr	r3, [pc, #552]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e106      	b.n	8003c66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d073      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d129      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6c:	4b81      	ldr	r3, [pc, #516]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0f4      	b.n	8003c66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a7c:	f000 f99e 	bl	8003dbc <RCC_GetSysClockFreqFromPLLSource>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4a7c      	ldr	r2, [pc, #496]	; (8003c78 <HAL_RCC_ClockConfig+0x268>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d93f      	bls.n	8003b0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a8a:	4b7a      	ldr	r3, [pc, #488]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d033      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12f      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aaa:	4b72      	ldr	r3, [pc, #456]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab2:	4a70      	ldr	r2, [pc, #448]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e024      	b.n	8003b0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0c6      	b.n	8003c66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad8:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0be      	b.n	8003c66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ae8:	f000 f8ce 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4a61      	ldr	r2, [pc, #388]	; (8003c78 <HAL_RCC_ClockConfig+0x268>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d909      	bls.n	8003b0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003af6:	4b5f      	ldr	r3, [pc, #380]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afe:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4957      	ldr	r1, [pc, #348]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7ff f8d4 	bl	8002cc8 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7ff f8d0 	bl	8002cc8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e095      	b.n	8003c66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 020c 	and.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1eb      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d023      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b64:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a42      	ldr	r2, [pc, #264]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b7c:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b84:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8c:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4936      	ldr	r1, [pc, #216]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d105      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ba6:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	4a32      	ldr	r2, [pc, #200]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb2:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d21d      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 020f 	bic.w	r2, r3, #15
 8003bc8:	4929      	ldr	r1, [pc, #164]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bd0:	f7ff f87a 	bl	8002cc8 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7ff f876 	bl	8002cc8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e03b      	b.n	8003c66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d1ed      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4917      	ldr	r1, [pc, #92]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	490f      	ldr	r1, [pc, #60]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c3a:	f000 f825 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <HAL_RCC_ClockConfig+0x264>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	490c      	ldr	r1, [pc, #48]	; (8003c7c <HAL_RCC_ClockConfig+0x26c>)
 8003c4c:	5ccb      	ldrb	r3, [r1, r3]
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_RCC_ClockConfig+0x270>)
 8003c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_RCC_ClockConfig+0x274>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe ffe6 	bl	8002c30 <HAL_InitTick>
 8003c64:	4603      	mov	r3, r0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40022000 	.word	0x40022000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	04c4b400 	.word	0x04c4b400
 8003c7c:	0800c7b0 	.word	0x0800c7b0
 8003c80:	2000000c 	.word	0x2000000c
 8003c84:	20000010 	.word	0x20000010

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c8e:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	e047      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	e03e      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d136      	bne.n	8003d2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cdc:	4a1a      	ldr	r2, [pc, #104]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce6:	68d2      	ldr	r2, [r2, #12]
 8003ce8:	0a12      	lsrs	r2, r2, #8
 8003cea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	617b      	str	r3, [r7, #20]
      break;
 8003cf4:	e00c      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfe:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d00:	68d2      	ldr	r2, [r2, #12]
 8003d02:	0a12      	lsrs	r2, r2, #8
 8003d04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
      break;
 8003d0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	0e5b      	lsrs	r3, r3, #25
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	e001      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d30:	693b      	ldr	r3, [r7, #16]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	00f42400 	.word	0x00f42400
 8003d48:	007a1200 	.word	0x007a1200

08003d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	2000000c 	.word	0x2000000c

08003d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d68:	f7ff fff0 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0a1b      	lsrs	r3, r3, #8
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4904      	ldr	r1, [pc, #16]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	0800c7c0 	.word	0x0800c7c0

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d94:	f7ff ffda 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0adb      	lsrs	r3, r3, #11
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4904      	ldr	r1, [pc, #16]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	0800c7c0 	.word	0x0800c7c0

08003dbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d10c      	bne.n	8003dfa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de0:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	0a12      	lsrs	r2, r2, #8
 8003dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
    break;
 8003df8:	e00c      	b.n	8003e14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfa:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	0a12      	lsrs	r2, r2, #8
 8003e08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
    break;
 8003e12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0e5b      	lsrs	r3, r3, #25
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e2e:	687b      	ldr	r3, [r7, #4]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	007a1200 	.word	0x007a1200
 8003e44:	00f42400 	.word	0x00f42400

08003e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e50:	2300      	movs	r3, #0
 8003e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e54:	2300      	movs	r3, #0
 8003e56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8098 	beq.w	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7a:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6593      	str	r3, [r2, #88]	; 0x58
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e92:	4b3a      	ldr	r3, [pc, #232]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e9e:	f7fe ff13 	bl	8002cc8 <HAL_GetTick>
 8003ea2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ea4:	e009      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fe ff0f 	bl	8002cc8 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d902      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	74fb      	strb	r3, [r7, #19]
        break;
 8003eb8:	e005      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ef      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d159      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01e      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d019      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ee8:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f04:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d016      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fe fecf 	bl	8002cc8 <HAL_GetTick>
 8003f2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fe fecb 	bl	8002cc8 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d902      	bls.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	74fb      	strb	r3, [r7, #19]
            break;
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ec      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f68:	4903      	ldr	r1, [pc, #12]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f70:	e008      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	74bb      	strb	r3, [r7, #18]
 8003f76:	e005      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f84:	7c7b      	ldrb	r3, [r7, #17]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d105      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4ba7      	ldr	r3, [pc, #668]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	4aa6      	ldr	r2, [pc, #664]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa2:	4ba1      	ldr	r3, [pc, #644]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f023 0203 	bic.w	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	499d      	ldr	r1, [pc, #628]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc4:	4b98      	ldr	r3, [pc, #608]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 020c 	bic.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4995      	ldr	r1, [pc, #596]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe6:	4b90      	ldr	r3, [pc, #576]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	498c      	ldr	r1, [pc, #560]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004008:	4b87      	ldr	r3, [pc, #540]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	4984      	ldr	r1, [pc, #528]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800402a:	4b7f      	ldr	r3, [pc, #508]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	497b      	ldr	r1, [pc, #492]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800404c:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	4973      	ldr	r1, [pc, #460]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800406e:	4b6e      	ldr	r3, [pc, #440]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	496a      	ldr	r1, [pc, #424]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004090:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	4962      	ldr	r1, [pc, #392]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b2:	4b5d      	ldr	r3, [pc, #372]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	4959      	ldr	r1, [pc, #356]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d4:	4b54      	ldr	r3, [pc, #336]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	4951      	ldr	r1, [pc, #324]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f6:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4948      	ldr	r1, [pc, #288]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004118:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4940      	ldr	r1, [pc, #256]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004138:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004150:	4b35      	ldr	r3, [pc, #212]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	4932      	ldr	r1, [pc, #200]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004170:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a2c      	ldr	r2, [pc, #176]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4924      	ldr	r1, [pc, #144]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a6:	d105      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041de:	d105      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a10      	ldr	r2, [pc, #64]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d019      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004216:	d109      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a02      	ldr	r2, [pc, #8]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004222:	60d3      	str	r3, [r2, #12]
 8004224:	e002      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004238:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	4926      	ldr	r1, [pc, #152]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800425e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004262:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	4918      	ldr	r1, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e049      	b.n	800438a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe f9bc 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f001 f8e2 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d001      	beq.n	80043ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e04c      	b.n	8004446 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a26      	ldr	r2, [pc, #152]	; (8004454 <HAL_TIM_Base_Start+0xc0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <HAL_TIM_Base_Start+0x70>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d01d      	beq.n	8004404 <HAL_TIM_Base_Start+0x70>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_TIM_Base_Start+0xc4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_TIM_Base_Start+0x70>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	; (800445c <HAL_TIM_Base_Start+0xc8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_TIM_Base_Start+0x70>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <HAL_TIM_Base_Start+0xcc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_TIM_Base_Start+0x70>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_TIM_Base_Start+0xd0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_TIM_Base_Start+0x70>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_TIM_Base_Start+0xd4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIM_Base_Start+0x70>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	; (800446c <HAL_TIM_Base_Start+0xd8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d115      	bne.n	8004430 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_TIM_Base_Start+0xdc>)
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d015      	beq.n	8004442 <HAL_TIM_Base_Start+0xae>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d011      	beq.n	8004442 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	e008      	b.n	8004442 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e000      	b.n	8004444 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004442:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40013400 	.word	0x40013400
 8004468:	40014000 	.word	0x40014000
 800446c:	40015000 	.word	0x40015000
 8004470:	00010007 	.word	0x00010007

08004474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e054      	b.n	8004536 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a26      	ldr	r2, [pc, #152]	; (8004544 <HAL_TIM_Base_Start_IT+0xd0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d022      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d01d      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_TIM_Base_Start_IT+0xd4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d018      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a21      	ldr	r2, [pc, #132]	; (800454c <HAL_TIM_Base_Start_IT+0xd8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <HAL_TIM_Base_Start_IT+0xdc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_TIM_Base_Start_IT+0xe0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_TIM_Base_Start_IT+0xe4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x80>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <HAL_TIM_Base_Start_IT+0xe8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d115      	bne.n	8004520 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_TIM_Base_Start_IT+0xec>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b06      	cmp	r3, #6
 8004504:	d015      	beq.n	8004532 <HAL_TIM_Base_Start_IT+0xbe>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d011      	beq.n	8004532 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	e008      	b.n	8004532 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e000      	b.n	8004534 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40014000 	.word	0x40014000
 800455c:	40015000 	.word	0x40015000
 8004560:	00010007 	.word	0x00010007

08004564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e049      	b.n	800460a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe f946 	bl	800281c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 ffa2 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_TIM_PWM_Start+0x24>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e03c      	b.n	80046b2 <HAL_TIM_PWM_Start+0x9e>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d109      	bne.n	8004652 <HAL_TIM_PWM_Start+0x3e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	bf14      	ite	ne
 800464a:	2301      	movne	r3, #1
 800464c:	2300      	moveq	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	e02f      	b.n	80046b2 <HAL_TIM_PWM_Start+0x9e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d109      	bne.n	800466c <HAL_TIM_PWM_Start+0x58>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e022      	b.n	80046b2 <HAL_TIM_PWM_Start+0x9e>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d109      	bne.n	8004686 <HAL_TIM_PWM_Start+0x72>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	bf14      	ite	ne
 800467e:	2301      	movne	r3, #1
 8004680:	2300      	moveq	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	e015      	b.n	80046b2 <HAL_TIM_PWM_Start+0x9e>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d109      	bne.n	80046a0 <HAL_TIM_PWM_Start+0x8c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e008      	b.n	80046b2 <HAL_TIM_PWM_Start+0x9e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0a6      	b.n	8004808 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0xb6>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c8:	e023      	b.n	8004712 <HAL_TIM_PWM_Start+0xfe>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0xc6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d8:	e01b      	b.n	8004712 <HAL_TIM_PWM_Start+0xfe>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0xd6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e8:	e013      	b.n	8004712 <HAL_TIM_PWM_Start+0xfe>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0xe6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_PWM_Start+0xfe>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Start+0xf6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004708:	e003      	b.n	8004712 <HAL_TIM_PWM_Start+0xfe>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f001 fc7e 	bl	800601c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a3a      	ldr	r2, [pc, #232]	; (8004810 <HAL_TIM_PWM_Start+0x1fc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_TIM_PWM_Start+0x148>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a39      	ldr	r2, [pc, #228]	; (8004814 <HAL_TIM_PWM_Start+0x200>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_TIM_PWM_Start+0x148>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a37      	ldr	r2, [pc, #220]	; (8004818 <HAL_TIM_PWM_Start+0x204>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_TIM_PWM_Start+0x148>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a36      	ldr	r2, [pc, #216]	; (800481c <HAL_TIM_PWM_Start+0x208>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_TIM_PWM_Start+0x148>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a34      	ldr	r2, [pc, #208]	; (8004820 <HAL_TIM_PWM_Start+0x20c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIM_PWM_Start+0x148>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a33      	ldr	r2, [pc, #204]	; (8004824 <HAL_TIM_PWM_Start+0x210>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_TIM_PWM_Start+0x14c>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <HAL_TIM_PWM_Start+0x14e>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a25      	ldr	r2, [pc, #148]	; (8004810 <HAL_TIM_PWM_Start+0x1fc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d022      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1b2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004788:	d01d      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1b2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a26      	ldr	r2, [pc, #152]	; (8004828 <HAL_TIM_PWM_Start+0x214>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d018      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1b2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a24      	ldr	r2, [pc, #144]	; (800482c <HAL_TIM_PWM_Start+0x218>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1b2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a23      	ldr	r2, [pc, #140]	; (8004830 <HAL_TIM_PWM_Start+0x21c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1b2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_TIM_PWM_Start+0x200>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1b2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_TIM_PWM_Start+0x204>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIM_PWM_Start+0x1b2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_TIM_PWM_Start+0x210>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d115      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_TIM_PWM_Start+0x220>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d015      	beq.n	8004804 <HAL_TIM_PWM_Start+0x1f0>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047de:	d011      	beq.n	8004804 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	e008      	b.n	8004804 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e000      	b.n	8004806 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40013400 	.word	0x40013400
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800
 8004824:	40015000 	.word	0x40015000
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	00010007 	.word	0x00010007

08004838 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e049      	b.n	80048de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f841 	bl	80048e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f000 fe38 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_TIM_IC_Start_IT+0x1e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004916:	b2db      	uxtb	r3, r3
 8004918:	e023      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x66>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d104      	bne.n	800492a <HAL_TIM_IC_Start_IT+0x2e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e01b      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x66>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d104      	bne.n	800493a <HAL_TIM_IC_Start_IT+0x3e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e013      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x66>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d104      	bne.n	800494a <HAL_TIM_IC_Start_IT+0x4e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004946:	b2db      	uxtb	r3, r3
 8004948:	e00b      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x66>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b10      	cmp	r3, #16
 800494e:	d104      	bne.n	800495a <HAL_TIM_IC_Start_IT+0x5e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e003      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x66>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004960:	b2db      	uxtb	r3, r3
 8004962:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d104      	bne.n	8004974 <HAL_TIM_IC_Start_IT+0x78>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e013      	b.n	800499c <HAL_TIM_IC_Start_IT+0xa0>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b04      	cmp	r3, #4
 8004978:	d104      	bne.n	8004984 <HAL_TIM_IC_Start_IT+0x88>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e00b      	b.n	800499c <HAL_TIM_IC_Start_IT+0xa0>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d104      	bne.n	8004994 <HAL_TIM_IC_Start_IT+0x98>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e003      	b.n	800499c <HAL_TIM_IC_Start_IT+0xa0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800499a:	b2db      	uxtb	r3, r3
 800499c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800499e:	7bbb      	ldrb	r3, [r7, #14]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d102      	bne.n	80049aa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049a4:	7b7b      	ldrb	r3, [r7, #13]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e0e2      	b.n	8004b74 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d104      	bne.n	80049be <HAL_TIM_IC_Start_IT+0xc2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049bc:	e023      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x10a>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_IC_Start_IT+0xd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049cc:	e01b      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x10a>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d104      	bne.n	80049de <HAL_TIM_IC_Start_IT+0xe2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049dc:	e013      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x10a>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_IC_Start_IT+0xf2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049ec:	e00b      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x10a>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_IC_Start_IT+0x102>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fc:	e003      	b.n	8004a06 <HAL_TIM_IC_Start_IT+0x10a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_IC_Start_IT+0x11a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a14:	e013      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x142>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_IC_Start_IT+0x12a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x142>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_IC_Start_IT+0x13a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a34:	e003      	b.n	8004a3e <HAL_TIM_IC_Start_IT+0x142>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	d841      	bhi.n	8004ac8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <HAL_TIM_IC_Start_IT+0x150>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004ac9 	.word	0x08004ac9
 8004a54:	08004ac9 	.word	0x08004ac9
 8004a58:	08004ac9 	.word	0x08004ac9
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004ac9 	.word	0x08004ac9
 8004a64:	08004ac9 	.word	0x08004ac9
 8004a68:	08004ac9 	.word	0x08004ac9
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	08004ac9 	.word	0x08004ac9
 8004a78:	08004ac9 	.word	0x08004ac9
 8004a7c:	08004ab7 	.word	0x08004ab7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0202 	orr.w	r2, r2, #2
 8004a8e:	60da      	str	r2, [r3, #12]
      break;
 8004a90:	e01d      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0204 	orr.w	r2, r2, #4
 8004aa0:	60da      	str	r2, [r3, #12]
      break;
 8004aa2:	e014      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	60da      	str	r2, [r3, #12]
      break;
 8004ab4:	e00b      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0210 	orr.w	r2, r2, #16
 8004ac4:	60da      	str	r2, [r3, #12]
      break;
 8004ac6:	e002      	b.n	8004ace <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d14e      	bne.n	8004b72 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 fa9d 	bl	800601c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <HAL_TIM_IC_Start_IT+0x280>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d022      	beq.n	8004b32 <HAL_TIM_IC_Start_IT+0x236>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d01d      	beq.n	8004b32 <HAL_TIM_IC_Start_IT+0x236>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a21      	ldr	r2, [pc, #132]	; (8004b80 <HAL_TIM_IC_Start_IT+0x284>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d018      	beq.n	8004b32 <HAL_TIM_IC_Start_IT+0x236>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <HAL_TIM_IC_Start_IT+0x288>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_TIM_IC_Start_IT+0x236>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <HAL_TIM_IC_Start_IT+0x28c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_TIM_IC_Start_IT+0x236>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <HAL_TIM_IC_Start_IT+0x290>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_TIM_IC_Start_IT+0x236>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_TIM_IC_Start_IT+0x294>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_TIM_IC_Start_IT+0x236>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <HAL_TIM_IC_Start_IT+0x298>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d115      	bne.n	8004b5e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <HAL_TIM_IC_Start_IT+0x29c>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d015      	beq.n	8004b70 <HAL_TIM_IC_Start_IT+0x274>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4a:	d011      	beq.n	8004b70 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5c:	e008      	b.n	8004b70 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0201 	orr.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e000      	b.n	8004b72 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b70:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00
 8004b8c:	40013400 	.word	0x40013400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40015000 	.word	0x40015000
 8004b98:	00010007 	.word	0x00010007

08004b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0202 	mvn.w	r2, #2
 8004bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fc fee6 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fc62 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fc69 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0204 	mvn.w	r2, #4
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc febc 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fc38 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fc3f 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0208 	mvn.w	r2, #8
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc fe92 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fc0e 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fc15 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0210 	mvn.w	r2, #16
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fe68 	bl	80019b0 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fbe4 	bl	80054b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fbeb 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0201 	mvn.w	r2, #1
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc ff20 	bl	8001b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d10e      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d107      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f001 fa2e 	bl	80061a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d5a:	d10e      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d107      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fa21 	bl	80061bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d10e      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d107      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fb99 	bl	80054d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d10e      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d107      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0220 	mvn.w	r2, #32
 8004dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 f9e1 	bl	8006194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de0:	d10f      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 f9e7 	bl	80061d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e10:	d10f      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e20:	d107      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f9d9 	bl	80061e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e40:	d10f      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f001 f9cb 	bl	80061f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e70:	d10f      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e80:	d107      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 f9bd 	bl	800620c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e088      	b.n	8004fca <HAL_TIM_IC_ConfigChannel+0x130>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11b      	bne.n	8004efe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f000 fedb 	bl	8005c90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 020c 	bic.w	r2, r2, #12
 8004ee8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6999      	ldr	r1, [r3, #24]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	619a      	str	r2, [r3, #24]
 8004efc:	e060      	b.n	8004fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11c      	bne.n	8004f3e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f000 ff5f 	bl	8005dd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6999      	ldr	r1, [r3, #24]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	021a      	lsls	r2, r3, #8
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	619a      	str	r2, [r3, #24]
 8004f3c:	e040      	b.n	8004fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d11b      	bne.n	8004f7c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f000 ffac 	bl	8005eb0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69da      	ldr	r2, [r3, #28]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 020c 	bic.w	r2, r2, #12
 8004f66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69d9      	ldr	r1, [r3, #28]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	61da      	str	r2, [r3, #28]
 8004f7a:	e021      	b.n	8004fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d11c      	bne.n	8004fbc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f000 ffc9 	bl	8005f28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fa4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	021a      	lsls	r2, r3, #8
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	61da      	str	r2, [r3, #28]
 8004fba:	e001      	b.n	8004fc0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e0ff      	b.n	80051f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b14      	cmp	r3, #20
 8004ffe:	f200 80f0 	bhi.w	80051e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800505d 	.word	0x0800505d
 800500c:	080051e3 	.word	0x080051e3
 8005010:	080051e3 	.word	0x080051e3
 8005014:	080051e3 	.word	0x080051e3
 8005018:	0800509d 	.word	0x0800509d
 800501c:	080051e3 	.word	0x080051e3
 8005020:	080051e3 	.word	0x080051e3
 8005024:	080051e3 	.word	0x080051e3
 8005028:	080050df 	.word	0x080050df
 800502c:	080051e3 	.word	0x080051e3
 8005030:	080051e3 	.word	0x080051e3
 8005034:	080051e3 	.word	0x080051e3
 8005038:	0800511f 	.word	0x0800511f
 800503c:	080051e3 	.word	0x080051e3
 8005040:	080051e3 	.word	0x080051e3
 8005044:	080051e3 	.word	0x080051e3
 8005048:	08005161 	.word	0x08005161
 800504c:	080051e3 	.word	0x080051e3
 8005050:	080051e3 	.word	0x080051e3
 8005054:	080051e3 	.word	0x080051e3
 8005058:	080051a1 	.word	0x080051a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 faea 	bl	800563c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0204 	bic.w	r2, r2, #4
 8005086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6999      	ldr	r1, [r3, #24]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	619a      	str	r2, [r3, #24]
      break;
 800509a:	e0a5      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fb64 	bl	8005770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	619a      	str	r2, [r3, #24]
      break;
 80050dc:	e084      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fbd7 	bl	8005898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0208 	orr.w	r2, r2, #8
 80050f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0204 	bic.w	r2, r2, #4
 8005108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69d9      	ldr	r1, [r3, #28]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	61da      	str	r2, [r3, #28]
      break;
 800511c:	e064      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fc49 	bl	80059bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	021a      	lsls	r2, r3, #8
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	61da      	str	r2, [r3, #28]
      break;
 800515e:	e043      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fcbc 	bl	8005ae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800519e:	e023      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fd06 	bl	8005bb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	021a      	lsls	r2, r3, #8
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80051e0:	e002      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
      break;
 80051e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop

080051fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIM_ConfigClockSource+0x1c>
 8005214:	2302      	movs	r3, #2
 8005216:	e0f6      	b.n	8005406 <HAL_TIM_ConfigClockSource+0x20a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800523a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6f      	ldr	r2, [pc, #444]	; (8005410 <HAL_TIM_ConfigClockSource+0x214>)
 8005252:	4293      	cmp	r3, r2
 8005254:	f000 80c1 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005258:	4a6d      	ldr	r2, [pc, #436]	; (8005410 <HAL_TIM_ConfigClockSource+0x214>)
 800525a:	4293      	cmp	r3, r2
 800525c:	f200 80c6 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 8005260:	4a6c      	ldr	r2, [pc, #432]	; (8005414 <HAL_TIM_ConfigClockSource+0x218>)
 8005262:	4293      	cmp	r3, r2
 8005264:	f000 80b9 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005268:	4a6a      	ldr	r2, [pc, #424]	; (8005414 <HAL_TIM_ConfigClockSource+0x218>)
 800526a:	4293      	cmp	r3, r2
 800526c:	f200 80be 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 8005270:	4a69      	ldr	r2, [pc, #420]	; (8005418 <HAL_TIM_ConfigClockSource+0x21c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	f000 80b1 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005278:	4a67      	ldr	r2, [pc, #412]	; (8005418 <HAL_TIM_ConfigClockSource+0x21c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	f200 80b6 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 8005280:	4a66      	ldr	r2, [pc, #408]	; (800541c <HAL_TIM_ConfigClockSource+0x220>)
 8005282:	4293      	cmp	r3, r2
 8005284:	f000 80a9 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005288:	4a64      	ldr	r2, [pc, #400]	; (800541c <HAL_TIM_ConfigClockSource+0x220>)
 800528a:	4293      	cmp	r3, r2
 800528c:	f200 80ae 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 8005290:	4a63      	ldr	r2, [pc, #396]	; (8005420 <HAL_TIM_ConfigClockSource+0x224>)
 8005292:	4293      	cmp	r3, r2
 8005294:	f000 80a1 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005298:	4a61      	ldr	r2, [pc, #388]	; (8005420 <HAL_TIM_ConfigClockSource+0x224>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f200 80a6 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052a0:	4a60      	ldr	r2, [pc, #384]	; (8005424 <HAL_TIM_ConfigClockSource+0x228>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f000 8099 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 80052a8:	4a5e      	ldr	r2, [pc, #376]	; (8005424 <HAL_TIM_ConfigClockSource+0x228>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f200 809e 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052b4:	f000 8091 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 80052b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052bc:	f200 8096 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c4:	f000 8089 	beq.w	80053da <HAL_TIM_ConfigClockSource+0x1de>
 80052c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052cc:	f200 808e 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d4:	d03e      	beq.n	8005354 <HAL_TIM_ConfigClockSource+0x158>
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052da:	f200 8087 	bhi.w	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e2:	f000 8086 	beq.w	80053f2 <HAL_TIM_ConfigClockSource+0x1f6>
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ea:	d87f      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052ec:	2b70      	cmp	r3, #112	; 0x70
 80052ee:	d01a      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x12a>
 80052f0:	2b70      	cmp	r3, #112	; 0x70
 80052f2:	d87b      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052f4:	2b60      	cmp	r3, #96	; 0x60
 80052f6:	d050      	beq.n	800539a <HAL_TIM_ConfigClockSource+0x19e>
 80052f8:	2b60      	cmp	r3, #96	; 0x60
 80052fa:	d877      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 80052fc:	2b50      	cmp	r3, #80	; 0x50
 80052fe:	d03c      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x17e>
 8005300:	2b50      	cmp	r3, #80	; 0x50
 8005302:	d873      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d058      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x1be>
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d86f      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 800530c:	2b30      	cmp	r3, #48	; 0x30
 800530e:	d064      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005310:	2b30      	cmp	r3, #48	; 0x30
 8005312:	d86b      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 8005314:	2b20      	cmp	r3, #32
 8005316:	d060      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005318:	2b20      	cmp	r3, #32
 800531a:	d867      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d05c      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005320:	2b10      	cmp	r3, #16
 8005322:	d05a      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x1de>
 8005324:	e062      	b.n	80053ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6899      	ldr	r1, [r3, #8]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f000 fe51 	bl	8005fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	609a      	str	r2, [r3, #8]
      break;
 8005352:	e04f      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f000 fe3a 	bl	8005fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005376:	609a      	str	r2, [r3, #8]
      break;
 8005378:	e03c      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6859      	ldr	r1, [r3, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	461a      	mov	r2, r3
 8005388:	f000 fcf6 	bl	8005d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2150      	movs	r1, #80	; 0x50
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fe05 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 8005398:	e02c      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6859      	ldr	r1, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f000 fd52 	bl	8005e50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2160      	movs	r1, #96	; 0x60
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fdf5 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 80053b8:	e01c      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6859      	ldr	r1, [r3, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f000 fcd6 	bl	8005d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2140      	movs	r1, #64	; 0x40
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fde5 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 80053d8:	e00c      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4619      	mov	r1, r3
 80053e4:	4610      	mov	r0, r2
 80053e6:	f000 fddc 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 80053ea:	e003      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      break;
 80053f0:	e000      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80053f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005404:	7bfb      	ldrb	r3, [r7, #15]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	00100070 	.word	0x00100070
 8005414:	00100060 	.word	0x00100060
 8005418:	00100050 	.word	0x00100050
 800541c:	00100040 	.word	0x00100040
 8005420:	00100030 	.word	0x00100030
 8005424:	00100020 	.word	0x00100020

08005428 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b0c      	cmp	r3, #12
 800543a:	d831      	bhi.n	80054a0 <HAL_TIM_ReadCapturedValue+0x78>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <HAL_TIM_ReadCapturedValue+0x1c>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005479 	.word	0x08005479
 8005448:	080054a1 	.word	0x080054a1
 800544c:	080054a1 	.word	0x080054a1
 8005450:	080054a1 	.word	0x080054a1
 8005454:	08005483 	.word	0x08005483
 8005458:	080054a1 	.word	0x080054a1
 800545c:	080054a1 	.word	0x080054a1
 8005460:	080054a1 	.word	0x080054a1
 8005464:	0800548d 	.word	0x0800548d
 8005468:	080054a1 	.word	0x080054a1
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054a1 	.word	0x080054a1
 8005474:	08005497 	.word	0x08005497
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	60fb      	str	r3, [r7, #12]

      break;
 8005480:	e00f      	b.n	80054a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	60fb      	str	r3, [r7, #12]

      break;
 800548a:	e00a      	b.n	80054a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	60fb      	str	r3, [r7, #12]

      break;
 8005494:	e005      	b.n	80054a2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	60fb      	str	r3, [r7, #12]

      break;
 800549e:	e000      	b.n	80054a2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80054a0:	bf00      	nop
  }

  return tmpreg;
 80054a2:	68fb      	ldr	r3, [r7, #12]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a46      	ldr	r2, [pc, #280]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d017      	beq.n	8005534 <TIM_Base_SetConfig+0x48>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d013      	beq.n	8005534 <TIM_Base_SetConfig+0x48>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a43      	ldr	r2, [pc, #268]	; (800561c <TIM_Base_SetConfig+0x130>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x48>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a42      	ldr	r2, [pc, #264]	; (8005620 <TIM_Base_SetConfig+0x134>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x48>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a41      	ldr	r2, [pc, #260]	; (8005624 <TIM_Base_SetConfig+0x138>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x48>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a40      	ldr	r2, [pc, #256]	; (8005628 <TIM_Base_SetConfig+0x13c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x48>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3f      	ldr	r2, [pc, #252]	; (800562c <TIM_Base_SetConfig+0x140>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a33      	ldr	r2, [pc, #204]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d023      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d01f      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a30      	ldr	r2, [pc, #192]	; (800561c <TIM_Base_SetConfig+0x130>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01b      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <TIM_Base_SetConfig+0x134>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d017      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <TIM_Base_SetConfig+0x138>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <TIM_Base_SetConfig+0x13c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <TIM_Base_SetConfig+0x144>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <TIM_Base_SetConfig+0x148>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <TIM_Base_SetConfig+0x14c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0xaa>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a26      	ldr	r2, [pc, #152]	; (800562c <TIM_Base_SetConfig+0x140>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <TIM_Base_SetConfig+0x12c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <TIM_Base_SetConfig+0x110>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a14      	ldr	r2, [pc, #80]	; (8005628 <TIM_Base_SetConfig+0x13c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00f      	beq.n	80055fc <TIM_Base_SetConfig+0x110>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a14      	ldr	r2, [pc, #80]	; (8005630 <TIM_Base_SetConfig+0x144>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <TIM_Base_SetConfig+0x110>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a13      	ldr	r2, [pc, #76]	; (8005634 <TIM_Base_SetConfig+0x148>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <TIM_Base_SetConfig+0x110>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a12      	ldr	r2, [pc, #72]	; (8005638 <TIM_Base_SetConfig+0x14c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_Base_SetConfig+0x110>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a0d      	ldr	r2, [pc, #52]	; (800562c <TIM_Base_SetConfig+0x140>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d103      	bne.n	8005604 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	615a      	str	r2, [r3, #20]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40015000 	.word	0x40015000
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40014800 	.word	0x40014800

0800563c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0303 	bic.w	r3, r3, #3
 8005676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 0302 	bic.w	r3, r3, #2
 8005688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a30      	ldr	r2, [pc, #192]	; (8005758 <TIM_OC1_SetConfig+0x11c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <TIM_OC1_SetConfig+0x88>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a2f      	ldr	r2, [pc, #188]	; (800575c <TIM_OC1_SetConfig+0x120>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00f      	beq.n	80056c4 <TIM_OC1_SetConfig+0x88>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a2e      	ldr	r2, [pc, #184]	; (8005760 <TIM_OC1_SetConfig+0x124>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <TIM_OC1_SetConfig+0x88>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <TIM_OC1_SetConfig+0x128>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <TIM_OC1_SetConfig+0x88>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a2c      	ldr	r2, [pc, #176]	; (8005768 <TIM_OC1_SetConfig+0x12c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_OC1_SetConfig+0x88>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a2b      	ldr	r2, [pc, #172]	; (800576c <TIM_OC1_SetConfig+0x130>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d10c      	bne.n	80056de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0308 	bic.w	r3, r3, #8
 80056ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <TIM_OC1_SetConfig+0x11c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <TIM_OC1_SetConfig+0xd2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <TIM_OC1_SetConfig+0x120>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_OC1_SetConfig+0xd2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <TIM_OC1_SetConfig+0x124>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_OC1_SetConfig+0xd2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <TIM_OC1_SetConfig+0x128>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_OC1_SetConfig+0xd2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	; (8005768 <TIM_OC1_SetConfig+0x12c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC1_SetConfig+0xd2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <TIM_OC1_SetConfig+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800571c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40013400 	.word	0x40013400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800
 800576c:	40015000 	.word	0x40015000

08005770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f023 0210 	bic.w	r2, r3, #16
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0320 	bic.w	r3, r3, #32
 80057be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a2c      	ldr	r2, [pc, #176]	; (8005880 <TIM_OC2_SetConfig+0x110>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d007      	beq.n	80057e4 <TIM_OC2_SetConfig+0x74>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a2b      	ldr	r2, [pc, #172]	; (8005884 <TIM_OC2_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d003      	beq.n	80057e4 <TIM_OC2_SetConfig+0x74>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <TIM_OC2_SetConfig+0x118>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10d      	bne.n	8005800 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <TIM_OC2_SetConfig+0x110>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d013      	beq.n	8005830 <TIM_OC2_SetConfig+0xc0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <TIM_OC2_SetConfig+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_OC2_SetConfig+0xc0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1e      	ldr	r2, [pc, #120]	; (800588c <TIM_OC2_SetConfig+0x11c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_OC2_SetConfig+0xc0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <TIM_OC2_SetConfig+0x120>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_OC2_SetConfig+0xc0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <TIM_OC2_SetConfig+0x124>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC2_SetConfig+0xc0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <TIM_OC2_SetConfig+0x118>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d113      	bne.n	8005858 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800583e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40013400 	.word	0x40013400
 8005888:	40015000 	.word	0x40015000
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2b      	ldr	r2, [pc, #172]	; (80059a4 <TIM_OC3_SetConfig+0x10c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_OC3_SetConfig+0x72>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2a      	ldr	r2, [pc, #168]	; (80059a8 <TIM_OC3_SetConfig+0x110>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_OC3_SetConfig+0x72>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a29      	ldr	r2, [pc, #164]	; (80059ac <TIM_OC3_SetConfig+0x114>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10d      	bne.n	8005926 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1e      	ldr	r2, [pc, #120]	; (80059a4 <TIM_OC3_SetConfig+0x10c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <TIM_OC3_SetConfig+0xbe>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1d      	ldr	r2, [pc, #116]	; (80059a8 <TIM_OC3_SetConfig+0x110>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00f      	beq.n	8005956 <TIM_OC3_SetConfig+0xbe>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <TIM_OC3_SetConfig+0x118>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_OC3_SetConfig+0xbe>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <TIM_OC3_SetConfig+0x11c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_OC3_SetConfig+0xbe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <TIM_OC3_SetConfig+0x120>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_OC3_SetConfig+0xbe>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <TIM_OC3_SetConfig+0x114>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d113      	bne.n	800597e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800595c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	621a      	str	r2, [r3, #32]
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40015000 	.word	0x40015000
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800

080059bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	031b      	lsls	r3, r3, #12
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <TIM_OC4_SetConfig+0x110>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_OC4_SetConfig+0x74>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <TIM_OC4_SetConfig+0x114>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC4_SetConfig+0x74>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <TIM_OC4_SetConfig+0x118>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d10d      	bne.n	8005a4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	031b      	lsls	r3, r3, #12
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <TIM_OC4_SetConfig+0x110>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <TIM_OC4_SetConfig+0xc0>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <TIM_OC4_SetConfig+0x114>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00f      	beq.n	8005a7c <TIM_OC4_SetConfig+0xc0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <TIM_OC4_SetConfig+0x11c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_OC4_SetConfig+0xc0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <TIM_OC4_SetConfig+0x120>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_OC4_SetConfig+0xc0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <TIM_OC4_SetConfig+0x124>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC4_SetConfig+0xc0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <TIM_OC4_SetConfig+0x118>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d113      	bne.n	8005aa4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	019b      	lsls	r3, r3, #6
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40013400 	.word	0x40013400
 8005ad4:	40015000 	.word	0x40015000
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40014400 	.word	0x40014400
 8005ae0:	40014800 	.word	0x40014800

08005ae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <TIM_OC5_SetConfig+0xbc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <TIM_OC5_SetConfig+0x82>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <TIM_OC5_SetConfig+0xc0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00f      	beq.n	8005b66 <TIM_OC5_SetConfig+0x82>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <TIM_OC5_SetConfig+0xc4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <TIM_OC5_SetConfig+0x82>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a16      	ldr	r2, [pc, #88]	; (8005bac <TIM_OC5_SetConfig+0xc8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <TIM_OC5_SetConfig+0x82>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <TIM_OC5_SetConfig+0xcc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_OC5_SetConfig+0x82>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <TIM_OC5_SetConfig+0xd0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d109      	bne.n	8005b7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	621a      	str	r2, [r3, #32]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40013400 	.word	0x40013400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	40015000 	.word	0x40015000

08005bb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	051b      	lsls	r3, r3, #20
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	; (8005c78 <TIM_OC6_SetConfig+0xc0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <TIM_OC6_SetConfig+0x84>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <TIM_OC6_SetConfig+0xc4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_OC6_SetConfig+0x84>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <TIM_OC6_SetConfig+0xc8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC6_SetConfig+0x84>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <TIM_OC6_SetConfig+0xcc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC6_SetConfig+0x84>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <TIM_OC6_SetConfig+0xd0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC6_SetConfig+0x84>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <TIM_OC6_SetConfig+0xd4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d109      	bne.n	8005c50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800
 8005c8c:	40015000 	.word	0x40015000

08005c90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0201 	bic.w	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a28      	ldr	r2, [pc, #160]	; (8005d5c <TIM_TI1_SetConfig+0xcc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01b      	beq.n	8005cf6 <TIM_TI1_SetConfig+0x66>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d017      	beq.n	8005cf6 <TIM_TI1_SetConfig+0x66>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a25      	ldr	r2, [pc, #148]	; (8005d60 <TIM_TI1_SetConfig+0xd0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <TIM_TI1_SetConfig+0x66>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <TIM_TI1_SetConfig+0xd4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_TI1_SetConfig+0x66>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a23      	ldr	r2, [pc, #140]	; (8005d68 <TIM_TI1_SetConfig+0xd8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_TI1_SetConfig+0x66>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a22      	ldr	r2, [pc, #136]	; (8005d6c <TIM_TI1_SetConfig+0xdc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_TI1_SetConfig+0x66>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a21      	ldr	r2, [pc, #132]	; (8005d70 <TIM_TI1_SetConfig+0xe0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_TI1_SetConfig+0x66>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4a20      	ldr	r2, [pc, #128]	; (8005d74 <TIM_TI1_SetConfig+0xe4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d101      	bne.n	8005cfa <TIM_TI1_SetConfig+0x6a>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <TIM_TI1_SetConfig+0x6c>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e003      	b.n	8005d1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f023 030a 	bic.w	r3, r3, #10
 8005d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f003 030a 	and.w	r3, r3, #10
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40015000 	.word	0x40015000

08005d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f023 030a 	bic.w	r3, r3, #10
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f023 0210 	bic.w	r2, r3, #16
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	031b      	lsls	r3, r3, #12
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f023 0210 	bic.w	r2, r3, #16
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	031b      	lsls	r3, r3, #12
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	621a      	str	r2, [r3, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 0303 	bic.w	r3, r3, #3
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	621a      	str	r2, [r3, #32]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	031b      	lsls	r3, r3, #12
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	031b      	lsls	r3, r3, #12
 8005f80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f043 0307 	orr.w	r3, r3, #7
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	609a      	str	r2, [r3, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	021a      	lsls	r2, r3, #8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4313      	orrs	r3, r2
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	2201      	movs	r2, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	431a      	orrs	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800607c:	2302      	movs	r3, #2
 800607e:	e074      	b.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a34      	ldr	r2, [pc, #208]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a33      	ldr	r2, [pc, #204]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a31      	ldr	r2, [pc, #196]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d108      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a21      	ldr	r2, [pc, #132]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d01d      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a18      	ldr	r2, [pc, #96]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a11      	ldr	r2, [pc, #68]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d10c      	bne.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40013400 	.word	0x40013400
 8006180:	40015000 	.word	0x40015000
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40014000 	.word	0x40014000

08006194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e042      	b.n	80062b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006238:	2b00      	cmp	r3, #0
 800623a:	d106      	bne.n	800624a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fc fbd7 	bl	80029f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2224      	movs	r2, #36	; 0x24
 800624e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0201 	bic.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f996 	bl	8006594 <UART_SetConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e022      	b.n	80062b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fc86 	bl	8006b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800628e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800629e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fd0d 	bl	8006cd0 <UART_CheckIdleState>
 80062b6:	4603      	mov	r3, r0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	f040 8083 	bne.w	80063e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_UART_Transmit+0x28>
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e07b      	b.n	80063e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Transmit+0x3a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e074      	b.n	80063e4 <HAL_UART_Transmit+0x124>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2221      	movs	r2, #33	; 0x21
 800630e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006312:	f7fc fcd9 	bl	8002cc8 <HAL_GetTick>
 8006316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	88fa      	ldrh	r2, [r7, #6]
 800631c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	88fa      	ldrh	r2, [r7, #6]
 8006324:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006330:	d108      	bne.n	8006344 <HAL_UART_Transmit+0x84>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	e003      	b.n	800634c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006348:	2300      	movs	r3, #0
 800634a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006354:	e02c      	b.n	80063b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2200      	movs	r2, #0
 800635e:	2180      	movs	r1, #128	; 0x80
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fd00 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e039      	b.n	80063e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006384:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	3302      	adds	r3, #2
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	e007      	b.n	800639e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	781a      	ldrb	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3301      	adds	r3, #1
 800639c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1cc      	bne.n	8006356 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2140      	movs	r1, #64	; 0x40
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fccd 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e006      	b.n	80063e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e000      	b.n	80063e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	2b20      	cmp	r3, #32
 8006404:	f040 80c0 	bne.w	8006588 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_UART_Receive+0x28>
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0b8      	b.n	800658a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_UART_Receive+0x3a>
 8006422:	2302      	movs	r3, #2
 8006424:	e0b1      	b.n	800658a <HAL_UART_Receive+0x19e>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2222      	movs	r2, #34	; 0x22
 800643a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006444:	f7fc fc40 	bl	8002cc8 <HAL_GetTick>
 8006448:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	88fa      	ldrh	r2, [r7, #6]
 800644e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	88fa      	ldrh	r2, [r7, #6]
 8006456:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d10e      	bne.n	8006482 <HAL_UART_Receive+0x96>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <HAL_UART_Receive+0x8c>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006472:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006476:	e02d      	b.n	80064d4 <HAL_UART_Receive+0xe8>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	22ff      	movs	r2, #255	; 0xff
 800647c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006480:	e028      	b.n	80064d4 <HAL_UART_Receive+0xe8>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10d      	bne.n	80064a6 <HAL_UART_Receive+0xba>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_UART_Receive+0xb0>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800649a:	e01b      	b.n	80064d4 <HAL_UART_Receive+0xe8>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	227f      	movs	r2, #127	; 0x7f
 80064a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064a4:	e016      	b.n	80064d4 <HAL_UART_Receive+0xe8>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ae:	d10d      	bne.n	80064cc <HAL_UART_Receive+0xe0>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_UART_Receive+0xd6>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	227f      	movs	r2, #127	; 0x7f
 80064bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064c0:	e008      	b.n	80064d4 <HAL_UART_Receive+0xe8>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	223f      	movs	r2, #63	; 0x3f
 80064c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ca:	e003      	b.n	80064d4 <HAL_UART_Receive+0xe8>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e4:	d108      	bne.n	80064f8 <HAL_UART_Receive+0x10c>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e003      	b.n	8006500 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006508:	e032      	b.n	8006570 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2200      	movs	r2, #0
 8006512:	2120      	movs	r1, #32
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 fc26 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e032      	b.n	800658a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10c      	bne.n	8006544 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	b29a      	uxth	r2, r3
 8006532:	8a7b      	ldrh	r3, [r7, #18]
 8006534:	4013      	ands	r3, r2
 8006536:	b29a      	uxth	r2, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	3302      	adds	r3, #2
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e00c      	b.n	800655e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	b2da      	uxtb	r2, r3
 800654c:	8a7b      	ldrh	r3, [r7, #18]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4013      	ands	r3, r2
 8006552:	b2da      	uxtb	r2, r3
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1c6      	bne.n	800650a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	e000      	b.n	800658a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
  }
}
 800658a:	4618      	mov	r0, r3
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006598:	b08c      	sub	sp, #48	; 0x30
 800659a:	af00      	add	r7, sp, #0
 800659c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4baa      	ldr	r3, [pc, #680]	; (800686c <UART_SetConfig+0x2d8>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a9f      	ldr	r2, [pc, #636]	; (8006870 <UART_SetConfig+0x2dc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065fc:	4313      	orrs	r3, r2
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800660a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006614:	430b      	orrs	r3, r1
 8006616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	f023 010f 	bic.w	r1, r3, #15
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a90      	ldr	r2, [pc, #576]	; (8006874 <UART_SetConfig+0x2e0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d125      	bne.n	8006684 <UART_SetConfig+0xf0>
 8006638:	4b8f      	ldr	r3, [pc, #572]	; (8006878 <UART_SetConfig+0x2e4>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b03      	cmp	r3, #3
 8006644:	d81a      	bhi.n	800667c <UART_SetConfig+0xe8>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <UART_SetConfig+0xb8>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	0800665d 	.word	0x0800665d
 8006650:	0800666d 	.word	0x0800666d
 8006654:	08006665 	.word	0x08006665
 8006658:	08006675 	.word	0x08006675
 800665c:	2301      	movs	r3, #1
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006662:	e116      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006664:	2302      	movs	r3, #2
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666a:	e112      	b.n	8006892 <UART_SetConfig+0x2fe>
 800666c:	2304      	movs	r3, #4
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006672:	e10e      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006674:	2308      	movs	r3, #8
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667a:	e10a      	b.n	8006892 <UART_SetConfig+0x2fe>
 800667c:	2310      	movs	r3, #16
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006682:	e106      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a7c      	ldr	r2, [pc, #496]	; (800687c <UART_SetConfig+0x2e8>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d138      	bne.n	8006700 <UART_SetConfig+0x16c>
 800668e:	4b7a      	ldr	r3, [pc, #488]	; (8006878 <UART_SetConfig+0x2e4>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006694:	f003 030c 	and.w	r3, r3, #12
 8006698:	2b0c      	cmp	r3, #12
 800669a:	d82d      	bhi.n	80066f8 <UART_SetConfig+0x164>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x110>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	080066f9 	.word	0x080066f9
 80066ac:	080066f9 	.word	0x080066f9
 80066b0:	080066f9 	.word	0x080066f9
 80066b4:	080066e9 	.word	0x080066e9
 80066b8:	080066f9 	.word	0x080066f9
 80066bc:	080066f9 	.word	0x080066f9
 80066c0:	080066f9 	.word	0x080066f9
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	080066f9 	.word	0x080066f9
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	080066f9 	.word	0x080066f9
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066de:	e0d8      	b.n	8006892 <UART_SetConfig+0x2fe>
 80066e0:	2302      	movs	r3, #2
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e6:	e0d4      	b.n	8006892 <UART_SetConfig+0x2fe>
 80066e8:	2304      	movs	r3, #4
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ee:	e0d0      	b.n	8006892 <UART_SetConfig+0x2fe>
 80066f0:	2308      	movs	r3, #8
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f6:	e0cc      	b.n	8006892 <UART_SetConfig+0x2fe>
 80066f8:	2310      	movs	r3, #16
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e0c8      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a5e      	ldr	r2, [pc, #376]	; (8006880 <UART_SetConfig+0x2ec>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d125      	bne.n	8006756 <UART_SetConfig+0x1c2>
 800670a:	4b5b      	ldr	r3, [pc, #364]	; (8006878 <UART_SetConfig+0x2e4>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006714:	2b30      	cmp	r3, #48	; 0x30
 8006716:	d016      	beq.n	8006746 <UART_SetConfig+0x1b2>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d818      	bhi.n	800674e <UART_SetConfig+0x1ba>
 800671c:	2b20      	cmp	r3, #32
 800671e:	d00a      	beq.n	8006736 <UART_SetConfig+0x1a2>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d814      	bhi.n	800674e <UART_SetConfig+0x1ba>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <UART_SetConfig+0x19a>
 8006728:	2b10      	cmp	r3, #16
 800672a:	d008      	beq.n	800673e <UART_SetConfig+0x1aa>
 800672c:	e00f      	b.n	800674e <UART_SetConfig+0x1ba>
 800672e:	2300      	movs	r3, #0
 8006730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006734:	e0ad      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006736:	2302      	movs	r3, #2
 8006738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673c:	e0a9      	b.n	8006892 <UART_SetConfig+0x2fe>
 800673e:	2304      	movs	r3, #4
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006744:	e0a5      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006746:	2308      	movs	r3, #8
 8006748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674c:	e0a1      	b.n	8006892 <UART_SetConfig+0x2fe>
 800674e:	2310      	movs	r3, #16
 8006750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006754:	e09d      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a4a      	ldr	r2, [pc, #296]	; (8006884 <UART_SetConfig+0x2f0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d125      	bne.n	80067ac <UART_SetConfig+0x218>
 8006760:	4b45      	ldr	r3, [pc, #276]	; (8006878 <UART_SetConfig+0x2e4>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800676a:	2bc0      	cmp	r3, #192	; 0xc0
 800676c:	d016      	beq.n	800679c <UART_SetConfig+0x208>
 800676e:	2bc0      	cmp	r3, #192	; 0xc0
 8006770:	d818      	bhi.n	80067a4 <UART_SetConfig+0x210>
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d00a      	beq.n	800678c <UART_SetConfig+0x1f8>
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d814      	bhi.n	80067a4 <UART_SetConfig+0x210>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <UART_SetConfig+0x1f0>
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d008      	beq.n	8006794 <UART_SetConfig+0x200>
 8006782:	e00f      	b.n	80067a4 <UART_SetConfig+0x210>
 8006784:	2300      	movs	r3, #0
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678a:	e082      	b.n	8006892 <UART_SetConfig+0x2fe>
 800678c:	2302      	movs	r3, #2
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006792:	e07e      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679a:	e07a      	b.n	8006892 <UART_SetConfig+0x2fe>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a2:	e076      	b.n	8006892 <UART_SetConfig+0x2fe>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067aa:	e072      	b.n	8006892 <UART_SetConfig+0x2fe>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a35      	ldr	r2, [pc, #212]	; (8006888 <UART_SetConfig+0x2f4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d12a      	bne.n	800680c <UART_SetConfig+0x278>
 80067b6:	4b30      	ldr	r3, [pc, #192]	; (8006878 <UART_SetConfig+0x2e4>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c4:	d01a      	beq.n	80067fc <UART_SetConfig+0x268>
 80067c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ca:	d81b      	bhi.n	8006804 <UART_SetConfig+0x270>
 80067cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d0:	d00c      	beq.n	80067ec <UART_SetConfig+0x258>
 80067d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d6:	d815      	bhi.n	8006804 <UART_SetConfig+0x270>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <UART_SetConfig+0x250>
 80067dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e0:	d008      	beq.n	80067f4 <UART_SetConfig+0x260>
 80067e2:	e00f      	b.n	8006804 <UART_SetConfig+0x270>
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ea:	e052      	b.n	8006892 <UART_SetConfig+0x2fe>
 80067ec:	2302      	movs	r3, #2
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f2:	e04e      	b.n	8006892 <UART_SetConfig+0x2fe>
 80067f4:	2304      	movs	r3, #4
 80067f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fa:	e04a      	b.n	8006892 <UART_SetConfig+0x2fe>
 80067fc:	2308      	movs	r3, #8
 80067fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006802:	e046      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006804:	2310      	movs	r3, #16
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680a:	e042      	b.n	8006892 <UART_SetConfig+0x2fe>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a17      	ldr	r2, [pc, #92]	; (8006870 <UART_SetConfig+0x2dc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d13a      	bne.n	800688c <UART_SetConfig+0x2f8>
 8006816:	4b18      	ldr	r3, [pc, #96]	; (8006878 <UART_SetConfig+0x2e4>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006824:	d01a      	beq.n	800685c <UART_SetConfig+0x2c8>
 8006826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800682a:	d81b      	bhi.n	8006864 <UART_SetConfig+0x2d0>
 800682c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006830:	d00c      	beq.n	800684c <UART_SetConfig+0x2b8>
 8006832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006836:	d815      	bhi.n	8006864 <UART_SetConfig+0x2d0>
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <UART_SetConfig+0x2b0>
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006840:	d008      	beq.n	8006854 <UART_SetConfig+0x2c0>
 8006842:	e00f      	b.n	8006864 <UART_SetConfig+0x2d0>
 8006844:	2300      	movs	r3, #0
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684a:	e022      	b.n	8006892 <UART_SetConfig+0x2fe>
 800684c:	2302      	movs	r3, #2
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006852:	e01e      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685a:	e01a      	b.n	8006892 <UART_SetConfig+0x2fe>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006862:	e016      	b.n	8006892 <UART_SetConfig+0x2fe>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686a:	e012      	b.n	8006892 <UART_SetConfig+0x2fe>
 800686c:	cfff69f3 	.word	0xcfff69f3
 8006870:	40008000 	.word	0x40008000
 8006874:	40013800 	.word	0x40013800
 8006878:	40021000 	.word	0x40021000
 800687c:	40004400 	.word	0x40004400
 8006880:	40004800 	.word	0x40004800
 8006884:	40004c00 	.word	0x40004c00
 8006888:	40005000 	.word	0x40005000
 800688c:	2310      	movs	r3, #16
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4aae      	ldr	r2, [pc, #696]	; (8006b50 <UART_SetConfig+0x5bc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	f040 8097 	bne.w	80069cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800689e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d823      	bhi.n	80068ee <UART_SetConfig+0x35a>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <UART_SetConfig+0x318>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068ef 	.word	0x080068ef
 80068b4:	080068d9 	.word	0x080068d9
 80068b8:	080068ef 	.word	0x080068ef
 80068bc:	080068df 	.word	0x080068df
 80068c0:	080068ef 	.word	0x080068ef
 80068c4:	080068ef 	.word	0x080068ef
 80068c8:	080068ef 	.word	0x080068ef
 80068cc:	080068e7 	.word	0x080068e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fd fa48 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 80068d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068d6:	e010      	b.n	80068fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068d8:	4b9e      	ldr	r3, [pc, #632]	; (8006b54 <UART_SetConfig+0x5c0>)
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068dc:	e00d      	b.n	80068fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068de:	f7fd f9d3 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 80068e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068e4:	e009      	b.n	80068fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068ec:	e005      	b.n	80068fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8130 	beq.w	8006b62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	4a94      	ldr	r2, [pc, #592]	; (8006b58 <UART_SetConfig+0x5c4>)
 8006908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800690c:	461a      	mov	r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	fbb3 f3f2 	udiv	r3, r3, r2
 8006914:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	4413      	add	r3, r2
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	429a      	cmp	r2, r3
 8006924:	d305      	bcc.n	8006932 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	429a      	cmp	r2, r3
 8006930:	d903      	bls.n	800693a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006938:	e113      	b.n	8006b62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	2200      	movs	r2, #0
 800693e:	60bb      	str	r3, [r7, #8]
 8006940:	60fa      	str	r2, [r7, #12]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	4a84      	ldr	r2, [pc, #528]	; (8006b58 <UART_SetConfig+0x5c4>)
 8006948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800694c:	b29b      	uxth	r3, r3
 800694e:	2200      	movs	r2, #0
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006958:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800695c:	f7fa f994 	bl	8000c88 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4610      	mov	r0, r2
 8006966:	4619      	mov	r1, r3
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	020b      	lsls	r3, r1, #8
 8006972:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006976:	0202      	lsls	r2, r0, #8
 8006978:	6979      	ldr	r1, [r7, #20]
 800697a:	6849      	ldr	r1, [r1, #4]
 800697c:	0849      	lsrs	r1, r1, #1
 800697e:	2000      	movs	r0, #0
 8006980:	460c      	mov	r4, r1
 8006982:	4605      	mov	r5, r0
 8006984:	eb12 0804 	adds.w	r8, r2, r4
 8006988:	eb43 0905 	adc.w	r9, r3, r5
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	469a      	mov	sl, r3
 8006994:	4693      	mov	fp, r2
 8006996:	4652      	mov	r2, sl
 8006998:	465b      	mov	r3, fp
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7fa f973 	bl	8000c88 <__aeabi_uldivmod>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4613      	mov	r3, r2
 80069a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069b0:	d308      	bcc.n	80069c4 <UART_SetConfig+0x430>
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b8:	d204      	bcs.n	80069c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a3a      	ldr	r2, [r7, #32]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	e0ce      	b.n	8006b62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069ca:	e0ca      	b.n	8006b62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d4:	d166      	bne.n	8006aa4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80069d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d827      	bhi.n	8006a2e <UART_SetConfig+0x49a>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0x450>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	08006a2f 	.word	0x08006a2f
 80069f4:	08006a1f 	.word	0x08006a1f
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a2f 	.word	0x08006a2f
 8006a04:	08006a27 	.word	0x08006a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fd f9ac 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8006a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a0e:	e014      	b.n	8006a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a10:	f7fd f9be 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 8006a14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a16:	e010      	b.n	8006a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a18:	4b4e      	ldr	r3, [pc, #312]	; (8006b54 <UART_SetConfig+0x5c0>)
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a1c:	e00d      	b.n	8006a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a1e:	f7fd f933 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8006a22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a24:	e009      	b.n	8006a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a2c:	e005      	b.n	8006a3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8090 	beq.w	8006b62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	4a44      	ldr	r2, [pc, #272]	; (8006b58 <UART_SetConfig+0x5c4>)
 8006a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a54:	005a      	lsls	r2, r3, #1
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	441a      	add	r2, r3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2b0f      	cmp	r3, #15
 8006a6c:	d916      	bls.n	8006a9c <UART_SetConfig+0x508>
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d212      	bcs.n	8006a9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f023 030f 	bic.w	r3, r3, #15
 8006a7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	8bfb      	ldrh	r3, [r7, #30]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	8bfa      	ldrh	r2, [r7, #30]
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	e062      	b.n	8006b62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006aa2:	e05e      	b.n	8006b62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d828      	bhi.n	8006afe <UART_SetConfig+0x56a>
 8006aac:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <UART_SetConfig+0x520>)
 8006aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab2:	bf00      	nop
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006ae9 	.word	0x08006ae9
 8006ac0:	08006aff 	.word	0x08006aff
 8006ac4:	08006aef 	.word	0x08006aef
 8006ac8:	08006aff 	.word	0x08006aff
 8006acc:	08006aff 	.word	0x08006aff
 8006ad0:	08006aff 	.word	0x08006aff
 8006ad4:	08006af7 	.word	0x08006af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad8:	f7fd f944 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8006adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ade:	e014      	b.n	8006b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae0:	f7fd f956 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 8006ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae6:	e010      	b.n	8006b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <UART_SetConfig+0x5c0>)
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aec:	e00d      	b.n	8006b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aee:	f7fd f8cb 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006af4:	e009      	b.n	8006b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006afc:	e005      	b.n	8006b0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b08:	bf00      	nop
    }

    if (pclk != 0U)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d028      	beq.n	8006b62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	4a10      	ldr	r2, [pc, #64]	; (8006b58 <UART_SetConfig+0x5c4>)
 8006b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	441a      	add	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d910      	bls.n	8006b5c <UART_SetConfig+0x5c8>
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b40:	d20c      	bcs.n	8006b5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60da      	str	r2, [r3, #12]
 8006b4c:	e009      	b.n	8006b62 <UART_SetConfig+0x5ce>
 8006b4e:	bf00      	nop
 8006b50:	40008000 	.word	0x40008000
 8006b54:	00f42400 	.word	0x00f42400
 8006b58:	0800c7c8 	.word	0x0800c7c8
      }
      else
      {
        ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01a      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8a:	d10a      	bne.n	8006ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ce0:	f7fb fff2 	bl	8002cc8 <HAL_GetTick>
 8006ce4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d10e      	bne.n	8006d12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f82f 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e025      	b.n	8006d5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d10e      	bne.n	8006d3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f819 	bl	8006d66 <UART_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e00f      	b.n	8006d5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b09c      	sub	sp, #112	; 0x70
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	4613      	mov	r3, r2
 8006d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d76:	e0a9      	b.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	f000 80a5 	beq.w	8006ecc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d82:	f7fb ffa1 	bl	8002cc8 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d302      	bcc.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d140      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dac:	667b      	str	r3, [r7, #100]	; 0x64
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	663b      	str	r3, [r7, #96]	; 0x60
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dea:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e069      	b.n	8006eee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d051      	beq.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e36:	d149      	bne.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
 8006e62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e68:	e841 2300 	strex	r3, r2, [r1]
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e6      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	613b      	str	r3, [r7, #16]
   return(result);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f023 0301 	bic.w	r3, r3, #1
 8006e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e94:	623a      	str	r2, [r7, #32]
 8006e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	69f9      	ldr	r1, [r7, #28]
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e5      	bne.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e010      	b.n	8006eee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	69da      	ldr	r2, [r3, #28]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	bf0c      	ite	eq
 8006edc:	2301      	moveq	r3, #1
 8006ede:	2300      	movne	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	f43f af46 	beq.w	8006d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3770      	adds	r7, #112	; 0x70
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e027      	b.n	8006f5c <HAL_UARTEx_DisableFifoMode+0x66>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	; 0x24
 8006f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e02d      	b.n	8006fdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2224      	movs	r2, #36	; 0x24
 8006f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f84f 	bl	8007060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e02d      	b.n	8007058 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f811 	bl	8007060 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800706c:	2b00      	cmp	r3, #0
 800706e:	d108      	bne.n	8007082 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007080:	e031      	b.n	80070e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007082:	2308      	movs	r3, #8
 8007084:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007086:	2308      	movs	r3, #8
 8007088:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	0e5b      	lsrs	r3, r3, #25
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	0f5b      	lsrs	r3, r3, #29
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	7b3a      	ldrb	r2, [r7, #12]
 80070ae:	4911      	ldr	r1, [pc, #68]	; (80070f4 <UARTEx_SetNbDataToProcess+0x94>)
 80070b0:	5c8a      	ldrb	r2, [r1, r2]
 80070b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070b6:	7b3a      	ldrb	r2, [r7, #12]
 80070b8:	490f      	ldr	r1, [pc, #60]	; (80070f8 <UARTEx_SetNbDataToProcess+0x98>)
 80070ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	7b7a      	ldrb	r2, [r7, #13]
 80070cc:	4909      	ldr	r1, [pc, #36]	; (80070f4 <UARTEx_SetNbDataToProcess+0x94>)
 80070ce:	5c8a      	ldrb	r2, [r1, r2]
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070d4:	7b7a      	ldrb	r2, [r7, #13]
 80070d6:	4908      	ldr	r1, [pc, #32]	; (80070f8 <UARTEx_SetNbDataToProcess+0x98>)
 80070d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070da:	fb93 f3f2 	sdiv	r3, r3, r2
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	0800c7e0 	.word	0x0800c7e0
 80070f8:	0800c7e8 	.word	0x0800c7e8

080070fc <__NVIC_SetPriority>:
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710c:	2b00      	cmp	r3, #0
 800710e:	db0a      	blt.n	8007126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	b2da      	uxtb	r2, r3
 8007114:	490c      	ldr	r1, [pc, #48]	; (8007148 <__NVIC_SetPriority+0x4c>)
 8007116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711a:	0112      	lsls	r2, r2, #4
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	440b      	add	r3, r1
 8007120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007124:	e00a      	b.n	800713c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4908      	ldr	r1, [pc, #32]	; (800714c <__NVIC_SetPriority+0x50>)
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	3b04      	subs	r3, #4
 8007134:	0112      	lsls	r2, r2, #4
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	440b      	add	r3, r1
 800713a:	761a      	strb	r2, [r3, #24]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	e000e100 	.word	0xe000e100
 800714c:	e000ed00 	.word	0xe000ed00

08007150 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007154:	2100      	movs	r1, #0
 8007156:	f06f 0004 	mvn.w	r0, #4
 800715a:	f7ff ffcf 	bl	80070fc <__NVIC_SetPriority>
#endif
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800716a:	f3ef 8305 	mrs	r3, IPSR
 800716e:	603b      	str	r3, [r7, #0]
  return(result);
 8007170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007176:	f06f 0305 	mvn.w	r3, #5
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	e00c      	b.n	8007198 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <osKernelInitialize+0x44>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007186:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <osKernelInitialize+0x44>)
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800718c:	2300      	movs	r3, #0
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	e002      	b.n	8007198 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007192:	f04f 33ff 	mov.w	r3, #4294967295
 8007196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007198:	687b      	ldr	r3, [r7, #4]
}
 800719a:	4618      	mov	r0, r3
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	2000044c 	.word	0x2000044c

080071ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b2:	f3ef 8305 	mrs	r3, IPSR
 80071b6:	603b      	str	r3, [r7, #0]
  return(result);
 80071b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80071be:	f06f 0305 	mvn.w	r3, #5
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	e010      	b.n	80071e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071c6:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <osKernelStart+0x48>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d109      	bne.n	80071e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071ce:	f7ff ffbf 	bl	8007150 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <osKernelStart+0x48>)
 80071d4:	2202      	movs	r2, #2
 80071d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071d8:	f001 fa3c 	bl	8008654 <vTaskStartScheduler>
      stat = osOK;
 80071dc:	2300      	movs	r3, #0
 80071de:	607b      	str	r3, [r7, #4]
 80071e0:	e002      	b.n	80071e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071e8:	687b      	ldr	r3, [r7, #4]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	2000044c 	.word	0x2000044c

080071f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08e      	sub	sp, #56	; 0x38
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007204:	2300      	movs	r3, #0
 8007206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007208:	f3ef 8305 	mrs	r3, IPSR
 800720c:	617b      	str	r3, [r7, #20]
  return(result);
 800720e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007210:	2b00      	cmp	r3, #0
 8007212:	d17e      	bne.n	8007312 <osThreadNew+0x11a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d07b      	beq.n	8007312 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800721e:	2318      	movs	r3, #24
 8007220:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007226:	f04f 33ff 	mov.w	r3, #4294967295
 800722a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d045      	beq.n	80072be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <osThreadNew+0x48>
        name = attr->name;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <osThreadNew+0x6e>
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	2b38      	cmp	r3, #56	; 0x38
 8007258:	d805      	bhi.n	8007266 <osThreadNew+0x6e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <osThreadNew+0x72>
        return (NULL);
 8007266:	2300      	movs	r3, #0
 8007268:	e054      	b.n	8007314 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	089b      	lsrs	r3, r3, #2
 8007278:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00e      	beq.n	80072a0 <osThreadNew+0xa8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	2bbb      	cmp	r3, #187	; 0xbb
 8007288:	d90a      	bls.n	80072a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800728e:	2b00      	cmp	r3, #0
 8007290:	d006      	beq.n	80072a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <osThreadNew+0xa8>
        mem = 1;
 800729a:	2301      	movs	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	e010      	b.n	80072c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10c      	bne.n	80072c2 <osThreadNew+0xca>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d108      	bne.n	80072c2 <osThreadNew+0xca>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <osThreadNew+0xca>
          mem = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	e001      	b.n	80072c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d110      	bne.n	80072ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072d0:	9202      	str	r2, [sp, #8]
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f001 f818 	bl	8008314 <xTaskCreateStatic>
 80072e4:	4603      	mov	r3, r0
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	e013      	b.n	8007312 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d110      	bne.n	8007312 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f107 0310 	add.w	r3, r7, #16
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f836 	bl	8008374 <xTaskCreate>
 8007308:	4603      	mov	r3, r0
 800730a:	2b01      	cmp	r3, #1
 800730c:	d001      	beq.n	8007312 <osThreadNew+0x11a>
            hTask = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007312:	693b      	ldr	r3, [r7, #16]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3728      	adds	r7, #40	; 0x28
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007324:	f3ef 8305 	mrs	r3, IPSR
 8007328:	60bb      	str	r3, [r7, #8]
  return(result);
 800732a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <osDelay+0x1c>
    stat = osErrorISR;
 8007330:	f06f 0305 	mvn.w	r3, #5
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	e007      	b.n	8007348 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 f962 	bl	800860c <vTaskDelay>
    }
  }

  return (stat);
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007352:	b580      	push	{r7, lr}
 8007354:	b08a      	sub	sp, #40	; 0x28
 8007356:	af02      	add	r7, sp, #8
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007362:	f3ef 8305 	mrs	r3, IPSR
 8007366:	613b      	str	r3, [r7, #16]
  return(result);
 8007368:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800736a:	2b00      	cmp	r3, #0
 800736c:	d175      	bne.n	800745a <osSemaphoreNew+0x108>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d072      	beq.n	800745a <osSemaphoreNew+0x108>
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	429a      	cmp	r2, r3
 800737a:	d86e      	bhi.n	800745a <osSemaphoreNew+0x108>
    mem = -1;
 800737c:	f04f 33ff 	mov.w	r3, #4294967295
 8007380:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d015      	beq.n	80073b4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <osSemaphoreNew+0x4c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	2b4f      	cmp	r3, #79	; 0x4f
 8007396:	d902      	bls.n	800739e <osSemaphoreNew+0x4c>
        mem = 1;
 8007398:	2301      	movs	r3, #1
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	e00c      	b.n	80073b8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d108      	bne.n	80073b8 <osSemaphoreNew+0x66>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <osSemaphoreNew+0x66>
          mem = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	e001      	b.n	80073b8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d04c      	beq.n	800745a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d128      	bne.n	8007418 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d10a      	bne.n	80073e2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2203      	movs	r2, #3
 80073d2:	9200      	str	r2, [sp, #0]
 80073d4:	2200      	movs	r2, #0
 80073d6:	2100      	movs	r1, #0
 80073d8:	2001      	movs	r0, #1
 80073da:	f000 fa1b 	bl	8007814 <xQueueGenericCreateStatic>
 80073de:	61f8      	str	r0, [r7, #28]
 80073e0:	e005      	b.n	80073ee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80073e2:	2203      	movs	r2, #3
 80073e4:	2100      	movs	r1, #0
 80073e6:	2001      	movs	r0, #1
 80073e8:	f000 fa33 	bl	8007852 <xQueueGenericCreate>
 80073ec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d022      	beq.n	800743a <osSemaphoreNew+0xe8>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01f      	beq.n	800743a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80073fa:	2300      	movs	r3, #0
 80073fc:	2200      	movs	r2, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	69f8      	ldr	r0, [r7, #28]
 8007402:	f000 faa5 	bl	8007950 <xQueueGenericSend>
 8007406:	4603      	mov	r3, r0
 8007408:	2b01      	cmp	r3, #1
 800740a:	d016      	beq.n	800743a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800740c:	69f8      	ldr	r0, [r7, #28]
 800740e:	f000 fdbc 	bl	8007f8a <vQueueDelete>
            hSemaphore = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	e010      	b.n	800743a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d108      	bne.n	8007430 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	461a      	mov	r2, r3
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fa62 	bl	80078f0 <xQueueCreateCountingSemaphoreStatic>
 800742c:	61f8      	str	r0, [r7, #28]
 800742e:	e004      	b.n	800743a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fa76 	bl	8007924 <xQueueCreateCountingSemaphore>
 8007438:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	e001      	b.n	8007452 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007452:	6979      	ldr	r1, [r7, #20]
 8007454:	69f8      	ldr	r0, [r7, #28]
 8007456:	f000 fed5 	bl	8008204 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800745a:	69fb      	ldr	r3, [r7, #28]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800747c:	f06f 0303 	mvn.w	r3, #3
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e039      	b.n	80074f8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007484:	f3ef 8305 	mrs	r3, IPSR
 8007488:	60fb      	str	r3, [r7, #12]
  return(result);
 800748a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800748c:	2b00      	cmp	r3, #0
 800748e:	d022      	beq.n	80074d6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007496:	f06f 0303 	mvn.w	r3, #3
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e02c      	b.n	80074f8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80074a2:	f107 0308 	add.w	r3, r7, #8
 80074a6:	461a      	mov	r2, r3
 80074a8:	2100      	movs	r1, #0
 80074aa:	6938      	ldr	r0, [r7, #16]
 80074ac:	f000 fd16 	bl	8007edc <xQueueReceiveFromISR>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d003      	beq.n	80074be <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80074b6:	f06f 0302 	mvn.w	r3, #2
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e01c      	b.n	80074f8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d019      	beq.n	80074f8 <osSemaphoreAcquire+0x94>
 80074c4:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <osSemaphoreAcquire+0xa0>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	e010      	b.n	80074f8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6938      	ldr	r0, [r7, #16]
 80074da:	f000 fc37 	bl	8007d4c <xQueueSemaphoreTake>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d009      	beq.n	80074f8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80074ea:	f06f 0301 	mvn.w	r3, #1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e002      	b.n	80074f8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80074f2:	f06f 0302 	mvn.w	r3, #2
 80074f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80074f8:	697b      	ldr	r3, [r7, #20]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800751e:	f06f 0303 	mvn.w	r3, #3
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e02c      	b.n	8007580 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007526:	f3ef 8305 	mrs	r3, IPSR
 800752a:	60fb      	str	r3, [r7, #12]
  return(result);
 800752c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01a      	beq.n	8007568 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007532:	2300      	movs	r3, #0
 8007534:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007536:	f107 0308 	add.w	r3, r7, #8
 800753a:	4619      	mov	r1, r3
 800753c:	6938      	ldr	r0, [r7, #16]
 800753e:	f000 fb0e 	bl	8007b5e <xQueueGiveFromISR>
 8007542:	4603      	mov	r3, r0
 8007544:	2b01      	cmp	r3, #1
 8007546:	d003      	beq.n	8007550 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007548:	f06f 0302 	mvn.w	r3, #2
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e017      	b.n	8007580 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d014      	beq.n	8007580 <osSemaphoreRelease+0x78>
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <osSemaphoreRelease+0x84>)
 8007558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	e00b      	b.n	8007580 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007568:	2300      	movs	r3, #0
 800756a:	2200      	movs	r2, #0
 800756c:	2100      	movs	r1, #0
 800756e:	6938      	ldr	r0, [r7, #16]
 8007570:	f000 f9ee 	bl	8007950 <xQueueGenericSend>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d002      	beq.n	8007580 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800757a:	f06f 0302 	mvn.w	r3, #2
 800757e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007580:	697b      	ldr	r3, [r7, #20]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4a07      	ldr	r2, [pc, #28]	; (80075bc <vApplicationGetIdleTaskMemory+0x2c>)
 80075a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4a06      	ldr	r2, [pc, #24]	; (80075c0 <vApplicationGetIdleTaskMemory+0x30>)
 80075a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2280      	movs	r2, #128	; 0x80
 80075ac:	601a      	str	r2, [r3, #0]
}
 80075ae:	bf00      	nop
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20000450 	.word	0x20000450
 80075c0:	2000050c 	.word	0x2000050c

080075c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a07      	ldr	r2, [pc, #28]	; (80075f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80075d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4a06      	ldr	r2, [pc, #24]	; (80075f4 <vApplicationGetTimerTaskMemory+0x30>)
 80075da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075e2:	601a      	str	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	2000070c 	.word	0x2000070c
 80075f4:	200007c8 	.word	0x200007c8

080075f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f103 0208 	add.w	r2, r3, #8
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f04f 32ff 	mov.w	r2, #4294967295
 8007610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f103 0208 	add.w	r2, r3, #8
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f103 0208 	add.w	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d103      	bne.n	80076ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e00c      	b.n	80076d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3308      	adds	r3, #8
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e002      	b.n	80076c8 <vListInsert+0x2e>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d2f6      	bcs.n	80076c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6892      	ldr	r2, [r2, #8]
 8007722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6852      	ldr	r2, [r2, #4]
 800772c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d103      	bne.n	8007740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	1e5a      	subs	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800776e:	f002 f861 	bl	8009834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800777e:	fb01 f303 	mul.w	r3, r1, r3
 8007782:	441a      	add	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779e:	3b01      	subs	r3, #1
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077a4:	fb01 f303 	mul.w	r3, r1, r3
 80077a8:	441a      	add	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	22ff      	movs	r2, #255	; 0xff
 80077b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	22ff      	movs	r2, #255	; 0xff
 80077ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d114      	bne.n	80077ee <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01a      	beq.n	8007802 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3310      	adds	r3, #16
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 f97d 	bl	8008ad0 <xTaskRemoveFromEventList>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d012      	beq.n	8007802 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <xQueueGenericReset+0xb0>)
 80077de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	e009      	b.n	8007802 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3310      	adds	r3, #16
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff ff00 	bl	80075f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3324      	adds	r3, #36	; 0x24
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fefb 	bl	80075f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007802:	f002 f831 	bl	8009868 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007806:	2301      	movs	r3, #1
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00d      	beq.n	8007848 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007834:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f831 	bl	80078aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007848:	697b      	ldr	r3, [r7, #20]
	}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007852:	b580      	push	{r7, lr}
 8007854:	b08a      	sub	sp, #40	; 0x28
 8007856:	af02      	add	r7, sp, #8
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	4613      	mov	r3, r2
 800785e:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	fb02 f303 	mul.w	r3, r2, r3
 8007868:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	3350      	adds	r3, #80	; 0x50
 800786e:	4618      	mov	r0, r3
 8007870:	f002 f89a 	bl	80099a8 <pvPortMalloc>
 8007874:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d011      	beq.n	80078a0 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	3350      	adds	r3, #80	; 0x50
 8007884:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800788e:	79fa      	ldrb	r2, [r7, #7]
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f805 	bl	80078aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078a0:	69bb      	ldr	r3, [r7, #24]
	}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e002      	b.n	80078cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078d8:	2101      	movs	r1, #1
 80078da:	69b8      	ldr	r0, [r7, #24]
 80078dc:	f7ff ff40 	bl	8007760 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078e8:	bf00      	nop
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80078fc:	2302      	movs	r3, #2
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	2100      	movs	r1, #0
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f7ff ff84 	bl	8007814 <xQueueGenericCreateStatic>
 800790c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800791a:	697b      	ldr	r3, [r7, #20]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800792e:	2202      	movs	r2, #2
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff ff8d 	bl	8007852 <xQueueGenericCreate>
 8007938:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007946:	68fb      	ldr	r3, [r7, #12]
	}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	; 0x28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800795e:	2300      	movs	r3, #0
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007966:	f001 ff65 	bl	8009834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	429a      	cmp	r2, r3
 8007974:	d302      	bcc.n	800797c <xQueueGenericSend+0x2c>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d129      	bne.n	80079d0 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	6a38      	ldr	r0, [r7, #32]
 8007982:	f000 fb2f 	bl	8007fe4 <prvCopyDataToQueue>
 8007986:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	d010      	beq.n	80079b2 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	3324      	adds	r3, #36	; 0x24
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f89b 	bl	8008ad0 <xTaskRemoveFromEventList>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d013      	beq.n	80079c8 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079a0:	4b3f      	ldr	r3, [pc, #252]	; (8007aa0 <xQueueGenericSend+0x150>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	e00a      	b.n	80079c8 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d007      	beq.n	80079c8 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079b8:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <xQueueGenericSend+0x150>)
 80079ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079c8:	f001 ff4e 	bl	8009868 <vPortExitCritical>
				return pdPASS;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e063      	b.n	8007a98 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079d6:	f001 ff47 	bl	8009868 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	e05c      	b.n	8007a98 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079e4:	f107 0314 	add.w	r3, r7, #20
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 f8c7 	bl	8008b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079f2:	f001 ff39 	bl	8009868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079f6:	f000 fe8d 	bl	8008714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079fa:	f001 ff1b 	bl	8009834 <vPortEnterCritical>
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a04:	b25b      	sxtb	r3, r3
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d103      	bne.n	8007a14 <xQueueGenericSend+0xc4>
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a1a:	b25b      	sxtb	r3, r3
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d103      	bne.n	8007a2a <xQueueGenericSend+0xda>
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a2a:	f001 ff1d 	bl	8009868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a2e:	1d3a      	adds	r2, r7, #4
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 f8b6 	bl	8008ba8 <xTaskCheckForTimeOut>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d124      	bne.n	8007a8c <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a42:	6a38      	ldr	r0, [r7, #32]
 8007a44:	f000 fbc6 	bl	80081d4 <prvIsQueueFull>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d018      	beq.n	8007a80 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	3310      	adds	r3, #16
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 f806 	bl	8008a68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a5c:	6a38      	ldr	r0, [r7, #32]
 8007a5e:	f000 fb51 	bl	8008104 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a62:	f000 fe65 	bl	8008730 <xTaskResumeAll>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f47f af7c 	bne.w	8007966 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <xQueueGenericSend+0x150>)
 8007a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	e772      	b.n	8007966 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a80:	6a38      	ldr	r0, [r7, #32]
 8007a82:	f000 fb3f 	bl	8008104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a86:	f000 fe53 	bl	8008730 <xTaskResumeAll>
 8007a8a:	e76c      	b.n	8007966 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a8c:	6a38      	ldr	r0, [r7, #32]
 8007a8e:	f000 fb39 	bl	8008104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a92:	f000 fe4d 	bl	8008730 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08c      	sub	sp, #48	; 0x30
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	61ba      	str	r2, [r7, #24]
 8007acc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ace:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d302      	bcc.n	8007ae4 <xQueueGenericSendFromISR+0x40>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d12f      	bne.n	8007b44 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afa:	f000 fa73 	bl	8007fe4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007afe:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b06:	d112      	bne.n	8007b2e <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d016      	beq.n	8007b3e <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	3324      	adds	r3, #36	; 0x24
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 ffdb 	bl	8008ad0 <xTaskRemoveFromEventList>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00b      	beq.n	8007b3e <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	e007      	b.n	8007b3e <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b32:	3301      	adds	r3, #1
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	b25a      	sxtb	r2, r3
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8007b42:	e001      	b.n	8007b48 <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3730      	adds	r7, #48	; 0x30
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b08a      	sub	sp, #40	; 0x28
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	623b      	str	r3, [r7, #32]
	__asm volatile
 8007b6c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	613a      	str	r2, [r7, #16]
 8007b82:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8007b84:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b86:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d229      	bcs.n	8007bec <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b9e:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb0:	d112      	bne.n	8007bd8 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d015      	beq.n	8007be6 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	3324      	adds	r3, #36	; 0x24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 ff86 	bl	8008ad0 <xTaskRemoveFromEventList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e006      	b.n	8007be6 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	b25a      	sxtb	r2, r3
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007be6:	2301      	movs	r3, #1
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bea:	e001      	b.n	8007bf0 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bec:	2300      	movs	r3, #0
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f383 8811 	msr	BASEPRI, r3
}
 8007bfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3728      	adds	r7, #40	; 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c14:	2300      	movs	r3, #0
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c1c:	f001 fe0a 	bl	8009834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01f      	beq.n	8007c6c <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	6a38      	ldr	r0, [r7, #32]
 8007c30:	f000 fa42 	bl	80080b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	1e5a      	subs	r2, r3, #1
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00f      	beq.n	8007c64 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	3310      	adds	r3, #16
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 ff41 	bl	8008ad0 <xTaskRemoveFromEventList>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c54:	4b3c      	ldr	r3, [pc, #240]	; (8007d48 <xQueueReceive+0x140>)
 8007c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c64:	f001 fe00 	bl	8009868 <vPortExitCritical>
				return pdPASS;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e069      	b.n	8007d40 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c72:	f001 fdf9 	bl	8009868 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e062      	b.n	8007d40 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d106      	bne.n	8007c8e <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c80:	f107 0314 	add.w	r3, r7, #20
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 ff79 	bl	8008b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c8e:	f001 fdeb 	bl	8009868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c92:	f000 fd3f 	bl	8008714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c96:	f001 fdcd 	bl	8009834 <vPortEnterCritical>
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ca0:	b25b      	sxtb	r3, r3
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d103      	bne.n	8007cb0 <xQueueReceive+0xa8>
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cb6:	b25b      	sxtb	r3, r3
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d103      	bne.n	8007cc6 <xQueueReceive+0xbe>
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc6:	f001 fdcf 	bl	8009868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cca:	1d3a      	adds	r2, r7, #4
 8007ccc:	f107 0314 	add.w	r3, r7, #20
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 ff68 	bl	8008ba8 <xTaskCheckForTimeOut>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d123      	bne.n	8007d26 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cde:	6a38      	ldr	r0, [r7, #32]
 8007ce0:	f000 fa62 	bl	80081a8 <prvIsQueueEmpty>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d017      	beq.n	8007d1a <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	3324      	adds	r3, #36	; 0x24
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 feb8 	bl	8008a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cf8:	6a38      	ldr	r0, [r7, #32]
 8007cfa:	f000 fa03 	bl	8008104 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cfe:	f000 fd17 	bl	8008730 <xTaskResumeAll>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d189      	bne.n	8007c1c <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <xQueueReceive+0x140>)
 8007d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	e780      	b.n	8007c1c <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d1a:	6a38      	ldr	r0, [r7, #32]
 8007d1c:	f000 f9f2 	bl	8008104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d20:	f000 fd06 	bl	8008730 <xTaskResumeAll>
 8007d24:	e77a      	b.n	8007c1c <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d26:	6a38      	ldr	r0, [r7, #32]
 8007d28:	f000 f9ec 	bl	8008104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d2c:	f000 fd00 	bl	8008730 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d30:	6a38      	ldr	r0, [r7, #32]
 8007d32:	f000 fa39 	bl	80081a8 <prvIsQueueEmpty>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f43f af6f 	beq.w	8007c1c <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3728      	adds	r7, #40	; 0x28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	; 0x28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d62:	f001 fd67 	bl	8009834 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d024      	beq.n	8007dbc <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d82:	f001 f95f 	bl	8009044 <pvTaskIncrementMutexHeldCount>
 8007d86:	4602      	mov	r2, r0
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00f      	beq.n	8007db4 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	3310      	adds	r3, #16
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fe99 	bl	8008ad0 <xTaskRemoveFromEventList>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007da4:	4b4c      	ldr	r3, [pc, #304]	; (8007ed8 <xQueueSemaphoreTake+0x18c>)
 8007da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007db4:	f001 fd58 	bl	8009868 <vPortExitCritical>
				return pdPASS;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e089      	b.n	8007ed0 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007dc2:	f001 fd51 	bl	8009868 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e082      	b.n	8007ed0 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd0:	f107 030c 	add.w	r3, r7, #12
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fed1 	bl	8008b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dde:	f001 fd43 	bl	8009868 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de2:	f000 fc97 	bl	8008714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007de6:	f001 fd25 	bl	8009834 <vPortEnterCritical>
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df0:	b25b      	sxtb	r3, r3
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d103      	bne.n	8007e00 <xQueueSemaphoreTake+0xb4>
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e06:	b25b      	sxtb	r3, r3
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d103      	bne.n	8007e16 <xQueueSemaphoreTake+0xca>
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e16:	f001 fd27 	bl	8009868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e1a:	463a      	mov	r2, r7
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fec0 	bl	8008ba8 <xTaskCheckForTimeOut>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d132      	bne.n	8007e94 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e2e:	69f8      	ldr	r0, [r7, #28]
 8007e30:	f000 f9ba 	bl	80081a8 <prvIsQueueEmpty>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d026      	beq.n	8007e88 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8007e42:	f001 fcf7 	bl	8009834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 ffe6 	bl	8008e1c <xTaskPriorityInherit>
 8007e50:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8007e52:	f001 fd09 	bl	8009868 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	3324      	adds	r3, #36	; 0x24
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fe02 	bl	8008a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e64:	69f8      	ldr	r0, [r7, #28]
 8007e66:	f000 f94d 	bl	8008104 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e6a:	f000 fc61 	bl	8008730 <xTaskResumeAll>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f47f af76 	bne.w	8007d62 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8007e76:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <xQueueSemaphoreTake+0x18c>)
 8007e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	e76c      	b.n	8007d62 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e88:	69f8      	ldr	r0, [r7, #28]
 8007e8a:	f000 f93b 	bl	8008104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e8e:	f000 fc4f 	bl	8008730 <xTaskResumeAll>
 8007e92:	e766      	b.n	8007d62 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007e94:	69f8      	ldr	r0, [r7, #28]
 8007e96:	f000 f935 	bl	8008104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e9a:	f000 fc49 	bl	8008730 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e9e:	69f8      	ldr	r0, [r7, #28]
 8007ea0:	f000 f982 	bl	80081a8 <prvIsQueueEmpty>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f43f af5b 	beq.w	8007d62 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8007eb2:	f001 fcbf 	bl	8009834 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007eb6:	69f8      	ldr	r0, [r7, #28]
 8007eb8:	f000 f87c 	bl	8007fb4 <prvGetDisinheritPriorityAfterTimeout>
 8007ebc:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	6979      	ldr	r1, [r7, #20]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 f85d 	bl	8008f84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007eca:	f001 fccd 	bl	8009868 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3728      	adds	r7, #40	; 0x28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08c      	sub	sp, #48	; 0x30
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 8007eec:	f3ef 8211 	mrs	r2, BASEPRI
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	61ba      	str	r2, [r7, #24]
 8007f02:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f04:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0c:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d02d      	beq.n	8007f70 <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f1a:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f20:	f000 f8ca 	bl	80080b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	1e5a      	subs	r2, r3, #1
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d112      	bne.n	8007f5c <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d015      	beq.n	8007f6a <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	3310      	adds	r3, #16
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fdc4 	bl	8008ad0 <xTaskRemoveFromEventList>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	e006      	b.n	8007f6a <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f5c:	7ffb      	ldrb	r3, [r7, #31]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	b25a      	sxtb	r2, r3
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f6e:	e001      	b.n	8007f74 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f383 8811 	msr	BASEPRI, r3
}
 8007f7e:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3730      	adds	r7, #48	; 0x30
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 f95e 	bl	8008258 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f001 fd98 	bl	8009adc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d006      	beq.n	8007fd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e001      	b.n	8007fd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
	}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10d      	bne.n	800801e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d14d      	bne.n	80080a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 ff6c 	bl	8008eec <xTaskPriorityDisinherit>
 8008014:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	609a      	str	r2, [r3, #8]
 800801c:	e043      	b.n	80080a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d119      	bne.n	8008058 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6858      	ldr	r0, [r3, #4]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	461a      	mov	r2, r3
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	f001 fe7c 	bl	8009d2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	441a      	add	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	429a      	cmp	r2, r3
 800804c:	d32b      	bcc.n	80080a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	605a      	str	r2, [r3, #4]
 8008056:	e026      	b.n	80080a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68d8      	ldr	r0, [r3, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008060:	461a      	mov	r2, r3
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	f001 fe62 	bl	8009d2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	425b      	negs	r3, r3
 8008072:	441a      	add	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d207      	bcs.n	8008094 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	425b      	negs	r3, r3
 800808e:	441a      	add	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d105      	bne.n	80080a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080ae:	697b      	ldr	r3, [r7, #20]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d018      	beq.n	80080fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	441a      	add	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d303      	bcc.n	80080ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68d9      	ldr	r1, [r3, #12]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	461a      	mov	r2, r3
 80080f6:	6838      	ldr	r0, [r7, #0]
 80080f8:	f001 fe18 	bl	8009d2c <memcpy>
	}
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800810c:	f001 fb92 	bl	8009834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008116:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008118:	e011      	b.n	800813e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d012      	beq.n	8008148 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3324      	adds	r3, #36	; 0x24
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fcd2 	bl	8008ad0 <xTaskRemoveFromEventList>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008132:	f000 fd7f 	bl	8008c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	3b01      	subs	r3, #1
 800813a:	b2db      	uxtb	r3, r3
 800813c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800813e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	dce9      	bgt.n	800811a <prvUnlockQueue+0x16>
 8008146:	e000      	b.n	800814a <prvUnlockQueue+0x46>
					break;
 8008148:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008152:	f001 fb89 	bl	8009868 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008156:	f001 fb6d 	bl	8009834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008160:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008162:	e011      	b.n	8008188 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d012      	beq.n	8008192 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3310      	adds	r3, #16
 8008170:	4618      	mov	r0, r3
 8008172:	f000 fcad 	bl	8008ad0 <xTaskRemoveFromEventList>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800817c:	f000 fd5a 	bl	8008c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	3b01      	subs	r3, #1
 8008184:	b2db      	uxtb	r3, r3
 8008186:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dce9      	bgt.n	8008164 <prvUnlockQueue+0x60>
 8008190:	e000      	b.n	8008194 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008192:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	22ff      	movs	r2, #255	; 0xff
 8008198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800819c:	f001 fb64 	bl	8009868 <vPortExitCritical>
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081b0:	f001 fb40 	bl	8009834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081bc:	2301      	movs	r3, #1
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	e001      	b.n	80081c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081c6:	f001 fb4f 	bl	8009868 <vPortExitCritical>

	return xReturn;
 80081ca:	68fb      	ldr	r3, [r7, #12]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081dc:	f001 fb2a 	bl	8009834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d102      	bne.n	80081f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e001      	b.n	80081f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081f6:	f001 fb37 	bl	8009868 <vPortExitCritical>

	return xReturn;
 80081fa:	68fb      	ldr	r3, [r7, #12]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	e014      	b.n	800823e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008214:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <vQueueAddToRegistry+0x50>)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10b      	bne.n	8008238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008220:	490c      	ldr	r1, [pc, #48]	; (8008254 <vQueueAddToRegistry+0x50>)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800822a:	4a0a      	ldr	r2, [pc, #40]	; (8008254 <vQueueAddToRegistry+0x50>)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4413      	add	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008236:	e006      	b.n	8008246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b07      	cmp	r3, #7
 8008242:	d9e7      	bls.n	8008214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20000bc8 	.word	0x20000bc8

08008258 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e016      	b.n	8008294 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008266:	4a10      	ldr	r2, [pc, #64]	; (80082a8 <vQueueUnregisterQueue+0x50>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4413      	add	r3, r2
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d10b      	bne.n	800828e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008276:	4a0c      	ldr	r2, [pc, #48]	; (80082a8 <vQueueUnregisterQueue+0x50>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2100      	movs	r1, #0
 800827c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008280:	4a09      	ldr	r2, [pc, #36]	; (80082a8 <vQueueUnregisterQueue+0x50>)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	4413      	add	r3, r2
 8008288:	2200      	movs	r2, #0
 800828a:	605a      	str	r2, [r3, #4]
				break;
 800828c:	e006      	b.n	800829c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b07      	cmp	r3, #7
 8008298:	d9e5      	bls.n	8008266 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800829a:	bf00      	nop
 800829c:	bf00      	nop
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	20000bc8 	.word	0x20000bc8

080082ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082bc:	f001 faba 	bl	8009834 <vPortEnterCritical>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082c6:	b25b      	sxtb	r3, r3
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d103      	bne.n	80082d6 <vQueueWaitForMessageRestricted+0x2a>
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d103      	bne.n	80082ec <vQueueWaitForMessageRestricted+0x40>
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ec:	f001 fabc 	bl	8009868 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	3324      	adds	r3, #36	; 0x24
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fbc7 	bl	8008a94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008306:	6978      	ldr	r0, [r7, #20]
 8008308:	f7ff fefc 	bl	8008104 <prvUnlockQueue>
	}
 800830c:	bf00      	nop
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08a      	sub	sp, #40	; 0x28
 8008318:	af04      	add	r7, sp, #16
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01e      	beq.n	8008366 <xTaskCreateStatic+0x52>
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d01b      	beq.n	8008366 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008336:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008340:	2300      	movs	r3, #0
 8008342:	9303      	str	r3, [sp, #12]
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	9302      	str	r3, [sp, #8]
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f851 	bl	8008400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800835e:	6978      	ldr	r0, [r7, #20]
 8008360:	f000 f8e4 	bl	800852c <prvAddNewTaskToReadyList>
 8008364:	e001      	b.n	800836a <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 800836a:	693b      	ldr	r3, [r7, #16]
	}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08c      	sub	sp, #48	; 0x30
 8008378:	af04      	add	r7, sp, #16
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	4613      	mov	r3, r2
 8008382:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fb0d 	bl	80099a8 <pvPortMalloc>
 800838e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00e      	beq.n	80083b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008396:	20bc      	movs	r0, #188	; 0xbc
 8008398:	f001 fb06 	bl	80099a8 <pvPortMalloc>
 800839c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
 80083aa:	e005      	b.n	80083b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083ac:	6978      	ldr	r0, [r7, #20]
 80083ae:	f001 fb95 	bl	8009adc <vPortFree>
 80083b2:	e001      	b.n	80083b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d017      	beq.n	80083ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	2300      	movs	r3, #0
 80083ca:	9303      	str	r3, [sp, #12]
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	9302      	str	r3, [sp, #8]
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 f80f 	bl	8008400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083e2:	69f8      	ldr	r0, [r7, #28]
 80083e4:	f000 f8a2 	bl	800852c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083e8:	2301      	movs	r3, #1
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	e002      	b.n	80083f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083f4:	69bb      	ldr	r3, [r7, #24]
	}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	461a      	mov	r2, r3
 8008418:	21a5      	movs	r1, #165	; 0xa5
 800841a:	f001 fc95 	bl	8009d48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008428:	3b01      	subs	r3, #1
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 0307 	bic.w	r3, r3, #7
 8008436:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d01f      	beq.n	800847e <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	e012      	b.n	800846a <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	4413      	add	r3, r2
 800844a:	7819      	ldrb	r1, [r3, #0]
 800844c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	4413      	add	r3, r2
 8008452:	3334      	adds	r3, #52	; 0x34
 8008454:	460a      	mov	r2, r1
 8008456:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d006      	beq.n	8008472 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	3301      	adds	r3, #1
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b0f      	cmp	r3, #15
 800846e:	d9e9      	bls.n	8008444 <prvInitialiseNewTask+0x44>
 8008470:	e000      	b.n	8008474 <prvInitialiseNewTask+0x74>
			{
				break;
 8008472:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800847c:	e003      	b.n	8008486 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	2b37      	cmp	r3, #55	; 0x37
 800848a:	d901      	bls.n	8008490 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800848c:	2337      	movs	r3, #55	; 0x37
 800848e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	6a3a      	ldr	r2, [r7, #32]
 8008494:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	6a3a      	ldr	r2, [r7, #32]
 800849a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	2200      	movs	r2, #0
 80084a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	3304      	adds	r3, #4
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff f8c6 	bl	8007638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	3318      	adds	r3, #24
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff f8c1 	bl	8007638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	3354      	adds	r3, #84	; 0x54
 80084e0:	2260      	movs	r2, #96	; 0x60
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f001 fc2f 	bl	8009d48 <memset>
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	4a0c      	ldr	r2, [pc, #48]	; (8008520 <prvInitialiseNewTask+0x120>)
 80084ee:	659a      	str	r2, [r3, #88]	; 0x58
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <prvInitialiseNewTask+0x124>)
 80084f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	4a0b      	ldr	r2, [pc, #44]	; (8008528 <prvInitialiseNewTask+0x128>)
 80084fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	68f9      	ldr	r1, [r7, #12]
 8008500:	6938      	ldr	r0, [r7, #16]
 8008502:	f001 f8f5 	bl	80096f0 <pxPortInitialiseStack>
 8008506:	4602      	mov	r2, r0
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008516:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008518:	bf00      	nop
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	0800c810 	.word	0x0800c810
 8008524:	0800c830 	.word	0x0800c830
 8008528:	0800c7f0 	.word	0x0800c7f0

0800852c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008534:	f001 f97e 	bl	8009834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008538:	4b2d      	ldr	r3, [pc, #180]	; (80085f0 <prvAddNewTaskToReadyList+0xc4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3301      	adds	r3, #1
 800853e:	4a2c      	ldr	r2, [pc, #176]	; (80085f0 <prvAddNewTaskToReadyList+0xc4>)
 8008540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008542:	4b2c      	ldr	r3, [pc, #176]	; (80085f4 <prvAddNewTaskToReadyList+0xc8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d109      	bne.n	800855e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800854a:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <prvAddNewTaskToReadyList+0xc8>)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <prvAddNewTaskToReadyList+0xc4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d110      	bne.n	800857a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008558:	f000 fb90 	bl	8008c7c <prvInitialiseTaskLists>
 800855c:	e00d      	b.n	800857a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800855e:	4b26      	ldr	r3, [pc, #152]	; (80085f8 <prvAddNewTaskToReadyList+0xcc>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d109      	bne.n	800857a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008566:	4b23      	ldr	r3, [pc, #140]	; (80085f4 <prvAddNewTaskToReadyList+0xc8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	429a      	cmp	r2, r3
 8008572:	d802      	bhi.n	800857a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008574:	4a1f      	ldr	r2, [pc, #124]	; (80085f4 <prvAddNewTaskToReadyList+0xc8>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800857a:	4b20      	ldr	r3, [pc, #128]	; (80085fc <prvAddNewTaskToReadyList+0xd0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3301      	adds	r3, #1
 8008580:	4a1e      	ldr	r2, [pc, #120]	; (80085fc <prvAddNewTaskToReadyList+0xd0>)
 8008582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008584:	4b1d      	ldr	r3, [pc, #116]	; (80085fc <prvAddNewTaskToReadyList+0xd0>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	4b1b      	ldr	r3, [pc, #108]	; (8008600 <prvAddNewTaskToReadyList+0xd4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d903      	bls.n	80085a0 <prvAddNewTaskToReadyList+0x74>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	4a18      	ldr	r2, [pc, #96]	; (8008600 <prvAddNewTaskToReadyList+0xd4>)
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4a15      	ldr	r2, [pc, #84]	; (8008604 <prvAddNewTaskToReadyList+0xd8>)
 80085ae:	441a      	add	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7ff f84b 	bl	8007652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085bc:	f001 f954 	bl	8009868 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085c0:	4b0d      	ldr	r3, [pc, #52]	; (80085f8 <prvAddNewTaskToReadyList+0xcc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00e      	beq.n	80085e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <prvAddNewTaskToReadyList+0xc8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d207      	bcs.n	80085e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085d6:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <prvAddNewTaskToReadyList+0xdc>)
 80085d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085e6:	bf00      	nop
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	200010dc 	.word	0x200010dc
 80085f4:	20000c08 	.word	0x20000c08
 80085f8:	200010e8 	.word	0x200010e8
 80085fc:	200010f8 	.word	0x200010f8
 8008600:	200010e4 	.word	0x200010e4
 8008604:	20000c0c 	.word	0x20000c0c
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008614:	2300      	movs	r3, #0
 8008616:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d008      	beq.n	8008630 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800861e:	f000 f879 	bl	8008714 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008622:	2100      	movs	r1, #0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fd21 	bl	800906c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800862a:	f000 f881 	bl	8008730 <xTaskResumeAll>
 800862e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8008636:	4b06      	ldr	r3, [pc, #24]	; (8008650 <vTaskDelay+0x44>)
 8008638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	; 0x28
 8008658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008662:	1d3a      	adds	r2, r7, #4
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe ff8f 	bl	8007590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	9202      	str	r2, [sp, #8]
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	2300      	movs	r3, #0
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	2300      	movs	r3, #0
 8008682:	460a      	mov	r2, r1
 8008684:	491b      	ldr	r1, [pc, #108]	; (80086f4 <vTaskStartScheduler+0xa0>)
 8008686:	481c      	ldr	r0, [pc, #112]	; (80086f8 <vTaskStartScheduler+0xa4>)
 8008688:	f7ff fe44 	bl	8008314 <xTaskCreateStatic>
 800868c:	4603      	mov	r3, r0
 800868e:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <vTaskStartScheduler+0xa8>)
 8008690:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008692:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <vTaskStartScheduler+0xa8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d002      	beq.n	80086a0 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800869a:	2301      	movs	r3, #1
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e001      	b.n	80086a4 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d102      	bne.n	80086b0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80086aa:	f000 fd33 	bl	8009114 <xTimerCreateTimerTask>
 80086ae:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d11a      	bne.n	80086ec <vTaskStartScheduler+0x98>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	613b      	str	r3, [r7, #16]
}
 80086c8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086ca:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <vTaskStartScheduler+0xac>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3354      	adds	r3, #84	; 0x54
 80086d0:	4a0c      	ldr	r2, [pc, #48]	; (8008704 <vTaskStartScheduler+0xb0>)
 80086d2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086d4:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <vTaskStartScheduler+0xb4>)
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <vTaskStartScheduler+0xb8>)
 80086de:	2201      	movs	r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086e2:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <vTaskStartScheduler+0xbc>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086e8:	f001 f87a 	bl	80097e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086ec:	bf00      	nop
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	0800c6c4 	.word	0x0800c6c4
 80086f8:	08008c4d 	.word	0x08008c4d
 80086fc:	20001100 	.word	0x20001100
 8008700:	20000c08 	.word	0x20000c08
 8008704:	2000001c 	.word	0x2000001c
 8008708:	200010fc 	.word	0x200010fc
 800870c:	200010e8 	.word	0x200010e8
 8008710:	200010e0 	.word	0x200010e0

08008714 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008718:	4b04      	ldr	r3, [pc, #16]	; (800872c <vTaskSuspendAll+0x18>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	4a03      	ldr	r2, [pc, #12]	; (800872c <vTaskSuspendAll+0x18>)
 8008720:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008722:	bf00      	nop
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	20001104 	.word	0x20001104

08008730 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800873a:	2300      	movs	r3, #0
 800873c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800873e:	f001 f879 	bl	8009834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008742:	4b39      	ldr	r3, [pc, #228]	; (8008828 <xTaskResumeAll+0xf8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3b01      	subs	r3, #1
 8008748:	4a37      	ldr	r2, [pc, #220]	; (8008828 <xTaskResumeAll+0xf8>)
 800874a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800874c:	4b36      	ldr	r3, [pc, #216]	; (8008828 <xTaskResumeAll+0xf8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d162      	bne.n	800881a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008754:	4b35      	ldr	r3, [pc, #212]	; (800882c <xTaskResumeAll+0xfc>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d05e      	beq.n	800881a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800875c:	e02f      	b.n	80087be <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875e:	4b34      	ldr	r3, [pc, #208]	; (8008830 <xTaskResumeAll+0x100>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3318      	adds	r3, #24
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe ffce 	bl	800770c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3304      	adds	r3, #4
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe ffc9 	bl	800770c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877e:	4b2d      	ldr	r3, [pc, #180]	; (8008834 <xTaskResumeAll+0x104>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d903      	bls.n	800878e <xTaskResumeAll+0x5e>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	4a2a      	ldr	r2, [pc, #168]	; (8008834 <xTaskResumeAll+0x104>)
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4a27      	ldr	r2, [pc, #156]	; (8008838 <xTaskResumeAll+0x108>)
 800879c:	441a      	add	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f7fe ff54 	bl	8007652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	4b23      	ldr	r3, [pc, #140]	; (800883c <xTaskResumeAll+0x10c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d302      	bcc.n	80087be <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 80087b8:	4b21      	ldr	r3, [pc, #132]	; (8008840 <xTaskResumeAll+0x110>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087be:	4b1c      	ldr	r3, [pc, #112]	; (8008830 <xTaskResumeAll+0x100>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1cb      	bne.n	800875e <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087cc:	f000 fae8 	bl	8008da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087d0:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <xTaskResumeAll+0x114>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d010      	beq.n	80087fe <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087dc:	f000 f846 	bl	800886c <xTaskIncrementTick>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 80087e6:	4b16      	ldr	r3, [pc, #88]	; (8008840 <xTaskResumeAll+0x110>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f1      	bne.n	80087dc <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 80087f8:	4b12      	ldr	r3, [pc, #72]	; (8008844 <xTaskResumeAll+0x114>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <xTaskResumeAll+0x110>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008806:	2301      	movs	r3, #1
 8008808:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <xTaskResumeAll+0x118>)
 800880c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800881a:	f001 f825 	bl	8009868 <vPortExitCritical>

	return xAlreadyYielded;
 800881e:	68bb      	ldr	r3, [r7, #8]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20001104 	.word	0x20001104
 800882c:	200010dc 	.word	0x200010dc
 8008830:	2000109c 	.word	0x2000109c
 8008834:	200010e4 	.word	0x200010e4
 8008838:	20000c0c 	.word	0x20000c0c
 800883c:	20000c08 	.word	0x20000c08
 8008840:	200010f0 	.word	0x200010f0
 8008844:	200010ec 	.word	0x200010ec
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008852:	4b05      	ldr	r3, [pc, #20]	; (8008868 <xTaskGetTickCount+0x1c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008858:	687b      	ldr	r3, [r7, #4]
}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	200010e0 	.word	0x200010e0

0800886c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008876:	4b46      	ldr	r3, [pc, #280]	; (8008990 <xTaskIncrementTick+0x124>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d17e      	bne.n	800897c <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800887e:	4b45      	ldr	r3, [pc, #276]	; (8008994 <xTaskIncrementTick+0x128>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3301      	adds	r3, #1
 8008884:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008886:	4a43      	ldr	r2, [pc, #268]	; (8008994 <xTaskIncrementTick+0x128>)
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d110      	bne.n	80088b4 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8008892:	4b41      	ldr	r3, [pc, #260]	; (8008998 <xTaskIncrementTick+0x12c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	4b40      	ldr	r3, [pc, #256]	; (800899c <xTaskIncrementTick+0x130>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a3e      	ldr	r2, [pc, #248]	; (8008998 <xTaskIncrementTick+0x12c>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	4a3e      	ldr	r2, [pc, #248]	; (800899c <xTaskIncrementTick+0x130>)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	4b3e      	ldr	r3, [pc, #248]	; (80089a0 <xTaskIncrementTick+0x134>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3301      	adds	r3, #1
 80088ac:	4a3c      	ldr	r2, [pc, #240]	; (80089a0 <xTaskIncrementTick+0x134>)
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	f000 fa76 	bl	8008da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088b4:	4b3b      	ldr	r3, [pc, #236]	; (80089a4 <xTaskIncrementTick+0x138>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d349      	bcc.n	8008952 <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088be:	4b36      	ldr	r3, [pc, #216]	; (8008998 <xTaskIncrementTick+0x12c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c8:	4b36      	ldr	r3, [pc, #216]	; (80089a4 <xTaskIncrementTick+0x138>)
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295
 80088ce:	601a      	str	r2, [r3, #0]
					break;
 80088d0:	e03f      	b.n	8008952 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d2:	4b31      	ldr	r3, [pc, #196]	; (8008998 <xTaskIncrementTick+0x12c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d203      	bcs.n	80088f2 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088ea:	4a2e      	ldr	r2, [pc, #184]	; (80089a4 <xTaskIncrementTick+0x138>)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088f0:	e02f      	b.n	8008952 <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe ff08 	bl	800770c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	3318      	adds	r3, #24
 8008908:	4618      	mov	r0, r3
 800890a:	f7fe feff 	bl	800770c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008912:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <xTaskIncrementTick+0x13c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d903      	bls.n	8008922 <xTaskIncrementTick+0xb6>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	4a22      	ldr	r2, [pc, #136]	; (80089a8 <xTaskIncrementTick+0x13c>)
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4a1f      	ldr	r2, [pc, #124]	; (80089ac <xTaskIncrementTick+0x140>)
 8008930:	441a      	add	r2, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	3304      	adds	r3, #4
 8008936:	4619      	mov	r1, r3
 8008938:	4610      	mov	r0, r2
 800893a:	f7fe fe8a 	bl	8007652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <xTaskIncrementTick+0x144>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	429a      	cmp	r2, r3
 800894a:	d3b8      	bcc.n	80088be <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008950:	e7b5      	b.n	80088be <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008952:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <xTaskIncrementTick+0x144>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4914      	ldr	r1, [pc, #80]	; (80089ac <xTaskIncrementTick+0x140>)
 800895a:	4613      	mov	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	440b      	add	r3, r1
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d901      	bls.n	800896e <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 800896a:	2301      	movs	r3, #1
 800896c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800896e:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <xTaskIncrementTick+0x148>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d007      	beq.n	8008986 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 8008976:	2301      	movs	r3, #1
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	e004      	b.n	8008986 <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800897c:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <xTaskIncrementTick+0x14c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	4a0d      	ldr	r2, [pc, #52]	; (80089b8 <xTaskIncrementTick+0x14c>)
 8008984:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008986:	697b      	ldr	r3, [r7, #20]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20001104 	.word	0x20001104
 8008994:	200010e0 	.word	0x200010e0
 8008998:	20001094 	.word	0x20001094
 800899c:	20001098 	.word	0x20001098
 80089a0:	200010f4 	.word	0x200010f4
 80089a4:	200010fc 	.word	0x200010fc
 80089a8:	200010e4 	.word	0x200010e4
 80089ac:	20000c0c 	.word	0x20000c0c
 80089b0:	20000c08 	.word	0x20000c08
 80089b4:	200010f0 	.word	0x200010f0
 80089b8:	200010ec 	.word	0x200010ec

080089bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089c2:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <vTaskSwitchContext+0x94>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089ca:	4b22      	ldr	r3, [pc, #136]	; (8008a54 <vTaskSwitchContext+0x98>)
 80089cc:	2201      	movs	r2, #1
 80089ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089d0:	e038      	b.n	8008a44 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80089d2:	4b20      	ldr	r3, [pc, #128]	; (8008a54 <vTaskSwitchContext+0x98>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d8:	4b1f      	ldr	r3, [pc, #124]	; (8008a58 <vTaskSwitchContext+0x9c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	e002      	b.n	80089e6 <vTaskSwitchContext+0x2a>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	607b      	str	r3, [r7, #4]
 80089e6:	491d      	ldr	r1, [pc, #116]	; (8008a5c <vTaskSwitchContext+0xa0>)
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	440b      	add	r3, r1
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0f2      	beq.n	80089e0 <vTaskSwitchContext+0x24>
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4a15      	ldr	r2, [pc, #84]	; (8008a5c <vTaskSwitchContext+0xa0>)
 8008a06:	4413      	add	r3, r2
 8008a08:	603b      	str	r3, [r7, #0]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	605a      	str	r2, [r3, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d104      	bne.n	8008a2a <vTaskSwitchContext+0x6e>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	605a      	str	r2, [r3, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4a0b      	ldr	r2, [pc, #44]	; (8008a60 <vTaskSwitchContext+0xa4>)
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	4a08      	ldr	r2, [pc, #32]	; (8008a58 <vTaskSwitchContext+0x9c>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <vTaskSwitchContext+0xa4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3354      	adds	r3, #84	; 0x54
 8008a40:	4a08      	ldr	r2, [pc, #32]	; (8008a64 <vTaskSwitchContext+0xa8>)
 8008a42:	6013      	str	r3, [r2, #0]
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20001104 	.word	0x20001104
 8008a54:	200010f0 	.word	0x200010f0
 8008a58:	200010e4 	.word	0x200010e4
 8008a5c:	20000c0c 	.word	0x20000c0c
 8008a60:	20000c08 	.word	0x20000c08
 8008a64:	2000001c 	.word	0x2000001c

08008a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <vTaskPlaceOnEventList+0x28>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3318      	adds	r3, #24
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fe fe0d 	bl	800769a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a80:	2101      	movs	r1, #1
 8008a82:	6838      	ldr	r0, [r7, #0]
 8008a84:	f000 faf2 	bl	800906c <prvAddCurrentTaskToDelayedList>
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000c08 	.word	0x20000c08

08008a94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <vTaskPlaceOnEventListRestricted+0x38>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3318      	adds	r3, #24
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7fe fdd2 	bl	8007652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8008ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	68b8      	ldr	r0, [r7, #8]
 8008abe:	f000 fad5 	bl	800906c <prvAddCurrentTaskToDelayedList>
	}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000c08 	.word	0x20000c08

08008ad0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3318      	adds	r3, #24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fe11 	bl	800770c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aea:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <xTaskRemoveFromEventList+0x94>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d11d      	bne.n	8008b2e <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	3304      	adds	r3, #4
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fe08 	bl	800770c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b00:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <xTaskRemoveFromEventList+0x98>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d903      	bls.n	8008b10 <xTaskRemoveFromEventList+0x40>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	4a16      	ldr	r2, [pc, #88]	; (8008b68 <xTaskRemoveFromEventList+0x98>)
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4a13      	ldr	r2, [pc, #76]	; (8008b6c <xTaskRemoveFromEventList+0x9c>)
 8008b1e:	441a      	add	r2, r3
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f7fe fd93 	bl	8007652 <vListInsertEnd>
 8008b2c:	e005      	b.n	8008b3a <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	3318      	adds	r3, #24
 8008b32:	4619      	mov	r1, r3
 8008b34:	480e      	ldr	r0, [pc, #56]	; (8008b70 <xTaskRemoveFromEventList+0xa0>)
 8008b36:	f7fe fd8c 	bl	8007652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3e:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <xTaskRemoveFromEventList+0xa4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d905      	bls.n	8008b54 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <xTaskRemoveFromEventList+0xa8>)
 8008b4e:	2201      	movs	r2, #1
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e001      	b.n	8008b58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008b58:	68fb      	ldr	r3, [r7, #12]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20001104 	.word	0x20001104
 8008b68:	200010e4 	.word	0x200010e4
 8008b6c:	20000c0c 	.word	0x20000c0c
 8008b70:	2000109c 	.word	0x2000109c
 8008b74:	20000c08 	.word	0x20000c08
 8008b78:	200010f0 	.word	0x200010f0

08008b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <vTaskInternalSetTimeOutState+0x24>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b8c:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <vTaskInternalSetTimeOutState+0x28>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	200010f4 	.word	0x200010f4
 8008ba4:	200010e0 	.word	0x200010e0

08008ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8008bb2:	f000 fe3f 	bl	8009834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bb6:	4b1d      	ldr	r3, [pc, #116]	; (8008c2c <xTaskCheckForTimeOut+0x84>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d102      	bne.n	8008bd6 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	e023      	b.n	8008c1e <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <xTaskCheckForTimeOut+0x88>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d007      	beq.n	8008bf2 <xTaskCheckForTimeOut+0x4a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d302      	bcc.n	8008bf2 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bec:	2301      	movs	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	e015      	b.n	8008c1e <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d20b      	bcs.n	8008c14 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ffb7 	bl	8008b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e004      	b.n	8008c1e <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008c1e:	f000 fe23 	bl	8009868 <vPortExitCritical>

	return xReturn;
 8008c22:	697b      	ldr	r3, [r7, #20]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	200010e0 	.word	0x200010e0
 8008c30:	200010f4 	.word	0x200010f4

08008c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c38:	4b03      	ldr	r3, [pc, #12]	; (8008c48 <vTaskMissedYield+0x14>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]
}
 8008c3e:	bf00      	nop
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	200010f0 	.word	0x200010f0

08008c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c54:	f000 f852 	bl	8008cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <prvIdleTask+0x28>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d9f9      	bls.n	8008c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <prvIdleTask+0x2c>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c70:	e7f0      	b.n	8008c54 <prvIdleTask+0x8>
 8008c72:	bf00      	nop
 8008c74:	20000c0c 	.word	0x20000c0c
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c82:	2300      	movs	r3, #0
 8008c84:	607b      	str	r3, [r7, #4]
 8008c86:	e00c      	b.n	8008ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4a12      	ldr	r2, [pc, #72]	; (8008cdc <prvInitialiseTaskLists+0x60>)
 8008c94:	4413      	add	r3, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fcae 	bl	80075f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	607b      	str	r3, [r7, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b37      	cmp	r3, #55	; 0x37
 8008ca6:	d9ef      	bls.n	8008c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ca8:	480d      	ldr	r0, [pc, #52]	; (8008ce0 <prvInitialiseTaskLists+0x64>)
 8008caa:	f7fe fca5 	bl	80075f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cae:	480d      	ldr	r0, [pc, #52]	; (8008ce4 <prvInitialiseTaskLists+0x68>)
 8008cb0:	f7fe fca2 	bl	80075f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cb4:	480c      	ldr	r0, [pc, #48]	; (8008ce8 <prvInitialiseTaskLists+0x6c>)
 8008cb6:	f7fe fc9f 	bl	80075f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cba:	480c      	ldr	r0, [pc, #48]	; (8008cec <prvInitialiseTaskLists+0x70>)
 8008cbc:	f7fe fc9c 	bl	80075f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cc0:	480b      	ldr	r0, [pc, #44]	; (8008cf0 <prvInitialiseTaskLists+0x74>)
 8008cc2:	f7fe fc99 	bl	80075f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <prvInitialiseTaskLists+0x78>)
 8008cc8:	4a05      	ldr	r2, [pc, #20]	; (8008ce0 <prvInitialiseTaskLists+0x64>)
 8008cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	; (8008cf8 <prvInitialiseTaskLists+0x7c>)
 8008cce:	4a05      	ldr	r2, [pc, #20]	; (8008ce4 <prvInitialiseTaskLists+0x68>)
 8008cd0:	601a      	str	r2, [r3, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000c0c 	.word	0x20000c0c
 8008ce0:	2000106c 	.word	0x2000106c
 8008ce4:	20001080 	.word	0x20001080
 8008ce8:	2000109c 	.word	0x2000109c
 8008cec:	200010b0 	.word	0x200010b0
 8008cf0:	200010c8 	.word	0x200010c8
 8008cf4:	20001094 	.word	0x20001094
 8008cf8:	20001098 	.word	0x20001098

08008cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d02:	e019      	b.n	8008d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d04:	f000 fd96 	bl	8009834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d08:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <prvCheckTasksWaitingTermination+0x50>)
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe fcf9 	bl	800770c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	; (8008d50 <prvCheckTasksWaitingTermination+0x54>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	4a0b      	ldr	r2, [pc, #44]	; (8008d50 <prvCheckTasksWaitingTermination+0x54>)
 8008d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d24:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <prvCheckTasksWaitingTermination+0x58>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	4a0a      	ldr	r2, [pc, #40]	; (8008d54 <prvCheckTasksWaitingTermination+0x58>)
 8008d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d2e:	f000 fd9b 	bl	8009868 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f810 	bl	8008d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d38:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <prvCheckTasksWaitingTermination+0x58>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e1      	bne.n	8008d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200010b0 	.word	0x200010b0
 8008d50:	200010dc 	.word	0x200010dc
 8008d54:	200010c4 	.word	0x200010c4

08008d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3354      	adds	r3, #84	; 0x54
 8008d64:	4618      	mov	r0, r3
 8008d66:	f001 f899 	bl	8009e9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d108      	bne.n	8008d86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 feaf 	bl	8009adc <vPortFree>
				vPortFree( pxTCB );
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 feac 	bl	8009adc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d84:	e007      	b.n	8008d96 <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d102      	bne.n	8008d96 <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fea3 	bl	8009adc <vPortFree>
	}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da6:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <prvResetNextTaskUnblockTime+0x38>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <prvResetNextTaskUnblockTime+0x3c>)
 8008db2:	f04f 32ff 	mov.w	r2, #4294967295
 8008db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008db8:	e008      	b.n	8008dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dba:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <prvResetNextTaskUnblockTime+0x38>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	4a04      	ldr	r2, [pc, #16]	; (8008ddc <prvResetNextTaskUnblockTime+0x3c>)
 8008dca:	6013      	str	r3, [r2, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	20001094 	.word	0x20001094
 8008ddc:	200010fc 	.word	0x200010fc

08008de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <xTaskGetSchedulerState+0x34>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dee:	2301      	movs	r3, #1
 8008df0:	607b      	str	r3, [r7, #4]
 8008df2:	e008      	b.n	8008e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008df4:	4b08      	ldr	r3, [pc, #32]	; (8008e18 <xTaskGetSchedulerState+0x38>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	e001      	b.n	8008e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e02:	2300      	movs	r3, #0
 8008e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e06:	687b      	ldr	r3, [r7, #4]
	}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	200010e8 	.word	0x200010e8
 8008e18:	20001104 	.word	0x20001104

08008e1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d051      	beq.n	8008ed6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	4b2a      	ldr	r3, [pc, #168]	; (8008ee0 <xTaskPriorityInherit+0xc4>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d241      	bcs.n	8008ec4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	db06      	blt.n	8008e56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <xTaskPriorityInherit+0xc4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6959      	ldr	r1, [r3, #20]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4a1f      	ldr	r2, [pc, #124]	; (8008ee4 <xTaskPriorityInherit+0xc8>)
 8008e68:	4413      	add	r3, r2
 8008e6a:	4299      	cmp	r1, r3
 8008e6c:	d122      	bne.n	8008eb4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	3304      	adds	r3, #4
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fc4a 	bl	800770c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <xTaskPriorityInherit+0xc4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e86:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <xTaskPriorityInherit+0xcc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d903      	bls.n	8008e96 <xTaskPriorityInherit+0x7a>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	4a15      	ldr	r2, [pc, #84]	; (8008ee8 <xTaskPriorityInherit+0xcc>)
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4a10      	ldr	r2, [pc, #64]	; (8008ee4 <xTaskPriorityInherit+0xc8>)
 8008ea4:	441a      	add	r2, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4610      	mov	r0, r2
 8008eae:	f7fe fbd0 	bl	8007652 <vListInsertEnd>
 8008eb2:	e004      	b.n	8008ebe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <xTaskPriorityInherit+0xc4>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	e008      	b.n	8008ed6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <xTaskPriorityInherit+0xc4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d201      	bcs.n	8008ed6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000c08 	.word	0x20000c08
 8008ee4:	20000c0c 	.word	0x20000c0c
 8008ee8:	200010e4 	.word	0x200010e4

08008eec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d037      	beq.n	8008f72 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f06:	1e5a      	subs	r2, r3, #1
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d02c      	beq.n	8008f72 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d128      	bne.n	8008f72 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fbf1 	bl	800770c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f42:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <xTaskPriorityDisinherit+0x90>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d903      	bls.n	8008f52 <xTaskPriorityDisinherit+0x66>
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	4a0b      	ldr	r2, [pc, #44]	; (8008f7c <xTaskPriorityDisinherit+0x90>)
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4a08      	ldr	r2, [pc, #32]	; (8008f80 <xTaskPriorityDisinherit+0x94>)
 8008f60:	441a      	add	r2, r3
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fe fb72 	bl	8007652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f72:	68fb      	ldr	r3, [r7, #12]
	}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200010e4 	.word	0x200010e4
 8008f80:	20000c0c 	.word	0x20000c0c

08008f84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f92:	2301      	movs	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d04b      	beq.n	8009034 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d902      	bls.n	8008fac <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	e002      	b.n	8008fb2 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb0:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d03b      	beq.n	8009034 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d136      	bne.n	8009034 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fca:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	db04      	blt.n	8008fe4 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6959      	ldr	r1, [r3, #20]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4a12      	ldr	r2, [pc, #72]	; (800903c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	4299      	cmp	r1, r3
 8008ff8:	d11c      	bne.n	8009034 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fb84 	bl	800770c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d903      	bls.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	4a0a      	ldr	r2, [pc, #40]	; (8009040 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4a05      	ldr	r2, [pc, #20]	; (800903c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009026:	441a      	add	r2, r3
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	3304      	adds	r3, #4
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f7fe fb0f 	bl	8007652 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009034:	bf00      	nop
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000c0c 	.word	0x20000c0c
 8009040:	200010e4 	.word	0x200010e4

08009044 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009048:	4b07      	ldr	r3, [pc, #28]	; (8009068 <pvTaskIncrementMutexHeldCount+0x24>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <pvTaskIncrementMutexHeldCount+0x24>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009056:	3201      	adds	r2, #1
 8009058:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <pvTaskIncrementMutexHeldCount+0x24>)
 800905c:	681b      	ldr	r3, [r3, #0]
	}
 800905e:	4618      	mov	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20000c08 	.word	0x20000c08

0800906c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009076:	4b21      	ldr	r3, [pc, #132]	; (80090fc <prvAddCurrentTaskToDelayedList+0x90>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800907c:	4b20      	ldr	r3, [pc, #128]	; (8009100 <prvAddCurrentTaskToDelayedList+0x94>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3304      	adds	r3, #4
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fb42 	bl	800770c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908e:	d10a      	bne.n	80090a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009096:	4b1a      	ldr	r3, [pc, #104]	; (8009100 <prvAddCurrentTaskToDelayedList+0x94>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3304      	adds	r3, #4
 800909c:	4619      	mov	r1, r3
 800909e:	4819      	ldr	r0, [pc, #100]	; (8009104 <prvAddCurrentTaskToDelayedList+0x98>)
 80090a0:	f7fe fad7 	bl	8007652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090a4:	e026      	b.n	80090f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4413      	add	r3, r2
 80090ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090ae:	4b14      	ldr	r3, [pc, #80]	; (8009100 <prvAddCurrentTaskToDelayedList+0x94>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d209      	bcs.n	80090d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <prvAddCurrentTaskToDelayedList+0x94>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f7fe fae5 	bl	800769a <vListInsert>
}
 80090d0:	e010      	b.n	80090f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090d2:	4b0e      	ldr	r3, [pc, #56]	; (800910c <prvAddCurrentTaskToDelayedList+0xa0>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <prvAddCurrentTaskToDelayedList+0x94>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3304      	adds	r3, #4
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f7fe fadb 	bl	800769a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090e4:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d202      	bcs.n	80090f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090ee:	4a08      	ldr	r2, [pc, #32]	; (8009110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	6013      	str	r3, [r2, #0]
}
 80090f4:	bf00      	nop
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	200010e0 	.word	0x200010e0
 8009100:	20000c08 	.word	0x20000c08
 8009104:	200010c8 	.word	0x200010c8
 8009108:	20001098 	.word	0x20001098
 800910c:	20001094 	.word	0x20001094
 8009110:	200010fc 	.word	0x200010fc

08009114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800911e:	f000 faa7 	bl	8009670 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <xTimerCreateTimerTask+0x64>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d020      	beq.n	800916c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009132:	463a      	mov	r2, r7
 8009134:	1d39      	adds	r1, r7, #4
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fa42 	bl	80075c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	9202      	str	r2, [sp, #8]
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	2302      	movs	r3, #2
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	2300      	movs	r3, #0
 8009150:	460a      	mov	r2, r1
 8009152:	490a      	ldr	r1, [pc, #40]	; (800917c <xTimerCreateTimerTask+0x68>)
 8009154:	480a      	ldr	r0, [pc, #40]	; (8009180 <xTimerCreateTimerTask+0x6c>)
 8009156:	f7ff f8dd 	bl	8008314 <xTaskCreateStatic>
 800915a:	4603      	mov	r3, r0
 800915c:	4a09      	ldr	r2, [pc, #36]	; (8009184 <xTimerCreateTimerTask+0x70>)
 800915e:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009160:	4b08      	ldr	r3, [pc, #32]	; (8009184 <xTimerCreateTimerTask+0x70>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009168:	2301      	movs	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 800916c:	68fb      	ldr	r3, [r7, #12]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20001138 	.word	0x20001138
 800917c:	0800c6cc 	.word	0x0800c6cc
 8009180:	08009289 	.word	0x08009289
 8009184:	2000113c 	.word	0x2000113c

08009188 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	; 0x28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009196:	2300      	movs	r3, #0
 8009198:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800919a:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <xTimerGenericCommand+0x7c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02a      	beq.n	80091f8 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b05      	cmp	r3, #5
 80091b2:	dc18      	bgt.n	80091e6 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091b4:	f7ff fe14 	bl	8008de0 <xTaskGetSchedulerState>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d109      	bne.n	80091d2 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091be:	4b11      	ldr	r3, [pc, #68]	; (8009204 <xTimerGenericCommand+0x7c>)
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	f107 0114 	add.w	r1, r7, #20
 80091c6:	2300      	movs	r3, #0
 80091c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ca:	f7fe fbc1 	bl	8007950 <xQueueGenericSend>
 80091ce:	6278      	str	r0, [r7, #36]	; 0x24
 80091d0:	e012      	b.n	80091f8 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091d2:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <xTimerGenericCommand+0x7c>)
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	f107 0114 	add.w	r1, r7, #20
 80091da:	2300      	movs	r3, #0
 80091dc:	2200      	movs	r2, #0
 80091de:	f7fe fbb7 	bl	8007950 <xQueueGenericSend>
 80091e2:	6278      	str	r0, [r7, #36]	; 0x24
 80091e4:	e008      	b.n	80091f8 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091e6:	4b07      	ldr	r3, [pc, #28]	; (8009204 <xTimerGenericCommand+0x7c>)
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f107 0114 	add.w	r1, r7, #20
 80091ee:	2300      	movs	r3, #0
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	f7fe fc57 	bl	8007aa4 <xQueueGenericSendFromISR>
 80091f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3728      	adds	r7, #40	; 0x28
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20001138 	.word	0x20001138

08009208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af02      	add	r7, sp, #8
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009212:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <prvProcessExpiredTimer+0x7c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3304      	adds	r3, #4
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fa73 	bl	800770c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d015      	beq.n	8009260 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	699a      	ldr	r2, [r3, #24]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	18d1      	adds	r1, r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f8c5 	bl	80093d0 <prvInsertTimerInActiveList>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d012      	beq.n	8009272 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800924c:	2300      	movs	r3, #0
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	2300      	movs	r3, #0
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	2100      	movs	r1, #0
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f7ff ff96 	bl	8009188 <xTimerGenericCommand>
 800925c:	60b8      	str	r0, [r7, #8]
 800925e:	e008      	b.n	8009272 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	4798      	blx	r3
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20001130 	.word	0x20001130

08009288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009290:	f107 0308 	add.w	r3, r7, #8
 8009294:	4618      	mov	r0, r3
 8009296:	f000 f857 	bl	8009348 <prvGetNextExpireTime>
 800929a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4619      	mov	r1, r3
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f803 	bl	80092ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092a6:	f000 f8d5 	bl	8009454 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092aa:	e7f1      	b.n	8009290 <prvTimerTask+0x8>

080092ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092b6:	f7ff fa2d 	bl	8008714 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092ba:	f107 0308 	add.w	r3, r7, #8
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f866 	bl	8009390 <prvSampleTimeNow>
 80092c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d130      	bne.n	800932e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10a      	bne.n	80092e8 <prvProcessTimerOrBlockTask+0x3c>
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d806      	bhi.n	80092e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092da:	f7ff fa29 	bl	8008730 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff ff91 	bl	8009208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092e6:	e024      	b.n	8009332 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d008      	beq.n	8009300 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <prvProcessTimerOrBlockTask+0x90>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <prvProcessTimerOrBlockTask+0x50>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e000      	b.n	80092fe <prvProcessTimerOrBlockTask+0x52>
 80092fc:	2300      	movs	r3, #0
 80092fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <prvProcessTimerOrBlockTask+0x94>)
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4619      	mov	r1, r3
 800930e:	f7fe ffcd 	bl	80082ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009312:	f7ff fa0d 	bl	8008730 <xTaskResumeAll>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10a      	bne.n	8009332 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800931c:	4b09      	ldr	r3, [pc, #36]	; (8009344 <prvProcessTimerOrBlockTask+0x98>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	f3bf 8f6f 	isb	sy
}
 800932c:	e001      	b.n	8009332 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800932e:	f7ff f9ff 	bl	8008730 <xTaskResumeAll>
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20001134 	.word	0x20001134
 8009340:	20001138 	.word	0x20001138
 8009344:	e000ed04 	.word	0xe000ed04

08009348 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009350:	4b0e      	ldr	r3, [pc, #56]	; (800938c <prvGetNextExpireTime+0x44>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <prvGetNextExpireTime+0x16>
 800935a:	2201      	movs	r2, #1
 800935c:	e000      	b.n	8009360 <prvGetNextExpireTime+0x18>
 800935e:	2200      	movs	r2, #0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <prvGetNextExpireTime+0x44>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	e001      	b.n	800937c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800937c:	68fb      	ldr	r3, [r7, #12]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20001130 	.word	0x20001130

08009390 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009398:	f7ff fa58 	bl	800884c <xTaskGetTickCount>
 800939c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800939e:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <prvSampleTimeNow+0x3c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d205      	bcs.n	80093b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093a8:	f000 f90c 	bl	80095c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	e002      	b.n	80093ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093ba:	4a04      	ldr	r2, [pc, #16]	; (80093cc <prvSampleTimeNow+0x3c>)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093c0:	68fb      	ldr	r3, [r7, #12]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20001140 	.word	0x20001140

080093d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d812      	bhi.n	800941c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	1ad2      	subs	r2, r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	429a      	cmp	r2, r3
 8009402:	d302      	bcc.n	800940a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009404:	2301      	movs	r3, #1
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	e01b      	b.n	8009442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800940a:	4b10      	ldr	r3, [pc, #64]	; (800944c <prvInsertTimerInActiveList+0x7c>)
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3304      	adds	r3, #4
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7fe f940 	bl	800769a <vListInsert>
 800941a:	e012      	b.n	8009442 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d206      	bcs.n	8009432 <prvInsertTimerInActiveList+0x62>
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d302      	bcc.n	8009432 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800942c:	2301      	movs	r3, #1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	e007      	b.n	8009442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009432:	4b07      	ldr	r3, [pc, #28]	; (8009450 <prvInsertTimerInActiveList+0x80>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3304      	adds	r3, #4
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f7fe f92c 	bl	800769a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009442:	697b      	ldr	r3, [r7, #20]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20001134 	.word	0x20001134
 8009450:	20001130 	.word	0x20001130

08009454 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08c      	sub	sp, #48	; 0x30
 8009458:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800945a:	e0a0      	b.n	800959e <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	da0b      	bge.n	800947a <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009462:	f107 0308 	add.w	r3, r7, #8
 8009466:	3304      	adds	r3, #4
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009470:	6850      	ldr	r0, [r2, #4]
 8009472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009474:	6892      	ldr	r2, [r2, #8]
 8009476:	4611      	mov	r1, r2
 8009478:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f2c0 808d 	blt.w	800959c <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d004      	beq.n	8009498 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	3304      	adds	r3, #4
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe f93a 	bl	800770c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff ff78 	bl	8009390 <prvSampleTimeNow>
 80094a0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d87a      	bhi.n	800959e <prvProcessReceivedCommands+0x14a>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <prvProcessReceivedCommands+0x5c>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094d9 	.word	0x080094d9
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	080094d9 	.word	0x080094d9
 80094bc:	08009533 	.word	0x08009533
 80094c0:	08009547 	.word	0x08009547
 80094c4:	08009573 	.word	0x08009573
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	080094d9 	.word	0x080094d9
 80094d0:	08009533 	.word	0x08009533
 80094d4:	08009547 	.word	0x08009547
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	18d1      	adds	r1, r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	6a38      	ldr	r0, [r7, #32]
 80094f8:	f7ff ff6a 	bl	80093d0 <prvInsertTimerInActiveList>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d04d      	beq.n	800959e <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	6a38      	ldr	r0, [r7, #32]
 8009508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d042      	beq.n	800959e <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	441a      	add	r2, r3
 8009520:	2300      	movs	r3, #0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	2100      	movs	r1, #0
 8009528:	6a38      	ldr	r0, [r7, #32]
 800952a:	f7ff fe2d 	bl	8009188 <xTimerGenericCommand>
 800952e:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8009530:	e035      	b.n	800959e <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	b2da      	uxtb	r2, r3
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009544:	e02b      	b.n	800959e <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800954c:	f043 0301 	orr.w	r3, r3, #1
 8009550:	b2da      	uxtb	r2, r3
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	18d1      	adds	r1, r2, r3
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	6a38      	ldr	r0, [r7, #32]
 800956c:	f7ff ff30 	bl	80093d0 <prvInsertTimerInActiveList>
					break;
 8009570:	e015      	b.n	800959e <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009578:	f003 0302 	and.w	r3, r3, #2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 8009580:	6a38      	ldr	r0, [r7, #32]
 8009582:	f000 faab 	bl	8009adc <vPortFree>
 8009586:	e00a      	b.n	800959e <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958e:	f023 0301 	bic.w	r3, r3, #1
 8009592:	b2da      	uxtb	r2, r3
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800959a:	e000      	b.n	800959e <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800959c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800959e:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <prvProcessReceivedCommands+0x16c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f107 0108 	add.w	r1, r7, #8
 80095a6:	2200      	movs	r2, #0
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe fb2d 	bl	8007c08 <xQueueReceive>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f47f af53 	bne.w	800945c <prvProcessReceivedCommands+0x8>
	}
}
 80095b6:	bf00      	nop
 80095b8:	bf00      	nop
 80095ba:	3728      	adds	r7, #40	; 0x28
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20001138 	.word	0x20001138

080095c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095ca:	e03a      	b.n	8009642 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095cc:	4b26      	ldr	r3, [pc, #152]	; (8009668 <prvSwitchTimerLists+0xa4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <prvSwitchTimerLists+0xa4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe f891 	bl	800770c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d020      	beq.n	8009642 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	4413      	add	r3, r2
 8009608:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	429a      	cmp	r2, r3
 8009610:	d90e      	bls.n	8009630 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <prvSwitchTimerLists+0xa4>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7fe f836 	bl	800769a <vListInsert>
 800962e:	e008      	b.n	8009642 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009630:	2300      	movs	r3, #0
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fda4 	bl	8009188 <xTimerGenericCommand>
 8009640:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009642:	4b09      	ldr	r3, [pc, #36]	; (8009668 <prvSwitchTimerLists+0xa4>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1bf      	bne.n	80095cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <prvSwitchTimerLists+0xa4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009652:	4b06      	ldr	r3, [pc, #24]	; (800966c <prvSwitchTimerLists+0xa8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a04      	ldr	r2, [pc, #16]	; (8009668 <prvSwitchTimerLists+0xa4>)
 8009658:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800965a:	4a04      	ldr	r2, [pc, #16]	; (800966c <prvSwitchTimerLists+0xa8>)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	6013      	str	r3, [r2, #0]
}
 8009660:	bf00      	nop
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20001130 	.word	0x20001130
 800966c:	20001134 	.word	0x20001134

08009670 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009676:	f000 f8dd 	bl	8009834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800967a:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <prvCheckForValidListAndQueue+0x60>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d120      	bne.n	80096c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009682:	4814      	ldr	r0, [pc, #80]	; (80096d4 <prvCheckForValidListAndQueue+0x64>)
 8009684:	f7fd ffb8 	bl	80075f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009688:	4813      	ldr	r0, [pc, #76]	; (80096d8 <prvCheckForValidListAndQueue+0x68>)
 800968a:	f7fd ffb5 	bl	80075f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <prvCheckForValidListAndQueue+0x6c>)
 8009690:	4a10      	ldr	r2, [pc, #64]	; (80096d4 <prvCheckForValidListAndQueue+0x64>)
 8009692:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009694:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <prvCheckForValidListAndQueue+0x70>)
 8009696:	4a10      	ldr	r2, [pc, #64]	; (80096d8 <prvCheckForValidListAndQueue+0x68>)
 8009698:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800969a:	2300      	movs	r3, #0
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <prvCheckForValidListAndQueue+0x74>)
 80096a0:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <prvCheckForValidListAndQueue+0x78>)
 80096a2:	2110      	movs	r1, #16
 80096a4:	200a      	movs	r0, #10
 80096a6:	f7fe f8b5 	bl	8007814 <xQueueGenericCreateStatic>
 80096aa:	4603      	mov	r3, r0
 80096ac:	4a08      	ldr	r2, [pc, #32]	; (80096d0 <prvCheckForValidListAndQueue+0x60>)
 80096ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096b0:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <prvCheckForValidListAndQueue+0x60>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096b8:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <prvCheckForValidListAndQueue+0x60>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	490b      	ldr	r1, [pc, #44]	; (80096ec <prvCheckForValidListAndQueue+0x7c>)
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fda0 	bl	8008204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096c4:	f000 f8d0 	bl	8009868 <vPortExitCritical>
}
 80096c8:	bf00      	nop
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20001138 	.word	0x20001138
 80096d4:	20001108 	.word	0x20001108
 80096d8:	2000111c 	.word	0x2000111c
 80096dc:	20001130 	.word	0x20001130
 80096e0:	20001134 	.word	0x20001134
 80096e4:	200011e4 	.word	0x200011e4
 80096e8:	20001144 	.word	0x20001144
 80096ec:	0800c6d4 	.word	0x0800c6d4

080096f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3b04      	subs	r3, #4
 8009700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3b04      	subs	r3, #4
 800970e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f023 0201 	bic.w	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b04      	subs	r3, #4
 800971e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009720:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <pxPortInitialiseStack+0x64>)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3b14      	subs	r3, #20
 800972a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b04      	subs	r3, #4
 8009736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f06f 0202 	mvn.w	r2, #2
 800973e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3b20      	subs	r3, #32
 8009744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009746:	68fb      	ldr	r3, [r7, #12]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	08009759 	.word	0x08009759

08009758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	607b      	str	r3, [r7, #4]
}
 8009774:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009776:	bf00      	nop
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0fc      	beq.n	8009778 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800977e:	bf00      	nop
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	0000      	movs	r0, r0
	...

08009790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <pxCurrentTCBConst2>)
 8009792:	6819      	ldr	r1, [r3, #0]
 8009794:	6808      	ldr	r0, [r1, #0]
 8009796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	f380 8809 	msr	PSP, r0
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f04f 0000 	mov.w	r0, #0
 80097a6:	f380 8811 	msr	BASEPRI, r0
 80097aa:	4770      	bx	lr
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst2>:
 80097b0:	20000c08 	.word	0x20000c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097b8:	4808      	ldr	r0, [pc, #32]	; (80097dc <prvPortStartFirstTask+0x24>)
 80097ba:	6800      	ldr	r0, [r0, #0]
 80097bc:	6800      	ldr	r0, [r0, #0]
 80097be:	f380 8808 	msr	MSP, r0
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8814 	msr	CONTROL, r0
 80097ca:	b662      	cpsie	i
 80097cc:	b661      	cpsie	f
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	df00      	svc	0
 80097d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097da:	bf00      	nop
 80097dc:	e000ed08 	.word	0xe000ed08

080097e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097e4:	4b10      	ldr	r3, [pc, #64]	; (8009828 <xPortStartScheduler+0x48>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a0f      	ldr	r2, [pc, #60]	; (8009828 <xPortStartScheduler+0x48>)
 80097ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097ee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097f0:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <xPortStartScheduler+0x48>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a0c      	ldr	r2, [pc, #48]	; (8009828 <xPortStartScheduler+0x48>)
 80097f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097fa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097fc:	f000 f8a6 	bl	800994c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <xPortStartScheduler+0x4c>)
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009806:	f000 f8c5 	bl	8009994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <xPortStartScheduler+0x50>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a08      	ldr	r2, [pc, #32]	; (8009830 <xPortStartScheduler+0x50>)
 8009810:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009814:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009816:	f7ff ffcf 	bl	80097b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800981a:	f7ff f8cf 	bl	80089bc <vTaskSwitchContext>
	prvTaskExitError();
 800981e:	f7ff ff9b 	bl	8009758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	bd80      	pop	{r7, pc}
 8009828:	e000ed20 	.word	0xe000ed20
 800982c:	20000018 	.word	0x20000018
 8009830:	e000ef34 	.word	0xe000ef34

08009834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	607b      	str	r3, [r7, #4]
}
 800984c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <vPortEnterCritical+0x30>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3301      	adds	r3, #1
 8009854:	4a03      	ldr	r2, [pc, #12]	; (8009864 <vPortEnterCritical+0x30>)
 8009856:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	20000018 	.word	0x20000018

08009868 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800986e:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <vPortExitCritical+0x30>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3b01      	subs	r3, #1
 8009874:	4a08      	ldr	r2, [pc, #32]	; (8009898 <vPortExitCritical+0x30>)
 8009876:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009878:	4b07      	ldr	r3, [pc, #28]	; (8009898 <vPortExitCritical+0x30>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d105      	bne.n	800988c <vPortExitCritical+0x24>
 8009880:	2300      	movs	r3, #0
 8009882:	607b      	str	r3, [r7, #4]
	__asm volatile
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f383 8811 	msr	BASEPRI, r3
}
 800988a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	20000018 	.word	0x20000018
 800989c:	00000000 	.word	0x00000000

080098a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098a0:	f3ef 8009 	mrs	r0, PSP
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	4b15      	ldr	r3, [pc, #84]	; (8009900 <pxCurrentTCBConst>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	f01e 0f10 	tst.w	lr, #16
 80098b0:	bf08      	it	eq
 80098b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ba:	6010      	str	r0, [r2, #0]
 80098bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098c4:	f380 8811 	msr	BASEPRI, r0
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f7ff f874 	bl	80089bc <vTaskSwitchContext>
 80098d4:	f04f 0000 	mov.w	r0, #0
 80098d8:	f380 8811 	msr	BASEPRI, r0
 80098dc:	bc09      	pop	{r0, r3}
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	6808      	ldr	r0, [r1, #0]
 80098e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e6:	f01e 0f10 	tst.w	lr, #16
 80098ea:	bf08      	it	eq
 80098ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098f0:	f380 8809 	msr	PSP, r0
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst>:
 8009900:	20000c08 	.word	0x20000c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	607b      	str	r3, [r7, #4]
}
 8009920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009922:	f7fe ffa3 	bl	800886c <xTaskIncrementTick>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800992c:	4b06      	ldr	r3, [pc, #24]	; (8009948 <xPortSysTickHandler+0x40>)
 800992e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f383 8811 	msr	BASEPRI, r3
}
 800993e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	e000ed04 	.word	0xe000ed04

0800994c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800994c:	b480      	push	{r7}
 800994e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <vPortSetupTimerInterrupt+0x34>)
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009956:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <vPortSetupTimerInterrupt+0x38>)
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800995c:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <vPortSetupTimerInterrupt+0x3c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a0a      	ldr	r2, [pc, #40]	; (800998c <vPortSetupTimerInterrupt+0x40>)
 8009962:	fba2 2303 	umull	r2, r3, r2, r3
 8009966:	099b      	lsrs	r3, r3, #6
 8009968:	4a09      	ldr	r2, [pc, #36]	; (8009990 <vPortSetupTimerInterrupt+0x44>)
 800996a:	3b01      	subs	r3, #1
 800996c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800996e:	4b04      	ldr	r3, [pc, #16]	; (8009980 <vPortSetupTimerInterrupt+0x34>)
 8009970:	2207      	movs	r2, #7
 8009972:	601a      	str	r2, [r3, #0]
}
 8009974:	bf00      	nop
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	e000e010 	.word	0xe000e010
 8009984:	e000e018 	.word	0xe000e018
 8009988:	2000000c 	.word	0x2000000c
 800998c:	10624dd3 	.word	0x10624dd3
 8009990:	e000e014 	.word	0xe000e014

08009994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099a4 <vPortEnableVFP+0x10>
 8009998:	6801      	ldr	r1, [r0, #0]
 800999a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800999e:	6001      	str	r1, [r0, #0]
 80099a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099a2:	bf00      	nop
 80099a4:	e000ed88 	.word	0xe000ed88

080099a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80099b4:	f7fe feae 	bl	8008714 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099b8:	4b42      	ldr	r3, [pc, #264]	; (8009ac4 <pvPortMalloc+0x11c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099c0:	f000 f8cc 	bl	8009b5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099c4:	4b40      	ldr	r3, [pc, #256]	; (8009ac8 <pvPortMalloc+0x120>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4013      	ands	r3, r2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d172      	bne.n	8009ab6 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00d      	beq.n	80099f2 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 80099d6:	2208      	movs	r2, #8
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4413      	add	r3, r2
 80099dc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f003 0307 	and.w	r3, r3, #7
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f023 0307 	bic.w	r3, r3, #7
 80099ee:	3308      	adds	r3, #8
 80099f0:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d05e      	beq.n	8009ab6 <pvPortMalloc+0x10e>
 80099f8:	4b34      	ldr	r3, [pc, #208]	; (8009acc <pvPortMalloc+0x124>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d859      	bhi.n	8009ab6 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a02:	4b33      	ldr	r3, [pc, #204]	; (8009ad0 <pvPortMalloc+0x128>)
 8009a04:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009a06:	4b32      	ldr	r3, [pc, #200]	; (8009ad0 <pvPortMalloc+0x128>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a0c:	e004      	b.n	8009a18 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d903      	bls.n	8009a2a <pvPortMalloc+0x82>
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f1      	bne.n	8009a0e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a2a:	4b26      	ldr	r3, [pc, #152]	; (8009ac4 <pvPortMalloc+0x11c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d040      	beq.n	8009ab6 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2208      	movs	r2, #8
 8009a3a:	4413      	add	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	1ad2      	subs	r2, r2, r3
 8009a4e:	2308      	movs	r3, #8
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d90f      	bls.n	8009a76 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	1ad2      	subs	r2, r2, r3
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a70:	68b8      	ldr	r0, [r7, #8]
 8009a72:	f000 f8d5 	bl	8009c20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a76:	4b15      	ldr	r3, [pc, #84]	; (8009acc <pvPortMalloc+0x124>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	4a12      	ldr	r2, [pc, #72]	; (8009acc <pvPortMalloc+0x124>)
 8009a82:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a84:	4b11      	ldr	r3, [pc, #68]	; (8009acc <pvPortMalloc+0x124>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <pvPortMalloc+0x12c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d203      	bcs.n	8009a98 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <pvPortMalloc+0x124>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a0f      	ldr	r2, [pc, #60]	; (8009ad4 <pvPortMalloc+0x12c>)
 8009a96:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <pvPortMalloc+0x120>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <pvPortMalloc+0x130>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <pvPortMalloc+0x130>)
 8009ab4:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ab6:	f7fe fe3b 	bl	8008730 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8009aba:	68fb      	ldr	r3, [r7, #12]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	2000263c 	.word	0x2000263c
 8009ac8:	20002650 	.word	0x20002650
 8009acc:	20002640 	.word	0x20002640
 8009ad0:	20002634 	.word	0x20002634
 8009ad4:	20002644 	.word	0x20002644
 8009ad8:	20002648 	.word	0x20002648

08009adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d02c      	beq.n	8009b48 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009aee:	2308      	movs	r3, #8
 8009af0:	425b      	negs	r3, r3
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4413      	add	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <vPortFree+0x74>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4013      	ands	r3, r2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01e      	beq.n	8009b48 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d11a      	bne.n	8009b48 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	4b0e      	ldr	r3, [pc, #56]	; (8009b50 <vPortFree+0x74>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	43db      	mvns	r3, r3
 8009b1c:	401a      	ands	r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b22:	f7fe fdf7 	bl	8008714 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <vPortFree+0x78>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4413      	add	r3, r2
 8009b30:	4a08      	ldr	r2, [pc, #32]	; (8009b54 <vPortFree+0x78>)
 8009b32:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b34:	68b8      	ldr	r0, [r7, #8]
 8009b36:	f000 f873 	bl	8009c20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b3a:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <vPortFree+0x7c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	4a05      	ldr	r2, [pc, #20]	; (8009b58 <vPortFree+0x7c>)
 8009b42:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b44:	f7fe fdf4 	bl	8008730 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20002650 	.word	0x20002650
 8009b54:	20002640 	.word	0x20002640
 8009b58:	2000264c 	.word	0x2000264c

08009b5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009b66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b68:	4b27      	ldr	r3, [pc, #156]	; (8009c08 <prvHeapInit+0xac>)
 8009b6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f003 0307 	and.w	r3, r3, #7
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3307      	adds	r3, #7
 8009b7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f023 0307 	bic.w	r3, r3, #7
 8009b82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	4a1f      	ldr	r2, [pc, #124]	; (8009c08 <prvHeapInit+0xac>)
 8009b8c:	4413      	add	r3, r2
 8009b8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b94:	4a1d      	ldr	r2, [pc, #116]	; (8009c0c <prvHeapInit+0xb0>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <prvHeapInit+0xb0>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ba8:	2208      	movs	r2, #8
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	1a9b      	subs	r3, r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f023 0307 	bic.w	r3, r3, #7
 8009bb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <prvHeapInit+0xb4>)
 8009bbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bbe:	4b14      	ldr	r3, [pc, #80]	; (8009c10 <prvHeapInit+0xb4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bc6:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <prvHeapInit+0xb4>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	1ad2      	subs	r2, r2, r3
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bdc:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <prvHeapInit+0xb4>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4a0a      	ldr	r2, [pc, #40]	; (8009c14 <prvHeapInit+0xb8>)
 8009bea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <prvHeapInit+0xbc>)
 8009bf2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bf4:	4b09      	ldr	r3, [pc, #36]	; (8009c1c <prvHeapInit+0xc0>)
 8009bf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bfa:	601a      	str	r2, [r3, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	20001234 	.word	0x20001234
 8009c0c:	20002634 	.word	0x20002634
 8009c10:	2000263c 	.word	0x2000263c
 8009c14:	20002644 	.word	0x20002644
 8009c18:	20002640 	.word	0x20002640
 8009c1c:	20002650 	.word	0x20002650

08009c20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c28:	4b28      	ldr	r3, [pc, #160]	; (8009ccc <prvInsertBlockIntoFreeList+0xac>)
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	e002      	b.n	8009c34 <prvInsertBlockIntoFreeList+0x14>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d8f7      	bhi.n	8009c2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	4413      	add	r3, r2
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d108      	bne.n	8009c62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	441a      	add	r2, r3
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	441a      	add	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d118      	bne.n	8009ca8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	4b15      	ldr	r3, [pc, #84]	; (8009cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d00d      	beq.n	8009c9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	441a      	add	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	e008      	b.n	8009cb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	e003      	b.n	8009cb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d002      	beq.n	8009cbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cbe:	bf00      	nop
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	20002634 	.word	0x20002634
 8009cd0:	2000263c 	.word	0x2000263c

08009cd4 <__errno>:
 8009cd4:	4b01      	ldr	r3, [pc, #4]	; (8009cdc <__errno+0x8>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	2000001c 	.word	0x2000001c

08009ce0 <__libc_init_array>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	4d0d      	ldr	r5, [pc, #52]	; (8009d18 <__libc_init_array+0x38>)
 8009ce4:	4c0d      	ldr	r4, [pc, #52]	; (8009d1c <__libc_init_array+0x3c>)
 8009ce6:	1b64      	subs	r4, r4, r5
 8009ce8:	10a4      	asrs	r4, r4, #2
 8009cea:	2600      	movs	r6, #0
 8009cec:	42a6      	cmp	r6, r4
 8009cee:	d109      	bne.n	8009d04 <__libc_init_array+0x24>
 8009cf0:	4d0b      	ldr	r5, [pc, #44]	; (8009d20 <__libc_init_array+0x40>)
 8009cf2:	4c0c      	ldr	r4, [pc, #48]	; (8009d24 <__libc_init_array+0x44>)
 8009cf4:	f002 fc52 	bl	800c59c <_init>
 8009cf8:	1b64      	subs	r4, r4, r5
 8009cfa:	10a4      	asrs	r4, r4, #2
 8009cfc:	2600      	movs	r6, #0
 8009cfe:	42a6      	cmp	r6, r4
 8009d00:	d105      	bne.n	8009d0e <__libc_init_array+0x2e>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d08:	4798      	blx	r3
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	e7ee      	b.n	8009cec <__libc_init_array+0xc>
 8009d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d12:	4798      	blx	r3
 8009d14:	3601      	adds	r6, #1
 8009d16:	e7f2      	b.n	8009cfe <__libc_init_array+0x1e>
 8009d18:	0800ca98 	.word	0x0800ca98
 8009d1c:	0800ca98 	.word	0x0800ca98
 8009d20:	0800ca98 	.word	0x0800ca98
 8009d24:	0800ca9c 	.word	0x0800ca9c

08009d28 <__retarget_lock_acquire_recursive>:
 8009d28:	4770      	bx	lr

08009d2a <__retarget_lock_release_recursive>:
 8009d2a:	4770      	bx	lr

08009d2c <memcpy>:
 8009d2c:	440a      	add	r2, r1
 8009d2e:	4291      	cmp	r1, r2
 8009d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d34:	d100      	bne.n	8009d38 <memcpy+0xc>
 8009d36:	4770      	bx	lr
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d42:	4291      	cmp	r1, r2
 8009d44:	d1f9      	bne.n	8009d3a <memcpy+0xe>
 8009d46:	bd10      	pop	{r4, pc}

08009d48 <memset>:
 8009d48:	4402      	add	r2, r0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d100      	bne.n	8009d52 <memset+0xa>
 8009d50:	4770      	bx	lr
 8009d52:	f803 1b01 	strb.w	r1, [r3], #1
 8009d56:	e7f9      	b.n	8009d4c <memset+0x4>

08009d58 <sbrk_aligned>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4e0e      	ldr	r6, [pc, #56]	; (8009d94 <sbrk_aligned+0x3c>)
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	6831      	ldr	r1, [r6, #0]
 8009d60:	4605      	mov	r5, r0
 8009d62:	b911      	cbnz	r1, 8009d6a <sbrk_aligned+0x12>
 8009d64:	f000 f8f6 	bl	8009f54 <_sbrk_r>
 8009d68:	6030      	str	r0, [r6, #0]
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f000 f8f1 	bl	8009f54 <_sbrk_r>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d00a      	beq.n	8009d8c <sbrk_aligned+0x34>
 8009d76:	1cc4      	adds	r4, r0, #3
 8009d78:	f024 0403 	bic.w	r4, r4, #3
 8009d7c:	42a0      	cmp	r0, r4
 8009d7e:	d007      	beq.n	8009d90 <sbrk_aligned+0x38>
 8009d80:	1a21      	subs	r1, r4, r0
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 f8e6 	bl	8009f54 <_sbrk_r>
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d101      	bne.n	8009d90 <sbrk_aligned+0x38>
 8009d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d90:	4620      	mov	r0, r4
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	2000265c 	.word	0x2000265c

08009d98 <_malloc_r>:
 8009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9c:	1ccd      	adds	r5, r1, #3
 8009d9e:	f025 0503 	bic.w	r5, r5, #3
 8009da2:	3508      	adds	r5, #8
 8009da4:	2d0c      	cmp	r5, #12
 8009da6:	bf38      	it	cc
 8009da8:	250c      	movcc	r5, #12
 8009daa:	2d00      	cmp	r5, #0
 8009dac:	4607      	mov	r7, r0
 8009dae:	db01      	blt.n	8009db4 <_malloc_r+0x1c>
 8009db0:	42a9      	cmp	r1, r5
 8009db2:	d905      	bls.n	8009dc0 <_malloc_r+0x28>
 8009db4:	230c      	movs	r3, #12
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	2600      	movs	r6, #0
 8009dba:	4630      	mov	r0, r6
 8009dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc0:	4e2e      	ldr	r6, [pc, #184]	; (8009e7c <_malloc_r+0xe4>)
 8009dc2:	f000 f8f7 	bl	8009fb4 <__malloc_lock>
 8009dc6:	6833      	ldr	r3, [r6, #0]
 8009dc8:	461c      	mov	r4, r3
 8009dca:	bb34      	cbnz	r4, 8009e1a <_malloc_r+0x82>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7ff ffc2 	bl	8009d58 <sbrk_aligned>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	d14d      	bne.n	8009e76 <_malloc_r+0xde>
 8009dda:	6834      	ldr	r4, [r6, #0]
 8009ddc:	4626      	mov	r6, r4
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	d140      	bne.n	8009e64 <_malloc_r+0xcc>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	4631      	mov	r1, r6
 8009de6:	4638      	mov	r0, r7
 8009de8:	eb04 0803 	add.w	r8, r4, r3
 8009dec:	f000 f8b2 	bl	8009f54 <_sbrk_r>
 8009df0:	4580      	cmp	r8, r0
 8009df2:	d13a      	bne.n	8009e6a <_malloc_r+0xd2>
 8009df4:	6821      	ldr	r1, [r4, #0]
 8009df6:	3503      	adds	r5, #3
 8009df8:	1a6d      	subs	r5, r5, r1
 8009dfa:	f025 0503 	bic.w	r5, r5, #3
 8009dfe:	3508      	adds	r5, #8
 8009e00:	2d0c      	cmp	r5, #12
 8009e02:	bf38      	it	cc
 8009e04:	250c      	movcc	r5, #12
 8009e06:	4629      	mov	r1, r5
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff ffa5 	bl	8009d58 <sbrk_aligned>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	d02b      	beq.n	8009e6a <_malloc_r+0xd2>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	442b      	add	r3, r5
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	e00e      	b.n	8009e38 <_malloc_r+0xa0>
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	1b52      	subs	r2, r2, r5
 8009e1e:	d41e      	bmi.n	8009e5e <_malloc_r+0xc6>
 8009e20:	2a0b      	cmp	r2, #11
 8009e22:	d916      	bls.n	8009e52 <_malloc_r+0xba>
 8009e24:	1961      	adds	r1, r4, r5
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	6025      	str	r5, [r4, #0]
 8009e2a:	bf18      	it	ne
 8009e2c:	6059      	strne	r1, [r3, #4]
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	bf08      	it	eq
 8009e32:	6031      	streq	r1, [r6, #0]
 8009e34:	5162      	str	r2, [r4, r5]
 8009e36:	604b      	str	r3, [r1, #4]
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f104 060b 	add.w	r6, r4, #11
 8009e3e:	f000 f8bf 	bl	8009fc0 <__malloc_unlock>
 8009e42:	f026 0607 	bic.w	r6, r6, #7
 8009e46:	1d23      	adds	r3, r4, #4
 8009e48:	1af2      	subs	r2, r6, r3
 8009e4a:	d0b6      	beq.n	8009dba <_malloc_r+0x22>
 8009e4c:	1b9b      	subs	r3, r3, r6
 8009e4e:	50a3      	str	r3, [r4, r2]
 8009e50:	e7b3      	b.n	8009dba <_malloc_r+0x22>
 8009e52:	6862      	ldr	r2, [r4, #4]
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	bf0c      	ite	eq
 8009e58:	6032      	streq	r2, [r6, #0]
 8009e5a:	605a      	strne	r2, [r3, #4]
 8009e5c:	e7ec      	b.n	8009e38 <_malloc_r+0xa0>
 8009e5e:	4623      	mov	r3, r4
 8009e60:	6864      	ldr	r4, [r4, #4]
 8009e62:	e7b2      	b.n	8009dca <_malloc_r+0x32>
 8009e64:	4634      	mov	r4, r6
 8009e66:	6876      	ldr	r6, [r6, #4]
 8009e68:	e7b9      	b.n	8009dde <_malloc_r+0x46>
 8009e6a:	230c      	movs	r3, #12
 8009e6c:	603b      	str	r3, [r7, #0]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f000 f8a6 	bl	8009fc0 <__malloc_unlock>
 8009e74:	e7a1      	b.n	8009dba <_malloc_r+0x22>
 8009e76:	6025      	str	r5, [r4, #0]
 8009e78:	e7de      	b.n	8009e38 <_malloc_r+0xa0>
 8009e7a:	bf00      	nop
 8009e7c:	20002658 	.word	0x20002658

08009e80 <cleanup_glue>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	460c      	mov	r4, r1
 8009e84:	6809      	ldr	r1, [r1, #0]
 8009e86:	4605      	mov	r5, r0
 8009e88:	b109      	cbz	r1, 8009e8e <cleanup_glue+0xe>
 8009e8a:	f7ff fff9 	bl	8009e80 <cleanup_glue>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e96:	f000 b899 	b.w	8009fcc <_free_r>
	...

08009e9c <_reclaim_reent>:
 8009e9c:	4b2c      	ldr	r3, [pc, #176]	; (8009f50 <_reclaim_reent+0xb4>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4283      	cmp	r3, r0
 8009ea2:	b570      	push	{r4, r5, r6, lr}
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	d051      	beq.n	8009f4c <_reclaim_reent+0xb0>
 8009ea8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009eaa:	b143      	cbz	r3, 8009ebe <_reclaim_reent+0x22>
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d14a      	bne.n	8009f48 <_reclaim_reent+0xac>
 8009eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb4:	6819      	ldr	r1, [r3, #0]
 8009eb6:	b111      	cbz	r1, 8009ebe <_reclaim_reent+0x22>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 f887 	bl	8009fcc <_free_r>
 8009ebe:	6961      	ldr	r1, [r4, #20]
 8009ec0:	b111      	cbz	r1, 8009ec8 <_reclaim_reent+0x2c>
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 f882 	bl	8009fcc <_free_r>
 8009ec8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009eca:	b111      	cbz	r1, 8009ed2 <_reclaim_reent+0x36>
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 f87d 	bl	8009fcc <_free_r>
 8009ed2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ed4:	b111      	cbz	r1, 8009edc <_reclaim_reent+0x40>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 f878 	bl	8009fcc <_free_r>
 8009edc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009ede:	b111      	cbz	r1, 8009ee6 <_reclaim_reent+0x4a>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f873 	bl	8009fcc <_free_r>
 8009ee6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009ee8:	b111      	cbz	r1, 8009ef0 <_reclaim_reent+0x54>
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 f86e 	bl	8009fcc <_free_r>
 8009ef0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009ef2:	b111      	cbz	r1, 8009efa <_reclaim_reent+0x5e>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 f869 	bl	8009fcc <_free_r>
 8009efa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009efc:	b111      	cbz	r1, 8009f04 <_reclaim_reent+0x68>
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f864 	bl	8009fcc <_free_r>
 8009f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f06:	b111      	cbz	r1, 8009f0e <_reclaim_reent+0x72>
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 f85f 	bl	8009fcc <_free_r>
 8009f0e:	69a3      	ldr	r3, [r4, #24]
 8009f10:	b1e3      	cbz	r3, 8009f4c <_reclaim_reent+0xb0>
 8009f12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f14:	4620      	mov	r0, r4
 8009f16:	4798      	blx	r3
 8009f18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f1a:	b1b9      	cbz	r1, 8009f4c <_reclaim_reent+0xb0>
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f22:	f7ff bfad 	b.w	8009e80 <cleanup_glue>
 8009f26:	5949      	ldr	r1, [r1, r5]
 8009f28:	b941      	cbnz	r1, 8009f3c <_reclaim_reent+0xa0>
 8009f2a:	3504      	adds	r5, #4
 8009f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f2e:	2d80      	cmp	r5, #128	; 0x80
 8009f30:	68d9      	ldr	r1, [r3, #12]
 8009f32:	d1f8      	bne.n	8009f26 <_reclaim_reent+0x8a>
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 f849 	bl	8009fcc <_free_r>
 8009f3a:	e7ba      	b.n	8009eb2 <_reclaim_reent+0x16>
 8009f3c:	680e      	ldr	r6, [r1, #0]
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 f844 	bl	8009fcc <_free_r>
 8009f44:	4631      	mov	r1, r6
 8009f46:	e7ef      	b.n	8009f28 <_reclaim_reent+0x8c>
 8009f48:	2500      	movs	r5, #0
 8009f4a:	e7ef      	b.n	8009f2c <_reclaim_reent+0x90>
 8009f4c:	bd70      	pop	{r4, r5, r6, pc}
 8009f4e:	bf00      	nop
 8009f50:	2000001c 	.word	0x2000001c

08009f54 <_sbrk_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d06      	ldr	r5, [pc, #24]	; (8009f70 <_sbrk_r+0x1c>)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	f7f8 f98e 	bl	8002280 <_sbrk>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d102      	bne.n	8009f6e <_sbrk_r+0x1a>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	b103      	cbz	r3, 8009f6e <_sbrk_r+0x1a>
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	20002660 	.word	0x20002660

08009f74 <siprintf>:
 8009f74:	b40e      	push	{r1, r2, r3}
 8009f76:	b500      	push	{lr}
 8009f78:	b09c      	sub	sp, #112	; 0x70
 8009f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f7c:	9002      	str	r0, [sp, #8]
 8009f7e:	9006      	str	r0, [sp, #24]
 8009f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f84:	4809      	ldr	r0, [pc, #36]	; (8009fac <siprintf+0x38>)
 8009f86:	9107      	str	r1, [sp, #28]
 8009f88:	9104      	str	r1, [sp, #16]
 8009f8a:	4909      	ldr	r1, [pc, #36]	; (8009fb0 <siprintf+0x3c>)
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	6800      	ldr	r0, [r0, #0]
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	a902      	add	r1, sp, #8
 8009f98:	f000 f8c0 	bl	800a11c <_svfiprintf_r>
 8009f9c:	9b02      	ldr	r3, [sp, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	b01c      	add	sp, #112	; 0x70
 8009fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa8:	b003      	add	sp, #12
 8009faa:	4770      	bx	lr
 8009fac:	2000001c 	.word	0x2000001c
 8009fb0:	ffff0208 	.word	0xffff0208

08009fb4 <__malloc_lock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_lock+0x8>)
 8009fb6:	f7ff beb7 	b.w	8009d28 <__retarget_lock_acquire_recursive>
 8009fba:	bf00      	nop
 8009fbc:	20002654 	.word	0x20002654

08009fc0 <__malloc_unlock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__malloc_unlock+0x8>)
 8009fc2:	f7ff beb2 	b.w	8009d2a <__retarget_lock_release_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20002654 	.word	0x20002654

08009fcc <_free_r>:
 8009fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	d044      	beq.n	800a05c <_free_r+0x90>
 8009fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd6:	9001      	str	r0, [sp, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f1a1 0404 	sub.w	r4, r1, #4
 8009fde:	bfb8      	it	lt
 8009fe0:	18e4      	addlt	r4, r4, r3
 8009fe2:	f7ff ffe7 	bl	8009fb4 <__malloc_lock>
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	; (800a060 <_free_r+0x94>)
 8009fe8:	9801      	ldr	r0, [sp, #4]
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	b933      	cbnz	r3, 8009ffc <_free_r+0x30>
 8009fee:	6063      	str	r3, [r4, #4]
 8009ff0:	6014      	str	r4, [r2, #0]
 8009ff2:	b003      	add	sp, #12
 8009ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ff8:	f7ff bfe2 	b.w	8009fc0 <__malloc_unlock>
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	d908      	bls.n	800a012 <_free_r+0x46>
 800a000:	6825      	ldr	r5, [r4, #0]
 800a002:	1961      	adds	r1, r4, r5
 800a004:	428b      	cmp	r3, r1
 800a006:	bf01      	itttt	eq
 800a008:	6819      	ldreq	r1, [r3, #0]
 800a00a:	685b      	ldreq	r3, [r3, #4]
 800a00c:	1949      	addeq	r1, r1, r5
 800a00e:	6021      	streq	r1, [r4, #0]
 800a010:	e7ed      	b.n	8009fee <_free_r+0x22>
 800a012:	461a      	mov	r2, r3
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	b10b      	cbz	r3, 800a01c <_free_r+0x50>
 800a018:	42a3      	cmp	r3, r4
 800a01a:	d9fa      	bls.n	800a012 <_free_r+0x46>
 800a01c:	6811      	ldr	r1, [r2, #0]
 800a01e:	1855      	adds	r5, r2, r1
 800a020:	42a5      	cmp	r5, r4
 800a022:	d10b      	bne.n	800a03c <_free_r+0x70>
 800a024:	6824      	ldr	r4, [r4, #0]
 800a026:	4421      	add	r1, r4
 800a028:	1854      	adds	r4, r2, r1
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	d1e0      	bne.n	8009ff2 <_free_r+0x26>
 800a030:	681c      	ldr	r4, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	6053      	str	r3, [r2, #4]
 800a036:	4421      	add	r1, r4
 800a038:	6011      	str	r1, [r2, #0]
 800a03a:	e7da      	b.n	8009ff2 <_free_r+0x26>
 800a03c:	d902      	bls.n	800a044 <_free_r+0x78>
 800a03e:	230c      	movs	r3, #12
 800a040:	6003      	str	r3, [r0, #0]
 800a042:	e7d6      	b.n	8009ff2 <_free_r+0x26>
 800a044:	6825      	ldr	r5, [r4, #0]
 800a046:	1961      	adds	r1, r4, r5
 800a048:	428b      	cmp	r3, r1
 800a04a:	bf04      	itt	eq
 800a04c:	6819      	ldreq	r1, [r3, #0]
 800a04e:	685b      	ldreq	r3, [r3, #4]
 800a050:	6063      	str	r3, [r4, #4]
 800a052:	bf04      	itt	eq
 800a054:	1949      	addeq	r1, r1, r5
 800a056:	6021      	streq	r1, [r4, #0]
 800a058:	6054      	str	r4, [r2, #4]
 800a05a:	e7ca      	b.n	8009ff2 <_free_r+0x26>
 800a05c:	b003      	add	sp, #12
 800a05e:	bd30      	pop	{r4, r5, pc}
 800a060:	20002658 	.word	0x20002658

0800a064 <__ssputs_r>:
 800a064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a068:	688e      	ldr	r6, [r1, #8]
 800a06a:	429e      	cmp	r6, r3
 800a06c:	4682      	mov	sl, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	4690      	mov	r8, r2
 800a072:	461f      	mov	r7, r3
 800a074:	d838      	bhi.n	800a0e8 <__ssputs_r+0x84>
 800a076:	898a      	ldrh	r2, [r1, #12]
 800a078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a07c:	d032      	beq.n	800a0e4 <__ssputs_r+0x80>
 800a07e:	6825      	ldr	r5, [r4, #0]
 800a080:	6909      	ldr	r1, [r1, #16]
 800a082:	eba5 0901 	sub.w	r9, r5, r1
 800a086:	6965      	ldr	r5, [r4, #20]
 800a088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a08c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a090:	3301      	adds	r3, #1
 800a092:	444b      	add	r3, r9
 800a094:	106d      	asrs	r5, r5, #1
 800a096:	429d      	cmp	r5, r3
 800a098:	bf38      	it	cc
 800a09a:	461d      	movcc	r5, r3
 800a09c:	0553      	lsls	r3, r2, #21
 800a09e:	d531      	bpl.n	800a104 <__ssputs_r+0xa0>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7ff fe79 	bl	8009d98 <_malloc_r>
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	b950      	cbnz	r0, 800a0c0 <__ssputs_r+0x5c>
 800a0aa:	230c      	movs	r3, #12
 800a0ac:	f8ca 3000 	str.w	r3, [sl]
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	6921      	ldr	r1, [r4, #16]
 800a0c2:	464a      	mov	r2, r9
 800a0c4:	f7ff fe32 	bl	8009d2c <memcpy>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	6126      	str	r6, [r4, #16]
 800a0d6:	6165      	str	r5, [r4, #20]
 800a0d8:	444e      	add	r6, r9
 800a0da:	eba5 0509 	sub.w	r5, r5, r9
 800a0de:	6026      	str	r6, [r4, #0]
 800a0e0:	60a5      	str	r5, [r4, #8]
 800a0e2:	463e      	mov	r6, r7
 800a0e4:	42be      	cmp	r6, r7
 800a0e6:	d900      	bls.n	800a0ea <__ssputs_r+0x86>
 800a0e8:	463e      	mov	r6, r7
 800a0ea:	6820      	ldr	r0, [r4, #0]
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	f000 faa8 	bl	800a644 <memmove>
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	1b9b      	subs	r3, r3, r6
 800a0f8:	60a3      	str	r3, [r4, #8]
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	4433      	add	r3, r6
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	2000      	movs	r0, #0
 800a102:	e7db      	b.n	800a0bc <__ssputs_r+0x58>
 800a104:	462a      	mov	r2, r5
 800a106:	f000 fab7 	bl	800a678 <_realloc_r>
 800a10a:	4606      	mov	r6, r0
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d1e1      	bne.n	800a0d4 <__ssputs_r+0x70>
 800a110:	6921      	ldr	r1, [r4, #16]
 800a112:	4650      	mov	r0, sl
 800a114:	f7ff ff5a 	bl	8009fcc <_free_r>
 800a118:	e7c7      	b.n	800a0aa <__ssputs_r+0x46>
	...

0800a11c <_svfiprintf_r>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	4698      	mov	r8, r3
 800a122:	898b      	ldrh	r3, [r1, #12]
 800a124:	061b      	lsls	r3, r3, #24
 800a126:	b09d      	sub	sp, #116	; 0x74
 800a128:	4607      	mov	r7, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	4614      	mov	r4, r2
 800a12e:	d50e      	bpl.n	800a14e <_svfiprintf_r+0x32>
 800a130:	690b      	ldr	r3, [r1, #16]
 800a132:	b963      	cbnz	r3, 800a14e <_svfiprintf_r+0x32>
 800a134:	2140      	movs	r1, #64	; 0x40
 800a136:	f7ff fe2f 	bl	8009d98 <_malloc_r>
 800a13a:	6028      	str	r0, [r5, #0]
 800a13c:	6128      	str	r0, [r5, #16]
 800a13e:	b920      	cbnz	r0, 800a14a <_svfiprintf_r+0x2e>
 800a140:	230c      	movs	r3, #12
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e0d1      	b.n	800a2ee <_svfiprintf_r+0x1d2>
 800a14a:	2340      	movs	r3, #64	; 0x40
 800a14c:	616b      	str	r3, [r5, #20]
 800a14e:	2300      	movs	r3, #0
 800a150:	9309      	str	r3, [sp, #36]	; 0x24
 800a152:	2320      	movs	r3, #32
 800a154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a158:	f8cd 800c 	str.w	r8, [sp, #12]
 800a15c:	2330      	movs	r3, #48	; 0x30
 800a15e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a308 <_svfiprintf_r+0x1ec>
 800a162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a166:	f04f 0901 	mov.w	r9, #1
 800a16a:	4623      	mov	r3, r4
 800a16c:	469a      	mov	sl, r3
 800a16e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a172:	b10a      	cbz	r2, 800a178 <_svfiprintf_r+0x5c>
 800a174:	2a25      	cmp	r2, #37	; 0x25
 800a176:	d1f9      	bne.n	800a16c <_svfiprintf_r+0x50>
 800a178:	ebba 0b04 	subs.w	fp, sl, r4
 800a17c:	d00b      	beq.n	800a196 <_svfiprintf_r+0x7a>
 800a17e:	465b      	mov	r3, fp
 800a180:	4622      	mov	r2, r4
 800a182:	4629      	mov	r1, r5
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff ff6d 	bl	800a064 <__ssputs_r>
 800a18a:	3001      	adds	r0, #1
 800a18c:	f000 80aa 	beq.w	800a2e4 <_svfiprintf_r+0x1c8>
 800a190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a192:	445a      	add	r2, fp
 800a194:	9209      	str	r2, [sp, #36]	; 0x24
 800a196:	f89a 3000 	ldrb.w	r3, [sl]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80a2 	beq.w	800a2e4 <_svfiprintf_r+0x1c8>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1aa:	f10a 0a01 	add.w	sl, sl, #1
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	9307      	str	r3, [sp, #28]
 800a1b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b8:	4654      	mov	r4, sl
 800a1ba:	2205      	movs	r2, #5
 800a1bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c0:	4851      	ldr	r0, [pc, #324]	; (800a308 <_svfiprintf_r+0x1ec>)
 800a1c2:	f7f6 f82d 	bl	8000220 <memchr>
 800a1c6:	9a04      	ldr	r2, [sp, #16]
 800a1c8:	b9d8      	cbnz	r0, 800a202 <_svfiprintf_r+0xe6>
 800a1ca:	06d0      	lsls	r0, r2, #27
 800a1cc:	bf44      	itt	mi
 800a1ce:	2320      	movmi	r3, #32
 800a1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d4:	0711      	lsls	r1, r2, #28
 800a1d6:	bf44      	itt	mi
 800a1d8:	232b      	movmi	r3, #43	; 0x2b
 800a1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1de:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e4:	d015      	beq.n	800a212 <_svfiprintf_r+0xf6>
 800a1e6:	9a07      	ldr	r2, [sp, #28]
 800a1e8:	4654      	mov	r4, sl
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	f04f 0c0a 	mov.w	ip, #10
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f6:	3b30      	subs	r3, #48	; 0x30
 800a1f8:	2b09      	cmp	r3, #9
 800a1fa:	d94e      	bls.n	800a29a <_svfiprintf_r+0x17e>
 800a1fc:	b1b0      	cbz	r0, 800a22c <_svfiprintf_r+0x110>
 800a1fe:	9207      	str	r2, [sp, #28]
 800a200:	e014      	b.n	800a22c <_svfiprintf_r+0x110>
 800a202:	eba0 0308 	sub.w	r3, r0, r8
 800a206:	fa09 f303 	lsl.w	r3, r9, r3
 800a20a:	4313      	orrs	r3, r2
 800a20c:	9304      	str	r3, [sp, #16]
 800a20e:	46a2      	mov	sl, r4
 800a210:	e7d2      	b.n	800a1b8 <_svfiprintf_r+0x9c>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	1d19      	adds	r1, r3, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	9103      	str	r1, [sp, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bfbb      	ittet	lt
 800a21e:	425b      	neglt	r3, r3
 800a220:	f042 0202 	orrlt.w	r2, r2, #2
 800a224:	9307      	strge	r3, [sp, #28]
 800a226:	9307      	strlt	r3, [sp, #28]
 800a228:	bfb8      	it	lt
 800a22a:	9204      	strlt	r2, [sp, #16]
 800a22c:	7823      	ldrb	r3, [r4, #0]
 800a22e:	2b2e      	cmp	r3, #46	; 0x2e
 800a230:	d10c      	bne.n	800a24c <_svfiprintf_r+0x130>
 800a232:	7863      	ldrb	r3, [r4, #1]
 800a234:	2b2a      	cmp	r3, #42	; 0x2a
 800a236:	d135      	bne.n	800a2a4 <_svfiprintf_r+0x188>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	9203      	str	r2, [sp, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	bfb8      	it	lt
 800a244:	f04f 33ff 	movlt.w	r3, #4294967295
 800a248:	3402      	adds	r4, #2
 800a24a:	9305      	str	r3, [sp, #20]
 800a24c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a318 <_svfiprintf_r+0x1fc>
 800a250:	7821      	ldrb	r1, [r4, #0]
 800a252:	2203      	movs	r2, #3
 800a254:	4650      	mov	r0, sl
 800a256:	f7f5 ffe3 	bl	8000220 <memchr>
 800a25a:	b140      	cbz	r0, 800a26e <_svfiprintf_r+0x152>
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	eba0 000a 	sub.w	r0, r0, sl
 800a262:	fa03 f000 	lsl.w	r0, r3, r0
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	4303      	orrs	r3, r0
 800a26a:	3401      	adds	r4, #1
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a272:	4826      	ldr	r0, [pc, #152]	; (800a30c <_svfiprintf_r+0x1f0>)
 800a274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a278:	2206      	movs	r2, #6
 800a27a:	f7f5 ffd1 	bl	8000220 <memchr>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d038      	beq.n	800a2f4 <_svfiprintf_r+0x1d8>
 800a282:	4b23      	ldr	r3, [pc, #140]	; (800a310 <_svfiprintf_r+0x1f4>)
 800a284:	bb1b      	cbnz	r3, 800a2ce <_svfiprintf_r+0x1b2>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	3307      	adds	r3, #7
 800a28a:	f023 0307 	bic.w	r3, r3, #7
 800a28e:	3308      	adds	r3, #8
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a294:	4433      	add	r3, r6
 800a296:	9309      	str	r3, [sp, #36]	; 0x24
 800a298:	e767      	b.n	800a16a <_svfiprintf_r+0x4e>
 800a29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	e7a5      	b.n	800a1f0 <_svfiprintf_r+0xd4>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	3401      	adds	r4, #1
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f04f 0c0a 	mov.w	ip, #10
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b6:	3a30      	subs	r2, #48	; 0x30
 800a2b8:	2a09      	cmp	r2, #9
 800a2ba:	d903      	bls.n	800a2c4 <_svfiprintf_r+0x1a8>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0c5      	beq.n	800a24c <_svfiprintf_r+0x130>
 800a2c0:	9105      	str	r1, [sp, #20]
 800a2c2:	e7c3      	b.n	800a24c <_svfiprintf_r+0x130>
 800a2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e7f0      	b.n	800a2b0 <_svfiprintf_r+0x194>
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <_svfiprintf_r+0x1f8>)
 800a2d6:	a904      	add	r1, sp, #16
 800a2d8:	4638      	mov	r0, r7
 800a2da:	f3af 8000 	nop.w
 800a2de:	1c42      	adds	r2, r0, #1
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	d1d6      	bne.n	800a292 <_svfiprintf_r+0x176>
 800a2e4:	89ab      	ldrh	r3, [r5, #12]
 800a2e6:	065b      	lsls	r3, r3, #25
 800a2e8:	f53f af2c 	bmi.w	800a144 <_svfiprintf_r+0x28>
 800a2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ee:	b01d      	add	sp, #116	; 0x74
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	ab03      	add	r3, sp, #12
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <_svfiprintf_r+0x1f8>)
 800a2fc:	a904      	add	r1, sp, #16
 800a2fe:	4638      	mov	r0, r7
 800a300:	f000 f87a 	bl	800a3f8 <_printf_i>
 800a304:	e7eb      	b.n	800a2de <_svfiprintf_r+0x1c2>
 800a306:	bf00      	nop
 800a308:	0800c850 	.word	0x0800c850
 800a30c:	0800c85a 	.word	0x0800c85a
 800a310:	00000000 	.word	0x00000000
 800a314:	0800a065 	.word	0x0800a065
 800a318:	0800c856 	.word	0x0800c856

0800a31c <_printf_common>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	4616      	mov	r6, r2
 800a322:	4699      	mov	r9, r3
 800a324:	688a      	ldr	r2, [r1, #8]
 800a326:	690b      	ldr	r3, [r1, #16]
 800a328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	bfb8      	it	lt
 800a330:	4613      	movlt	r3, r2
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a338:	4607      	mov	r7, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	b10a      	cbz	r2, 800a342 <_printf_common+0x26>
 800a33e:	3301      	adds	r3, #1
 800a340:	6033      	str	r3, [r6, #0]
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	0699      	lsls	r1, r3, #26
 800a346:	bf42      	ittt	mi
 800a348:	6833      	ldrmi	r3, [r6, #0]
 800a34a:	3302      	addmi	r3, #2
 800a34c:	6033      	strmi	r3, [r6, #0]
 800a34e:	6825      	ldr	r5, [r4, #0]
 800a350:	f015 0506 	ands.w	r5, r5, #6
 800a354:	d106      	bne.n	800a364 <_printf_common+0x48>
 800a356:	f104 0a19 	add.w	sl, r4, #25
 800a35a:	68e3      	ldr	r3, [r4, #12]
 800a35c:	6832      	ldr	r2, [r6, #0]
 800a35e:	1a9b      	subs	r3, r3, r2
 800a360:	42ab      	cmp	r3, r5
 800a362:	dc26      	bgt.n	800a3b2 <_printf_common+0x96>
 800a364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a368:	1e13      	subs	r3, r2, #0
 800a36a:	6822      	ldr	r2, [r4, #0]
 800a36c:	bf18      	it	ne
 800a36e:	2301      	movne	r3, #1
 800a370:	0692      	lsls	r2, r2, #26
 800a372:	d42b      	bmi.n	800a3cc <_printf_common+0xb0>
 800a374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a378:	4649      	mov	r1, r9
 800a37a:	4638      	mov	r0, r7
 800a37c:	47c0      	blx	r8
 800a37e:	3001      	adds	r0, #1
 800a380:	d01e      	beq.n	800a3c0 <_printf_common+0xa4>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	68e5      	ldr	r5, [r4, #12]
 800a386:	6832      	ldr	r2, [r6, #0]
 800a388:	f003 0306 	and.w	r3, r3, #6
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	bf08      	it	eq
 800a390:	1aad      	subeq	r5, r5, r2
 800a392:	68a3      	ldr	r3, [r4, #8]
 800a394:	6922      	ldr	r2, [r4, #16]
 800a396:	bf0c      	ite	eq
 800a398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a39c:	2500      	movne	r5, #0
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	bfc4      	itt	gt
 800a3a2:	1a9b      	subgt	r3, r3, r2
 800a3a4:	18ed      	addgt	r5, r5, r3
 800a3a6:	2600      	movs	r6, #0
 800a3a8:	341a      	adds	r4, #26
 800a3aa:	42b5      	cmp	r5, r6
 800a3ac:	d11a      	bne.n	800a3e4 <_printf_common+0xc8>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e008      	b.n	800a3c4 <_printf_common+0xa8>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4652      	mov	r2, sl
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	47c0      	blx	r8
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d103      	bne.n	800a3c8 <_printf_common+0xac>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	e7c6      	b.n	800a35a <_printf_common+0x3e>
 800a3cc:	18e1      	adds	r1, r4, r3
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	2030      	movs	r0, #48	; 0x30
 800a3d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3d6:	4422      	add	r2, r4
 800a3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	e7c7      	b.n	800a374 <_printf_common+0x58>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c0      	blx	r8
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d0e6      	beq.n	800a3c0 <_printf_common+0xa4>
 800a3f2:	3601      	adds	r6, #1
 800a3f4:	e7d9      	b.n	800a3aa <_printf_common+0x8e>
	...

0800a3f8 <_printf_i>:
 800a3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fc:	7e0f      	ldrb	r7, [r1, #24]
 800a3fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a400:	2f78      	cmp	r7, #120	; 0x78
 800a402:	4691      	mov	r9, r2
 800a404:	4680      	mov	r8, r0
 800a406:	460c      	mov	r4, r1
 800a408:	469a      	mov	sl, r3
 800a40a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a40e:	d807      	bhi.n	800a420 <_printf_i+0x28>
 800a410:	2f62      	cmp	r7, #98	; 0x62
 800a412:	d80a      	bhi.n	800a42a <_printf_i+0x32>
 800a414:	2f00      	cmp	r7, #0
 800a416:	f000 80d8 	beq.w	800a5ca <_printf_i+0x1d2>
 800a41a:	2f58      	cmp	r7, #88	; 0x58
 800a41c:	f000 80a3 	beq.w	800a566 <_printf_i+0x16e>
 800a420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a428:	e03a      	b.n	800a4a0 <_printf_i+0xa8>
 800a42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a42e:	2b15      	cmp	r3, #21
 800a430:	d8f6      	bhi.n	800a420 <_printf_i+0x28>
 800a432:	a101      	add	r1, pc, #4	; (adr r1, 800a438 <_printf_i+0x40>)
 800a434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a438:	0800a491 	.word	0x0800a491
 800a43c:	0800a4a5 	.word	0x0800a4a5
 800a440:	0800a421 	.word	0x0800a421
 800a444:	0800a421 	.word	0x0800a421
 800a448:	0800a421 	.word	0x0800a421
 800a44c:	0800a421 	.word	0x0800a421
 800a450:	0800a4a5 	.word	0x0800a4a5
 800a454:	0800a421 	.word	0x0800a421
 800a458:	0800a421 	.word	0x0800a421
 800a45c:	0800a421 	.word	0x0800a421
 800a460:	0800a421 	.word	0x0800a421
 800a464:	0800a5b1 	.word	0x0800a5b1
 800a468:	0800a4d5 	.word	0x0800a4d5
 800a46c:	0800a593 	.word	0x0800a593
 800a470:	0800a421 	.word	0x0800a421
 800a474:	0800a421 	.word	0x0800a421
 800a478:	0800a5d3 	.word	0x0800a5d3
 800a47c:	0800a421 	.word	0x0800a421
 800a480:	0800a4d5 	.word	0x0800a4d5
 800a484:	0800a421 	.word	0x0800a421
 800a488:	0800a421 	.word	0x0800a421
 800a48c:	0800a59b 	.word	0x0800a59b
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	1d1a      	adds	r2, r3, #4
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	602a      	str	r2, [r5, #0]
 800a498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e0a3      	b.n	800a5ec <_printf_i+0x1f4>
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	6829      	ldr	r1, [r5, #0]
 800a4a8:	0606      	lsls	r6, r0, #24
 800a4aa:	f101 0304 	add.w	r3, r1, #4
 800a4ae:	d50a      	bpl.n	800a4c6 <_printf_i+0xce>
 800a4b0:	680e      	ldr	r6, [r1, #0]
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	2e00      	cmp	r6, #0
 800a4b6:	da03      	bge.n	800a4c0 <_printf_i+0xc8>
 800a4b8:	232d      	movs	r3, #45	; 0x2d
 800a4ba:	4276      	negs	r6, r6
 800a4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4c0:	485e      	ldr	r0, [pc, #376]	; (800a63c <_printf_i+0x244>)
 800a4c2:	230a      	movs	r3, #10
 800a4c4:	e019      	b.n	800a4fa <_printf_i+0x102>
 800a4c6:	680e      	ldr	r6, [r1, #0]
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4ce:	bf18      	it	ne
 800a4d0:	b236      	sxthne	r6, r6
 800a4d2:	e7ef      	b.n	800a4b4 <_printf_i+0xbc>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	6820      	ldr	r0, [r4, #0]
 800a4d8:	1d19      	adds	r1, r3, #4
 800a4da:	6029      	str	r1, [r5, #0]
 800a4dc:	0601      	lsls	r1, r0, #24
 800a4de:	d501      	bpl.n	800a4e4 <_printf_i+0xec>
 800a4e0:	681e      	ldr	r6, [r3, #0]
 800a4e2:	e002      	b.n	800a4ea <_printf_i+0xf2>
 800a4e4:	0646      	lsls	r6, r0, #25
 800a4e6:	d5fb      	bpl.n	800a4e0 <_printf_i+0xe8>
 800a4e8:	881e      	ldrh	r6, [r3, #0]
 800a4ea:	4854      	ldr	r0, [pc, #336]	; (800a63c <_printf_i+0x244>)
 800a4ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2308      	moveq	r3, #8
 800a4f2:	230a      	movne	r3, #10
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4fa:	6865      	ldr	r5, [r4, #4]
 800a4fc:	60a5      	str	r5, [r4, #8]
 800a4fe:	2d00      	cmp	r5, #0
 800a500:	bfa2      	ittt	ge
 800a502:	6821      	ldrge	r1, [r4, #0]
 800a504:	f021 0104 	bicge.w	r1, r1, #4
 800a508:	6021      	strge	r1, [r4, #0]
 800a50a:	b90e      	cbnz	r6, 800a510 <_printf_i+0x118>
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	d04d      	beq.n	800a5ac <_printf_i+0x1b4>
 800a510:	4615      	mov	r5, r2
 800a512:	fbb6 f1f3 	udiv	r1, r6, r3
 800a516:	fb03 6711 	mls	r7, r3, r1, r6
 800a51a:	5dc7      	ldrb	r7, [r0, r7]
 800a51c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a520:	4637      	mov	r7, r6
 800a522:	42bb      	cmp	r3, r7
 800a524:	460e      	mov	r6, r1
 800a526:	d9f4      	bls.n	800a512 <_printf_i+0x11a>
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d10b      	bne.n	800a544 <_printf_i+0x14c>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	07de      	lsls	r6, r3, #31
 800a530:	d508      	bpl.n	800a544 <_printf_i+0x14c>
 800a532:	6923      	ldr	r3, [r4, #16]
 800a534:	6861      	ldr	r1, [r4, #4]
 800a536:	4299      	cmp	r1, r3
 800a538:	bfde      	ittt	le
 800a53a:	2330      	movle	r3, #48	; 0x30
 800a53c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a540:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a544:	1b52      	subs	r2, r2, r5
 800a546:	6122      	str	r2, [r4, #16]
 800a548:	f8cd a000 	str.w	sl, [sp]
 800a54c:	464b      	mov	r3, r9
 800a54e:	aa03      	add	r2, sp, #12
 800a550:	4621      	mov	r1, r4
 800a552:	4640      	mov	r0, r8
 800a554:	f7ff fee2 	bl	800a31c <_printf_common>
 800a558:	3001      	adds	r0, #1
 800a55a:	d14c      	bne.n	800a5f6 <_printf_i+0x1fe>
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	b004      	add	sp, #16
 800a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a566:	4835      	ldr	r0, [pc, #212]	; (800a63c <_printf_i+0x244>)
 800a568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a56c:	6829      	ldr	r1, [r5, #0]
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	f851 6b04 	ldr.w	r6, [r1], #4
 800a574:	6029      	str	r1, [r5, #0]
 800a576:	061d      	lsls	r5, r3, #24
 800a578:	d514      	bpl.n	800a5a4 <_printf_i+0x1ac>
 800a57a:	07df      	lsls	r7, r3, #31
 800a57c:	bf44      	itt	mi
 800a57e:	f043 0320 	orrmi.w	r3, r3, #32
 800a582:	6023      	strmi	r3, [r4, #0]
 800a584:	b91e      	cbnz	r6, 800a58e <_printf_i+0x196>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	f023 0320 	bic.w	r3, r3, #32
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	2310      	movs	r3, #16
 800a590:	e7b0      	b.n	800a4f4 <_printf_i+0xfc>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	f043 0320 	orr.w	r3, r3, #32
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	2378      	movs	r3, #120	; 0x78
 800a59c:	4828      	ldr	r0, [pc, #160]	; (800a640 <_printf_i+0x248>)
 800a59e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5a2:	e7e3      	b.n	800a56c <_printf_i+0x174>
 800a5a4:	0659      	lsls	r1, r3, #25
 800a5a6:	bf48      	it	mi
 800a5a8:	b2b6      	uxthmi	r6, r6
 800a5aa:	e7e6      	b.n	800a57a <_printf_i+0x182>
 800a5ac:	4615      	mov	r5, r2
 800a5ae:	e7bb      	b.n	800a528 <_printf_i+0x130>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	6826      	ldr	r6, [r4, #0]
 800a5b4:	6961      	ldr	r1, [r4, #20]
 800a5b6:	1d18      	adds	r0, r3, #4
 800a5b8:	6028      	str	r0, [r5, #0]
 800a5ba:	0635      	lsls	r5, r6, #24
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	d501      	bpl.n	800a5c4 <_printf_i+0x1cc>
 800a5c0:	6019      	str	r1, [r3, #0]
 800a5c2:	e002      	b.n	800a5ca <_printf_i+0x1d2>
 800a5c4:	0670      	lsls	r0, r6, #25
 800a5c6:	d5fb      	bpl.n	800a5c0 <_printf_i+0x1c8>
 800a5c8:	8019      	strh	r1, [r3, #0]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	4615      	mov	r5, r2
 800a5d0:	e7ba      	b.n	800a548 <_printf_i+0x150>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	1d1a      	adds	r2, r3, #4
 800a5d6:	602a      	str	r2, [r5, #0]
 800a5d8:	681d      	ldr	r5, [r3, #0]
 800a5da:	6862      	ldr	r2, [r4, #4]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f7f5 fe1e 	bl	8000220 <memchr>
 800a5e4:	b108      	cbz	r0, 800a5ea <_printf_i+0x1f2>
 800a5e6:	1b40      	subs	r0, r0, r5
 800a5e8:	6060      	str	r0, [r4, #4]
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	6123      	str	r3, [r4, #16]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f4:	e7a8      	b.n	800a548 <_printf_i+0x150>
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	47d0      	blx	sl
 800a600:	3001      	adds	r0, #1
 800a602:	d0ab      	beq.n	800a55c <_printf_i+0x164>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	079b      	lsls	r3, r3, #30
 800a608:	d413      	bmi.n	800a632 <_printf_i+0x23a>
 800a60a:	68e0      	ldr	r0, [r4, #12]
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	4298      	cmp	r0, r3
 800a610:	bfb8      	it	lt
 800a612:	4618      	movlt	r0, r3
 800a614:	e7a4      	b.n	800a560 <_printf_i+0x168>
 800a616:	2301      	movs	r3, #1
 800a618:	4632      	mov	r2, r6
 800a61a:	4649      	mov	r1, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	47d0      	blx	sl
 800a620:	3001      	adds	r0, #1
 800a622:	d09b      	beq.n	800a55c <_printf_i+0x164>
 800a624:	3501      	adds	r5, #1
 800a626:	68e3      	ldr	r3, [r4, #12]
 800a628:	9903      	ldr	r1, [sp, #12]
 800a62a:	1a5b      	subs	r3, r3, r1
 800a62c:	42ab      	cmp	r3, r5
 800a62e:	dcf2      	bgt.n	800a616 <_printf_i+0x21e>
 800a630:	e7eb      	b.n	800a60a <_printf_i+0x212>
 800a632:	2500      	movs	r5, #0
 800a634:	f104 0619 	add.w	r6, r4, #25
 800a638:	e7f5      	b.n	800a626 <_printf_i+0x22e>
 800a63a:	bf00      	nop
 800a63c:	0800c861 	.word	0x0800c861
 800a640:	0800c872 	.word	0x0800c872

0800a644 <memmove>:
 800a644:	4288      	cmp	r0, r1
 800a646:	b510      	push	{r4, lr}
 800a648:	eb01 0402 	add.w	r4, r1, r2
 800a64c:	d902      	bls.n	800a654 <memmove+0x10>
 800a64e:	4284      	cmp	r4, r0
 800a650:	4623      	mov	r3, r4
 800a652:	d807      	bhi.n	800a664 <memmove+0x20>
 800a654:	1e43      	subs	r3, r0, #1
 800a656:	42a1      	cmp	r1, r4
 800a658:	d008      	beq.n	800a66c <memmove+0x28>
 800a65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a662:	e7f8      	b.n	800a656 <memmove+0x12>
 800a664:	4402      	add	r2, r0
 800a666:	4601      	mov	r1, r0
 800a668:	428a      	cmp	r2, r1
 800a66a:	d100      	bne.n	800a66e <memmove+0x2a>
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a676:	e7f7      	b.n	800a668 <memmove+0x24>

0800a678 <_realloc_r>:
 800a678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67c:	4680      	mov	r8, r0
 800a67e:	4614      	mov	r4, r2
 800a680:	460e      	mov	r6, r1
 800a682:	b921      	cbnz	r1, 800a68e <_realloc_r+0x16>
 800a684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a688:	4611      	mov	r1, r2
 800a68a:	f7ff bb85 	b.w	8009d98 <_malloc_r>
 800a68e:	b92a      	cbnz	r2, 800a69c <_realloc_r+0x24>
 800a690:	f7ff fc9c 	bl	8009fcc <_free_r>
 800a694:	4625      	mov	r5, r4
 800a696:	4628      	mov	r0, r5
 800a698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69c:	f000 f81b 	bl	800a6d6 <_malloc_usable_size_r>
 800a6a0:	4284      	cmp	r4, r0
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	d802      	bhi.n	800a6ac <_realloc_r+0x34>
 800a6a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6aa:	d812      	bhi.n	800a6d2 <_realloc_r+0x5a>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	f7ff fb72 	bl	8009d98 <_malloc_r>
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d0ed      	beq.n	800a696 <_realloc_r+0x1e>
 800a6ba:	42bc      	cmp	r4, r7
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4631      	mov	r1, r6
 800a6c0:	bf28      	it	cs
 800a6c2:	463a      	movcs	r2, r7
 800a6c4:	f7ff fb32 	bl	8009d2c <memcpy>
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f7ff fc7e 	bl	8009fcc <_free_r>
 800a6d0:	e7e1      	b.n	800a696 <_realloc_r+0x1e>
 800a6d2:	4635      	mov	r5, r6
 800a6d4:	e7df      	b.n	800a696 <_realloc_r+0x1e>

0800a6d6 <_malloc_usable_size_r>:
 800a6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6da:	1f18      	subs	r0, r3, #4
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bfbc      	itt	lt
 800a6e0:	580b      	ldrlt	r3, [r1, r0]
 800a6e2:	18c0      	addlt	r0, r0, r3
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <cos>:
 800a6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ea:	ec53 2b10 	vmov	r2, r3, d0
 800a6ee:	4826      	ldr	r0, [pc, #152]	; (800a788 <cos+0xa0>)
 800a6f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a6f4:	4281      	cmp	r1, r0
 800a6f6:	dc06      	bgt.n	800a706 <cos+0x1e>
 800a6f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a780 <cos+0x98>
 800a6fc:	b005      	add	sp, #20
 800a6fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800a702:	f001 b929 	b.w	800b958 <__kernel_cos>
 800a706:	4821      	ldr	r0, [pc, #132]	; (800a78c <cos+0xa4>)
 800a708:	4281      	cmp	r1, r0
 800a70a:	dd09      	ble.n	800a720 <cos+0x38>
 800a70c:	ee10 0a10 	vmov	r0, s0
 800a710:	4619      	mov	r1, r3
 800a712:	f7f5 fdd9 	bl	80002c8 <__aeabi_dsub>
 800a716:	ec41 0b10 	vmov	d0, r0, r1
 800a71a:	b005      	add	sp, #20
 800a71c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a720:	4668      	mov	r0, sp
 800a722:	f000 fe59 	bl	800b3d8 <__ieee754_rem_pio2>
 800a726:	f000 0003 	and.w	r0, r0, #3
 800a72a:	2801      	cmp	r0, #1
 800a72c:	d00b      	beq.n	800a746 <cos+0x5e>
 800a72e:	2802      	cmp	r0, #2
 800a730:	d016      	beq.n	800a760 <cos+0x78>
 800a732:	b9e0      	cbnz	r0, 800a76e <cos+0x86>
 800a734:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a738:	ed9d 0b00 	vldr	d0, [sp]
 800a73c:	f001 f90c 	bl	800b958 <__kernel_cos>
 800a740:	ec51 0b10 	vmov	r0, r1, d0
 800a744:	e7e7      	b.n	800a716 <cos+0x2e>
 800a746:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a74a:	ed9d 0b00 	vldr	d0, [sp]
 800a74e:	f001 fd1b 	bl	800c188 <__kernel_sin>
 800a752:	ec53 2b10 	vmov	r2, r3, d0
 800a756:	ee10 0a10 	vmov	r0, s0
 800a75a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a75e:	e7da      	b.n	800a716 <cos+0x2e>
 800a760:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a764:	ed9d 0b00 	vldr	d0, [sp]
 800a768:	f001 f8f6 	bl	800b958 <__kernel_cos>
 800a76c:	e7f1      	b.n	800a752 <cos+0x6a>
 800a76e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a772:	ed9d 0b00 	vldr	d0, [sp]
 800a776:	2001      	movs	r0, #1
 800a778:	f001 fd06 	bl	800c188 <__kernel_sin>
 800a77c:	e7e0      	b.n	800a740 <cos+0x58>
 800a77e:	bf00      	nop
	...
 800a788:	3fe921fb 	.word	0x3fe921fb
 800a78c:	7fefffff 	.word	0x7fefffff

0800a790 <sin>:
 800a790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a792:	ec53 2b10 	vmov	r2, r3, d0
 800a796:	4828      	ldr	r0, [pc, #160]	; (800a838 <sin+0xa8>)
 800a798:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a79c:	4281      	cmp	r1, r0
 800a79e:	dc07      	bgt.n	800a7b0 <sin+0x20>
 800a7a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a830 <sin+0xa0>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	b005      	add	sp, #20
 800a7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ac:	f001 bcec 	b.w	800c188 <__kernel_sin>
 800a7b0:	4822      	ldr	r0, [pc, #136]	; (800a83c <sin+0xac>)
 800a7b2:	4281      	cmp	r1, r0
 800a7b4:	dd09      	ble.n	800a7ca <sin+0x3a>
 800a7b6:	ee10 0a10 	vmov	r0, s0
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	f7f5 fd84 	bl	80002c8 <__aeabi_dsub>
 800a7c0:	ec41 0b10 	vmov	d0, r0, r1
 800a7c4:	b005      	add	sp, #20
 800a7c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7ca:	4668      	mov	r0, sp
 800a7cc:	f000 fe04 	bl	800b3d8 <__ieee754_rem_pio2>
 800a7d0:	f000 0003 	and.w	r0, r0, #3
 800a7d4:	2801      	cmp	r0, #1
 800a7d6:	d00c      	beq.n	800a7f2 <sin+0x62>
 800a7d8:	2802      	cmp	r0, #2
 800a7da:	d011      	beq.n	800a800 <sin+0x70>
 800a7dc:	b9f0      	cbnz	r0, 800a81c <sin+0x8c>
 800a7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7e2:	ed9d 0b00 	vldr	d0, [sp]
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	f001 fcce 	bl	800c188 <__kernel_sin>
 800a7ec:	ec51 0b10 	vmov	r0, r1, d0
 800a7f0:	e7e6      	b.n	800a7c0 <sin+0x30>
 800a7f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7f6:	ed9d 0b00 	vldr	d0, [sp]
 800a7fa:	f001 f8ad 	bl	800b958 <__kernel_cos>
 800a7fe:	e7f5      	b.n	800a7ec <sin+0x5c>
 800a800:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a804:	ed9d 0b00 	vldr	d0, [sp]
 800a808:	2001      	movs	r0, #1
 800a80a:	f001 fcbd 	bl	800c188 <__kernel_sin>
 800a80e:	ec53 2b10 	vmov	r2, r3, d0
 800a812:	ee10 0a10 	vmov	r0, s0
 800a816:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a81a:	e7d1      	b.n	800a7c0 <sin+0x30>
 800a81c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a820:	ed9d 0b00 	vldr	d0, [sp]
 800a824:	f001 f898 	bl	800b958 <__kernel_cos>
 800a828:	e7f1      	b.n	800a80e <sin+0x7e>
 800a82a:	bf00      	nop
 800a82c:	f3af 8000 	nop.w
	...
 800a838:	3fe921fb 	.word	0x3fe921fb
 800a83c:	7fefffff 	.word	0x7fefffff

0800a840 <pow>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	ed2d 8b02 	vpush	{d8}
 800a846:	eeb0 8a40 	vmov.f32	s16, s0
 800a84a:	eef0 8a60 	vmov.f32	s17, s1
 800a84e:	ec55 4b11 	vmov	r4, r5, d1
 800a852:	f000 f891 	bl	800a978 <__ieee754_pow>
 800a856:	4622      	mov	r2, r4
 800a858:	462b      	mov	r3, r5
 800a85a:	4620      	mov	r0, r4
 800a85c:	4629      	mov	r1, r5
 800a85e:	ec57 6b10 	vmov	r6, r7, d0
 800a862:	f7f6 f983 	bl	8000b6c <__aeabi_dcmpun>
 800a866:	2800      	cmp	r0, #0
 800a868:	d13b      	bne.n	800a8e2 <pow+0xa2>
 800a86a:	ec51 0b18 	vmov	r0, r1, d8
 800a86e:	2200      	movs	r2, #0
 800a870:	2300      	movs	r3, #0
 800a872:	f7f6 f949 	bl	8000b08 <__aeabi_dcmpeq>
 800a876:	b1b8      	cbz	r0, 800a8a8 <pow+0x68>
 800a878:	2200      	movs	r2, #0
 800a87a:	2300      	movs	r3, #0
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f6 f942 	bl	8000b08 <__aeabi_dcmpeq>
 800a884:	2800      	cmp	r0, #0
 800a886:	d146      	bne.n	800a916 <pow+0xd6>
 800a888:	ec45 4b10 	vmov	d0, r4, r5
 800a88c:	f001 fd73 	bl	800c376 <finite>
 800a890:	b338      	cbz	r0, 800a8e2 <pow+0xa2>
 800a892:	2200      	movs	r2, #0
 800a894:	2300      	movs	r3, #0
 800a896:	4620      	mov	r0, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	f7f6 f93f 	bl	8000b1c <__aeabi_dcmplt>
 800a89e:	b300      	cbz	r0, 800a8e2 <pow+0xa2>
 800a8a0:	f7ff fa18 	bl	8009cd4 <__errno>
 800a8a4:	2322      	movs	r3, #34	; 0x22
 800a8a6:	e01b      	b.n	800a8e0 <pow+0xa0>
 800a8a8:	ec47 6b10 	vmov	d0, r6, r7
 800a8ac:	f001 fd63 	bl	800c376 <finite>
 800a8b0:	b9e0      	cbnz	r0, 800a8ec <pow+0xac>
 800a8b2:	eeb0 0a48 	vmov.f32	s0, s16
 800a8b6:	eef0 0a68 	vmov.f32	s1, s17
 800a8ba:	f001 fd5c 	bl	800c376 <finite>
 800a8be:	b1a8      	cbz	r0, 800a8ec <pow+0xac>
 800a8c0:	ec45 4b10 	vmov	d0, r4, r5
 800a8c4:	f001 fd57 	bl	800c376 <finite>
 800a8c8:	b180      	cbz	r0, 800a8ec <pow+0xac>
 800a8ca:	4632      	mov	r2, r6
 800a8cc:	463b      	mov	r3, r7
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	f7f6 f94b 	bl	8000b6c <__aeabi_dcmpun>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0e2      	beq.n	800a8a0 <pow+0x60>
 800a8da:	f7ff f9fb 	bl	8009cd4 <__errno>
 800a8de:	2321      	movs	r3, #33	; 0x21
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	ecbd 8b02 	vpop	{d8}
 800a8e6:	ec47 6b10 	vmov	d0, r6, r7
 800a8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f6 f908 	bl	8000b08 <__aeabi_dcmpeq>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d0f2      	beq.n	800a8e2 <pow+0xa2>
 800a8fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a900:	eef0 0a68 	vmov.f32	s1, s17
 800a904:	f001 fd37 	bl	800c376 <finite>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d0ea      	beq.n	800a8e2 <pow+0xa2>
 800a90c:	ec45 4b10 	vmov	d0, r4, r5
 800a910:	f001 fd31 	bl	800c376 <finite>
 800a914:	e7c3      	b.n	800a89e <pow+0x5e>
 800a916:	4f01      	ldr	r7, [pc, #4]	; (800a91c <pow+0xdc>)
 800a918:	2600      	movs	r6, #0
 800a91a:	e7e2      	b.n	800a8e2 <pow+0xa2>
 800a91c:	3ff00000 	.word	0x3ff00000

0800a920 <sqrt>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	ed2d 8b02 	vpush	{d8}
 800a926:	ec55 4b10 	vmov	r4, r5, d0
 800a92a:	f000 ff61 	bl	800b7f0 <__ieee754_sqrt>
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	4620      	mov	r0, r4
 800a934:	4629      	mov	r1, r5
 800a936:	eeb0 8a40 	vmov.f32	s16, s0
 800a93a:	eef0 8a60 	vmov.f32	s17, s1
 800a93e:	f7f6 f915 	bl	8000b6c <__aeabi_dcmpun>
 800a942:	b990      	cbnz	r0, 800a96a <sqrt+0x4a>
 800a944:	2200      	movs	r2, #0
 800a946:	2300      	movs	r3, #0
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f6 f8e6 	bl	8000b1c <__aeabi_dcmplt>
 800a950:	b158      	cbz	r0, 800a96a <sqrt+0x4a>
 800a952:	f7ff f9bf 	bl	8009cd4 <__errno>
 800a956:	2321      	movs	r3, #33	; 0x21
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	2200      	movs	r2, #0
 800a95c:	2300      	movs	r3, #0
 800a95e:	4610      	mov	r0, r2
 800a960:	4619      	mov	r1, r3
 800a962:	f7f5 ff93 	bl	800088c <__aeabi_ddiv>
 800a966:	ec41 0b18 	vmov	d8, r0, r1
 800a96a:	eeb0 0a48 	vmov.f32	s0, s16
 800a96e:	eef0 0a68 	vmov.f32	s1, s17
 800a972:	ecbd 8b02 	vpop	{d8}
 800a976:	bd38      	pop	{r3, r4, r5, pc}

0800a978 <__ieee754_pow>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	ed2d 8b06 	vpush	{d8-d10}
 800a980:	b089      	sub	sp, #36	; 0x24
 800a982:	ed8d 1b00 	vstr	d1, [sp]
 800a986:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a98a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a98e:	ea58 0102 	orrs.w	r1, r8, r2
 800a992:	ec57 6b10 	vmov	r6, r7, d0
 800a996:	d115      	bne.n	800a9c4 <__ieee754_pow+0x4c>
 800a998:	19b3      	adds	r3, r6, r6
 800a99a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a99e:	4152      	adcs	r2, r2
 800a9a0:	4299      	cmp	r1, r3
 800a9a2:	4b89      	ldr	r3, [pc, #548]	; (800abc8 <__ieee754_pow+0x250>)
 800a9a4:	4193      	sbcs	r3, r2
 800a9a6:	f080 84d2 	bcs.w	800b34e <__ieee754_pow+0x9d6>
 800a9aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f5 fc8b 	bl	80002cc <__adddf3>
 800a9b6:	ec41 0b10 	vmov	d0, r0, r1
 800a9ba:	b009      	add	sp, #36	; 0x24
 800a9bc:	ecbd 8b06 	vpop	{d8-d10}
 800a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c4:	4b81      	ldr	r3, [pc, #516]	; (800abcc <__ieee754_pow+0x254>)
 800a9c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a9ca:	429c      	cmp	r4, r3
 800a9cc:	ee10 aa10 	vmov	sl, s0
 800a9d0:	463d      	mov	r5, r7
 800a9d2:	dc06      	bgt.n	800a9e2 <__ieee754_pow+0x6a>
 800a9d4:	d101      	bne.n	800a9da <__ieee754_pow+0x62>
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	d1e7      	bne.n	800a9aa <__ieee754_pow+0x32>
 800a9da:	4598      	cmp	r8, r3
 800a9dc:	dc01      	bgt.n	800a9e2 <__ieee754_pow+0x6a>
 800a9de:	d10f      	bne.n	800aa00 <__ieee754_pow+0x88>
 800a9e0:	b172      	cbz	r2, 800aa00 <__ieee754_pow+0x88>
 800a9e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a9e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a9ea:	ea55 050a 	orrs.w	r5, r5, sl
 800a9ee:	d1dc      	bne.n	800a9aa <__ieee754_pow+0x32>
 800a9f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a9f4:	18db      	adds	r3, r3, r3
 800a9f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a9fa:	4152      	adcs	r2, r2
 800a9fc:	429d      	cmp	r5, r3
 800a9fe:	e7d0      	b.n	800a9a2 <__ieee754_pow+0x2a>
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	da3b      	bge.n	800aa7c <__ieee754_pow+0x104>
 800aa04:	4b72      	ldr	r3, [pc, #456]	; (800abd0 <__ieee754_pow+0x258>)
 800aa06:	4598      	cmp	r8, r3
 800aa08:	dc51      	bgt.n	800aaae <__ieee754_pow+0x136>
 800aa0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800aa0e:	4598      	cmp	r8, r3
 800aa10:	f340 84ac 	ble.w	800b36c <__ieee754_pow+0x9f4>
 800aa14:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aa1c:	2b14      	cmp	r3, #20
 800aa1e:	dd0f      	ble.n	800aa40 <__ieee754_pow+0xc8>
 800aa20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aa24:	fa22 f103 	lsr.w	r1, r2, r3
 800aa28:	fa01 f303 	lsl.w	r3, r1, r3
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	f040 849d 	bne.w	800b36c <__ieee754_pow+0x9f4>
 800aa32:	f001 0101 	and.w	r1, r1, #1
 800aa36:	f1c1 0302 	rsb	r3, r1, #2
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	b182      	cbz	r2, 800aa60 <__ieee754_pow+0xe8>
 800aa3e:	e05f      	b.n	800ab00 <__ieee754_pow+0x188>
 800aa40:	2a00      	cmp	r2, #0
 800aa42:	d15b      	bne.n	800aafc <__ieee754_pow+0x184>
 800aa44:	f1c3 0314 	rsb	r3, r3, #20
 800aa48:	fa48 f103 	asr.w	r1, r8, r3
 800aa4c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa50:	4543      	cmp	r3, r8
 800aa52:	f040 8488 	bne.w	800b366 <__ieee754_pow+0x9ee>
 800aa56:	f001 0101 	and.w	r1, r1, #1
 800aa5a:	f1c1 0302 	rsb	r3, r1, #2
 800aa5e:	9304      	str	r3, [sp, #16]
 800aa60:	4b5c      	ldr	r3, [pc, #368]	; (800abd4 <__ieee754_pow+0x25c>)
 800aa62:	4598      	cmp	r8, r3
 800aa64:	d132      	bne.n	800aacc <__ieee754_pow+0x154>
 800aa66:	f1b9 0f00 	cmp.w	r9, #0
 800aa6a:	f280 8478 	bge.w	800b35e <__ieee754_pow+0x9e6>
 800aa6e:	4959      	ldr	r1, [pc, #356]	; (800abd4 <__ieee754_pow+0x25c>)
 800aa70:	4632      	mov	r2, r6
 800aa72:	463b      	mov	r3, r7
 800aa74:	2000      	movs	r0, #0
 800aa76:	f7f5 ff09 	bl	800088c <__aeabi_ddiv>
 800aa7a:	e79c      	b.n	800a9b6 <__ieee754_pow+0x3e>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d13d      	bne.n	800ab00 <__ieee754_pow+0x188>
 800aa84:	4b51      	ldr	r3, [pc, #324]	; (800abcc <__ieee754_pow+0x254>)
 800aa86:	4598      	cmp	r8, r3
 800aa88:	d1ea      	bne.n	800aa60 <__ieee754_pow+0xe8>
 800aa8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aa8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aa92:	ea53 030a 	orrs.w	r3, r3, sl
 800aa96:	f000 845a 	beq.w	800b34e <__ieee754_pow+0x9d6>
 800aa9a:	4b4f      	ldr	r3, [pc, #316]	; (800abd8 <__ieee754_pow+0x260>)
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	dd08      	ble.n	800aab2 <__ieee754_pow+0x13a>
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	f2c0 8457 	blt.w	800b356 <__ieee754_pow+0x9de>
 800aaa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaac:	e783      	b.n	800a9b6 <__ieee754_pow+0x3e>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e7e5      	b.n	800aa7e <__ieee754_pow+0x106>
 800aab2:	f1b9 0f00 	cmp.w	r9, #0
 800aab6:	f04f 0000 	mov.w	r0, #0
 800aaba:	f04f 0100 	mov.w	r1, #0
 800aabe:	f6bf af7a 	bge.w	800a9b6 <__ieee754_pow+0x3e>
 800aac2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aac6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aaca:	e774      	b.n	800a9b6 <__ieee754_pow+0x3e>
 800aacc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800aad0:	d106      	bne.n	800aae0 <__ieee754_pow+0x168>
 800aad2:	4632      	mov	r2, r6
 800aad4:	463b      	mov	r3, r7
 800aad6:	4630      	mov	r0, r6
 800aad8:	4639      	mov	r1, r7
 800aada:	f7f5 fdad 	bl	8000638 <__aeabi_dmul>
 800aade:	e76a      	b.n	800a9b6 <__ieee754_pow+0x3e>
 800aae0:	4b3e      	ldr	r3, [pc, #248]	; (800abdc <__ieee754_pow+0x264>)
 800aae2:	4599      	cmp	r9, r3
 800aae4:	d10c      	bne.n	800ab00 <__ieee754_pow+0x188>
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	db0a      	blt.n	800ab00 <__ieee754_pow+0x188>
 800aaea:	ec47 6b10 	vmov	d0, r6, r7
 800aaee:	b009      	add	sp, #36	; 0x24
 800aaf0:	ecbd 8b06 	vpop	{d8-d10}
 800aaf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	f000 be7a 	b.w	800b7f0 <__ieee754_sqrt>
 800aafc:	2300      	movs	r3, #0
 800aafe:	9304      	str	r3, [sp, #16]
 800ab00:	ec47 6b10 	vmov	d0, r6, r7
 800ab04:	f001 fc2e 	bl	800c364 <fabs>
 800ab08:	ec51 0b10 	vmov	r0, r1, d0
 800ab0c:	f1ba 0f00 	cmp.w	sl, #0
 800ab10:	d129      	bne.n	800ab66 <__ieee754_pow+0x1ee>
 800ab12:	b124      	cbz	r4, 800ab1e <__ieee754_pow+0x1a6>
 800ab14:	4b2f      	ldr	r3, [pc, #188]	; (800abd4 <__ieee754_pow+0x25c>)
 800ab16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d123      	bne.n	800ab66 <__ieee754_pow+0x1ee>
 800ab1e:	f1b9 0f00 	cmp.w	r9, #0
 800ab22:	da05      	bge.n	800ab30 <__ieee754_pow+0x1b8>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	2000      	movs	r0, #0
 800ab2a:	492a      	ldr	r1, [pc, #168]	; (800abd4 <__ieee754_pow+0x25c>)
 800ab2c:	f7f5 feae 	bl	800088c <__aeabi_ddiv>
 800ab30:	2d00      	cmp	r5, #0
 800ab32:	f6bf af40 	bge.w	800a9b6 <__ieee754_pow+0x3e>
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ab3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab40:	4323      	orrs	r3, r4
 800ab42:	d108      	bne.n	800ab56 <__ieee754_pow+0x1de>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	f7f5 fbbc 	bl	80002c8 <__aeabi_dsub>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	e78f      	b.n	800aa76 <__ieee754_pow+0xfe>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	f47f af2c 	bne.w	800a9b6 <__ieee754_pow+0x3e>
 800ab5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab62:	4619      	mov	r1, r3
 800ab64:	e727      	b.n	800a9b6 <__ieee754_pow+0x3e>
 800ab66:	0feb      	lsrs	r3, r5, #31
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	9306      	str	r3, [sp, #24]
 800ab6c:	9a06      	ldr	r2, [sp, #24]
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	d102      	bne.n	800ab7a <__ieee754_pow+0x202>
 800ab74:	4632      	mov	r2, r6
 800ab76:	463b      	mov	r3, r7
 800ab78:	e7e6      	b.n	800ab48 <__ieee754_pow+0x1d0>
 800ab7a:	4b19      	ldr	r3, [pc, #100]	; (800abe0 <__ieee754_pow+0x268>)
 800ab7c:	4598      	cmp	r8, r3
 800ab7e:	f340 80fb 	ble.w	800ad78 <__ieee754_pow+0x400>
 800ab82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ab86:	4598      	cmp	r8, r3
 800ab88:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <__ieee754_pow+0x260>)
 800ab8a:	dd0c      	ble.n	800aba6 <__ieee754_pow+0x22e>
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	dc0f      	bgt.n	800abb0 <__ieee754_pow+0x238>
 800ab90:	f1b9 0f00 	cmp.w	r9, #0
 800ab94:	da0f      	bge.n	800abb6 <__ieee754_pow+0x23e>
 800ab96:	2000      	movs	r0, #0
 800ab98:	b009      	add	sp, #36	; 0x24
 800ab9a:	ecbd 8b06 	vpop	{d8-d10}
 800ab9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba2:	f001 bbd6 	b.w	800c352 <__math_oflow>
 800aba6:	429c      	cmp	r4, r3
 800aba8:	dbf2      	blt.n	800ab90 <__ieee754_pow+0x218>
 800abaa:	4b0a      	ldr	r3, [pc, #40]	; (800abd4 <__ieee754_pow+0x25c>)
 800abac:	429c      	cmp	r4, r3
 800abae:	dd19      	ble.n	800abe4 <__ieee754_pow+0x26c>
 800abb0:	f1b9 0f00 	cmp.w	r9, #0
 800abb4:	dcef      	bgt.n	800ab96 <__ieee754_pow+0x21e>
 800abb6:	2000      	movs	r0, #0
 800abb8:	b009      	add	sp, #36	; 0x24
 800abba:	ecbd 8b06 	vpop	{d8-d10}
 800abbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc2:	f001 bbbd 	b.w	800c340 <__math_uflow>
 800abc6:	bf00      	nop
 800abc8:	fff00000 	.word	0xfff00000
 800abcc:	7ff00000 	.word	0x7ff00000
 800abd0:	433fffff 	.word	0x433fffff
 800abd4:	3ff00000 	.word	0x3ff00000
 800abd8:	3fefffff 	.word	0x3fefffff
 800abdc:	3fe00000 	.word	0x3fe00000
 800abe0:	41e00000 	.word	0x41e00000
 800abe4:	4b60      	ldr	r3, [pc, #384]	; (800ad68 <__ieee754_pow+0x3f0>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	f7f5 fb6e 	bl	80002c8 <__aeabi_dsub>
 800abec:	a354      	add	r3, pc, #336	; (adr r3, 800ad40 <__ieee754_pow+0x3c8>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	4604      	mov	r4, r0
 800abf4:	460d      	mov	r5, r1
 800abf6:	f7f5 fd1f 	bl	8000638 <__aeabi_dmul>
 800abfa:	a353      	add	r3, pc, #332	; (adr r3, 800ad48 <__ieee754_pow+0x3d0>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	4606      	mov	r6, r0
 800ac02:	460f      	mov	r7, r1
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 fd16 	bl	8000638 <__aeabi_dmul>
 800ac0c:	4b57      	ldr	r3, [pc, #348]	; (800ad6c <__ieee754_pow+0x3f4>)
 800ac0e:	4682      	mov	sl, r0
 800ac10:	468b      	mov	fp, r1
 800ac12:	2200      	movs	r2, #0
 800ac14:	4620      	mov	r0, r4
 800ac16:	4629      	mov	r1, r5
 800ac18:	f7f5 fd0e 	bl	8000638 <__aeabi_dmul>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	a14b      	add	r1, pc, #300	; (adr r1, 800ad50 <__ieee754_pow+0x3d8>)
 800ac22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac26:	f7f5 fb4f 	bl	80002c8 <__aeabi_dsub>
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	462b      	mov	r3, r5
 800ac2e:	f7f5 fd03 	bl	8000638 <__aeabi_dmul>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	2000      	movs	r0, #0
 800ac38:	494d      	ldr	r1, [pc, #308]	; (800ad70 <__ieee754_pow+0x3f8>)
 800ac3a:	f7f5 fb45 	bl	80002c8 <__aeabi_dsub>
 800ac3e:	4622      	mov	r2, r4
 800ac40:	4680      	mov	r8, r0
 800ac42:	4689      	mov	r9, r1
 800ac44:	462b      	mov	r3, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7f5 fcf5 	bl	8000638 <__aeabi_dmul>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 fcef 	bl	8000638 <__aeabi_dmul>
 800ac5a:	a33f      	add	r3, pc, #252	; (adr r3, 800ad58 <__ieee754_pow+0x3e0>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f7f5 fcea 	bl	8000638 <__aeabi_dmul>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4650      	mov	r0, sl
 800ac6a:	4659      	mov	r1, fp
 800ac6c:	f7f5 fb2c 	bl	80002c8 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	4630      	mov	r0, r6
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	f7f5 fb26 	bl	80002cc <__adddf3>
 800ac80:	2000      	movs	r0, #0
 800ac82:	4632      	mov	r2, r6
 800ac84:	463b      	mov	r3, r7
 800ac86:	4604      	mov	r4, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	f7f5 fb1d 	bl	80002c8 <__aeabi_dsub>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	4640      	mov	r0, r8
 800ac94:	4649      	mov	r1, r9
 800ac96:	f7f5 fb17 	bl	80002c8 <__aeabi_dsub>
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	9a06      	ldr	r2, [sp, #24]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	4313      	orrs	r3, r2
 800aca2:	4682      	mov	sl, r0
 800aca4:	468b      	mov	fp, r1
 800aca6:	f040 81e7 	bne.w	800b078 <__ieee754_pow+0x700>
 800acaa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ad60 <__ieee754_pow+0x3e8>
 800acae:	eeb0 8a47 	vmov.f32	s16, s14
 800acb2:	eef0 8a67 	vmov.f32	s17, s15
 800acb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800acba:	2600      	movs	r6, #0
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acc4:	f7f5 fb00 	bl	80002c8 <__aeabi_dsub>
 800acc8:	4622      	mov	r2, r4
 800acca:	462b      	mov	r3, r5
 800accc:	f7f5 fcb4 	bl	8000638 <__aeabi_dmul>
 800acd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd4:	4680      	mov	r8, r0
 800acd6:	4689      	mov	r9, r1
 800acd8:	4650      	mov	r0, sl
 800acda:	4659      	mov	r1, fp
 800acdc:	f7f5 fcac 	bl	8000638 <__aeabi_dmul>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4640      	mov	r0, r8
 800ace6:	4649      	mov	r1, r9
 800ace8:	f7f5 faf0 	bl	80002cc <__adddf3>
 800acec:	4632      	mov	r2, r6
 800acee:	463b      	mov	r3, r7
 800acf0:	4680      	mov	r8, r0
 800acf2:	4689      	mov	r9, r1
 800acf4:	4620      	mov	r0, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	f7f5 fc9e 	bl	8000638 <__aeabi_dmul>
 800acfc:	460b      	mov	r3, r1
 800acfe:	4604      	mov	r4, r0
 800ad00:	460d      	mov	r5, r1
 800ad02:	4602      	mov	r2, r0
 800ad04:	4649      	mov	r1, r9
 800ad06:	4640      	mov	r0, r8
 800ad08:	f7f5 fae0 	bl	80002cc <__adddf3>
 800ad0c:	4b19      	ldr	r3, [pc, #100]	; (800ad74 <__ieee754_pow+0x3fc>)
 800ad0e:	4299      	cmp	r1, r3
 800ad10:	ec45 4b19 	vmov	d9, r4, r5
 800ad14:	4606      	mov	r6, r0
 800ad16:	460f      	mov	r7, r1
 800ad18:	468b      	mov	fp, r1
 800ad1a:	f340 82f1 	ble.w	800b300 <__ieee754_pow+0x988>
 800ad1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ad22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ad26:	4303      	orrs	r3, r0
 800ad28:	f000 81e4 	beq.w	800b0f4 <__ieee754_pow+0x77c>
 800ad2c:	ec51 0b18 	vmov	r0, r1, d8
 800ad30:	2200      	movs	r2, #0
 800ad32:	2300      	movs	r3, #0
 800ad34:	f7f5 fef2 	bl	8000b1c <__aeabi_dcmplt>
 800ad38:	3800      	subs	r0, #0
 800ad3a:	bf18      	it	ne
 800ad3c:	2001      	movne	r0, #1
 800ad3e:	e72b      	b.n	800ab98 <__ieee754_pow+0x220>
 800ad40:	60000000 	.word	0x60000000
 800ad44:	3ff71547 	.word	0x3ff71547
 800ad48:	f85ddf44 	.word	0xf85ddf44
 800ad4c:	3e54ae0b 	.word	0x3e54ae0b
 800ad50:	55555555 	.word	0x55555555
 800ad54:	3fd55555 	.word	0x3fd55555
 800ad58:	652b82fe 	.word	0x652b82fe
 800ad5c:	3ff71547 	.word	0x3ff71547
 800ad60:	00000000 	.word	0x00000000
 800ad64:	bff00000 	.word	0xbff00000
 800ad68:	3ff00000 	.word	0x3ff00000
 800ad6c:	3fd00000 	.word	0x3fd00000
 800ad70:	3fe00000 	.word	0x3fe00000
 800ad74:	408fffff 	.word	0x408fffff
 800ad78:	4bd5      	ldr	r3, [pc, #852]	; (800b0d0 <__ieee754_pow+0x758>)
 800ad7a:	402b      	ands	r3, r5
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	b92b      	cbnz	r3, 800ad8c <__ieee754_pow+0x414>
 800ad80:	4bd4      	ldr	r3, [pc, #848]	; (800b0d4 <__ieee754_pow+0x75c>)
 800ad82:	f7f5 fc59 	bl	8000638 <__aeabi_dmul>
 800ad86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	1523      	asrs	r3, r4, #20
 800ad8e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad92:	4413      	add	r3, r2
 800ad94:	9305      	str	r3, [sp, #20]
 800ad96:	4bd0      	ldr	r3, [pc, #832]	; (800b0d8 <__ieee754_pow+0x760>)
 800ad98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ad9c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ada0:	429c      	cmp	r4, r3
 800ada2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ada6:	dd08      	ble.n	800adba <__ieee754_pow+0x442>
 800ada8:	4bcc      	ldr	r3, [pc, #816]	; (800b0dc <__ieee754_pow+0x764>)
 800adaa:	429c      	cmp	r4, r3
 800adac:	f340 8162 	ble.w	800b074 <__ieee754_pow+0x6fc>
 800adb0:	9b05      	ldr	r3, [sp, #20]
 800adb2:	3301      	adds	r3, #1
 800adb4:	9305      	str	r3, [sp, #20]
 800adb6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800adba:	2400      	movs	r4, #0
 800adbc:	00e3      	lsls	r3, r4, #3
 800adbe:	9307      	str	r3, [sp, #28]
 800adc0:	4bc7      	ldr	r3, [pc, #796]	; (800b0e0 <__ieee754_pow+0x768>)
 800adc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adc6:	ed93 7b00 	vldr	d7, [r3]
 800adca:	4629      	mov	r1, r5
 800adcc:	ec53 2b17 	vmov	r2, r3, d7
 800add0:	eeb0 9a47 	vmov.f32	s18, s14
 800add4:	eef0 9a67 	vmov.f32	s19, s15
 800add8:	4682      	mov	sl, r0
 800adda:	f7f5 fa75 	bl	80002c8 <__aeabi_dsub>
 800adde:	4652      	mov	r2, sl
 800ade0:	4606      	mov	r6, r0
 800ade2:	460f      	mov	r7, r1
 800ade4:	462b      	mov	r3, r5
 800ade6:	ec51 0b19 	vmov	r0, r1, d9
 800adea:	f7f5 fa6f 	bl	80002cc <__adddf3>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	2000      	movs	r0, #0
 800adf4:	49bb      	ldr	r1, [pc, #748]	; (800b0e4 <__ieee754_pow+0x76c>)
 800adf6:	f7f5 fd49 	bl	800088c <__aeabi_ddiv>
 800adfa:	ec41 0b1a 	vmov	d10, r0, r1
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	4630      	mov	r0, r6
 800ae04:	4639      	mov	r1, r7
 800ae06:	f7f5 fc17 	bl	8000638 <__aeabi_dmul>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae10:	9302      	str	r3, [sp, #8]
 800ae12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae16:	46ab      	mov	fp, r5
 800ae18:	106d      	asrs	r5, r5, #1
 800ae1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ae1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ae22:	ec41 0b18 	vmov	d8, r0, r1
 800ae26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4614      	mov	r4, r2
 800ae32:	461d      	mov	r5, r3
 800ae34:	f7f5 fc00 	bl	8000638 <__aeabi_dmul>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	4639      	mov	r1, r7
 800ae40:	f7f5 fa42 	bl	80002c8 <__aeabi_dsub>
 800ae44:	ec53 2b19 	vmov	r2, r3, d9
 800ae48:	4606      	mov	r6, r0
 800ae4a:	460f      	mov	r7, r1
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	4629      	mov	r1, r5
 800ae50:	f7f5 fa3a 	bl	80002c8 <__aeabi_dsub>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4650      	mov	r0, sl
 800ae5a:	4659      	mov	r1, fp
 800ae5c:	f7f5 fa34 	bl	80002c8 <__aeabi_dsub>
 800ae60:	4642      	mov	r2, r8
 800ae62:	464b      	mov	r3, r9
 800ae64:	f7f5 fbe8 	bl	8000638 <__aeabi_dmul>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	4639      	mov	r1, r7
 800ae70:	f7f5 fa2a 	bl	80002c8 <__aeabi_dsub>
 800ae74:	ec53 2b1a 	vmov	r2, r3, d10
 800ae78:	f7f5 fbde 	bl	8000638 <__aeabi_dmul>
 800ae7c:	ec53 2b18 	vmov	r2, r3, d8
 800ae80:	ec41 0b19 	vmov	d9, r0, r1
 800ae84:	ec51 0b18 	vmov	r0, r1, d8
 800ae88:	f7f5 fbd6 	bl	8000638 <__aeabi_dmul>
 800ae8c:	a37c      	add	r3, pc, #496	; (adr r3, 800b080 <__ieee754_pow+0x708>)
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	4604      	mov	r4, r0
 800ae94:	460d      	mov	r5, r1
 800ae96:	f7f5 fbcf 	bl	8000638 <__aeabi_dmul>
 800ae9a:	a37b      	add	r3, pc, #492	; (adr r3, 800b088 <__ieee754_pow+0x710>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 fa14 	bl	80002cc <__adddf3>
 800aea4:	4622      	mov	r2, r4
 800aea6:	462b      	mov	r3, r5
 800aea8:	f7f5 fbc6 	bl	8000638 <__aeabi_dmul>
 800aeac:	a378      	add	r3, pc, #480	; (adr r3, 800b090 <__ieee754_pow+0x718>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 fa0b 	bl	80002cc <__adddf3>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	462b      	mov	r3, r5
 800aeba:	f7f5 fbbd 	bl	8000638 <__aeabi_dmul>
 800aebe:	a376      	add	r3, pc, #472	; (adr r3, 800b098 <__ieee754_pow+0x720>)
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f7f5 fa02 	bl	80002cc <__adddf3>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	f7f5 fbb4 	bl	8000638 <__aeabi_dmul>
 800aed0:	a373      	add	r3, pc, #460	; (adr r3, 800b0a0 <__ieee754_pow+0x728>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	f7f5 f9f9 	bl	80002cc <__adddf3>
 800aeda:	4622      	mov	r2, r4
 800aedc:	462b      	mov	r3, r5
 800aede:	f7f5 fbab 	bl	8000638 <__aeabi_dmul>
 800aee2:	a371      	add	r3, pc, #452	; (adr r3, 800b0a8 <__ieee754_pow+0x730>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 f9f0 	bl	80002cc <__adddf3>
 800aeec:	4622      	mov	r2, r4
 800aeee:	4606      	mov	r6, r0
 800aef0:	460f      	mov	r7, r1
 800aef2:	462b      	mov	r3, r5
 800aef4:	4620      	mov	r0, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7f5 fb9e 	bl	8000638 <__aeabi_dmul>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4630      	mov	r0, r6
 800af02:	4639      	mov	r1, r7
 800af04:	f7f5 fb98 	bl	8000638 <__aeabi_dmul>
 800af08:	4642      	mov	r2, r8
 800af0a:	4604      	mov	r4, r0
 800af0c:	460d      	mov	r5, r1
 800af0e:	464b      	mov	r3, r9
 800af10:	ec51 0b18 	vmov	r0, r1, d8
 800af14:	f7f5 f9da 	bl	80002cc <__adddf3>
 800af18:	ec53 2b19 	vmov	r2, r3, d9
 800af1c:	f7f5 fb8c 	bl	8000638 <__aeabi_dmul>
 800af20:	4622      	mov	r2, r4
 800af22:	462b      	mov	r3, r5
 800af24:	f7f5 f9d2 	bl	80002cc <__adddf3>
 800af28:	4642      	mov	r2, r8
 800af2a:	4682      	mov	sl, r0
 800af2c:	468b      	mov	fp, r1
 800af2e:	464b      	mov	r3, r9
 800af30:	4640      	mov	r0, r8
 800af32:	4649      	mov	r1, r9
 800af34:	f7f5 fb80 	bl	8000638 <__aeabi_dmul>
 800af38:	4b6b      	ldr	r3, [pc, #428]	; (800b0e8 <__ieee754_pow+0x770>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	f7f5 f9c4 	bl	80002cc <__adddf3>
 800af44:	4652      	mov	r2, sl
 800af46:	465b      	mov	r3, fp
 800af48:	f7f5 f9c0 	bl	80002cc <__adddf3>
 800af4c:	2000      	movs	r0, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	460d      	mov	r5, r1
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	4640      	mov	r0, r8
 800af58:	4649      	mov	r1, r9
 800af5a:	f7f5 fb6d 	bl	8000638 <__aeabi_dmul>
 800af5e:	4b62      	ldr	r3, [pc, #392]	; (800b0e8 <__ieee754_pow+0x770>)
 800af60:	4680      	mov	r8, r0
 800af62:	4689      	mov	r9, r1
 800af64:	2200      	movs	r2, #0
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 f9ad 	bl	80002c8 <__aeabi_dsub>
 800af6e:	4632      	mov	r2, r6
 800af70:	463b      	mov	r3, r7
 800af72:	f7f5 f9a9 	bl	80002c8 <__aeabi_dsub>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4650      	mov	r0, sl
 800af7c:	4659      	mov	r1, fp
 800af7e:	f7f5 f9a3 	bl	80002c8 <__aeabi_dsub>
 800af82:	ec53 2b18 	vmov	r2, r3, d8
 800af86:	f7f5 fb57 	bl	8000638 <__aeabi_dmul>
 800af8a:	4622      	mov	r2, r4
 800af8c:	4606      	mov	r6, r0
 800af8e:	460f      	mov	r7, r1
 800af90:	462b      	mov	r3, r5
 800af92:	ec51 0b19 	vmov	r0, r1, d9
 800af96:	f7f5 fb4f 	bl	8000638 <__aeabi_dmul>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 f993 	bl	80002cc <__adddf3>
 800afa6:	4606      	mov	r6, r0
 800afa8:	460f      	mov	r7, r1
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4640      	mov	r0, r8
 800afb0:	4649      	mov	r1, r9
 800afb2:	f7f5 f98b 	bl	80002cc <__adddf3>
 800afb6:	a33e      	add	r3, pc, #248	; (adr r3, 800b0b0 <__ieee754_pow+0x738>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	2000      	movs	r0, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	460d      	mov	r5, r1
 800afc2:	f7f5 fb39 	bl	8000638 <__aeabi_dmul>
 800afc6:	4642      	mov	r2, r8
 800afc8:	ec41 0b18 	vmov	d8, r0, r1
 800afcc:	464b      	mov	r3, r9
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 f979 	bl	80002c8 <__aeabi_dsub>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 f973 	bl	80002c8 <__aeabi_dsub>
 800afe2:	a335      	add	r3, pc, #212	; (adr r3, 800b0b8 <__ieee754_pow+0x740>)
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f7f5 fb26 	bl	8000638 <__aeabi_dmul>
 800afec:	a334      	add	r3, pc, #208	; (adr r3, 800b0c0 <__ieee754_pow+0x748>)
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	4606      	mov	r6, r0
 800aff4:	460f      	mov	r7, r1
 800aff6:	4620      	mov	r0, r4
 800aff8:	4629      	mov	r1, r5
 800affa:	f7f5 fb1d 	bl	8000638 <__aeabi_dmul>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 f961 	bl	80002cc <__adddf3>
 800b00a:	9a07      	ldr	r2, [sp, #28]
 800b00c:	4b37      	ldr	r3, [pc, #220]	; (800b0ec <__ieee754_pow+0x774>)
 800b00e:	4413      	add	r3, r2
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	f7f5 f95a 	bl	80002cc <__adddf3>
 800b018:	4682      	mov	sl, r0
 800b01a:	9805      	ldr	r0, [sp, #20]
 800b01c:	468b      	mov	fp, r1
 800b01e:	f7f5 faa1 	bl	8000564 <__aeabi_i2d>
 800b022:	9a07      	ldr	r2, [sp, #28]
 800b024:	4b32      	ldr	r3, [pc, #200]	; (800b0f0 <__ieee754_pow+0x778>)
 800b026:	4413      	add	r3, r2
 800b028:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b02c:	4606      	mov	r6, r0
 800b02e:	460f      	mov	r7, r1
 800b030:	4652      	mov	r2, sl
 800b032:	465b      	mov	r3, fp
 800b034:	ec51 0b18 	vmov	r0, r1, d8
 800b038:	f7f5 f948 	bl	80002cc <__adddf3>
 800b03c:	4642      	mov	r2, r8
 800b03e:	464b      	mov	r3, r9
 800b040:	f7f5 f944 	bl	80002cc <__adddf3>
 800b044:	4632      	mov	r2, r6
 800b046:	463b      	mov	r3, r7
 800b048:	f7f5 f940 	bl	80002cc <__adddf3>
 800b04c:	2000      	movs	r0, #0
 800b04e:	4632      	mov	r2, r6
 800b050:	463b      	mov	r3, r7
 800b052:	4604      	mov	r4, r0
 800b054:	460d      	mov	r5, r1
 800b056:	f7f5 f937 	bl	80002c8 <__aeabi_dsub>
 800b05a:	4642      	mov	r2, r8
 800b05c:	464b      	mov	r3, r9
 800b05e:	f7f5 f933 	bl	80002c8 <__aeabi_dsub>
 800b062:	ec53 2b18 	vmov	r2, r3, d8
 800b066:	f7f5 f92f 	bl	80002c8 <__aeabi_dsub>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4650      	mov	r0, sl
 800b070:	4659      	mov	r1, fp
 800b072:	e610      	b.n	800ac96 <__ieee754_pow+0x31e>
 800b074:	2401      	movs	r4, #1
 800b076:	e6a1      	b.n	800adbc <__ieee754_pow+0x444>
 800b078:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b0c8 <__ieee754_pow+0x750>
 800b07c:	e617      	b.n	800acae <__ieee754_pow+0x336>
 800b07e:	bf00      	nop
 800b080:	4a454eef 	.word	0x4a454eef
 800b084:	3fca7e28 	.word	0x3fca7e28
 800b088:	93c9db65 	.word	0x93c9db65
 800b08c:	3fcd864a 	.word	0x3fcd864a
 800b090:	a91d4101 	.word	0xa91d4101
 800b094:	3fd17460 	.word	0x3fd17460
 800b098:	518f264d 	.word	0x518f264d
 800b09c:	3fd55555 	.word	0x3fd55555
 800b0a0:	db6fabff 	.word	0xdb6fabff
 800b0a4:	3fdb6db6 	.word	0x3fdb6db6
 800b0a8:	33333303 	.word	0x33333303
 800b0ac:	3fe33333 	.word	0x3fe33333
 800b0b0:	e0000000 	.word	0xe0000000
 800b0b4:	3feec709 	.word	0x3feec709
 800b0b8:	dc3a03fd 	.word	0xdc3a03fd
 800b0bc:	3feec709 	.word	0x3feec709
 800b0c0:	145b01f5 	.word	0x145b01f5
 800b0c4:	be3e2fe0 	.word	0xbe3e2fe0
 800b0c8:	00000000 	.word	0x00000000
 800b0cc:	3ff00000 	.word	0x3ff00000
 800b0d0:	7ff00000 	.word	0x7ff00000
 800b0d4:	43400000 	.word	0x43400000
 800b0d8:	0003988e 	.word	0x0003988e
 800b0dc:	000bb679 	.word	0x000bb679
 800b0e0:	0800c888 	.word	0x0800c888
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	40080000 	.word	0x40080000
 800b0ec:	0800c8a8 	.word	0x0800c8a8
 800b0f0:	0800c898 	.word	0x0800c898
 800b0f4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b3cc <__ieee754_pow+0xa54>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	4640      	mov	r0, r8
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	f7f5 f8e5 	bl	80002cc <__adddf3>
 800b102:	4622      	mov	r2, r4
 800b104:	ec41 0b1a 	vmov	d10, r0, r1
 800b108:	462b      	mov	r3, r5
 800b10a:	4630      	mov	r0, r6
 800b10c:	4639      	mov	r1, r7
 800b10e:	f7f5 f8db 	bl	80002c8 <__aeabi_dsub>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	ec51 0b1a 	vmov	r0, r1, d10
 800b11a:	f7f5 fd1d 	bl	8000b58 <__aeabi_dcmpgt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	f47f ae04 	bne.w	800ad2c <__ieee754_pow+0x3b4>
 800b124:	4aa4      	ldr	r2, [pc, #656]	; (800b3b8 <__ieee754_pow+0xa40>)
 800b126:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b12a:	4293      	cmp	r3, r2
 800b12c:	f340 8108 	ble.w	800b340 <__ieee754_pow+0x9c8>
 800b130:	151b      	asrs	r3, r3, #20
 800b132:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b136:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b13a:	fa4a f303 	asr.w	r3, sl, r3
 800b13e:	445b      	add	r3, fp
 800b140:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b144:	4e9d      	ldr	r6, [pc, #628]	; (800b3bc <__ieee754_pow+0xa44>)
 800b146:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b14a:	4116      	asrs	r6, r2
 800b14c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b150:	2000      	movs	r0, #0
 800b152:	ea23 0106 	bic.w	r1, r3, r6
 800b156:	f1c2 0214 	rsb	r2, r2, #20
 800b15a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b15e:	fa4a fa02 	asr.w	sl, sl, r2
 800b162:	f1bb 0f00 	cmp.w	fp, #0
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4620      	mov	r0, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	bfb8      	it	lt
 800b170:	f1ca 0a00 	rsblt	sl, sl, #0
 800b174:	f7f5 f8a8 	bl	80002c8 <__aeabi_dsub>
 800b178:	ec41 0b19 	vmov	d9, r0, r1
 800b17c:	4642      	mov	r2, r8
 800b17e:	464b      	mov	r3, r9
 800b180:	ec51 0b19 	vmov	r0, r1, d9
 800b184:	f7f5 f8a2 	bl	80002cc <__adddf3>
 800b188:	a37b      	add	r3, pc, #492	; (adr r3, 800b378 <__ieee754_pow+0xa00>)
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	2000      	movs	r0, #0
 800b190:	4604      	mov	r4, r0
 800b192:	460d      	mov	r5, r1
 800b194:	f7f5 fa50 	bl	8000638 <__aeabi_dmul>
 800b198:	ec53 2b19 	vmov	r2, r3, d9
 800b19c:	4606      	mov	r6, r0
 800b19e:	460f      	mov	r7, r1
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	f7f5 f890 	bl	80002c8 <__aeabi_dsub>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	f7f5 f88a 	bl	80002c8 <__aeabi_dsub>
 800b1b4:	a372      	add	r3, pc, #456	; (adr r3, 800b380 <__ieee754_pow+0xa08>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f7f5 fa3d 	bl	8000638 <__aeabi_dmul>
 800b1be:	a372      	add	r3, pc, #456	; (adr r3, 800b388 <__ieee754_pow+0xa10>)
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4689      	mov	r9, r1
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	f7f5 fa34 	bl	8000638 <__aeabi_dmul>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	f7f5 f878 	bl	80002cc <__adddf3>
 800b1dc:	4604      	mov	r4, r0
 800b1de:	460d      	mov	r5, r1
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	4639      	mov	r1, r7
 800b1e8:	f7f5 f870 	bl	80002cc <__adddf3>
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	463b      	mov	r3, r7
 800b1f0:	4680      	mov	r8, r0
 800b1f2:	4689      	mov	r9, r1
 800b1f4:	f7f5 f868 	bl	80002c8 <__aeabi_dsub>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	4629      	mov	r1, r5
 800b200:	f7f5 f862 	bl	80002c8 <__aeabi_dsub>
 800b204:	4642      	mov	r2, r8
 800b206:	4606      	mov	r6, r0
 800b208:	460f      	mov	r7, r1
 800b20a:	464b      	mov	r3, r9
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	f7f5 fa12 	bl	8000638 <__aeabi_dmul>
 800b214:	a35e      	add	r3, pc, #376	; (adr r3, 800b390 <__ieee754_pow+0xa18>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	4604      	mov	r4, r0
 800b21c:	460d      	mov	r5, r1
 800b21e:	f7f5 fa0b 	bl	8000638 <__aeabi_dmul>
 800b222:	a35d      	add	r3, pc, #372	; (adr r3, 800b398 <__ieee754_pow+0xa20>)
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f7f5 f84e 	bl	80002c8 <__aeabi_dsub>
 800b22c:	4622      	mov	r2, r4
 800b22e:	462b      	mov	r3, r5
 800b230:	f7f5 fa02 	bl	8000638 <__aeabi_dmul>
 800b234:	a35a      	add	r3, pc, #360	; (adr r3, 800b3a0 <__ieee754_pow+0xa28>)
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f7f5 f847 	bl	80002cc <__adddf3>
 800b23e:	4622      	mov	r2, r4
 800b240:	462b      	mov	r3, r5
 800b242:	f7f5 f9f9 	bl	8000638 <__aeabi_dmul>
 800b246:	a358      	add	r3, pc, #352	; (adr r3, 800b3a8 <__ieee754_pow+0xa30>)
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	f7f5 f83c 	bl	80002c8 <__aeabi_dsub>
 800b250:	4622      	mov	r2, r4
 800b252:	462b      	mov	r3, r5
 800b254:	f7f5 f9f0 	bl	8000638 <__aeabi_dmul>
 800b258:	a355      	add	r3, pc, #340	; (adr r3, 800b3b0 <__ieee754_pow+0xa38>)
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f7f5 f835 	bl	80002cc <__adddf3>
 800b262:	4622      	mov	r2, r4
 800b264:	462b      	mov	r3, r5
 800b266:	f7f5 f9e7 	bl	8000638 <__aeabi_dmul>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4640      	mov	r0, r8
 800b270:	4649      	mov	r1, r9
 800b272:	f7f5 f829 	bl	80002c8 <__aeabi_dsub>
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4640      	mov	r0, r8
 800b280:	4649      	mov	r1, r9
 800b282:	f7f5 f9d9 	bl	8000638 <__aeabi_dmul>
 800b286:	2200      	movs	r2, #0
 800b288:	ec41 0b19 	vmov	d9, r0, r1
 800b28c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b290:	4620      	mov	r0, r4
 800b292:	4629      	mov	r1, r5
 800b294:	f7f5 f818 	bl	80002c8 <__aeabi_dsub>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	ec51 0b19 	vmov	r0, r1, d9
 800b2a0:	f7f5 faf4 	bl	800088c <__aeabi_ddiv>
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	460d      	mov	r5, r1
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	f7f5 f9c2 	bl	8000638 <__aeabi_dmul>
 800b2b4:	4632      	mov	r2, r6
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	f7f5 f808 	bl	80002cc <__adddf3>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 f800 	bl	80002c8 <__aeabi_dsub>
 800b2c8:	4642      	mov	r2, r8
 800b2ca:	464b      	mov	r3, r9
 800b2cc:	f7f4 fffc 	bl	80002c8 <__aeabi_dsub>
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	493a      	ldr	r1, [pc, #232]	; (800b3c0 <__ieee754_pow+0xa48>)
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	f7f4 fff6 	bl	80002c8 <__aeabi_dsub>
 800b2dc:	ec41 0b10 	vmov	d0, r0, r1
 800b2e0:	ee10 3a90 	vmov	r3, s1
 800b2e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b2e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ec:	da2b      	bge.n	800b346 <__ieee754_pow+0x9ce>
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	f001 f8ce 	bl	800c490 <scalbn>
 800b2f4:	ec51 0b10 	vmov	r0, r1, d0
 800b2f8:	ec53 2b18 	vmov	r2, r3, d8
 800b2fc:	f7ff bbed 	b.w	800aada <__ieee754_pow+0x162>
 800b300:	4b30      	ldr	r3, [pc, #192]	; (800b3c4 <__ieee754_pow+0xa4c>)
 800b302:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b306:	429e      	cmp	r6, r3
 800b308:	f77f af0c 	ble.w	800b124 <__ieee754_pow+0x7ac>
 800b30c:	4b2e      	ldr	r3, [pc, #184]	; (800b3c8 <__ieee754_pow+0xa50>)
 800b30e:	440b      	add	r3, r1
 800b310:	4303      	orrs	r3, r0
 800b312:	d009      	beq.n	800b328 <__ieee754_pow+0x9b0>
 800b314:	ec51 0b18 	vmov	r0, r1, d8
 800b318:	2200      	movs	r2, #0
 800b31a:	2300      	movs	r3, #0
 800b31c:	f7f5 fbfe 	bl	8000b1c <__aeabi_dcmplt>
 800b320:	3800      	subs	r0, #0
 800b322:	bf18      	it	ne
 800b324:	2001      	movne	r0, #1
 800b326:	e447      	b.n	800abb8 <__ieee754_pow+0x240>
 800b328:	4622      	mov	r2, r4
 800b32a:	462b      	mov	r3, r5
 800b32c:	f7f4 ffcc 	bl	80002c8 <__aeabi_dsub>
 800b330:	4642      	mov	r2, r8
 800b332:	464b      	mov	r3, r9
 800b334:	f7f5 fc06 	bl	8000b44 <__aeabi_dcmpge>
 800b338:	2800      	cmp	r0, #0
 800b33a:	f43f aef3 	beq.w	800b124 <__ieee754_pow+0x7ac>
 800b33e:	e7e9      	b.n	800b314 <__ieee754_pow+0x99c>
 800b340:	f04f 0a00 	mov.w	sl, #0
 800b344:	e71a      	b.n	800b17c <__ieee754_pow+0x804>
 800b346:	ec51 0b10 	vmov	r0, r1, d0
 800b34a:	4619      	mov	r1, r3
 800b34c:	e7d4      	b.n	800b2f8 <__ieee754_pow+0x980>
 800b34e:	491c      	ldr	r1, [pc, #112]	; (800b3c0 <__ieee754_pow+0xa48>)
 800b350:	2000      	movs	r0, #0
 800b352:	f7ff bb30 	b.w	800a9b6 <__ieee754_pow+0x3e>
 800b356:	2000      	movs	r0, #0
 800b358:	2100      	movs	r1, #0
 800b35a:	f7ff bb2c 	b.w	800a9b6 <__ieee754_pow+0x3e>
 800b35e:	4630      	mov	r0, r6
 800b360:	4639      	mov	r1, r7
 800b362:	f7ff bb28 	b.w	800a9b6 <__ieee754_pow+0x3e>
 800b366:	9204      	str	r2, [sp, #16]
 800b368:	f7ff bb7a 	b.w	800aa60 <__ieee754_pow+0xe8>
 800b36c:	2300      	movs	r3, #0
 800b36e:	f7ff bb64 	b.w	800aa3a <__ieee754_pow+0xc2>
 800b372:	bf00      	nop
 800b374:	f3af 8000 	nop.w
 800b378:	00000000 	.word	0x00000000
 800b37c:	3fe62e43 	.word	0x3fe62e43
 800b380:	fefa39ef 	.word	0xfefa39ef
 800b384:	3fe62e42 	.word	0x3fe62e42
 800b388:	0ca86c39 	.word	0x0ca86c39
 800b38c:	be205c61 	.word	0xbe205c61
 800b390:	72bea4d0 	.word	0x72bea4d0
 800b394:	3e663769 	.word	0x3e663769
 800b398:	c5d26bf1 	.word	0xc5d26bf1
 800b39c:	3ebbbd41 	.word	0x3ebbbd41
 800b3a0:	af25de2c 	.word	0xaf25de2c
 800b3a4:	3f11566a 	.word	0x3f11566a
 800b3a8:	16bebd93 	.word	0x16bebd93
 800b3ac:	3f66c16c 	.word	0x3f66c16c
 800b3b0:	5555553e 	.word	0x5555553e
 800b3b4:	3fc55555 	.word	0x3fc55555
 800b3b8:	3fe00000 	.word	0x3fe00000
 800b3bc:	000fffff 	.word	0x000fffff
 800b3c0:	3ff00000 	.word	0x3ff00000
 800b3c4:	4090cbff 	.word	0x4090cbff
 800b3c8:	3f6f3400 	.word	0x3f6f3400
 800b3cc:	652b82fe 	.word	0x652b82fe
 800b3d0:	3c971547 	.word	0x3c971547
 800b3d4:	00000000 	.word	0x00000000

0800b3d8 <__ieee754_rem_pio2>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	ed2d 8b02 	vpush	{d8}
 800b3e0:	ec55 4b10 	vmov	r4, r5, d0
 800b3e4:	4bca      	ldr	r3, [pc, #808]	; (800b710 <__ieee754_rem_pio2+0x338>)
 800b3e6:	b08b      	sub	sp, #44	; 0x2c
 800b3e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b3ec:	4598      	cmp	r8, r3
 800b3ee:	4682      	mov	sl, r0
 800b3f0:	9502      	str	r5, [sp, #8]
 800b3f2:	dc08      	bgt.n	800b406 <__ieee754_rem_pio2+0x2e>
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	ed80 0b00 	vstr	d0, [r0]
 800b3fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b400:	f04f 0b00 	mov.w	fp, #0
 800b404:	e028      	b.n	800b458 <__ieee754_rem_pio2+0x80>
 800b406:	4bc3      	ldr	r3, [pc, #780]	; (800b714 <__ieee754_rem_pio2+0x33c>)
 800b408:	4598      	cmp	r8, r3
 800b40a:	dc78      	bgt.n	800b4fe <__ieee754_rem_pio2+0x126>
 800b40c:	9b02      	ldr	r3, [sp, #8]
 800b40e:	4ec2      	ldr	r6, [pc, #776]	; (800b718 <__ieee754_rem_pio2+0x340>)
 800b410:	2b00      	cmp	r3, #0
 800b412:	ee10 0a10 	vmov	r0, s0
 800b416:	a3b0      	add	r3, pc, #704	; (adr r3, 800b6d8 <__ieee754_rem_pio2+0x300>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	4629      	mov	r1, r5
 800b41e:	dd39      	ble.n	800b494 <__ieee754_rem_pio2+0xbc>
 800b420:	f7f4 ff52 	bl	80002c8 <__aeabi_dsub>
 800b424:	45b0      	cmp	r8, r6
 800b426:	4604      	mov	r4, r0
 800b428:	460d      	mov	r5, r1
 800b42a:	d01b      	beq.n	800b464 <__ieee754_rem_pio2+0x8c>
 800b42c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b6e0 <__ieee754_rem_pio2+0x308>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f7f4 ff49 	bl	80002c8 <__aeabi_dsub>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	e9ca 2300 	strd	r2, r3, [sl]
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f4 ff41 	bl	80002c8 <__aeabi_dsub>
 800b446:	a3a6      	add	r3, pc, #664	; (adr r3, 800b6e0 <__ieee754_rem_pio2+0x308>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f4 ff3c 	bl	80002c8 <__aeabi_dsub>
 800b450:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b454:	f04f 0b01 	mov.w	fp, #1
 800b458:	4658      	mov	r0, fp
 800b45a:	b00b      	add	sp, #44	; 0x2c
 800b45c:	ecbd 8b02 	vpop	{d8}
 800b460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b464:	a3a0      	add	r3, pc, #640	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x310>)
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	f7f4 ff2d 	bl	80002c8 <__aeabi_dsub>
 800b46e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x318>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	4604      	mov	r4, r0
 800b476:	460d      	mov	r5, r1
 800b478:	f7f4 ff26 	bl	80002c8 <__aeabi_dsub>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	e9ca 2300 	strd	r2, r3, [sl]
 800b484:	4620      	mov	r0, r4
 800b486:	4629      	mov	r1, r5
 800b488:	f7f4 ff1e 	bl	80002c8 <__aeabi_dsub>
 800b48c:	a398      	add	r3, pc, #608	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x318>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	e7db      	b.n	800b44c <__ieee754_rem_pio2+0x74>
 800b494:	f7f4 ff1a 	bl	80002cc <__adddf3>
 800b498:	45b0      	cmp	r8, r6
 800b49a:	4604      	mov	r4, r0
 800b49c:	460d      	mov	r5, r1
 800b49e:	d016      	beq.n	800b4ce <__ieee754_rem_pio2+0xf6>
 800b4a0:	a38f      	add	r3, pc, #572	; (adr r3, 800b6e0 <__ieee754_rem_pio2+0x308>)
 800b4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a6:	f7f4 ff11 	bl	80002cc <__adddf3>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	e9ca 2300 	strd	r2, r3, [sl]
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	f7f4 ff07 	bl	80002c8 <__aeabi_dsub>
 800b4ba:	a389      	add	r3, pc, #548	; (adr r3, 800b6e0 <__ieee754_rem_pio2+0x308>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 ff04 	bl	80002cc <__adddf3>
 800b4c4:	f04f 3bff 	mov.w	fp, #4294967295
 800b4c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b4cc:	e7c4      	b.n	800b458 <__ieee754_rem_pio2+0x80>
 800b4ce:	a386      	add	r3, pc, #536	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x310>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f4 fefa 	bl	80002cc <__adddf3>
 800b4d8:	a385      	add	r3, pc, #532	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x318>)
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	4604      	mov	r4, r0
 800b4e0:	460d      	mov	r5, r1
 800b4e2:	f7f4 fef3 	bl	80002cc <__adddf3>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	e9ca 2300 	strd	r2, r3, [sl]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f4 fee9 	bl	80002c8 <__aeabi_dsub>
 800b4f6:	a37e      	add	r3, pc, #504	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x318>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	e7e0      	b.n	800b4c0 <__ieee754_rem_pio2+0xe8>
 800b4fe:	4b87      	ldr	r3, [pc, #540]	; (800b71c <__ieee754_rem_pio2+0x344>)
 800b500:	4598      	cmp	r8, r3
 800b502:	f300 80d9 	bgt.w	800b6b8 <__ieee754_rem_pio2+0x2e0>
 800b506:	f000 ff2d 	bl	800c364 <fabs>
 800b50a:	ec55 4b10 	vmov	r4, r5, d0
 800b50e:	ee10 0a10 	vmov	r0, s0
 800b512:	a379      	add	r3, pc, #484	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x320>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	4629      	mov	r1, r5
 800b51a:	f7f5 f88d 	bl	8000638 <__aeabi_dmul>
 800b51e:	4b80      	ldr	r3, [pc, #512]	; (800b720 <__ieee754_rem_pio2+0x348>)
 800b520:	2200      	movs	r2, #0
 800b522:	f7f4 fed3 	bl	80002cc <__adddf3>
 800b526:	f7f5 fb37 	bl	8000b98 <__aeabi_d2iz>
 800b52a:	4683      	mov	fp, r0
 800b52c:	f7f5 f81a 	bl	8000564 <__aeabi_i2d>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	ec43 2b18 	vmov	d8, r2, r3
 800b538:	a367      	add	r3, pc, #412	; (adr r3, 800b6d8 <__ieee754_rem_pio2+0x300>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f5 f87b 	bl	8000638 <__aeabi_dmul>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4620      	mov	r0, r4
 800b548:	4629      	mov	r1, r5
 800b54a:	f7f4 febd 	bl	80002c8 <__aeabi_dsub>
 800b54e:	a364      	add	r3, pc, #400	; (adr r3, 800b6e0 <__ieee754_rem_pio2+0x308>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	4606      	mov	r6, r0
 800b556:	460f      	mov	r7, r1
 800b558:	ec51 0b18 	vmov	r0, r1, d8
 800b55c:	f7f5 f86c 	bl	8000638 <__aeabi_dmul>
 800b560:	f1bb 0f1f 	cmp.w	fp, #31
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	dc0d      	bgt.n	800b586 <__ieee754_rem_pio2+0x1ae>
 800b56a:	4b6e      	ldr	r3, [pc, #440]	; (800b724 <__ieee754_rem_pio2+0x34c>)
 800b56c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b574:	4543      	cmp	r3, r8
 800b576:	d006      	beq.n	800b586 <__ieee754_rem_pio2+0x1ae>
 800b578:	4622      	mov	r2, r4
 800b57a:	462b      	mov	r3, r5
 800b57c:	4630      	mov	r0, r6
 800b57e:	4639      	mov	r1, r7
 800b580:	f7f4 fea2 	bl	80002c8 <__aeabi_dsub>
 800b584:	e00f      	b.n	800b5a6 <__ieee754_rem_pio2+0x1ce>
 800b586:	462b      	mov	r3, r5
 800b588:	4622      	mov	r2, r4
 800b58a:	4630      	mov	r0, r6
 800b58c:	4639      	mov	r1, r7
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b596:	9303      	str	r3, [sp, #12]
 800b598:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b59c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b5a0:	f1b8 0f10 	cmp.w	r8, #16
 800b5a4:	dc02      	bgt.n	800b5ac <__ieee754_rem_pio2+0x1d4>
 800b5a6:	e9ca 0100 	strd	r0, r1, [sl]
 800b5aa:	e039      	b.n	800b620 <__ieee754_rem_pio2+0x248>
 800b5ac:	a34e      	add	r3, pc, #312	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x310>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	ec51 0b18 	vmov	r0, r1, d8
 800b5b6:	f7f5 f83f 	bl	8000638 <__aeabi_dmul>
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	460d      	mov	r5, r1
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	f7f4 fe7f 	bl	80002c8 <__aeabi_dsub>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4680      	mov	r8, r0
 800b5d0:	4689      	mov	r9, r1
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	f7f4 fe77 	bl	80002c8 <__aeabi_dsub>
 800b5da:	4622      	mov	r2, r4
 800b5dc:	462b      	mov	r3, r5
 800b5de:	f7f4 fe73 	bl	80002c8 <__aeabi_dsub>
 800b5e2:	a343      	add	r3, pc, #268	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x318>)
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	ec51 0b18 	vmov	r0, r1, d8
 800b5f0:	f7f5 f822 	bl	8000638 <__aeabi_dmul>
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	462b      	mov	r3, r5
 800b5f8:	f7f4 fe66 	bl	80002c8 <__aeabi_dsub>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4604      	mov	r4, r0
 800b602:	460d      	mov	r5, r1
 800b604:	4640      	mov	r0, r8
 800b606:	4649      	mov	r1, r9
 800b608:	f7f4 fe5e 	bl	80002c8 <__aeabi_dsub>
 800b60c:	9a03      	ldr	r2, [sp, #12]
 800b60e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	2b31      	cmp	r3, #49	; 0x31
 800b616:	dc24      	bgt.n	800b662 <__ieee754_rem_pio2+0x28a>
 800b618:	e9ca 0100 	strd	r0, r1, [sl]
 800b61c:	4646      	mov	r6, r8
 800b61e:	464f      	mov	r7, r9
 800b620:	e9da 8900 	ldrd	r8, r9, [sl]
 800b624:	4630      	mov	r0, r6
 800b626:	4642      	mov	r2, r8
 800b628:	464b      	mov	r3, r9
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 fe4c 	bl	80002c8 <__aeabi_dsub>
 800b630:	462b      	mov	r3, r5
 800b632:	4622      	mov	r2, r4
 800b634:	f7f4 fe48 	bl	80002c8 <__aeabi_dsub>
 800b638:	9b02      	ldr	r3, [sp, #8]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b640:	f6bf af0a 	bge.w	800b458 <__ieee754_rem_pio2+0x80>
 800b644:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b648:	f8ca 3004 	str.w	r3, [sl, #4]
 800b64c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b650:	f8ca 8000 	str.w	r8, [sl]
 800b654:	f8ca 0008 	str.w	r0, [sl, #8]
 800b658:	f8ca 300c 	str.w	r3, [sl, #12]
 800b65c:	f1cb 0b00 	rsb	fp, fp, #0
 800b660:	e6fa      	b.n	800b458 <__ieee754_rem_pio2+0x80>
 800b662:	a327      	add	r3, pc, #156	; (adr r3, 800b700 <__ieee754_rem_pio2+0x328>)
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	ec51 0b18 	vmov	r0, r1, d8
 800b66c:	f7f4 ffe4 	bl	8000638 <__aeabi_dmul>
 800b670:	4604      	mov	r4, r0
 800b672:	460d      	mov	r5, r1
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4640      	mov	r0, r8
 800b67a:	4649      	mov	r1, r9
 800b67c:	f7f4 fe24 	bl	80002c8 <__aeabi_dsub>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4606      	mov	r6, r0
 800b686:	460f      	mov	r7, r1
 800b688:	4640      	mov	r0, r8
 800b68a:	4649      	mov	r1, r9
 800b68c:	f7f4 fe1c 	bl	80002c8 <__aeabi_dsub>
 800b690:	4622      	mov	r2, r4
 800b692:	462b      	mov	r3, r5
 800b694:	f7f4 fe18 	bl	80002c8 <__aeabi_dsub>
 800b698:	a31b      	add	r3, pc, #108	; (adr r3, 800b708 <__ieee754_rem_pio2+0x330>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	4604      	mov	r4, r0
 800b6a0:	460d      	mov	r5, r1
 800b6a2:	ec51 0b18 	vmov	r0, r1, d8
 800b6a6:	f7f4 ffc7 	bl	8000638 <__aeabi_dmul>
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	f7f4 fe0b 	bl	80002c8 <__aeabi_dsub>
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	e75f      	b.n	800b578 <__ieee754_rem_pio2+0x1a0>
 800b6b8:	4b1b      	ldr	r3, [pc, #108]	; (800b728 <__ieee754_rem_pio2+0x350>)
 800b6ba:	4598      	cmp	r8, r3
 800b6bc:	dd36      	ble.n	800b72c <__ieee754_rem_pio2+0x354>
 800b6be:	ee10 2a10 	vmov	r2, s0
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	f7f4 fdfe 	bl	80002c8 <__aeabi_dsub>
 800b6cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6d0:	e9ca 0100 	strd	r0, r1, [sl]
 800b6d4:	e694      	b.n	800b400 <__ieee754_rem_pio2+0x28>
 800b6d6:	bf00      	nop
 800b6d8:	54400000 	.word	0x54400000
 800b6dc:	3ff921fb 	.word	0x3ff921fb
 800b6e0:	1a626331 	.word	0x1a626331
 800b6e4:	3dd0b461 	.word	0x3dd0b461
 800b6e8:	1a600000 	.word	0x1a600000
 800b6ec:	3dd0b461 	.word	0x3dd0b461
 800b6f0:	2e037073 	.word	0x2e037073
 800b6f4:	3ba3198a 	.word	0x3ba3198a
 800b6f8:	6dc9c883 	.word	0x6dc9c883
 800b6fc:	3fe45f30 	.word	0x3fe45f30
 800b700:	2e000000 	.word	0x2e000000
 800b704:	3ba3198a 	.word	0x3ba3198a
 800b708:	252049c1 	.word	0x252049c1
 800b70c:	397b839a 	.word	0x397b839a
 800b710:	3fe921fb 	.word	0x3fe921fb
 800b714:	4002d97b 	.word	0x4002d97b
 800b718:	3ff921fb 	.word	0x3ff921fb
 800b71c:	413921fb 	.word	0x413921fb
 800b720:	3fe00000 	.word	0x3fe00000
 800b724:	0800c8b8 	.word	0x0800c8b8
 800b728:	7fefffff 	.word	0x7fefffff
 800b72c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b730:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b734:	ee10 0a10 	vmov	r0, s0
 800b738:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b73c:	ee10 6a10 	vmov	r6, s0
 800b740:	460f      	mov	r7, r1
 800b742:	f7f5 fa29 	bl	8000b98 <__aeabi_d2iz>
 800b746:	f7f4 ff0d 	bl	8000564 <__aeabi_i2d>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	4630      	mov	r0, r6
 800b750:	4639      	mov	r1, r7
 800b752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b756:	f7f4 fdb7 	bl	80002c8 <__aeabi_dsub>
 800b75a:	4b23      	ldr	r3, [pc, #140]	; (800b7e8 <__ieee754_rem_pio2+0x410>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	f7f4 ff6b 	bl	8000638 <__aeabi_dmul>
 800b762:	460f      	mov	r7, r1
 800b764:	4606      	mov	r6, r0
 800b766:	f7f5 fa17 	bl	8000b98 <__aeabi_d2iz>
 800b76a:	f7f4 fefb 	bl	8000564 <__aeabi_i2d>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4630      	mov	r0, r6
 800b774:	4639      	mov	r1, r7
 800b776:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b77a:	f7f4 fda5 	bl	80002c8 <__aeabi_dsub>
 800b77e:	4b1a      	ldr	r3, [pc, #104]	; (800b7e8 <__ieee754_rem_pio2+0x410>)
 800b780:	2200      	movs	r2, #0
 800b782:	f7f4 ff59 	bl	8000638 <__aeabi_dmul>
 800b786:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b78a:	ad04      	add	r5, sp, #16
 800b78c:	f04f 0803 	mov.w	r8, #3
 800b790:	46a9      	mov	r9, r5
 800b792:	2600      	movs	r6, #0
 800b794:	2700      	movs	r7, #0
 800b796:	4632      	mov	r2, r6
 800b798:	463b      	mov	r3, r7
 800b79a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b79e:	46c3      	mov	fp, r8
 800b7a0:	3d08      	subs	r5, #8
 800b7a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7a6:	f7f5 f9af 	bl	8000b08 <__aeabi_dcmpeq>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d1f3      	bne.n	800b796 <__ieee754_rem_pio2+0x3be>
 800b7ae:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <__ieee754_rem_pio2+0x414>)
 800b7b0:	9301      	str	r3, [sp, #4]
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	465b      	mov	r3, fp
 800b7ba:	4651      	mov	r1, sl
 800b7bc:	4648      	mov	r0, r9
 800b7be:	f000 f993 	bl	800bae8 <__kernel_rem_pio2>
 800b7c2:	9b02      	ldr	r3, [sp, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	4683      	mov	fp, r0
 800b7c8:	f6bf ae46 	bge.w	800b458 <__ieee754_rem_pio2+0x80>
 800b7cc:	e9da 2100 	ldrd	r2, r1, [sl]
 800b7d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7d4:	e9ca 2300 	strd	r2, r3, [sl]
 800b7d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b7dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b7e4:	e73a      	b.n	800b65c <__ieee754_rem_pio2+0x284>
 800b7e6:	bf00      	nop
 800b7e8:	41700000 	.word	0x41700000
 800b7ec:	0800c938 	.word	0x0800c938

0800b7f0 <__ieee754_sqrt>:
 800b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f4:	ec55 4b10 	vmov	r4, r5, d0
 800b7f8:	4e55      	ldr	r6, [pc, #340]	; (800b950 <__ieee754_sqrt+0x160>)
 800b7fa:	43ae      	bics	r6, r5
 800b7fc:	ee10 0a10 	vmov	r0, s0
 800b800:	ee10 3a10 	vmov	r3, s0
 800b804:	462a      	mov	r2, r5
 800b806:	4629      	mov	r1, r5
 800b808:	d110      	bne.n	800b82c <__ieee754_sqrt+0x3c>
 800b80a:	ee10 2a10 	vmov	r2, s0
 800b80e:	462b      	mov	r3, r5
 800b810:	f7f4 ff12 	bl	8000638 <__aeabi_dmul>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4620      	mov	r0, r4
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7f4 fd56 	bl	80002cc <__adddf3>
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	ec45 4b10 	vmov	d0, r4, r5
 800b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	dc10      	bgt.n	800b852 <__ieee754_sqrt+0x62>
 800b830:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b834:	4330      	orrs	r0, r6
 800b836:	d0f5      	beq.n	800b824 <__ieee754_sqrt+0x34>
 800b838:	b15d      	cbz	r5, 800b852 <__ieee754_sqrt+0x62>
 800b83a:	ee10 2a10 	vmov	r2, s0
 800b83e:	462b      	mov	r3, r5
 800b840:	ee10 0a10 	vmov	r0, s0
 800b844:	f7f4 fd40 	bl	80002c8 <__aeabi_dsub>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	f7f5 f81e 	bl	800088c <__aeabi_ddiv>
 800b850:	e7e6      	b.n	800b820 <__ieee754_sqrt+0x30>
 800b852:	1512      	asrs	r2, r2, #20
 800b854:	d074      	beq.n	800b940 <__ieee754_sqrt+0x150>
 800b856:	07d4      	lsls	r4, r2, #31
 800b858:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b85c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b864:	bf5e      	ittt	pl
 800b866:	0fda      	lsrpl	r2, r3, #31
 800b868:	005b      	lslpl	r3, r3, #1
 800b86a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b86e:	2400      	movs	r4, #0
 800b870:	0fda      	lsrs	r2, r3, #31
 800b872:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b876:	107f      	asrs	r7, r7, #1
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	2516      	movs	r5, #22
 800b87c:	4620      	mov	r0, r4
 800b87e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b882:	1886      	adds	r6, r0, r2
 800b884:	428e      	cmp	r6, r1
 800b886:	bfde      	ittt	le
 800b888:	1b89      	suble	r1, r1, r6
 800b88a:	18b0      	addle	r0, r6, r2
 800b88c:	18a4      	addle	r4, r4, r2
 800b88e:	0049      	lsls	r1, r1, #1
 800b890:	3d01      	subs	r5, #1
 800b892:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b896:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b89a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b89e:	d1f0      	bne.n	800b882 <__ieee754_sqrt+0x92>
 800b8a0:	462a      	mov	r2, r5
 800b8a2:	f04f 0e20 	mov.w	lr, #32
 800b8a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b8aa:	4281      	cmp	r1, r0
 800b8ac:	eb06 0c05 	add.w	ip, r6, r5
 800b8b0:	dc02      	bgt.n	800b8b8 <__ieee754_sqrt+0xc8>
 800b8b2:	d113      	bne.n	800b8dc <__ieee754_sqrt+0xec>
 800b8b4:	459c      	cmp	ip, r3
 800b8b6:	d811      	bhi.n	800b8dc <__ieee754_sqrt+0xec>
 800b8b8:	f1bc 0f00 	cmp.w	ip, #0
 800b8bc:	eb0c 0506 	add.w	r5, ip, r6
 800b8c0:	da43      	bge.n	800b94a <__ieee754_sqrt+0x15a>
 800b8c2:	2d00      	cmp	r5, #0
 800b8c4:	db41      	blt.n	800b94a <__ieee754_sqrt+0x15a>
 800b8c6:	f100 0801 	add.w	r8, r0, #1
 800b8ca:	1a09      	subs	r1, r1, r0
 800b8cc:	459c      	cmp	ip, r3
 800b8ce:	bf88      	it	hi
 800b8d0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b8d4:	eba3 030c 	sub.w	r3, r3, ip
 800b8d8:	4432      	add	r2, r6
 800b8da:	4640      	mov	r0, r8
 800b8dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b8e0:	f1be 0e01 	subs.w	lr, lr, #1
 800b8e4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b8e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b8ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b8f0:	d1db      	bne.n	800b8aa <__ieee754_sqrt+0xba>
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	d006      	beq.n	800b904 <__ieee754_sqrt+0x114>
 800b8f6:	1c50      	adds	r0, r2, #1
 800b8f8:	bf13      	iteet	ne
 800b8fa:	3201      	addne	r2, #1
 800b8fc:	3401      	addeq	r4, #1
 800b8fe:	4672      	moveq	r2, lr
 800b900:	f022 0201 	bicne.w	r2, r2, #1
 800b904:	1063      	asrs	r3, r4, #1
 800b906:	0852      	lsrs	r2, r2, #1
 800b908:	07e1      	lsls	r1, r4, #31
 800b90a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b90e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b912:	bf48      	it	mi
 800b914:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b918:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b91c:	4614      	mov	r4, r2
 800b91e:	e781      	b.n	800b824 <__ieee754_sqrt+0x34>
 800b920:	0ad9      	lsrs	r1, r3, #11
 800b922:	3815      	subs	r0, #21
 800b924:	055b      	lsls	r3, r3, #21
 800b926:	2900      	cmp	r1, #0
 800b928:	d0fa      	beq.n	800b920 <__ieee754_sqrt+0x130>
 800b92a:	02cd      	lsls	r5, r1, #11
 800b92c:	d50a      	bpl.n	800b944 <__ieee754_sqrt+0x154>
 800b92e:	f1c2 0420 	rsb	r4, r2, #32
 800b932:	fa23 f404 	lsr.w	r4, r3, r4
 800b936:	1e55      	subs	r5, r2, #1
 800b938:	4093      	lsls	r3, r2
 800b93a:	4321      	orrs	r1, r4
 800b93c:	1b42      	subs	r2, r0, r5
 800b93e:	e78a      	b.n	800b856 <__ieee754_sqrt+0x66>
 800b940:	4610      	mov	r0, r2
 800b942:	e7f0      	b.n	800b926 <__ieee754_sqrt+0x136>
 800b944:	0049      	lsls	r1, r1, #1
 800b946:	3201      	adds	r2, #1
 800b948:	e7ef      	b.n	800b92a <__ieee754_sqrt+0x13a>
 800b94a:	4680      	mov	r8, r0
 800b94c:	e7bd      	b.n	800b8ca <__ieee754_sqrt+0xda>
 800b94e:	bf00      	nop
 800b950:	7ff00000 	.word	0x7ff00000
 800b954:	00000000 	.word	0x00000000

0800b958 <__kernel_cos>:
 800b958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	ec57 6b10 	vmov	r6, r7, d0
 800b960:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b964:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b968:	ed8d 1b00 	vstr	d1, [sp]
 800b96c:	da07      	bge.n	800b97e <__kernel_cos+0x26>
 800b96e:	ee10 0a10 	vmov	r0, s0
 800b972:	4639      	mov	r1, r7
 800b974:	f7f5 f910 	bl	8000b98 <__aeabi_d2iz>
 800b978:	2800      	cmp	r0, #0
 800b97a:	f000 8088 	beq.w	800ba8e <__kernel_cos+0x136>
 800b97e:	4632      	mov	r2, r6
 800b980:	463b      	mov	r3, r7
 800b982:	4630      	mov	r0, r6
 800b984:	4639      	mov	r1, r7
 800b986:	f7f4 fe57 	bl	8000638 <__aeabi_dmul>
 800b98a:	4b51      	ldr	r3, [pc, #324]	; (800bad0 <__kernel_cos+0x178>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	4604      	mov	r4, r0
 800b990:	460d      	mov	r5, r1
 800b992:	f7f4 fe51 	bl	8000638 <__aeabi_dmul>
 800b996:	a340      	add	r3, pc, #256	; (adr r3, 800ba98 <__kernel_cos+0x140>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	4682      	mov	sl, r0
 800b99e:	468b      	mov	fp, r1
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	f7f4 fe48 	bl	8000638 <__aeabi_dmul>
 800b9a8:	a33d      	add	r3, pc, #244	; (adr r3, 800baa0 <__kernel_cos+0x148>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fc8d 	bl	80002cc <__adddf3>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	f7f4 fe3f 	bl	8000638 <__aeabi_dmul>
 800b9ba:	a33b      	add	r3, pc, #236	; (adr r3, 800baa8 <__kernel_cos+0x150>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fc82 	bl	80002c8 <__aeabi_dsub>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	f7f4 fe36 	bl	8000638 <__aeabi_dmul>
 800b9cc:	a338      	add	r3, pc, #224	; (adr r3, 800bab0 <__kernel_cos+0x158>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f7f4 fc7b 	bl	80002cc <__adddf3>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	462b      	mov	r3, r5
 800b9da:	f7f4 fe2d 	bl	8000638 <__aeabi_dmul>
 800b9de:	a336      	add	r3, pc, #216	; (adr r3, 800bab8 <__kernel_cos+0x160>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f7f4 fc70 	bl	80002c8 <__aeabi_dsub>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	462b      	mov	r3, r5
 800b9ec:	f7f4 fe24 	bl	8000638 <__aeabi_dmul>
 800b9f0:	a333      	add	r3, pc, #204	; (adr r3, 800bac0 <__kernel_cos+0x168>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	f7f4 fc69 	bl	80002cc <__adddf3>
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	462b      	mov	r3, r5
 800b9fe:	f7f4 fe1b 	bl	8000638 <__aeabi_dmul>
 800ba02:	4622      	mov	r2, r4
 800ba04:	462b      	mov	r3, r5
 800ba06:	f7f4 fe17 	bl	8000638 <__aeabi_dmul>
 800ba0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0e:	4604      	mov	r4, r0
 800ba10:	460d      	mov	r5, r1
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f4 fe0f 	bl	8000638 <__aeabi_dmul>
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	4629      	mov	r1, r5
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7f4 fc51 	bl	80002c8 <__aeabi_dsub>
 800ba26:	4b2b      	ldr	r3, [pc, #172]	; (800bad4 <__kernel_cos+0x17c>)
 800ba28:	4598      	cmp	r8, r3
 800ba2a:	4606      	mov	r6, r0
 800ba2c:	460f      	mov	r7, r1
 800ba2e:	dc10      	bgt.n	800ba52 <__kernel_cos+0xfa>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4650      	mov	r0, sl
 800ba36:	4659      	mov	r1, fp
 800ba38:	f7f4 fc46 	bl	80002c8 <__aeabi_dsub>
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4926      	ldr	r1, [pc, #152]	; (800bad8 <__kernel_cos+0x180>)
 800ba40:	4602      	mov	r2, r0
 800ba42:	2000      	movs	r0, #0
 800ba44:	f7f4 fc40 	bl	80002c8 <__aeabi_dsub>
 800ba48:	ec41 0b10 	vmov	d0, r0, r1
 800ba4c:	b003      	add	sp, #12
 800ba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba52:	4b22      	ldr	r3, [pc, #136]	; (800badc <__kernel_cos+0x184>)
 800ba54:	4920      	ldr	r1, [pc, #128]	; (800bad8 <__kernel_cos+0x180>)
 800ba56:	4598      	cmp	r8, r3
 800ba58:	bfcc      	ite	gt
 800ba5a:	4d21      	ldrgt	r5, [pc, #132]	; (800bae0 <__kernel_cos+0x188>)
 800ba5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ba60:	2400      	movs	r4, #0
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	2000      	movs	r0, #0
 800ba68:	f7f4 fc2e 	bl	80002c8 <__aeabi_dsub>
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	4680      	mov	r8, r0
 800ba70:	4689      	mov	r9, r1
 800ba72:	462b      	mov	r3, r5
 800ba74:	4650      	mov	r0, sl
 800ba76:	4659      	mov	r1, fp
 800ba78:	f7f4 fc26 	bl	80002c8 <__aeabi_dsub>
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	463b      	mov	r3, r7
 800ba80:	f7f4 fc22 	bl	80002c8 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4640      	mov	r0, r8
 800ba8a:	4649      	mov	r1, r9
 800ba8c:	e7da      	b.n	800ba44 <__kernel_cos+0xec>
 800ba8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bac8 <__kernel_cos+0x170>
 800ba92:	e7db      	b.n	800ba4c <__kernel_cos+0xf4>
 800ba94:	f3af 8000 	nop.w
 800ba98:	be8838d4 	.word	0xbe8838d4
 800ba9c:	bda8fae9 	.word	0xbda8fae9
 800baa0:	bdb4b1c4 	.word	0xbdb4b1c4
 800baa4:	3e21ee9e 	.word	0x3e21ee9e
 800baa8:	809c52ad 	.word	0x809c52ad
 800baac:	3e927e4f 	.word	0x3e927e4f
 800bab0:	19cb1590 	.word	0x19cb1590
 800bab4:	3efa01a0 	.word	0x3efa01a0
 800bab8:	16c15177 	.word	0x16c15177
 800babc:	3f56c16c 	.word	0x3f56c16c
 800bac0:	5555554c 	.word	0x5555554c
 800bac4:	3fa55555 	.word	0x3fa55555
 800bac8:	00000000 	.word	0x00000000
 800bacc:	3ff00000 	.word	0x3ff00000
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	3fd33332 	.word	0x3fd33332
 800bad8:	3ff00000 	.word	0x3ff00000
 800badc:	3fe90000 	.word	0x3fe90000
 800bae0:	3fd20000 	.word	0x3fd20000
 800bae4:	00000000 	.word	0x00000000

0800bae8 <__kernel_rem_pio2>:
 800bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	ed2d 8b02 	vpush	{d8}
 800baf0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800baf4:	f112 0f14 	cmn.w	r2, #20
 800baf8:	9308      	str	r3, [sp, #32]
 800bafa:	9101      	str	r1, [sp, #4]
 800bafc:	4bc4      	ldr	r3, [pc, #784]	; (800be10 <__kernel_rem_pio2+0x328>)
 800bafe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bb00:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	9b08      	ldr	r3, [sp, #32]
 800bb0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb0e:	bfa8      	it	ge
 800bb10:	1ed4      	subge	r4, r2, #3
 800bb12:	9306      	str	r3, [sp, #24]
 800bb14:	bfb2      	itee	lt
 800bb16:	2400      	movlt	r4, #0
 800bb18:	2318      	movge	r3, #24
 800bb1a:	fb94 f4f3 	sdivge	r4, r4, r3
 800bb1e:	f06f 0317 	mvn.w	r3, #23
 800bb22:	fb04 3303 	mla	r3, r4, r3, r3
 800bb26:	eb03 0a02 	add.w	sl, r3, r2
 800bb2a:	9b02      	ldr	r3, [sp, #8]
 800bb2c:	9a06      	ldr	r2, [sp, #24]
 800bb2e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800be00 <__kernel_rem_pio2+0x318>
 800bb32:	eb03 0802 	add.w	r8, r3, r2
 800bb36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bb38:	1aa7      	subs	r7, r4, r2
 800bb3a:	ae22      	add	r6, sp, #136	; 0x88
 800bb3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bb40:	2500      	movs	r5, #0
 800bb42:	4545      	cmp	r5, r8
 800bb44:	dd13      	ble.n	800bb6e <__kernel_rem_pio2+0x86>
 800bb46:	9b08      	ldr	r3, [sp, #32]
 800bb48:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800be00 <__kernel_rem_pio2+0x318>
 800bb4c:	aa22      	add	r2, sp, #136	; 0x88
 800bb4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bb52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bb56:	f04f 0800 	mov.w	r8, #0
 800bb5a:	9b02      	ldr	r3, [sp, #8]
 800bb5c:	4598      	cmp	r8, r3
 800bb5e:	dc2f      	bgt.n	800bbc0 <__kernel_rem_pio2+0xd8>
 800bb60:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bb64:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bb68:	462f      	mov	r7, r5
 800bb6a:	2600      	movs	r6, #0
 800bb6c:	e01b      	b.n	800bba6 <__kernel_rem_pio2+0xbe>
 800bb6e:	42ef      	cmn	r7, r5
 800bb70:	d407      	bmi.n	800bb82 <__kernel_rem_pio2+0x9a>
 800bb72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bb76:	f7f4 fcf5 	bl	8000564 <__aeabi_i2d>
 800bb7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bb7e:	3501      	adds	r5, #1
 800bb80:	e7df      	b.n	800bb42 <__kernel_rem_pio2+0x5a>
 800bb82:	ec51 0b18 	vmov	r0, r1, d8
 800bb86:	e7f8      	b.n	800bb7a <__kernel_rem_pio2+0x92>
 800bb88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bb90:	f7f4 fd52 	bl	8000638 <__aeabi_dmul>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb9c:	f7f4 fb96 	bl	80002cc <__adddf3>
 800bba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bba4:	3601      	adds	r6, #1
 800bba6:	9b06      	ldr	r3, [sp, #24]
 800bba8:	429e      	cmp	r6, r3
 800bbaa:	f1a7 0708 	sub.w	r7, r7, #8
 800bbae:	ddeb      	ble.n	800bb88 <__kernel_rem_pio2+0xa0>
 800bbb0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bbb4:	f108 0801 	add.w	r8, r8, #1
 800bbb8:	ecab 7b02 	vstmia	fp!, {d7}
 800bbbc:	3508      	adds	r5, #8
 800bbbe:	e7cc      	b.n	800bb5a <__kernel_rem_pio2+0x72>
 800bbc0:	9b02      	ldr	r3, [sp, #8]
 800bbc2:	aa0e      	add	r2, sp, #56	; 0x38
 800bbc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbc8:	930d      	str	r3, [sp, #52]	; 0x34
 800bbca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bbcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bbd0:	9c02      	ldr	r4, [sp, #8]
 800bbd2:	930c      	str	r3, [sp, #48]	; 0x30
 800bbd4:	00e3      	lsls	r3, r4, #3
 800bbd6:	930a      	str	r3, [sp, #40]	; 0x28
 800bbd8:	ab9a      	add	r3, sp, #616	; 0x268
 800bbda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbde:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bbe2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bbe6:	ab72      	add	r3, sp, #456	; 0x1c8
 800bbe8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bbec:	46c3      	mov	fp, r8
 800bbee:	46a1      	mov	r9, r4
 800bbf0:	f1b9 0f00 	cmp.w	r9, #0
 800bbf4:	f1a5 0508 	sub.w	r5, r5, #8
 800bbf8:	dc77      	bgt.n	800bcea <__kernel_rem_pio2+0x202>
 800bbfa:	ec47 6b10 	vmov	d0, r6, r7
 800bbfe:	4650      	mov	r0, sl
 800bc00:	f000 fc46 	bl	800c490 <scalbn>
 800bc04:	ec57 6b10 	vmov	r6, r7, d0
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bc0e:	ee10 0a10 	vmov	r0, s0
 800bc12:	4639      	mov	r1, r7
 800bc14:	f7f4 fd10 	bl	8000638 <__aeabi_dmul>
 800bc18:	ec41 0b10 	vmov	d0, r0, r1
 800bc1c:	f000 fbb8 	bl	800c390 <floor>
 800bc20:	4b7c      	ldr	r3, [pc, #496]	; (800be14 <__kernel_rem_pio2+0x32c>)
 800bc22:	ec51 0b10 	vmov	r0, r1, d0
 800bc26:	2200      	movs	r2, #0
 800bc28:	f7f4 fd06 	bl	8000638 <__aeabi_dmul>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4630      	mov	r0, r6
 800bc32:	4639      	mov	r1, r7
 800bc34:	f7f4 fb48 	bl	80002c8 <__aeabi_dsub>
 800bc38:	460f      	mov	r7, r1
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	f7f4 ffac 	bl	8000b98 <__aeabi_d2iz>
 800bc40:	9004      	str	r0, [sp, #16]
 800bc42:	f7f4 fc8f 	bl	8000564 <__aeabi_i2d>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	f7f4 fb3b 	bl	80002c8 <__aeabi_dsub>
 800bc52:	f1ba 0f00 	cmp.w	sl, #0
 800bc56:	4606      	mov	r6, r0
 800bc58:	460f      	mov	r7, r1
 800bc5a:	dd6d      	ble.n	800bd38 <__kernel_rem_pio2+0x250>
 800bc5c:	1e62      	subs	r2, r4, #1
 800bc5e:	ab0e      	add	r3, sp, #56	; 0x38
 800bc60:	9d04      	ldr	r5, [sp, #16]
 800bc62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc66:	f1ca 0118 	rsb	r1, sl, #24
 800bc6a:	fa40 f301 	asr.w	r3, r0, r1
 800bc6e:	441d      	add	r5, r3
 800bc70:	408b      	lsls	r3, r1
 800bc72:	1ac0      	subs	r0, r0, r3
 800bc74:	ab0e      	add	r3, sp, #56	; 0x38
 800bc76:	9504      	str	r5, [sp, #16]
 800bc78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bc7c:	f1ca 0317 	rsb	r3, sl, #23
 800bc80:	fa40 fb03 	asr.w	fp, r0, r3
 800bc84:	f1bb 0f00 	cmp.w	fp, #0
 800bc88:	dd65      	ble.n	800bd56 <__kernel_rem_pio2+0x26e>
 800bc8a:	9b04      	ldr	r3, [sp, #16]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	3301      	adds	r3, #1
 800bc90:	9304      	str	r3, [sp, #16]
 800bc92:	4615      	mov	r5, r2
 800bc94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bc98:	4294      	cmp	r4, r2
 800bc9a:	f300 809c 	bgt.w	800bdd6 <__kernel_rem_pio2+0x2ee>
 800bc9e:	f1ba 0f00 	cmp.w	sl, #0
 800bca2:	dd07      	ble.n	800bcb4 <__kernel_rem_pio2+0x1cc>
 800bca4:	f1ba 0f01 	cmp.w	sl, #1
 800bca8:	f000 80c0 	beq.w	800be2c <__kernel_rem_pio2+0x344>
 800bcac:	f1ba 0f02 	cmp.w	sl, #2
 800bcb0:	f000 80c6 	beq.w	800be40 <__kernel_rem_pio2+0x358>
 800bcb4:	f1bb 0f02 	cmp.w	fp, #2
 800bcb8:	d14d      	bne.n	800bd56 <__kernel_rem_pio2+0x26e>
 800bcba:	4632      	mov	r2, r6
 800bcbc:	463b      	mov	r3, r7
 800bcbe:	4956      	ldr	r1, [pc, #344]	; (800be18 <__kernel_rem_pio2+0x330>)
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	f7f4 fb01 	bl	80002c8 <__aeabi_dsub>
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	460f      	mov	r7, r1
 800bcca:	2d00      	cmp	r5, #0
 800bccc:	d043      	beq.n	800bd56 <__kernel_rem_pio2+0x26e>
 800bcce:	4650      	mov	r0, sl
 800bcd0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800be08 <__kernel_rem_pio2+0x320>
 800bcd4:	f000 fbdc 	bl	800c490 <scalbn>
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	ec53 2b10 	vmov	r2, r3, d0
 800bce0:	f7f4 faf2 	bl	80002c8 <__aeabi_dsub>
 800bce4:	4606      	mov	r6, r0
 800bce6:	460f      	mov	r7, r1
 800bce8:	e035      	b.n	800bd56 <__kernel_rem_pio2+0x26e>
 800bcea:	4b4c      	ldr	r3, [pc, #304]	; (800be1c <__kernel_rem_pio2+0x334>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	4630      	mov	r0, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	f7f4 fca1 	bl	8000638 <__aeabi_dmul>
 800bcf6:	f7f4 ff4f 	bl	8000b98 <__aeabi_d2iz>
 800bcfa:	f7f4 fc33 	bl	8000564 <__aeabi_i2d>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	ec43 2b18 	vmov	d8, r2, r3
 800bd06:	4b46      	ldr	r3, [pc, #280]	; (800be20 <__kernel_rem_pio2+0x338>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f7f4 fc95 	bl	8000638 <__aeabi_dmul>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4630      	mov	r0, r6
 800bd14:	4639      	mov	r1, r7
 800bd16:	f7f4 fad7 	bl	80002c8 <__aeabi_dsub>
 800bd1a:	f7f4 ff3d 	bl	8000b98 <__aeabi_d2iz>
 800bd1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd22:	f84b 0b04 	str.w	r0, [fp], #4
 800bd26:	ec51 0b18 	vmov	r0, r1, d8
 800bd2a:	f7f4 facf 	bl	80002cc <__adddf3>
 800bd2e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd32:	4606      	mov	r6, r0
 800bd34:	460f      	mov	r7, r1
 800bd36:	e75b      	b.n	800bbf0 <__kernel_rem_pio2+0x108>
 800bd38:	d106      	bne.n	800bd48 <__kernel_rem_pio2+0x260>
 800bd3a:	1e63      	subs	r3, r4, #1
 800bd3c:	aa0e      	add	r2, sp, #56	; 0x38
 800bd3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bd42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bd46:	e79d      	b.n	800bc84 <__kernel_rem_pio2+0x19c>
 800bd48:	4b36      	ldr	r3, [pc, #216]	; (800be24 <__kernel_rem_pio2+0x33c>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f7f4 fefa 	bl	8000b44 <__aeabi_dcmpge>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d13d      	bne.n	800bdd0 <__kernel_rem_pio2+0x2e8>
 800bd54:	4683      	mov	fp, r0
 800bd56:	2200      	movs	r2, #0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	f7f4 fed3 	bl	8000b08 <__aeabi_dcmpeq>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	f000 80c0 	beq.w	800bee8 <__kernel_rem_pio2+0x400>
 800bd68:	1e65      	subs	r5, r4, #1
 800bd6a:	462b      	mov	r3, r5
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	9902      	ldr	r1, [sp, #8]
 800bd70:	428b      	cmp	r3, r1
 800bd72:	da6c      	bge.n	800be4e <__kernel_rem_pio2+0x366>
 800bd74:	2a00      	cmp	r2, #0
 800bd76:	f000 8089 	beq.w	800be8c <__kernel_rem_pio2+0x3a4>
 800bd7a:	ab0e      	add	r3, sp, #56	; 0x38
 800bd7c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bd80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 80ad 	beq.w	800bee4 <__kernel_rem_pio2+0x3fc>
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800be08 <__kernel_rem_pio2+0x320>
 800bd90:	f000 fb7e 	bl	800c490 <scalbn>
 800bd94:	ab9a      	add	r3, sp, #616	; 0x268
 800bd96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bd9a:	ec57 6b10 	vmov	r6, r7, d0
 800bd9e:	00ec      	lsls	r4, r5, #3
 800bda0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bda4:	46aa      	mov	sl, r5
 800bda6:	f1ba 0f00 	cmp.w	sl, #0
 800bdaa:	f280 80d6 	bge.w	800bf5a <__kernel_rem_pio2+0x472>
 800bdae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800be00 <__kernel_rem_pio2+0x318>
 800bdb2:	462e      	mov	r6, r5
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	f2c0 8104 	blt.w	800bfc2 <__kernel_rem_pio2+0x4da>
 800bdba:	ab72      	add	r3, sp, #456	; 0x1c8
 800bdbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bdc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800be28 <__kernel_rem_pio2+0x340>
 800bdc4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bdc8:	f04f 0800 	mov.w	r8, #0
 800bdcc:	1baf      	subs	r7, r5, r6
 800bdce:	e0ea      	b.n	800bfa6 <__kernel_rem_pio2+0x4be>
 800bdd0:	f04f 0b02 	mov.w	fp, #2
 800bdd4:	e759      	b.n	800bc8a <__kernel_rem_pio2+0x1a2>
 800bdd6:	f8d8 3000 	ldr.w	r3, [r8]
 800bdda:	b955      	cbnz	r5, 800bdf2 <__kernel_rem_pio2+0x30a>
 800bddc:	b123      	cbz	r3, 800bde8 <__kernel_rem_pio2+0x300>
 800bdde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bde2:	f8c8 3000 	str.w	r3, [r8]
 800bde6:	2301      	movs	r3, #1
 800bde8:	3201      	adds	r2, #1
 800bdea:	f108 0804 	add.w	r8, r8, #4
 800bdee:	461d      	mov	r5, r3
 800bdf0:	e752      	b.n	800bc98 <__kernel_rem_pio2+0x1b0>
 800bdf2:	1acb      	subs	r3, r1, r3
 800bdf4:	f8c8 3000 	str.w	r3, [r8]
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	e7f5      	b.n	800bde8 <__kernel_rem_pio2+0x300>
 800bdfc:	f3af 8000 	nop.w
	...
 800be0c:	3ff00000 	.word	0x3ff00000
 800be10:	0800ca80 	.word	0x0800ca80
 800be14:	40200000 	.word	0x40200000
 800be18:	3ff00000 	.word	0x3ff00000
 800be1c:	3e700000 	.word	0x3e700000
 800be20:	41700000 	.word	0x41700000
 800be24:	3fe00000 	.word	0x3fe00000
 800be28:	0800ca40 	.word	0x0800ca40
 800be2c:	1e62      	subs	r2, r4, #1
 800be2e:	ab0e      	add	r3, sp, #56	; 0x38
 800be30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800be38:	a90e      	add	r1, sp, #56	; 0x38
 800be3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800be3e:	e739      	b.n	800bcb4 <__kernel_rem_pio2+0x1cc>
 800be40:	1e62      	subs	r2, r4, #1
 800be42:	ab0e      	add	r3, sp, #56	; 0x38
 800be44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800be4c:	e7f4      	b.n	800be38 <__kernel_rem_pio2+0x350>
 800be4e:	a90e      	add	r1, sp, #56	; 0x38
 800be50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800be54:	3b01      	subs	r3, #1
 800be56:	430a      	orrs	r2, r1
 800be58:	e789      	b.n	800bd6e <__kernel_rem_pio2+0x286>
 800be5a:	3301      	adds	r3, #1
 800be5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800be60:	2900      	cmp	r1, #0
 800be62:	d0fa      	beq.n	800be5a <__kernel_rem_pio2+0x372>
 800be64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800be6a:	446a      	add	r2, sp
 800be6c:	3a98      	subs	r2, #152	; 0x98
 800be6e:	920a      	str	r2, [sp, #40]	; 0x28
 800be70:	9a08      	ldr	r2, [sp, #32]
 800be72:	18e3      	adds	r3, r4, r3
 800be74:	18a5      	adds	r5, r4, r2
 800be76:	aa22      	add	r2, sp, #136	; 0x88
 800be78:	f104 0801 	add.w	r8, r4, #1
 800be7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800be80:	9304      	str	r3, [sp, #16]
 800be82:	9b04      	ldr	r3, [sp, #16]
 800be84:	4543      	cmp	r3, r8
 800be86:	da04      	bge.n	800be92 <__kernel_rem_pio2+0x3aa>
 800be88:	461c      	mov	r4, r3
 800be8a:	e6a3      	b.n	800bbd4 <__kernel_rem_pio2+0xec>
 800be8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be8e:	2301      	movs	r3, #1
 800be90:	e7e4      	b.n	800be5c <__kernel_rem_pio2+0x374>
 800be92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800be98:	f7f4 fb64 	bl	8000564 <__aeabi_i2d>
 800be9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea2:	46ab      	mov	fp, r5
 800bea4:	461c      	mov	r4, r3
 800bea6:	f04f 0900 	mov.w	r9, #0
 800beaa:	2600      	movs	r6, #0
 800beac:	2700      	movs	r7, #0
 800beae:	9b06      	ldr	r3, [sp, #24]
 800beb0:	4599      	cmp	r9, r3
 800beb2:	dd06      	ble.n	800bec2 <__kernel_rem_pio2+0x3da>
 800beb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beb6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800beba:	f108 0801 	add.w	r8, r8, #1
 800bebe:	930a      	str	r3, [sp, #40]	; 0x28
 800bec0:	e7df      	b.n	800be82 <__kernel_rem_pio2+0x39a>
 800bec2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bec6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800beca:	f7f4 fbb5 	bl	8000638 <__aeabi_dmul>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4630      	mov	r0, r6
 800bed4:	4639      	mov	r1, r7
 800bed6:	f7f4 f9f9 	bl	80002cc <__adddf3>
 800beda:	f109 0901 	add.w	r9, r9, #1
 800bede:	4606      	mov	r6, r0
 800bee0:	460f      	mov	r7, r1
 800bee2:	e7e4      	b.n	800beae <__kernel_rem_pio2+0x3c6>
 800bee4:	3d01      	subs	r5, #1
 800bee6:	e748      	b.n	800bd7a <__kernel_rem_pio2+0x292>
 800bee8:	ec47 6b10 	vmov	d0, r6, r7
 800beec:	f1ca 0000 	rsb	r0, sl, #0
 800bef0:	f000 face 	bl	800c490 <scalbn>
 800bef4:	ec57 6b10 	vmov	r6, r7, d0
 800bef8:	4ba0      	ldr	r3, [pc, #640]	; (800c17c <__kernel_rem_pio2+0x694>)
 800befa:	ee10 0a10 	vmov	r0, s0
 800befe:	2200      	movs	r2, #0
 800bf00:	4639      	mov	r1, r7
 800bf02:	f7f4 fe1f 	bl	8000b44 <__aeabi_dcmpge>
 800bf06:	b1f8      	cbz	r0, 800bf48 <__kernel_rem_pio2+0x460>
 800bf08:	4b9d      	ldr	r3, [pc, #628]	; (800c180 <__kernel_rem_pio2+0x698>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	4639      	mov	r1, r7
 800bf10:	f7f4 fb92 	bl	8000638 <__aeabi_dmul>
 800bf14:	f7f4 fe40 	bl	8000b98 <__aeabi_d2iz>
 800bf18:	4680      	mov	r8, r0
 800bf1a:	f7f4 fb23 	bl	8000564 <__aeabi_i2d>
 800bf1e:	4b97      	ldr	r3, [pc, #604]	; (800c17c <__kernel_rem_pio2+0x694>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	f7f4 fb89 	bl	8000638 <__aeabi_dmul>
 800bf26:	460b      	mov	r3, r1
 800bf28:	4602      	mov	r2, r0
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f7f4 f9cb 	bl	80002c8 <__aeabi_dsub>
 800bf32:	f7f4 fe31 	bl	8000b98 <__aeabi_d2iz>
 800bf36:	1c65      	adds	r5, r4, #1
 800bf38:	ab0e      	add	r3, sp, #56	; 0x38
 800bf3a:	f10a 0a18 	add.w	sl, sl, #24
 800bf3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bf42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bf46:	e720      	b.n	800bd8a <__kernel_rem_pio2+0x2a2>
 800bf48:	4630      	mov	r0, r6
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 fe24 	bl	8000b98 <__aeabi_d2iz>
 800bf50:	ab0e      	add	r3, sp, #56	; 0x38
 800bf52:	4625      	mov	r5, r4
 800bf54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bf58:	e717      	b.n	800bd8a <__kernel_rem_pio2+0x2a2>
 800bf5a:	ab0e      	add	r3, sp, #56	; 0x38
 800bf5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bf60:	f7f4 fb00 	bl	8000564 <__aeabi_i2d>
 800bf64:	4632      	mov	r2, r6
 800bf66:	463b      	mov	r3, r7
 800bf68:	f7f4 fb66 	bl	8000638 <__aeabi_dmul>
 800bf6c:	4b84      	ldr	r3, [pc, #528]	; (800c180 <__kernel_rem_pio2+0x698>)
 800bf6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bf72:	2200      	movs	r2, #0
 800bf74:	4630      	mov	r0, r6
 800bf76:	4639      	mov	r1, r7
 800bf78:	f7f4 fb5e 	bl	8000638 <__aeabi_dmul>
 800bf7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf80:	4606      	mov	r6, r0
 800bf82:	460f      	mov	r7, r1
 800bf84:	e70f      	b.n	800bda6 <__kernel_rem_pio2+0x2be>
 800bf86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bf8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bf8e:	f7f4 fb53 	bl	8000638 <__aeabi_dmul>
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf9a:	f7f4 f997 	bl	80002cc <__adddf3>
 800bf9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bfa2:	f108 0801 	add.w	r8, r8, #1
 800bfa6:	9b02      	ldr	r3, [sp, #8]
 800bfa8:	4598      	cmp	r8, r3
 800bfaa:	dc01      	bgt.n	800bfb0 <__kernel_rem_pio2+0x4c8>
 800bfac:	45b8      	cmp	r8, r7
 800bfae:	ddea      	ble.n	800bf86 <__kernel_rem_pio2+0x49e>
 800bfb0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bfb4:	ab4a      	add	r3, sp, #296	; 0x128
 800bfb6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bfba:	ed87 7b00 	vstr	d7, [r7]
 800bfbe:	3e01      	subs	r6, #1
 800bfc0:	e6f8      	b.n	800bdb4 <__kernel_rem_pio2+0x2cc>
 800bfc2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	dc0b      	bgt.n	800bfe0 <__kernel_rem_pio2+0x4f8>
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dc35      	bgt.n	800c038 <__kernel_rem_pio2+0x550>
 800bfcc:	d059      	beq.n	800c082 <__kernel_rem_pio2+0x59a>
 800bfce:	9b04      	ldr	r3, [sp, #16]
 800bfd0:	f003 0007 	and.w	r0, r3, #7
 800bfd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bfd8:	ecbd 8b02 	vpop	{d8}
 800bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bfe2:	2b03      	cmp	r3, #3
 800bfe4:	d1f3      	bne.n	800bfce <__kernel_rem_pio2+0x4e6>
 800bfe6:	ab4a      	add	r3, sp, #296	; 0x128
 800bfe8:	4423      	add	r3, r4
 800bfea:	9306      	str	r3, [sp, #24]
 800bfec:	461c      	mov	r4, r3
 800bfee:	469a      	mov	sl, r3
 800bff0:	9502      	str	r5, [sp, #8]
 800bff2:	9b02      	ldr	r3, [sp, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f1aa 0a08 	sub.w	sl, sl, #8
 800bffa:	dc6b      	bgt.n	800c0d4 <__kernel_rem_pio2+0x5ec>
 800bffc:	46aa      	mov	sl, r5
 800bffe:	f1ba 0f01 	cmp.w	sl, #1
 800c002:	f1a4 0408 	sub.w	r4, r4, #8
 800c006:	f300 8085 	bgt.w	800c114 <__kernel_rem_pio2+0x62c>
 800c00a:	9c06      	ldr	r4, [sp, #24]
 800c00c:	2000      	movs	r0, #0
 800c00e:	3408      	adds	r4, #8
 800c010:	2100      	movs	r1, #0
 800c012:	2d01      	cmp	r5, #1
 800c014:	f300 809d 	bgt.w	800c152 <__kernel_rem_pio2+0x66a>
 800c018:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c01c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c020:	f1bb 0f00 	cmp.w	fp, #0
 800c024:	f040 809b 	bne.w	800c15e <__kernel_rem_pio2+0x676>
 800c028:	9b01      	ldr	r3, [sp, #4]
 800c02a:	e9c3 5600 	strd	r5, r6, [r3]
 800c02e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c032:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c036:	e7ca      	b.n	800bfce <__kernel_rem_pio2+0x4e6>
 800c038:	3408      	adds	r4, #8
 800c03a:	ab4a      	add	r3, sp, #296	; 0x128
 800c03c:	441c      	add	r4, r3
 800c03e:	462e      	mov	r6, r5
 800c040:	2000      	movs	r0, #0
 800c042:	2100      	movs	r1, #0
 800c044:	2e00      	cmp	r6, #0
 800c046:	da36      	bge.n	800c0b6 <__kernel_rem_pio2+0x5ce>
 800c048:	f1bb 0f00 	cmp.w	fp, #0
 800c04c:	d039      	beq.n	800c0c2 <__kernel_rem_pio2+0x5da>
 800c04e:	4602      	mov	r2, r0
 800c050:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c054:	9c01      	ldr	r4, [sp, #4]
 800c056:	e9c4 2300 	strd	r2, r3, [r4]
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c062:	f7f4 f931 	bl	80002c8 <__aeabi_dsub>
 800c066:	ae4c      	add	r6, sp, #304	; 0x130
 800c068:	2401      	movs	r4, #1
 800c06a:	42a5      	cmp	r5, r4
 800c06c:	da2c      	bge.n	800c0c8 <__kernel_rem_pio2+0x5e0>
 800c06e:	f1bb 0f00 	cmp.w	fp, #0
 800c072:	d002      	beq.n	800c07a <__kernel_rem_pio2+0x592>
 800c074:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c078:	4619      	mov	r1, r3
 800c07a:	9b01      	ldr	r3, [sp, #4]
 800c07c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c080:	e7a5      	b.n	800bfce <__kernel_rem_pio2+0x4e6>
 800c082:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c086:	eb0d 0403 	add.w	r4, sp, r3
 800c08a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c08e:	2000      	movs	r0, #0
 800c090:	2100      	movs	r1, #0
 800c092:	2d00      	cmp	r5, #0
 800c094:	da09      	bge.n	800c0aa <__kernel_rem_pio2+0x5c2>
 800c096:	f1bb 0f00 	cmp.w	fp, #0
 800c09a:	d002      	beq.n	800c0a2 <__kernel_rem_pio2+0x5ba>
 800c09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	e9c3 0100 	strd	r0, r1, [r3]
 800c0a8:	e791      	b.n	800bfce <__kernel_rem_pio2+0x4e6>
 800c0aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0ae:	f7f4 f90d 	bl	80002cc <__adddf3>
 800c0b2:	3d01      	subs	r5, #1
 800c0b4:	e7ed      	b.n	800c092 <__kernel_rem_pio2+0x5aa>
 800c0b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0ba:	f7f4 f907 	bl	80002cc <__adddf3>
 800c0be:	3e01      	subs	r6, #1
 800c0c0:	e7c0      	b.n	800c044 <__kernel_rem_pio2+0x55c>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	e7c5      	b.n	800c054 <__kernel_rem_pio2+0x56c>
 800c0c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c0cc:	f7f4 f8fe 	bl	80002cc <__adddf3>
 800c0d0:	3401      	adds	r4, #1
 800c0d2:	e7ca      	b.n	800c06a <__kernel_rem_pio2+0x582>
 800c0d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c0d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c0dc:	9b02      	ldr	r3, [sp, #8]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	9302      	str	r3, [sp, #8]
 800c0e2:	4632      	mov	r2, r6
 800c0e4:	463b      	mov	r3, r7
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	f7f4 f8ef 	bl	80002cc <__adddf3>
 800c0ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 f8e5 	bl	80002c8 <__aeabi_dsub>
 800c0fe:	4632      	mov	r2, r6
 800c100:	463b      	mov	r3, r7
 800c102:	f7f4 f8e3 	bl	80002cc <__adddf3>
 800c106:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c10a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c10e:	ed8a 7b00 	vstr	d7, [sl]
 800c112:	e76e      	b.n	800bff2 <__kernel_rem_pio2+0x50a>
 800c114:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c118:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c11c:	4640      	mov	r0, r8
 800c11e:	4632      	mov	r2, r6
 800c120:	463b      	mov	r3, r7
 800c122:	4649      	mov	r1, r9
 800c124:	f7f4 f8d2 	bl	80002cc <__adddf3>
 800c128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4640      	mov	r0, r8
 800c132:	4649      	mov	r1, r9
 800c134:	f7f4 f8c8 	bl	80002c8 <__aeabi_dsub>
 800c138:	4632      	mov	r2, r6
 800c13a:	463b      	mov	r3, r7
 800c13c:	f7f4 f8c6 	bl	80002cc <__adddf3>
 800c140:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c144:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c148:	ed84 7b00 	vstr	d7, [r4]
 800c14c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c150:	e755      	b.n	800bffe <__kernel_rem_pio2+0x516>
 800c152:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c156:	f7f4 f8b9 	bl	80002cc <__adddf3>
 800c15a:	3d01      	subs	r5, #1
 800c15c:	e759      	b.n	800c012 <__kernel_rem_pio2+0x52a>
 800c15e:	9b01      	ldr	r3, [sp, #4]
 800c160:	9a01      	ldr	r2, [sp, #4]
 800c162:	601d      	str	r5, [r3, #0]
 800c164:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c168:	605c      	str	r4, [r3, #4]
 800c16a:	609f      	str	r7, [r3, #8]
 800c16c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c170:	60d3      	str	r3, [r2, #12]
 800c172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c176:	6110      	str	r0, [r2, #16]
 800c178:	6153      	str	r3, [r2, #20]
 800c17a:	e728      	b.n	800bfce <__kernel_rem_pio2+0x4e6>
 800c17c:	41700000 	.word	0x41700000
 800c180:	3e700000 	.word	0x3e700000
 800c184:	00000000 	.word	0x00000000

0800c188 <__kernel_sin>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	ed2d 8b04 	vpush	{d8-d9}
 800c190:	eeb0 8a41 	vmov.f32	s16, s2
 800c194:	eef0 8a61 	vmov.f32	s17, s3
 800c198:	ec55 4b10 	vmov	r4, r5, d0
 800c19c:	b083      	sub	sp, #12
 800c19e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c1a6:	9001      	str	r0, [sp, #4]
 800c1a8:	da06      	bge.n	800c1b8 <__kernel_sin+0x30>
 800c1aa:	ee10 0a10 	vmov	r0, s0
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 fcf2 	bl	8000b98 <__aeabi_d2iz>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d051      	beq.n	800c25c <__kernel_sin+0xd4>
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	462b      	mov	r3, r5
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 fa3a 	bl	8000638 <__aeabi_dmul>
 800c1c4:	4682      	mov	sl, r0
 800c1c6:	468b      	mov	fp, r1
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 fa32 	bl	8000638 <__aeabi_dmul>
 800c1d4:	a341      	add	r3, pc, #260	; (adr r3, 800c2dc <__kernel_sin+0x154>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	4680      	mov	r8, r0
 800c1dc:	4689      	mov	r9, r1
 800c1de:	4650      	mov	r0, sl
 800c1e0:	4659      	mov	r1, fp
 800c1e2:	f7f4 fa29 	bl	8000638 <__aeabi_dmul>
 800c1e6:	a33f      	add	r3, pc, #252	; (adr r3, 800c2e4 <__kernel_sin+0x15c>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f7f4 f86c 	bl	80002c8 <__aeabi_dsub>
 800c1f0:	4652      	mov	r2, sl
 800c1f2:	465b      	mov	r3, fp
 800c1f4:	f7f4 fa20 	bl	8000638 <__aeabi_dmul>
 800c1f8:	a33c      	add	r3, pc, #240	; (adr r3, 800c2ec <__kernel_sin+0x164>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	f7f4 f865 	bl	80002cc <__adddf3>
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	f7f4 fa17 	bl	8000638 <__aeabi_dmul>
 800c20a:	a33a      	add	r3, pc, #232	; (adr r3, 800c2f4 <__kernel_sin+0x16c>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 f85a 	bl	80002c8 <__aeabi_dsub>
 800c214:	4652      	mov	r2, sl
 800c216:	465b      	mov	r3, fp
 800c218:	f7f4 fa0e 	bl	8000638 <__aeabi_dmul>
 800c21c:	a337      	add	r3, pc, #220	; (adr r3, 800c2fc <__kernel_sin+0x174>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f7f4 f853 	bl	80002cc <__adddf3>
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	4606      	mov	r6, r0
 800c22a:	460f      	mov	r7, r1
 800c22c:	b9eb      	cbnz	r3, 800c26a <__kernel_sin+0xe2>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4650      	mov	r0, sl
 800c234:	4659      	mov	r1, fp
 800c236:	f7f4 f9ff 	bl	8000638 <__aeabi_dmul>
 800c23a:	a325      	add	r3, pc, #148	; (adr r3, 800c2d0 <__kernel_sin+0x148>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f4 f842 	bl	80002c8 <__aeabi_dsub>
 800c244:	4642      	mov	r2, r8
 800c246:	464b      	mov	r3, r9
 800c248:	f7f4 f9f6 	bl	8000638 <__aeabi_dmul>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4620      	mov	r0, r4
 800c252:	4629      	mov	r1, r5
 800c254:	f7f4 f83a 	bl	80002cc <__adddf3>
 800c258:	4604      	mov	r4, r0
 800c25a:	460d      	mov	r5, r1
 800c25c:	ec45 4b10 	vmov	d0, r4, r5
 800c260:	b003      	add	sp, #12
 800c262:	ecbd 8b04 	vpop	{d8-d9}
 800c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26a:	4b1b      	ldr	r3, [pc, #108]	; (800c2d8 <__kernel_sin+0x150>)
 800c26c:	ec51 0b18 	vmov	r0, r1, d8
 800c270:	2200      	movs	r2, #0
 800c272:	f7f4 f9e1 	bl	8000638 <__aeabi_dmul>
 800c276:	4632      	mov	r2, r6
 800c278:	ec41 0b19 	vmov	d9, r0, r1
 800c27c:	463b      	mov	r3, r7
 800c27e:	4640      	mov	r0, r8
 800c280:	4649      	mov	r1, r9
 800c282:	f7f4 f9d9 	bl	8000638 <__aeabi_dmul>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	ec51 0b19 	vmov	r0, r1, d9
 800c28e:	f7f4 f81b 	bl	80002c8 <__aeabi_dsub>
 800c292:	4652      	mov	r2, sl
 800c294:	465b      	mov	r3, fp
 800c296:	f7f4 f9cf 	bl	8000638 <__aeabi_dmul>
 800c29a:	ec53 2b18 	vmov	r2, r3, d8
 800c29e:	f7f4 f813 	bl	80002c8 <__aeabi_dsub>
 800c2a2:	a30b      	add	r3, pc, #44	; (adr r3, 800c2d0 <__kernel_sin+0x148>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	460f      	mov	r7, r1
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	4649      	mov	r1, r9
 800c2b0:	f7f4 f9c2 	bl	8000638 <__aeabi_dmul>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	f7f4 f806 	bl	80002cc <__adddf3>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f3 fffe 	bl	80002c8 <__aeabi_dsub>
 800c2cc:	e7c4      	b.n	800c258 <__kernel_sin+0xd0>
 800c2ce:	bf00      	nop
 800c2d0:	55555549 	.word	0x55555549
 800c2d4:	3fc55555 	.word	0x3fc55555
 800c2d8:	3fe00000 	.word	0x3fe00000
 800c2dc:	5acfd57c 	.word	0x5acfd57c
 800c2e0:	3de5d93a 	.word	0x3de5d93a
 800c2e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c2e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c2ec:	57b1fe7d 	.word	0x57b1fe7d
 800c2f0:	3ec71de3 	.word	0x3ec71de3
 800c2f4:	19c161d5 	.word	0x19c161d5
 800c2f8:	3f2a01a0 	.word	0x3f2a01a0
 800c2fc:	1110f8a6 	.word	0x1110f8a6
 800c300:	3f811111 	.word	0x3f811111

0800c304 <with_errno>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	4604      	mov	r4, r0
 800c308:	460d      	mov	r5, r1
 800c30a:	4616      	mov	r6, r2
 800c30c:	f7fd fce2 	bl	8009cd4 <__errno>
 800c310:	4629      	mov	r1, r5
 800c312:	6006      	str	r6, [r0, #0]
 800c314:	4620      	mov	r0, r4
 800c316:	bd70      	pop	{r4, r5, r6, pc}

0800c318 <xflow>:
 800c318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c31a:	4614      	mov	r4, r2
 800c31c:	461d      	mov	r5, r3
 800c31e:	b108      	cbz	r0, 800c324 <xflow+0xc>
 800c320:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c324:	e9cd 2300 	strd	r2, r3, [sp]
 800c328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c32c:	4620      	mov	r0, r4
 800c32e:	4629      	mov	r1, r5
 800c330:	f7f4 f982 	bl	8000638 <__aeabi_dmul>
 800c334:	2222      	movs	r2, #34	; 0x22
 800c336:	b003      	add	sp, #12
 800c338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c33c:	f7ff bfe2 	b.w	800c304 <with_errno>

0800c340 <__math_uflow>:
 800c340:	b508      	push	{r3, lr}
 800c342:	2200      	movs	r2, #0
 800c344:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c348:	f7ff ffe6 	bl	800c318 <xflow>
 800c34c:	ec41 0b10 	vmov	d0, r0, r1
 800c350:	bd08      	pop	{r3, pc}

0800c352 <__math_oflow>:
 800c352:	b508      	push	{r3, lr}
 800c354:	2200      	movs	r2, #0
 800c356:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c35a:	f7ff ffdd 	bl	800c318 <xflow>
 800c35e:	ec41 0b10 	vmov	d0, r0, r1
 800c362:	bd08      	pop	{r3, pc}

0800c364 <fabs>:
 800c364:	ec51 0b10 	vmov	r0, r1, d0
 800c368:	ee10 2a10 	vmov	r2, s0
 800c36c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c370:	ec43 2b10 	vmov	d0, r2, r3
 800c374:	4770      	bx	lr

0800c376 <finite>:
 800c376:	b082      	sub	sp, #8
 800c378:	ed8d 0b00 	vstr	d0, [sp]
 800c37c:	9801      	ldr	r0, [sp, #4]
 800c37e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c382:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c386:	0fc0      	lsrs	r0, r0, #31
 800c388:	b002      	add	sp, #8
 800c38a:	4770      	bx	lr
 800c38c:	0000      	movs	r0, r0
	...

0800c390 <floor>:
 800c390:	ec51 0b10 	vmov	r0, r1, d0
 800c394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c398:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c39c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c3a0:	2e13      	cmp	r6, #19
 800c3a2:	ee10 5a10 	vmov	r5, s0
 800c3a6:	ee10 8a10 	vmov	r8, s0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	dc32      	bgt.n	800c414 <floor+0x84>
 800c3ae:	2e00      	cmp	r6, #0
 800c3b0:	da14      	bge.n	800c3dc <floor+0x4c>
 800c3b2:	a333      	add	r3, pc, #204	; (adr r3, 800c480 <floor+0xf0>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f3 ff88 	bl	80002cc <__adddf3>
 800c3bc:	2200      	movs	r2, #0
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f7f4 fbca 	bl	8000b58 <__aeabi_dcmpgt>
 800c3c4:	b138      	cbz	r0, 800c3d6 <floor+0x46>
 800c3c6:	2c00      	cmp	r4, #0
 800c3c8:	da57      	bge.n	800c47a <floor+0xea>
 800c3ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c3ce:	431d      	orrs	r5, r3
 800c3d0:	d001      	beq.n	800c3d6 <floor+0x46>
 800c3d2:	4c2d      	ldr	r4, [pc, #180]	; (800c488 <floor+0xf8>)
 800c3d4:	2500      	movs	r5, #0
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4628      	mov	r0, r5
 800c3da:	e025      	b.n	800c428 <floor+0x98>
 800c3dc:	4f2b      	ldr	r7, [pc, #172]	; (800c48c <floor+0xfc>)
 800c3de:	4137      	asrs	r7, r6
 800c3e0:	ea01 0307 	and.w	r3, r1, r7
 800c3e4:	4303      	orrs	r3, r0
 800c3e6:	d01f      	beq.n	800c428 <floor+0x98>
 800c3e8:	a325      	add	r3, pc, #148	; (adr r3, 800c480 <floor+0xf0>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f3 ff6d 	bl	80002cc <__adddf3>
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f7f4 fbaf 	bl	8000b58 <__aeabi_dcmpgt>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d0eb      	beq.n	800c3d6 <floor+0x46>
 800c3fe:	2c00      	cmp	r4, #0
 800c400:	bfbe      	ittt	lt
 800c402:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c406:	fa43 f606 	asrlt.w	r6, r3, r6
 800c40a:	19a4      	addlt	r4, r4, r6
 800c40c:	ea24 0407 	bic.w	r4, r4, r7
 800c410:	2500      	movs	r5, #0
 800c412:	e7e0      	b.n	800c3d6 <floor+0x46>
 800c414:	2e33      	cmp	r6, #51	; 0x33
 800c416:	dd0b      	ble.n	800c430 <floor+0xa0>
 800c418:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c41c:	d104      	bne.n	800c428 <floor+0x98>
 800c41e:	ee10 2a10 	vmov	r2, s0
 800c422:	460b      	mov	r3, r1
 800c424:	f7f3 ff52 	bl	80002cc <__adddf3>
 800c428:	ec41 0b10 	vmov	d0, r0, r1
 800c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c430:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c434:	f04f 33ff 	mov.w	r3, #4294967295
 800c438:	fa23 f707 	lsr.w	r7, r3, r7
 800c43c:	4207      	tst	r7, r0
 800c43e:	d0f3      	beq.n	800c428 <floor+0x98>
 800c440:	a30f      	add	r3, pc, #60	; (adr r3, 800c480 <floor+0xf0>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	f7f3 ff41 	bl	80002cc <__adddf3>
 800c44a:	2200      	movs	r2, #0
 800c44c:	2300      	movs	r3, #0
 800c44e:	f7f4 fb83 	bl	8000b58 <__aeabi_dcmpgt>
 800c452:	2800      	cmp	r0, #0
 800c454:	d0bf      	beq.n	800c3d6 <floor+0x46>
 800c456:	2c00      	cmp	r4, #0
 800c458:	da02      	bge.n	800c460 <floor+0xd0>
 800c45a:	2e14      	cmp	r6, #20
 800c45c:	d103      	bne.n	800c466 <floor+0xd6>
 800c45e:	3401      	adds	r4, #1
 800c460:	ea25 0507 	bic.w	r5, r5, r7
 800c464:	e7b7      	b.n	800c3d6 <floor+0x46>
 800c466:	2301      	movs	r3, #1
 800c468:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c46c:	fa03 f606 	lsl.w	r6, r3, r6
 800c470:	4435      	add	r5, r6
 800c472:	4545      	cmp	r5, r8
 800c474:	bf38      	it	cc
 800c476:	18e4      	addcc	r4, r4, r3
 800c478:	e7f2      	b.n	800c460 <floor+0xd0>
 800c47a:	2500      	movs	r5, #0
 800c47c:	462c      	mov	r4, r5
 800c47e:	e7aa      	b.n	800c3d6 <floor+0x46>
 800c480:	8800759c 	.word	0x8800759c
 800c484:	7e37e43c 	.word	0x7e37e43c
 800c488:	bff00000 	.word	0xbff00000
 800c48c:	000fffff 	.word	0x000fffff

0800c490 <scalbn>:
 800c490:	b570      	push	{r4, r5, r6, lr}
 800c492:	ec55 4b10 	vmov	r4, r5, d0
 800c496:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c49a:	4606      	mov	r6, r0
 800c49c:	462b      	mov	r3, r5
 800c49e:	b99a      	cbnz	r2, 800c4c8 <scalbn+0x38>
 800c4a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4a4:	4323      	orrs	r3, r4
 800c4a6:	d036      	beq.n	800c516 <scalbn+0x86>
 800c4a8:	4b39      	ldr	r3, [pc, #228]	; (800c590 <scalbn+0x100>)
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	ee10 0a10 	vmov	r0, s0
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	f7f4 f8c1 	bl	8000638 <__aeabi_dmul>
 800c4b6:	4b37      	ldr	r3, [pc, #220]	; (800c594 <scalbn+0x104>)
 800c4b8:	429e      	cmp	r6, r3
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	460d      	mov	r5, r1
 800c4be:	da10      	bge.n	800c4e2 <scalbn+0x52>
 800c4c0:	a32b      	add	r3, pc, #172	; (adr r3, 800c570 <scalbn+0xe0>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	e03a      	b.n	800c53e <scalbn+0xae>
 800c4c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c4cc:	428a      	cmp	r2, r1
 800c4ce:	d10c      	bne.n	800c4ea <scalbn+0x5a>
 800c4d0:	ee10 2a10 	vmov	r2, s0
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f7f3 fef8 	bl	80002cc <__adddf3>
 800c4dc:	4604      	mov	r4, r0
 800c4de:	460d      	mov	r5, r1
 800c4e0:	e019      	b.n	800c516 <scalbn+0x86>
 800c4e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	3a36      	subs	r2, #54	; 0x36
 800c4ea:	4432      	add	r2, r6
 800c4ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c4f0:	428a      	cmp	r2, r1
 800c4f2:	dd08      	ble.n	800c506 <scalbn+0x76>
 800c4f4:	2d00      	cmp	r5, #0
 800c4f6:	a120      	add	r1, pc, #128	; (adr r1, 800c578 <scalbn+0xe8>)
 800c4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4fc:	da1c      	bge.n	800c538 <scalbn+0xa8>
 800c4fe:	a120      	add	r1, pc, #128	; (adr r1, 800c580 <scalbn+0xf0>)
 800c500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c504:	e018      	b.n	800c538 <scalbn+0xa8>
 800c506:	2a00      	cmp	r2, #0
 800c508:	dd08      	ble.n	800c51c <scalbn+0x8c>
 800c50a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c50e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c512:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c516:	ec45 4b10 	vmov	d0, r4, r5
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c520:	da19      	bge.n	800c556 <scalbn+0xc6>
 800c522:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c526:	429e      	cmp	r6, r3
 800c528:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c52c:	dd0a      	ble.n	800c544 <scalbn+0xb4>
 800c52e:	a112      	add	r1, pc, #72	; (adr r1, 800c578 <scalbn+0xe8>)
 800c530:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1e2      	bne.n	800c4fe <scalbn+0x6e>
 800c538:	a30f      	add	r3, pc, #60	; (adr r3, 800c578 <scalbn+0xe8>)
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	f7f4 f87b 	bl	8000638 <__aeabi_dmul>
 800c542:	e7cb      	b.n	800c4dc <scalbn+0x4c>
 800c544:	a10a      	add	r1, pc, #40	; (adr r1, 800c570 <scalbn+0xe0>)
 800c546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d0b8      	beq.n	800c4c0 <scalbn+0x30>
 800c54e:	a10e      	add	r1, pc, #56	; (adr r1, 800c588 <scalbn+0xf8>)
 800c550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c554:	e7b4      	b.n	800c4c0 <scalbn+0x30>
 800c556:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c55a:	3236      	adds	r2, #54	; 0x36
 800c55c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c560:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c564:	4620      	mov	r0, r4
 800c566:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <scalbn+0x108>)
 800c568:	2200      	movs	r2, #0
 800c56a:	e7e8      	b.n	800c53e <scalbn+0xae>
 800c56c:	f3af 8000 	nop.w
 800c570:	c2f8f359 	.word	0xc2f8f359
 800c574:	01a56e1f 	.word	0x01a56e1f
 800c578:	8800759c 	.word	0x8800759c
 800c57c:	7e37e43c 	.word	0x7e37e43c
 800c580:	8800759c 	.word	0x8800759c
 800c584:	fe37e43c 	.word	0xfe37e43c
 800c588:	c2f8f359 	.word	0xc2f8f359
 800c58c:	81a56e1f 	.word	0x81a56e1f
 800c590:	43500000 	.word	0x43500000
 800c594:	ffff3cb0 	.word	0xffff3cb0
 800c598:	3c900000 	.word	0x3c900000

0800c59c <_init>:
 800c59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59e:	bf00      	nop
 800c5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5a2:	bc08      	pop	{r3}
 800c5a4:	469e      	mov	lr, r3
 800c5a6:	4770      	bx	lr

0800c5a8 <_fini>:
 800c5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5aa:	bf00      	nop
 800c5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ae:	bc08      	pop	{r3}
 800c5b0:	469e      	mov	lr, r3
 800c5b2:	4770      	bx	lr
