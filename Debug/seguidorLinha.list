
seguidorLinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c374  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800c558  0800c558  0001c558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca30  0800ca30  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca30  0800ca30  0001ca30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca38  0800ca38  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca38  0800ca38  0001ca38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca3c  0800ca3c  0001ca3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ca40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025e4  20000080  0800cac0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002664  0800cac0  00022664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f830  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e20  00000000  00000000  0003f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00043700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00044fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002992a  00000000  00000000  000466e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0b0  00000000  00000000  00070012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001076fc  00000000  00000000  0008c0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001937be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073bc  00000000  00000000  00193810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c53c 	.word	0x0800c53c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800c53c 	.word	0x0800c53c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreMovimenta */
  SemaphoreMovimentaHandle = osSemaphoreNew(1, 1, &SemaphoreMovimenta_attributes);
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <MX_FREERTOS_Init+0x78>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	2001      	movs	r0, #1
 8000f96:	f006 f9ac 	bl	80072f2 <osSemaphoreNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_FREERTOS_Init+0x7c>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreComunica */
  SemaphoreComunicaHandle = osSemaphoreNew(1, 1, &SemaphoreComunica_attributes);
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	; (800100c <MX_FREERTOS_Init+0x80>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f006 f9a4 	bl	80072f2 <osSemaphoreNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_FREERTOS_Init+0x84>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Utrassom */
  UtrassomHandle = osThreadNew(FunctionUltrassom, NULL, &Utrassom_attributes);
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_FREERTOS_Init+0x88>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_FREERTOS_Init+0x8c>)
 8000fb6:	f006 f8ef 	bl	8007198 <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_FREERTOS_Init+0x90>)
 8000fbe:	6013      	str	r3, [r2, #0]

  /* creation of Comunica */
  ComunicaHandle = osThreadNew(FunctionComunica, NULL, &Comunica_attributes);
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <MX_FREERTOS_Init+0x94>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_FREERTOS_Init+0x98>)
 8000fc6:	f006 f8e7 	bl	8007198 <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a16      	ldr	r2, [pc, #88]	; (8001028 <MX_FREERTOS_Init+0x9c>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of Seguidor */
  SeguidorHandle = osThreadNew(FunctionSeguidor, NULL, &Seguidor_attributes);
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <MX_FREERTOS_Init+0xa0>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <MX_FREERTOS_Init+0xa4>)
 8000fd6:	f006 f8df 	bl	8007198 <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a15      	ldr	r2, [pc, #84]	; (8001034 <MX_FREERTOS_Init+0xa8>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of Motores */
  MotoresHandle = osThreadNew(FunctionAtivarMotores, NULL, &Motores_attributes);
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <MX_FREERTOS_Init+0xac>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <MX_FREERTOS_Init+0xb0>)
 8000fe6:	f006 f8d7 	bl	8007198 <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <MX_FREERTOS_Init+0xb4>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of Odometria */
  OdometriaHandle = osThreadNew(FunctionOdometria, NULL, &Odometria_attributes);
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <MX_FREERTOS_Init+0xb8>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_FREERTOS_Init+0xbc>)
 8000ff6:	f006 f8cf 	bl	8007198 <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <MX_FREERTOS_Init+0xc0>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800c730 	.word	0x0800c730
 8001008:	20000160 	.word	0x20000160
 800100c:	0800c740 	.word	0x0800c740
 8001010:	20000164 	.word	0x20000164
 8001014:	0800c67c 	.word	0x0800c67c
 8001018:	08001051 	.word	0x08001051
 800101c:	2000014c 	.word	0x2000014c
 8001020:	0800c6a0 	.word	0x0800c6a0
 8001024:	080010a1 	.word	0x080010a1
 8001028:	20000150 	.word	0x20000150
 800102c:	0800c6c4 	.word	0x0800c6c4
 8001030:	08001349 	.word	0x08001349
 8001034:	20000154 	.word	0x20000154
 8001038:	0800c6e8 	.word	0x0800c6e8
 800103c:	08001565 	.word	0x08001565
 8001040:	20000158 	.word	0x20000158
 8001044:	0800c70c 	.word	0x0800c70c
 8001048:	08001759 	.word	0x08001759
 800104c:	2000015c 	.word	0x2000015c

08001050 <FunctionUltrassom>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_FunctionUltrassom */
void FunctionUltrassom(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionUltrassom */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001058:	2108      	movs	r1, #8
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <FunctionUltrassom+0x4c>)
 800105c:	f003 fc1e 	bl	800489c <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
	for(;;)
	{
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <FunctionUltrassom+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <FunctionUltrassom+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0208 	orr.w	r2, r2, #8
 800106e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f002 f8c5 	bl	8003208 <HAL_GPIO_WritePin>
		osDelay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f006 f91c 	bl	80072bc <osDelay>
		HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f002 f8bb 	bl	8003208 <HAL_GPIO_WritePin>
		osDelay(500);
 8001092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001096:	f006 f911 	bl	80072bc <osDelay>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_CHANNEL_3);
 800109a:	e7e1      	b.n	8001060 <FunctionUltrassom+0x10>
 800109c:	200001ac 	.word	0x200001ac

080010a0 <FunctionComunica>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionComunica */
void FunctionComunica(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	; 0x48
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionComunica */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80010a8:	4b95      	ldr	r3, [pc, #596]	; (8001300 <FunctionComunica+0x260>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	21c8      	movs	r1, #200	; 0xc8
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 f9a8 	bl	8007404 <osSemaphoreAcquire>
	  HAL_UART_Receive(&huart1, (uint8_t *)&cData, sizeof(cData),100);
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	4992      	ldr	r1, [pc, #584]	; (8001304 <FunctionComunica+0x264>)
 80010ba:	4893      	ldr	r0, [pc, #588]	; (8001308 <FunctionComunica+0x268>)
 80010bc:	f005 f966 	bl	800638c <HAL_UART_Receive>
	  if(uiBloqueado){
 80010c0:	4b92      	ldr	r3, [pc, #584]	; (800130c <FunctionComunica+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <FunctionComunica+0x70>
		  int dist1 = (int)fDistancia;
 80010c8:	4b91      	ldr	r3, [pc, #580]	; (8001310 <FunctionComunica+0x270>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 3a90 	vmov	r3, s15
 80010d6:	60fb      	str	r3, [r7, #12]
		  int dist2 = (fDistancia-(int)fDistancia)*100;
 80010d8:	4b8d      	ldr	r3, [pc, #564]	; (8001310 <FunctionComunica+0x270>)
 80010da:	ed93 7a00 	vldr	s14, [r3]
 80010de:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <FunctionComunica+0x270>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001314 <FunctionComunica+0x274>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	60bb      	str	r3, [r7, #8]

		  sprintf(cMostrar,"Blockeado: %d.%02d\r \n ",dist1,dist2);
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4984      	ldr	r1, [pc, #528]	; (8001318 <FunctionComunica+0x278>)
 8001108:	4884      	ldr	r0, [pc, #528]	; (800131c <FunctionComunica+0x27c>)
 800110a:	f008 ff03 	bl	8009f14 <siprintf>
 800110e:	e0e2      	b.n	80012d6 <FunctionComunica+0x236>
	  } else if(!uiStart){
 8001110:	4b83      	ldr	r3, [pc, #524]	; (8001320 <FunctionComunica+0x280>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <FunctionComunica+0x82>
		  sprintf(cMostrar,"Aguardando Start!! \r \n ");
 8001118:	4982      	ldr	r1, [pc, #520]	; (8001324 <FunctionComunica+0x284>)
 800111a:	4880      	ldr	r0, [pc, #512]	; (800131c <FunctionComunica+0x27c>)
 800111c:	f008 fefa 	bl	8009f14 <siprintf>
 8001120:	e0d9      	b.n	80012d6 <FunctionComunica+0x236>
	  } else{
		  if(cData == 'O' || cData == 'o'){
 8001122:	4b78      	ldr	r3, [pc, #480]	; (8001304 <FunctionComunica+0x264>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b4f      	cmp	r3, #79	; 0x4f
 8001128:	d003      	beq.n	8001132 <FunctionComunica+0x92>
 800112a:	4b76      	ldr	r3, [pc, #472]	; (8001304 <FunctionComunica+0x264>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b6f      	cmp	r3, #111	; 0x6f
 8001130:	d123      	bne.n	800117a <FunctionComunica+0xda>
			  int valor1 = (int)fDistanciaO;
 8001132:	4b7d      	ldr	r3, [pc, #500]	; (8001328 <FunctionComunica+0x288>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113c:	ee17 3a90 	vmov	r3, s15
 8001140:	617b      	str	r3, [r7, #20]
			  int valor2 = (fDistanciaO-(int)fDistanciaO)*100;
 8001142:	4b79      	ldr	r3, [pc, #484]	; (8001328 <FunctionComunica+0x288>)
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	4b77      	ldr	r3, [pc, #476]	; (8001328 <FunctionComunica+0x288>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001314 <FunctionComunica+0x274>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 3a90 	vmov	r3, s15
 800116a:	613b      	str	r3, [r7, #16]

			  sprintf(cMostrar,"Distancia Percorrida: %d.%02dm \r \n ",valor1,valor2);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	496e      	ldr	r1, [pc, #440]	; (800132c <FunctionComunica+0x28c>)
 8001172:	486a      	ldr	r0, [pc, #424]	; (800131c <FunctionComunica+0x27c>)
 8001174:	f008 fece 	bl	8009f14 <siprintf>
		  if(cData == 'O' || cData == 'o'){
 8001178:	e0ad      	b.n	80012d6 <FunctionComunica+0x236>
		  }else if(cData == 'V' || cData == 'v'){
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <FunctionComunica+0x264>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b56      	cmp	r3, #86	; 0x56
 8001180:	d003      	beq.n	800118a <FunctionComunica+0xea>
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <FunctionComunica+0x264>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b76      	cmp	r3, #118	; 0x76
 8001188:	d15e      	bne.n	8001248 <FunctionComunica+0x1a8>
			  float valE = ((float)ulPulsePerSecondE/FUROS)*10;
 800118a:	4b69      	ldr	r3, [pc, #420]	; (8001330 <FunctionComunica+0x290>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001196:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800119a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			  float valD = ((float)ulPulsePerSecondE/FUROS)*10;
 80011aa:	4b61      	ldr	r3, [pc, #388]	; (8001330 <FunctionComunica+0x290>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80011ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

			  int valor1 = (int)valE;
 80011ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d2:	ee17 3a90 	vmov	r3, s15
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
			  int valor2 = (valE-(int)valE)*100;
 80011d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001314 <FunctionComunica+0x274>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f8:	ee17 3a90 	vmov	r3, s15
 80011fc:	623b      	str	r3, [r7, #32]

			  int valor3 = (int)valD;
 80011fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001206:	ee17 3a90 	vmov	r3, s15
 800120a:	61fb      	str	r3, [r7, #28]
			  int valor4 = (valD-(int)valD)*100;
 800120c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001218:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800121c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001220:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001314 <FunctionComunica+0x274>
 8001224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122c:	ee17 3a90 	vmov	r3, s15
 8001230:	61bb      	str	r3, [r7, #24]

			  sprintf(cMostrar,"RPS_E: %d.%02d -- RPS_D: %d.%02d \r \n ",valor1,valor2,valor3,valor4);
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123e:	493d      	ldr	r1, [pc, #244]	; (8001334 <FunctionComunica+0x294>)
 8001240:	4836      	ldr	r0, [pc, #216]	; (800131c <FunctionComunica+0x27c>)
 8001242:	f008 fe67 	bl	8009f14 <siprintf>
		  }else if(cData == 'V' || cData == 'v'){
 8001246:	e046      	b.n	80012d6 <FunctionComunica+0x236>
		  }else{
			  cData = 'M';
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <FunctionComunica+0x264>)
 800124a:	224d      	movs	r2, #77	; 0x4d
 800124c:	701a      	strb	r2, [r3, #0]
			  int valor1 = (int)fVelocidadeE;
 800124e:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <FunctionComunica+0x298>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 3a90 	vmov	r3, s15
 800125c:	63fb      	str	r3, [r7, #60]	; 0x3c
			  int valor2 = (fVelocidadeE-(int)fVelocidadeE)*100;
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <FunctionComunica+0x298>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b34      	ldr	r3, [pc, #208]	; (8001338 <FunctionComunica+0x298>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001276:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001314 <FunctionComunica+0x274>
 800127a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001282:	ee17 3a90 	vmov	r3, s15
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38

			  int valor3 = (int)fVelocidadeD;
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <FunctionComunica+0x29c>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001292:	ee17 3a90 	vmov	r3, s15
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
			  int valor4 = (fVelocidadeD-(int)fVelocidadeD)*100;
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <FunctionComunica+0x29c>)
 800129a:	ed93 7a00 	vldr	s14, [r3]
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <FunctionComunica+0x29c>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001314 <FunctionComunica+0x274>
 80012b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012bc:	ee17 3a90 	vmov	r3, s15
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30

			  sprintf(cMostrar,"MotorE: %d.%02d m/s -- MotorD: %d.%02d m/s \r \n ",valor1,valor2,valor3,valor4);
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012ce:	491c      	ldr	r1, [pc, #112]	; (8001340 <FunctionComunica+0x2a0>)
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <FunctionComunica+0x27c>)
 80012d2:	f008 fe1f 	bl	8009f14 <siprintf>
		  }
	  }
	  HAL_UART_Transmit(&huart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	2264      	movs	r2, #100	; 0x64
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <FunctionComunica+0x27c>)
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <FunctionComunica+0x268>)
 80012de:	f004 ffbf 	bl	8006260 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)cMostrar, sizeof(cMostrar), 100);
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <FunctionComunica+0x27c>)
 80012e8:	4816      	ldr	r0, [pc, #88]	; (8001344 <FunctionComunica+0x2a4>)
 80012ea:	f004 ffb9 	bl	8006260 <HAL_UART_Transmit>

	  osSemaphoreRelease(SemaphoreComunicaHandle);
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <FunctionComunica+0x260>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f006 f8d8 	bl	80074a8 <osSemaphoreRelease>
	  osDelay(100);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f005 ffdf 	bl	80072bc <osDelay>
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 200);
 80012fe:	e6d3      	b.n	80010a8 <FunctionComunica+0x8>
 8001300:	20000164 	.word	0x20000164
 8001304:	20000008 	.word	0x20000008
 8001308:	200003b8 	.word	0x200003b8
 800130c:	200000e0 	.word	0x200000e0
 8001310:	200000a8 	.word	0x200000a8
 8001314:	42c80000 	.word	0x42c80000
 8001318:	0800c5b8 	.word	0x0800c5b8
 800131c:	200000e8 	.word	0x200000e8
 8001320:	200000dc 	.word	0x200000dc
 8001324:	0800c5d0 	.word	0x0800c5d0
 8001328:	200000c8 	.word	0x200000c8
 800132c:	0800c5e8 	.word	0x0800c5e8
 8001330:	200000cc 	.word	0x200000cc
 8001334:	0800c60c 	.word	0x0800c60c
 8001338:	200000d0 	.word	0x200000d0
 800133c:	200000d8 	.word	0x200000d8
 8001340:	0800c634 	.word	0x0800c634
 8001344:	20000328 	.word	0x20000328

08001348 <FunctionSeguidor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionSeguidor */
void FunctionSeguidor(void *argument)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionSeguidor */
  /* Infinite loop */
  for(;;)
  {
    uint8_t uiS2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8001350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f001 ff3e 	bl	80031d8 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
    uint8_t uiS3 = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8001360:	2120      	movs	r1, #32
 8001362:	4877      	ldr	r0, [pc, #476]	; (8001540 <FunctionSeguidor+0x1f8>)
 8001364:	f001 ff38 	bl	80031d8 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	73bb      	strb	r3, [r7, #14]
    uint8_t uiS4 = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	4874      	ldr	r0, [pc, #464]	; (8001540 <FunctionSeguidor+0x1f8>)
 8001370:	f001 ff32 	bl	80031d8 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	737b      	strb	r3, [r7, #13]

    //uint8_t uiNEAR = HAL_GPIO_ReadPin(NEAR_GPIO_Port, NEAR_Pin);
    //uint8_t uiCLP = HAL_GPIO_ReadPin(CLP_GPIO_Port, CLP_Pin);
    uint8_t uiBTN = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	4870      	ldr	r0, [pc, #448]	; (8001540 <FunctionSeguidor+0x1f8>)
 800137e:	f001 ff2b 	bl	80031d8 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	733b      	strb	r3, [r7, #12]

    osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 8001386:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <FunctionSeguidor+0x1fc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	21c8      	movs	r1, #200	; 0xc8
 800138c:	4618      	mov	r0, r3
 800138e:	f006 f839 	bl	8007404 <osSemaphoreAcquire>

    if(uiBloqueado){
 8001392:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <FunctionSeguidor+0x200>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <FunctionSeguidor+0x80>
    	fWAngularD = 0;
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <FunctionSeguidor+0x204>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 80013a2:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <FunctionSeguidor+0x208>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2104      	movs	r1, #4
 80013ae:	4869      	ldr	r0, [pc, #420]	; (8001554 <FunctionSeguidor+0x20c>)
 80013b0:	f001 ff2a 	bl	8003208 <HAL_GPIO_WritePin>
		osDelay(500);
 80013b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b8:	f005 ff80 	bl	80072bc <osDelay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2104      	movs	r1, #4
 80013c0:	4864      	ldr	r0, [pc, #400]	; (8001554 <FunctionSeguidor+0x20c>)
 80013c2:	f001 ff21 	bl	8003208 <HAL_GPIO_WritePin>
 80013c6:	e0b1      	b.n	800152c <FunctionSeguidor+0x1e4>
    }else if(uiBTN){
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d027      	beq.n	800141e <FunctionSeguidor+0xd6>
    	uiStart = uiStart?0:1;
 80013ce:	4b62      	ldr	r3, [pc, #392]	; (8001558 <FunctionSeguidor+0x210>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf0c      	ite	eq
 80013d6:	2301      	moveq	r3, #1
 80013d8:	2300      	movne	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <FunctionSeguidor+0x210>)
 80013e0:	601a      	str	r2, [r3, #0]
    	uiCountSeguidor = 0;
 80013e2:	4b5e      	ldr	r3, [pc, #376]	; (800155c <FunctionSeguidor+0x214>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
    	fWAngularD = 0;
 80013e8:	4b58      	ldr	r3, [pc, #352]	; (800154c <FunctionSeguidor+0x204>)
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
    	fWAngularE = 0;
 80013f0:	4b57      	ldr	r3, [pc, #348]	; (8001550 <FunctionSeguidor+0x208>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2104      	movs	r1, #4
 80013fc:	4855      	ldr	r0, [pc, #340]	; (8001554 <FunctionSeguidor+0x20c>)
 80013fe:	f001 ff03 	bl	8003208 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001406:	f005 ff59 	bl	80072bc <osDelay>
    	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2104      	movs	r1, #4
 800140e:	4851      	ldr	r0, [pc, #324]	; (8001554 <FunctionSeguidor+0x20c>)
 8001410:	f001 fefa 	bl	8003208 <HAL_GPIO_WritePin>
    	osDelay(500);
 8001414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001418:	f005 ff50 	bl	80072bc <osDelay>
 800141c:	e086      	b.n	800152c <FunctionSeguidor+0x1e4>
    }else if(uiStart && uiCountSeguidor < 50){
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <FunctionSeguidor+0x210>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d078      	beq.n	8001518 <FunctionSeguidor+0x1d0>
 8001426:	4b4d      	ldr	r3, [pc, #308]	; (800155c <FunctionSeguidor+0x214>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b31      	cmp	r3, #49	; 0x31
 800142c:	d874      	bhi.n	8001518 <FunctionSeguidor+0x1d0>
    	if(uiS2 && uiS3 && !uiS4){
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d011      	beq.n	8001458 <FunctionSeguidor+0x110>
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00e      	beq.n	8001458 <FunctionSeguidor+0x110>
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <FunctionSeguidor+0x110>
    		uiCountSeguidor = 0;
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <FunctionSeguidor+0x214>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
			fWAngularE = fVelocidade;
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <FunctionSeguidor+0x218>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a41      	ldr	r2, [pc, #260]	; (8001550 <FunctionSeguidor+0x208>)
 800144c:	6013      	str	r3, [r2, #0]
			fWAngularD = 0;
 800144e:	4b3f      	ldr	r3, [pc, #252]	; (800154c <FunctionSeguidor+0x204>)
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e050      	b.n	80014fa <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && uiS3 && uiS4){
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d111      	bne.n	8001482 <FunctionSeguidor+0x13a>
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <FunctionSeguidor+0x13a>
 8001464:	7b7b      	ldrb	r3, [r7, #13]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <FunctionSeguidor+0x13a>
			uiCountSeguidor = 0;
 800146a:	4b3c      	ldr	r3, [pc, #240]	; (800155c <FunctionSeguidor+0x214>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 8001470:	4b37      	ldr	r3, [pc, #220]	; (8001550 <FunctionSeguidor+0x208>)
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <FunctionSeguidor+0x218>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a33      	ldr	r2, [pc, #204]	; (800154c <FunctionSeguidor+0x204>)
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e03b      	b.n	80014fa <FunctionSeguidor+0x1b2>
		}else if(uiS2 && !uiS3 && uiS4){
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d011      	beq.n	80014ac <FunctionSeguidor+0x164>
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10e      	bne.n	80014ac <FunctionSeguidor+0x164>
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <FunctionSeguidor+0x164>
			uiCountSeguidor = 0;
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <FunctionSeguidor+0x214>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
			fWAngularD = fVelocidade;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <FunctionSeguidor+0x218>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <FunctionSeguidor+0x204>)
 80014a0:	6013      	str	r3, [r2, #0]
			fWAngularE = fVelocidade;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <FunctionSeguidor+0x218>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <FunctionSeguidor+0x208>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e026      	b.n	80014fa <FunctionSeguidor+0x1b2>
		}else if(!uiS2 && !uiS3 && !uiS4){
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d123      	bne.n	80014fa <FunctionSeguidor+0x1b2>
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d120      	bne.n	80014fa <FunctionSeguidor+0x1b2>
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d11d      	bne.n	80014fa <FunctionSeguidor+0x1b2>
			uiCountSeguidor = 0;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <FunctionSeguidor+0x214>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
			fWAngularD = 0;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <FunctionSeguidor+0x204>)
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
			fWAngularE = 0;
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <FunctionSeguidor+0x208>)
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
			uiStart = 0;
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <FunctionSeguidor+0x210>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2104      	movs	r1, #4
 80014de:	481d      	ldr	r0, [pc, #116]	; (8001554 <FunctionSeguidor+0x20c>)
 80014e0:	f001 fe92 	bl	8003208 <HAL_GPIO_WritePin>
			osDelay(100);
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f005 fee9 	bl	80072bc <osDelay>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2104      	movs	r1, #4
 80014ee:	4819      	ldr	r0, [pc, #100]	; (8001554 <FunctionSeguidor+0x20c>)
 80014f0:	f001 fe8a 	bl	8003208 <HAL_GPIO_WritePin>
			osDelay(100);
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	f005 fee1 	bl	80072bc <osDelay>
		}
    	if(uiS2 && uiS3 && uiS4){
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <FunctionSeguidor+0x1e2>
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d011      	beq.n	800152a <FunctionSeguidor+0x1e2>
 8001506:	7b7b      	ldrb	r3, [r7, #13]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00e      	beq.n	800152a <FunctionSeguidor+0x1e2>
    		uiCountSeguidor++;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <FunctionSeguidor+0x214>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <FunctionSeguidor+0x214>)
 8001514:	6013      	str	r3, [r2, #0]
    	if(uiS2 && uiS3 && uiS4){
 8001516:	e008      	b.n	800152a <FunctionSeguidor+0x1e2>
		}
    }else{
    	fWAngularD = 0;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <FunctionSeguidor+0x204>)
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
		fWAngularE = 0;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <FunctionSeguidor+0x208>)
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e000      	b.n	800152c <FunctionSeguidor+0x1e4>
    	if(uiS2 && uiS3 && uiS4){
 800152a:	bf00      	nop
    }
    osDelay(100);
 800152c:	2064      	movs	r0, #100	; 0x64
 800152e:	f005 fec5 	bl	80072bc <osDelay>
    osSemaphoreRelease(SemaphoreMovimentaHandle);
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <FunctionSeguidor+0x1fc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f005 ffb6 	bl	80074a8 <osSemaphoreRelease>
  {
 800153c:	e708      	b.n	8001350 <FunctionSeguidor+0x8>
 800153e:	bf00      	nop
 8001540:	48000800 	.word	0x48000800
 8001544:	20000160 	.word	0x20000160
 8001548:	200000e0 	.word	0x200000e0
 800154c:	200000ac 	.word	0x200000ac
 8001550:	200000b0 	.word	0x200000b0
 8001554:	48000c00 	.word	0x48000c00
 8001558:	200000dc 	.word	0x200000dc
 800155c:	200000e4 	.word	0x200000e4
 8001560:	20000004 	.word	0x20000004

08001564 <FunctionAtivarMotores>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionAtivarMotores */
void FunctionAtivarMotores(void *argument)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionAtivarMotores */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800156c:	2100      	movs	r1, #0
 800156e:	486b      	ldr	r0, [pc, #428]	; (800171c <FunctionAtivarMotores+0x1b8>)
 8001570:	f003 f820 	bl	80045b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001574:	2104      	movs	r1, #4
 8001576:	4869      	ldr	r0, [pc, #420]	; (800171c <FunctionAtivarMotores+0x1b8>)
 8001578:	f003 f81c 	bl	80045b4 <HAL_TIM_PWM_Start>

	sPID_D pid_D;
	sPID_E pid_E;

	pid_E.fKpE = 800;
 800157c:	4b68      	ldr	r3, [pc, #416]	; (8001720 <FunctionAtivarMotores+0x1bc>)
 800157e:	60bb      	str	r3, [r7, #8]
	pid_E.fKiE = 2;
 8001580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001584:	60fb      	str	r3, [r7, #12]
	pid_E.fKdE = 0;
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
	pid_E.fTsE = 200000;
 800158c:	4b65      	ldr	r3, [pc, #404]	; (8001724 <FunctionAtivarMotores+0x1c0>)
 800158e:	617b      	str	r3, [r7, #20]
	pid_E.fOutminE = 0;
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
	pid_E.fOutmaxE = 100;
 8001596:	4b64      	ldr	r3, [pc, #400]	; (8001728 <FunctionAtivarMotores+0x1c4>)
 8001598:	61fb      	str	r3, [r7, #28]
	PID_init_E(&pid_E);
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fcae 	bl	8001f00 <PID_init_E>

	pid_D.fKpD = 800;
 80015a4:	4b5e      	ldr	r3, [pc, #376]	; (8001720 <FunctionAtivarMotores+0x1bc>)
 80015a6:	623b      	str	r3, [r7, #32]
	pid_D.fKiD = 2;
 80015a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
	pid_D.fKdD = 0;
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
	pid_D.fTsD = 200000;
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <FunctionAtivarMotores+0x1c0>)
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	pid_D.fOutminD = 0;
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
	pid_D.fOutmaxD = 100;
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <FunctionAtivarMotores+0x1c4>)
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
	PID_init_D(&pid_D);
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fc64 	bl	8001e94 <PID_init_D>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 80015cc:	4b57      	ldr	r3, [pc, #348]	; (800172c <FunctionAtivarMotores+0x1c8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	21c8      	movs	r1, #200	; 0xc8
 80015d2:	4618      	mov	r0, r3
 80015d4:	f005 ff16 	bl	8007404 <osSemaphoreAcquire>
	  if(fWAngularD && fWAngularE){
 80015d8:	4b55      	ldr	r3, [pc, #340]	; (8001730 <FunctionAtivarMotores+0x1cc>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d020      	beq.n	800162a <FunctionAtivarMotores+0xc6>
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <FunctionAtivarMotores+0x1d0>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d018      	beq.n	800162a <FunctionAtivarMotores+0xc6>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f001 fe01 	bl	8003208 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f001 fdfa 	bl	8003208 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4847      	ldr	r0, [pc, #284]	; (8001738 <FunctionAtivarMotores+0x1d4>)
 800161a:	f001 fdf5 	bl	8003208 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 800161e:	2201      	movs	r2, #1
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	4846      	ldr	r0, [pc, #280]	; (800173c <FunctionAtivarMotores+0x1d8>)
 8001624:	f001 fdf0 	bl	8003208 <HAL_GPIO_WritePin>
 8001628:	e027      	b.n	800167a <FunctionAtivarMotores+0x116>
	  }else if(!fWAngularD && !fWAngularE){
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <FunctionAtivarMotores+0x1cc>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	d11f      	bne.n	800167a <FunctionAtivarMotores+0x116>
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <FunctionAtivarMotores+0x1d0>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	d117      	bne.n	800167a <FunctionAtivarMotores+0x116>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f001 fdd8 	bl	8003208 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f001 fdd1 	bl	8003208 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	4833      	ldr	r0, [pc, #204]	; (8001738 <FunctionAtivarMotores+0x1d4>)
 800166c:	f001 fdcc 	bl	8003208 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	4831      	ldr	r0, [pc, #196]	; (800173c <FunctionAtivarMotores+0x1d8>)
 8001676:	f001 fdc7 	bl	8003208 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
	  }*/

	  ulPulsePerSecondE = ulPulsePerSecondE*10;
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <FunctionAtivarMotores+0x1dc>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	461a      	mov	r2, r3
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <FunctionAtivarMotores+0x1dc>)
 800168a:	601a      	str	r2, [r3, #0]
	  ulPulsePerSecondD = ulPulsePerSecondD*10;
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <FunctionAtivarMotores+0x1e0>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	461a      	mov	r2, r3
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <FunctionAtivarMotores+0x1e0>)
 800169c:	601a      	str	r2, [r3, #0]

	  fPIDVal_D = PID_D(fVelocidadeD, fWAngularD);
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <FunctionAtivarMotores+0x1e4>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <FunctionAtivarMotores+0x1cc>)
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	eef0 0a47 	vmov.f32	s1, s14
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	f000 fce5 	bl	8002080 <PID_D>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <FunctionAtivarMotores+0x1e8>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]
	  fPIDVal_E = PID_E(fVelocidadeE, fWAngularE);
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <FunctionAtivarMotores+0x1ec>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <FunctionAtivarMotores+0x1d0>)
 80016c8:	ed93 7a00 	vldr	s14, [r3]
 80016cc:	eef0 0a47 	vmov.f32	s1, s14
 80016d0:	eeb0 0a67 	vmov.f32	s0, s15
 80016d4:	f000 fc4a 	bl	8001f6c <PID_E>
 80016d8:	eef0 7a40 	vmov.f32	s15, s0
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <FunctionAtivarMotores+0x1f0>)
 80016de:	edc3 7a00 	vstr	s15, [r3]

	  htim3.Instance->CCR1 = fPIDVal_D;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <FunctionAtivarMotores+0x1e8>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <FunctionAtivarMotores+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f0:	ee17 2a90 	vmov	r2, s15
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR2 = fPIDVal_E;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <FunctionAtivarMotores+0x1f0>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <FunctionAtivarMotores+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001704:	ee17 2a90 	vmov	r2, s15
 8001708:	639a      	str	r2, [r3, #56]	; 0x38

	  osSemaphoreRelease(SemaphoreMovimentaHandle);
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <FunctionAtivarMotores+0x1c8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f005 feca 	bl	80074a8 <osSemaphoreRelease>
	  osDelay(100);
 8001714:	2064      	movs	r0, #100	; 0x64
 8001716:	f005 fdd1 	bl	80072bc <osDelay>
	  osSemaphoreAcquire(SemaphoreMovimentaHandle, 200);
 800171a:	e757      	b.n	80015cc <FunctionAtivarMotores+0x68>
 800171c:	20000244 	.word	0x20000244
 8001720:	44480000 	.word	0x44480000
 8001724:	48435000 	.word	0x48435000
 8001728:	42c80000 	.word	0x42c80000
 800172c:	20000160 	.word	0x20000160
 8001730:	200000ac 	.word	0x200000ac
 8001734:	200000b0 	.word	0x200000b0
 8001738:	48000800 	.word	0x48000800
 800173c:	48000400 	.word	0x48000400
 8001740:	200000cc 	.word	0x200000cc
 8001744:	200000d4 	.word	0x200000d4
 8001748:	200000d8 	.word	0x200000d8
 800174c:	200000b4 	.word	0x200000b4
 8001750:	200000d0 	.word	0x200000d0
 8001754:	200000b8 	.word	0x200000b8

08001758 <FunctionOdometria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FunctionOdometria */
void FunctionOdometria(void *argument)
{
 8001758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FunctionOdometria */
	HAL_TIM_Base_Start_IT(&htim6);
 8001762:	4877      	ldr	r0, [pc, #476]	; (8001940 <FunctionOdometria+0x1e8>)
 8001764:	f002 fe56 	bl	8004414 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8001768:	4876      	ldr	r0, [pc, #472]	; (8001944 <FunctionOdometria+0x1ec>)
 800176a:	f002 fde3 	bl	8004334 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 800176e:	4876      	ldr	r0, [pc, #472]	; (8001948 <FunctionOdometria+0x1f0>)
 8001770:	f002 fde0 	bl	8004334 <HAL_TIM_Base_Start>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 100);
 8001774:	4b75      	ldr	r3, [pc, #468]	; (800194c <FunctionOdometria+0x1f4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2164      	movs	r1, #100	; 0x64
 800177a:	4618      	mov	r0, r3
 800177c:	f005 fe42 	bl	8007404 <osSemaphoreAcquire>
	  fTeta = fTeta + (((fVelocidadeD-fVelocidadeE)/(COMPRIMENTO+LARGURA))*1);
 8001780:	4b73      	ldr	r3, [pc, #460]	; (8001950 <FunctionOdometria+0x1f8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe feff 	bl	8000588 <__aeabi_f2d>
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
 800178e:	4b71      	ldr	r3, [pc, #452]	; (8001954 <FunctionOdometria+0x1fc>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <FunctionOdometria+0x200>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	ee17 0a90 	vmov	r0, s15
 80017a2:	f7fe fef1 	bl	8000588 <__aeabi_f2d>
 80017a6:	a362      	add	r3, pc, #392	; (adr r3, 8001930 <FunctionOdometria+0x1d8>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f86e 	bl	800088c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fd88 	bl	80002cc <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa10 	bl	8000be8 <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a61      	ldr	r2, [pc, #388]	; (8001950 <FunctionOdometria+0x1f8>)
 80017cc:	6013      	str	r3, [r2, #0]

	  fSD = fSD + ((fVelocidadeD+fVelocidadeE)/2)*cos(fTeta);
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <FunctionOdometria+0x204>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fed8 	bl	8000588 <__aeabi_f2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <FunctionOdometria+0x1fc>)
 80017de:	ed93 7a00 	vldr	s14, [r3]
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <FunctionOdometria+0x200>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017f4:	ee16 0a90 	vmov	r0, s13
 80017f8:	f7fe fec6 	bl	8000588 <__aeabi_f2d>
 80017fc:	4680      	mov	r8, r0
 80017fe:	4689      	mov	r9, r1
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <FunctionOdometria+0x1f8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe febf 	bl	8000588 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	ec43 2b10 	vmov	d0, r2, r3
 8001812:	f008 ff39 	bl	800a688 <cos>
 8001816:	ec53 2b10 	vmov	r2, r3, d0
 800181a:	4640      	mov	r0, r8
 800181c:	4649      	mov	r1, r9
 800181e:	f7fe ff0b 	bl	8000638 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fd4f 	bl	80002cc <__adddf3>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f9d7 	bl	8000be8 <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	4a47      	ldr	r2, [pc, #284]	; (800195c <FunctionOdometria+0x204>)
 800183e:	6013      	str	r3, [r2, #0]
	  fSE = fSE + ((fVelocidadeD+fVelocidadeE)/2)*sin(fTeta);
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <FunctionOdometria+0x208>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe9f 	bl	8000588 <__aeabi_f2d>
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <FunctionOdometria+0x1fc>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	4b40      	ldr	r3, [pc, #256]	; (8001958 <FunctionOdometria+0x200>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001862:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001866:	ee16 0a90 	vmov	r0, s13
 800186a:	f7fe fe8d 	bl	8000588 <__aeabi_f2d>
 800186e:	4680      	mov	r8, r0
 8001870:	4689      	mov	r9, r1
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <FunctionOdometria+0x1f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe86 	bl	8000588 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	ec43 2b10 	vmov	d0, r2, r3
 8001884:	f008 ff54 	bl	800a730 <sin>
 8001888:	ec53 2b10 	vmov	r2, r3, d0
 800188c:	4640      	mov	r0, r8
 800188e:	4649      	mov	r1, r9
 8001890:	f7fe fed2 	bl	8000638 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fd16 	bl	80002cc <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f99e 	bl	8000be8 <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <FunctionOdometria+0x208>)
 80018b0:	6013      	str	r3, [r2, #0]

	  fDistanciaO = sqrt(pow(fSD,2) + pow(fSE,2));
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <FunctionOdometria+0x204>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe66 	bl	8000588 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001938 <FunctionOdometria+0x1e0>
 80018c4:	ec43 2b10 	vmov	d0, r2, r3
 80018c8:	f008 ff8a 	bl	800a7e0 <pow>
 80018cc:	ec55 4b10 	vmov	r4, r5, d0
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <FunctionOdometria+0x208>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe57 	bl	8000588 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001938 <FunctionOdometria+0x1e0>
 80018e2:	ec43 2b10 	vmov	d0, r2, r3
 80018e6:	f008 ff7b 	bl	800a7e0 <pow>
 80018ea:	ec53 2b10 	vmov	r2, r3, d0
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fceb 	bl	80002cc <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	ec43 2b17 	vmov	d7, r2, r3
 80018fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001902:	eef0 0a67 	vmov.f32	s1, s15
 8001906:	f008 ffdb 	bl	800a8c0 <sqrt>
 800190a:	ec53 2b10 	vmov	r2, r3, d0
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f969 	bl	8000be8 <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <FunctionOdometria+0x20c>)
 800191a:	6013      	str	r3, [r2, #0]
	  osSemaphoreRelease(SemaphoreComunicaHandle);
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <FunctionOdometria+0x1f4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f005 fdc1 	bl	80074a8 <osSemaphoreRelease>
	  osDelay(100);
 8001926:	2064      	movs	r0, #100	; 0x64
 8001928:	f005 fcc8 	bl	80072bc <osDelay>
	  osSemaphoreAcquire(SemaphoreComunicaHandle, 100);
 800192c:	e722      	b.n	8001774 <FunctionOdometria+0x1c>
 800192e:	bf00      	nop
 8001930:	fbe76c8b 	.word	0xfbe76c8b
 8001934:	3fc2f1a9 	.word	0x3fc2f1a9
 8001938:	00000000 	.word	0x00000000
 800193c:	40000000 	.word	0x40000000
 8001940:	200002dc 	.word	0x200002dc
 8001944:	200001f8 	.word	0x200001f8
 8001948:	20000290 	.word	0x20000290
 800194c:	20000164 	.word	0x20000164
 8001950:	200000bc 	.word	0x200000bc
 8001954:	200000d8 	.word	0x200000d8
 8001958:	200000d0 	.word	0x200000d0
 800195c:	200000c0 	.word	0x200000c0
 8001960:	200000c4 	.word	0x200000c4
 8001964:	200000c8 	.word	0x200000c8

08001968 <HAL_TIM_IC_CaptureCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){//ultrassonico
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	f040 80ca 	bne.w	8001b0e <HAL_TIM_IC_CaptureCallback+0x1a6>
		if(uiIsFirst){
 800197a:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01f      	beq.n	80019c2 <HAL_TIM_IC_CaptureCallback+0x5a>
			fDistancia = 0;
 8001982:	4b69      	ldr	r3, [pc, #420]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
			lValor1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800198a:	2108      	movs	r1, #8
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f003 fd1b 	bl	80053c8 <HAL_TIM_ReadCapturedValue>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 8001998:	601a      	str	r2, [r3, #0]
			uiIsFirst=0;
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a1a      	ldr	r2, [r3, #32]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80019ae:	621a      	str	r2, [r3, #32]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6a1a      	ldr	r2, [r3, #32]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019be:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
		}
	}
}
 80019c0:	e0a5      	b.n	8001b0e <HAL_TIM_IC_CaptureCallback+0x1a6>
			lValor2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80019c2:	2108      	movs	r1, #8
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f003 fcff 	bl	80053c8 <HAL_TIM_ReadCapturedValue>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80019d0:	601a      	str	r2, [r3, #0]
			uiIsFirst=1;
 80019d2:	4b54      	ldr	r3, [pc, #336]	; (8001b24 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
			fDiferenca = (float)((unsigned)lValor2-(unsigned)lValor1);
 80019d8:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <HAL_TIM_IC_CaptureCallback+0x1c8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_TIM_IC_CaptureCallback+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ec:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
			fDistancia = ((fDiferenca/2)*0.0001)*340/2 < 100?((fDiferenca/2)*0.0001)*340/2 : fDistancia;
 80019f2:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80019fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a00:	ee16 0a90 	vmov	r0, s13
 8001a04:	f7fe fdc0 	bl	8000588 <__aeabi_f2d>
 8001a08:	a343      	add	r3, pc, #268	; (adr r3, 8001b18 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fe13 	bl	8000638 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001a20:	f7fe fe0a 	bl	8000638 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a34:	f7fe ff2a 	bl	800088c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8001a46:	f7ff f869 	bl	8000b1c <__aeabi_dcmplt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d02a      	beq.n	8001aa6 <HAL_TIM_IC_CaptureCallback+0x13e>
 8001a50:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a5e:	ee16 0a90 	vmov	r0, s13
 8001a62:	f7fe fd91 	bl	8000588 <__aeabi_f2d>
 8001a66:	a32c      	add	r3, pc, #176	; (adr r3, 8001b18 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fde4 	bl	8000638 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8001a7e:	f7fe fddb 	bl	8000638 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a92:	f7fe fefb 	bl	800088c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f8a3 	bl	8000be8 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	e001      	b.n	8001aaa <HAL_TIM_IC_CaptureCallback+0x142>
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001aac:	6013      	str	r3, [r2, #0]
			uiBloqueado = (fDistancia>2 && fDistancia<20) ? 1 : 0;
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	dd0b      	ble.n	8001ada <HAL_TIM_IC_CaptureCallback+0x172>
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_TIM_IC_CaptureCallback+0x1c0>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d501      	bpl.n	8001ada <HAL_TIM_IC_CaptureCallback+0x172>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_TIM_IC_CaptureCallback+0x174>
 8001ada:	2300      	movs	r3, #0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8001ae0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001af0:	621a      	str	r2, [r3, #32]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a12      	ldr	r2, [r2, #32]
 8001afc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_3);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0208 	bic.w	r2, r2, #8
 8001b0c:	60da      	str	r2, [r3, #12]
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	eb1c432d 	.word	0xeb1c432d
 8001b1c:	3f1a36e2 	.word	0x3f1a36e2
 8001b20:	200001ac 	.word	0x200001ac
 8001b24:	20000000 	.word	0x20000000
 8001b28:	200000a8 	.word	0x200000a8
 8001b2c:	2000009c 	.word	0x2000009c
 8001b30:	200000a0 	.word	0x200000a0
 8001b34:	200000a4 	.word	0x200000a4
 8001b38:	40754000 	.word	0x40754000
 8001b3c:	40590000 	.word	0x40590000
 8001b40:	200000e0 	.word	0x200000e0
 8001b44:	00000000 	.word	0x00000000

08001b48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d15f      	bne.n	8001c18 <HAL_TIM_PeriodElapsedCallback+0xd0>
		ulPulsePerSecondE = __HAL_TIM_GET_COUNTER(&htim2);
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	4a36      	ldr	r2, [pc, #216]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b60:	6013      	str	r3, [r2, #0]
		ulPulsePerSecondD = __HAL_TIM_GET_COUNTER(&htim5);
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b6a:	6013      	str	r3, [r2, #0]

		fVelocidadeE = ((float)ulPulsePerSecondE/FUROS)*2*3.1415*RAIO;
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b78:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b84:	ee17 0a90 	vmov	r0, s15
 8001b88:	f7fe fcfe 	bl	8000588 <__aeabi_f2d>
 8001b8c:	a324      	add	r3, pc, #144	; (adr r3, 8001c20 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fd51 	bl	8000638 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	a322      	add	r3, pc, #136	; (adr r3, 8001c28 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd48 	bl	8000638 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff f81a 	bl	8000be8 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bb8:	6013      	str	r3, [r2, #0]
		fVelocidadeD = ((float)ulPulsePerSecondD/FUROS)*2*3.1415*RAIO;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd2:	ee17 0a90 	vmov	r0, s15
 8001bd6:	f7fe fcd7 	bl	8000588 <__aeabi_f2d>
 8001bda:	a311      	add	r3, pc, #68	; (adr r3, 8001c20 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fd2a 	bl	8000638 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	a30e      	add	r3, pc, #56	; (adr r3, 8001c28 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fd21 	bl	8000638 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fff3 	bl	8000be8 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c06:	6013      	str	r3, [r2, #0]

		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim5,0);
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	c083126f 	.word	0xc083126f
 8001c24:	400921ca 	.word	0x400921ca
 8001c28:	76c8b439 	.word	0x76c8b439
 8001c2c:	3f6a9fbe 	.word	0x3f6a9fbe
 8001c30:	200002dc 	.word	0x200002dc
 8001c34:	200001f8 	.word	0x200001f8
 8001c38:	200000cc 	.word	0x200000cc
 8001c3c:	20000290 	.word	0x20000290
 8001c40:	200000d4 	.word	0x200000d4
 8001c44:	200000d0 	.word	0x200000d0
 8001c48:	200000d8 	.word	0x200000d8

08001c4c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a4f      	ldr	r2, [pc, #316]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a43      	ldr	r2, [pc, #268]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <MX_GPIO_Init+0x158>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f248 3120 	movw	r1, #33568	; 0x8320
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f001 fa9c 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	4834      	ldr	r0, [pc, #208]	; (8001da8 <MX_GPIO_Init+0x15c>)
 8001cd6:	f001 fa97 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2104      	movs	r1, #4
 8001cde:	4833      	ldr	r0, [pc, #204]	; (8001dac <MX_GPIO_Init+0x160>)
 8001ce0:	f001 fa92 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001cea:	4831      	ldr	r0, [pc, #196]	; (8001db0 <MX_GPIO_Init+0x164>)
 8001cec:	f001 fa8c 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PCPin */
  GPIO_InitStruct.Pin = BTN1_Pin|S3_Pin|S4_Pin|GPIO_PIN_8
 8001cf0:	f242 3360 	movw	r3, #9056	; 0x2360
 8001cf4:	617b      	str	r3, [r7, #20]
                          |NEAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4828      	ldr	r0, [pc, #160]	; (8001da8 <MX_GPIO_Init+0x15c>)
 8001d06:	f001 f8e5 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|IN1_Pin|IN2_Pin|Trig_Pin;
 8001d0a:	f248 3320 	movw	r3, #33568	; 0x8320
 8001d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d26:	f001 f8d5 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <MX_GPIO_Init+0x15c>)
 8001d42:	f001 f8c7 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5e:	f001 f8b9 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001d62:	2304      	movs	r3, #4
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <MX_GPIO_Init+0x160>)
 8001d7a:	f001 f8ab 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HC05_STATE_Pin|IN4_Pin|HC05_EN_Pin;
 8001d7e:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_GPIO_Init+0x164>)
 8001d98:	f001 f89c 	bl	8002ed4 <HAL_GPIO_Init>

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	48000800 	.word	0x48000800
 8001dac:	48000c00 	.word	0x48000c00
 8001db0:	48000400 	.word	0x48000400

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f000 ff0b 	bl	8002bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 f817 	bl	8001dee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f7ff ff44 	bl	8001c4c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001dc4:	f000 fa90 	bl	80022e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001dc8:	f000 fb04 	bl	80023d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001dcc:	f000 fb56 	bl	800247c <MX_TIM3_Init>
  MX_TIM6_Init();
 8001dd0:	f000 fc0c 	bl	80025ec <MX_TIM6_Init>
  MX_LPUART1_UART_Init();
 8001dd4:	f000 fd64 	bl	80028a0 <MX_LPUART1_UART_Init>
  MX_TIM5_Init();
 8001dd8:	f000 fbb4 	bl	8002544 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001ddc:	f000 fdaa 	bl	8002934 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001de0:	f005 f990 	bl	8007104 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001de4:	f7ff f8d2 	bl	8000f8c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001de8:	f005 f9b0 	bl	800714c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <main+0x38>

08001dee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b094      	sub	sp, #80	; 0x50
 8001df2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	2238      	movs	r2, #56	; 0x38
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f007 ff73 	bl	8009ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e14:	f001 fa10 	bl	8003238 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e22:	2340      	movs	r3, #64	; 0x40
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e26:	2302      	movs	r3, #2
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001e32:	2319      	movs	r3, #25
 8001e34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fa9a 	bl	8003380 <HAL_RCC_OscConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001e52:	f000 f819 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e56:	230f      	movs	r3, #15
 8001e58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e62:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2103      	movs	r1, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 fd9d 	bl	80039b0 <HAL_RCC_ClockConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e7c:	f000 f804 	bl	8001e88 <Error_Handler>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3750      	adds	r7, #80	; 0x50
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <PID_init_D>:
float fKpD, fKiD, fKdD, fTsD, fOutminD, fOutmaxD;

float fErrorP_E, fErrorI_E, fErrorD_E;
float fErrorP_D,fErrorI_D,fErrorD_D;

void PID_init_D(sPID_D *par) {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	fKpD = par->fKpD;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <PID_init_D+0x50>)
 8001ea2:	6013      	str	r3, [r2, #0]
	fKiD = par->fKiD;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <PID_init_D+0x54>)
 8001eaa:	6013      	str	r3, [r2, #0]
	fKdD = par->fKdD;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <PID_init_D+0x58>)
 8001eb2:	6013      	str	r3, [r2, #0]
	fTsD = (par->fTsD) / 1000;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eba:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001ef0 <PID_init_D+0x5c>
 8001ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <PID_init_D+0x60>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
	fOutminD = par->fOutminD;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <PID_init_D+0x64>)
 8001ece:	6013      	str	r3, [r2, #0]
	fOutmaxD = par->fOutmaxD;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	4a09      	ldr	r2, [pc, #36]	; (8001efc <PID_init_D+0x68>)
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20000180 	.word	0x20000180
 8001ee8:	20000184 	.word	0x20000184
 8001eec:	20000188 	.word	0x20000188
 8001ef0:	447a0000 	.word	0x447a0000
 8001ef4:	2000018c 	.word	0x2000018c
 8001ef8:	20000190 	.word	0x20000190
 8001efc:	20000194 	.word	0x20000194

08001f00 <PID_init_E>:
void PID_init_E(sPID_E *par) {
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	fKpE = par->fKpE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <PID_init_E+0x50>)
 8001f0e:	6013      	str	r3, [r2, #0]
	fKiE = par->fKiE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <PID_init_E+0x54>)
 8001f16:	6013      	str	r3, [r2, #0]
	fKdE = par->fKdE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <PID_init_E+0x58>)
 8001f1e:	6013      	str	r3, [r2, #0]
	fTsE = (par->fTsE) / 1000;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f26:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001f5c <PID_init_E+0x5c>
 8001f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <PID_init_E+0x60>)
 8001f30:	edc3 7a00 	vstr	s15, [r3]
	fOutminE = par->fOutminE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <PID_init_E+0x64>)
 8001f3a:	6013      	str	r3, [r2, #0]
	fOutmaxE = par->fOutmaxE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <PID_init_E+0x68>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20000168 	.word	0x20000168
 8001f54:	2000016c 	.word	0x2000016c
 8001f58:	20000170 	.word	0x20000170
 8001f5c:	447a0000 	.word	0x447a0000
 8001f60:	20000174 	.word	0x20000174
 8001f64:	20000178 	.word	0x20000178
 8001f68:	2000017c 	.word	0x2000017c

08001f6c <PID_E>:

float PID_E(float input, float set_point) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f76:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_E;

	fErrorP_E = (set_point - input);
 8001f7a:	ed97 7a00 	vldr	s14, [r7]
 8001f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f86:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpE * fErrorP_E;
 8001f8a:	4b35      	ldr	r3, [pc, #212]	; (8002060 <PID_E+0xf4>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_E += fErrorP_E * fTsE;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <PID_E+0xf8>)
 8001f9e:	ed93 7a00 	vldr	s14, [r3]
 8001fa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <PID_E+0xfc>)
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <PID_E+0xfc>)
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiE * fErrorI_E;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <PID_E+0x100>)
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <PID_E+0xfc>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fca:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_E = (fErrorP_E-fErrorD_E)/fTsE;
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <PID_E+0x104>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fd8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <PID_E+0xf8>)
 8001fde:	ed93 7a00 	vldr	s14, [r3]
 8001fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <PID_E+0x104>)
 8001fe8:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdE * fErrorD_E;
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <PID_E+0x108>)
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <PID_E+0x104>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffc:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 8002000:	ed97 7a05 	vldr	s14, [r7, #20]
 8002004:	edd7 7a04 	vldr	s15, [r7, #16]
 8002008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002014:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxE) {
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <PID_E+0x10c>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	dd02      	ble.n	8002032 <PID_E+0xc6>
		fOut = fOutmaxE;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <PID_E+0x10c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61fb      	str	r3, [r7, #28]
	}
	if (fOut < fOutminE) {
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <PID_E+0x110>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ed97 7a07 	vldr	s14, [r7, #28]
 800203c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	d502      	bpl.n	800204c <PID_E+0xe0>
		fOut = fOutminE;
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <PID_E+0x110>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	ee07 3a90 	vmov	s15, r3
}
 8002052:	eeb0 0a67 	vmov.f32	s0, s15
 8002056:	3724      	adds	r7, #36	; 0x24
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000168 	.word	0x20000168
 8002064:	20000174 	.word	0x20000174
 8002068:	20000198 	.word	0x20000198
 800206c:	2000016c 	.word	0x2000016c
 8002070:	2000019c 	.word	0x2000019c
 8002074:	20000170 	.word	0x20000170
 8002078:	2000017c 	.word	0x2000017c
 800207c:	20000178 	.word	0x20000178

08002080 <PID_D>:
float PID_D(float input, float set_point) {
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a01 	vstr	s0, [r7, #4]
 800208a:	edc7 0a00 	vstr	s1, [r7]
	// Proportional
	float fPout, fIout, fDout, fOut, fErrorP_D;

	fErrorP_D = (set_point - input);
 800208e:	ed97 7a00 	vldr	s14, [r7]
 8002092:	edd7 7a01 	vldr	s15, [r7, #4]
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	edc7 7a06 	vstr	s15, [r7, #24]
	fPout = fKpD * fErrorP_D;
 800209e:	4b36      	ldr	r3, [pc, #216]	; (8002178 <PID_D+0xf8>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80020a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ac:	edc7 7a05 	vstr	s15, [r7, #20]

	// Integral
	fErrorI_D += fErrorP_D * fTsD;
 80020b0:	4b32      	ldr	r3, [pc, #200]	; (800217c <PID_D+0xfc>)
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <PID_D+0x100>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <PID_D+0x100>)
 80020ca:	edc3 7a00 	vstr	s15, [r3]
	fIout = fKiD * fErrorI_D;
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <PID_D+0x104>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <PID_D+0x100>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative
	fErrorD_D = (fErrorP_D-fErrorD_D)/fTsD;
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <PID_D+0x108>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80020ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <PID_D+0xfc>)
 80020f2:	ed93 7a00 	vldr	s14, [r3]
 80020f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <PID_D+0x108>)
 80020fc:	edc3 7a00 	vstr	s15, [r3]
	fDout = fKdD * fErrorD_D;
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <PID_D+0x10c>)
 8002102:	ed93 7a00 	vldr	s14, [r3]
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <PID_D+0x108>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	edc7 7a03 	vstr	s15, [r7, #12]

	fOut = fPout + fIout + fDout;
 8002114:	ed97 7a05 	vldr	s14, [r7, #20]
 8002118:	edd7 7a04 	vldr	s15, [r7, #16]
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	ed97 7a03 	vldr	s14, [r7, #12]
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturation

	if (fOut > fOutmaxD) {
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <PID_D+0x110>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ed97 7a07 	vldr	s14, [r7, #28]
 8002136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	dd03      	ble.n	8002148 <PID_D+0xc8>
		fOut = fOutmaxD;
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <PID_D+0x110>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e00c      	b.n	8002162 <PID_D+0xe2>
	}else if (fOut < fOutminD) {
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <PID_D+0x114>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	d502      	bpl.n	8002162 <PID_D+0xe2>
		fOut = fOutminD;
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <PID_D+0x114>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61fb      	str	r3, [r7, #28]
	}
	return fOut;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	ee07 3a90 	vmov	s15, r3
}
 8002168:	eeb0 0a67 	vmov.f32	s0, s15
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000180 	.word	0x20000180
 800217c:	2000018c 	.word	0x2000018c
 8002180:	200001a0 	.word	0x200001a0
 8002184:	20000184 	.word	0x20000184
 8002188:	200001a4 	.word	0x200001a4
 800218c:	20000188 	.word	0x20000188
 8002190:	20000194 	.word	0x20000194
 8002194:	20000190 	.word	0x20000190

08002198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_MspInit+0x4c>)
 80021a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_MspInit+0x4c>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6613      	str	r3, [r2, #96]	; 0x60
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_MspInit+0x4c>)
 80021ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_MspInit+0x4c>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_MspInit+0x4c>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_MspInit+0x4c>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	210f      	movs	r1, #15
 80021d2:	f06f 0001 	mvn.w	r0, #1
 80021d6:	f000 fe48 	bl	8002e6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002218:	f000 fd2e 	bl	8002c78 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800221c:	f006 fdb0 	bl	8008d80 <xTaskGetSchedulerState>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002226:	f007 fb3f 	bl	80098a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <TIM1_CC_IRQHandler+0x10>)
 8002236:	f002 fc81 	bl	8004b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200001ac 	.word	0x200001ac

08002244 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM6_DAC_IRQHandler+0x10>)
 800224a:	f002 fc77 	bl	8004b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200002dc 	.word	0x200002dc

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f007 fcf4 	bl	8009c74 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20020000 	.word	0x20020000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	200001a8 	.word	0x200001a8
 80022c0:	20002668 	.word	0x20002668

080022c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <MX_TIM1_Init+0xe4>)
 8002316:	4a2e      	ldr	r2, [pc, #184]	; (80023d0 <MX_TIM1_Init+0xe8>)
 8002318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <MX_TIM1_Init+0xe4>)
 800231c:	2231      	movs	r2, #49	; 0x31
 800231e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <MX_TIM1_Init+0xe4>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <MX_TIM1_Init+0xe4>)
 8002328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <MX_TIM1_Init+0xe4>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <MX_TIM1_Init+0xe4>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <MX_TIM1_Init+0xe4>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002340:	4822      	ldr	r0, [pc, #136]	; (80023cc <MX_TIM1_Init+0xe4>)
 8002342:	f001 ff9f 	bl	8004284 <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800234c:	f7ff fd9c 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	4619      	mov	r1, r3
 800235c:	481b      	ldr	r0, [pc, #108]	; (80023cc <MX_TIM1_Init+0xe4>)
 800235e:	f002 ff1d 	bl	800519c <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002368:	f7ff fd8e 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800236c:	4817      	ldr	r0, [pc, #92]	; (80023cc <MX_TIM1_Init+0xe4>)
 800236e:	f002 fa33 	bl	80047d8 <HAL_TIM_IC_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002378:	f7ff fd86 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	480f      	ldr	r0, [pc, #60]	; (80023cc <MX_TIM1_Init+0xe4>)
 8002390:	f003 fe3a 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800239a:	f7ff fd75 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023a2:	2301      	movs	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2208      	movs	r2, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_TIM1_Init+0xe4>)
 80023b6:	f002 fd40 	bl	8004e3a <HAL_TIM_IC_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80023c0:	f7ff fd62 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	; 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200001ac 	.word	0x200001ac
 80023d0:	40012c00 	.word	0x40012c00

080023d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <MX_TIM2_Init+0xa4>)
 80023f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023fa:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <MX_TIM2_Init+0xa4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <MX_TIM2_Init+0xa4>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <MX_TIM2_Init+0xa4>)
 8002408:	f240 32e7 	movw	r2, #999	; 0x3e7
 800240c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <MX_TIM2_Init+0xa4>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <MX_TIM2_Init+0xa4>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800241a:	4817      	ldr	r0, [pc, #92]	; (8002478 <MX_TIM2_Init+0xa4>)
 800241c:	f001 ff32 	bl	8004284 <HAL_TIM_Base_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002426:	f7ff fd2f 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800242a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800242e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4619      	mov	r1, r3
 8002442:	480d      	ldr	r0, [pc, #52]	; (8002478 <MX_TIM2_Init+0xa4>)
 8002444:	f002 feaa 	bl	800519c <HAL_TIM_ConfigClockSource>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800244e:	f7ff fd1b 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4806      	ldr	r0, [pc, #24]	; (8002478 <MX_TIM2_Init+0xa4>)
 8002460:	f003 fdd2 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800246a:	f7ff fd0d 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200001f8 	.word	0x200001f8

0800247c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248e:	463b      	mov	r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
 800249c:	615a      	str	r2, [r3, #20]
 800249e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <MX_TIM3_Init+0xc0>)
 80024a2:	4a27      	ldr	r2, [pc, #156]	; (8002540 <MX_TIM3_Init+0xc4>)
 80024a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <MX_TIM3_Init+0xc0>)
 80024a8:	2231      	movs	r2, #49	; 0x31
 80024aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b23      	ldr	r3, [pc, #140]	; (800253c <MX_TIM3_Init+0xc0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <MX_TIM3_Init+0xc0>)
 80024b4:	2263      	movs	r2, #99	; 0x63
 80024b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <MX_TIM3_Init+0xc0>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <MX_TIM3_Init+0xc0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024c4:	481d      	ldr	r0, [pc, #116]	; (800253c <MX_TIM3_Init+0xc0>)
 80024c6:	f002 f81d 	bl	8004504 <HAL_TIM_PWM_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024d0:	f7ff fcda 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	4619      	mov	r1, r3
 80024e2:	4816      	ldr	r0, [pc, #88]	; (800253c <MX_TIM3_Init+0xc0>)
 80024e4:	f003 fd90 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80024ee:	f7ff fccb 	bl	8001e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f2:	2360      	movs	r3, #96	; 0x60
 80024f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002502:	463b      	mov	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <MX_TIM3_Init+0xc0>)
 800250a:	f002 fd33 	bl	8004f74 <HAL_TIM_PWM_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002514:	f7ff fcb8 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002518:	463b      	mov	r3, r7
 800251a:	2204      	movs	r2, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4807      	ldr	r0, [pc, #28]	; (800253c <MX_TIM3_Init+0xc0>)
 8002520:	f002 fd28 	bl	8004f74 <HAL_TIM_PWM_ConfigChannel>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800252a:	f7ff fcad 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <MX_TIM3_Init+0xc0>)
 8002530:	f000 f97e 	bl	8002830 <HAL_TIM_MspPostInit>

}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	; 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000244 	.word	0x20000244
 8002540:	40000400 	.word	0x40000400

08002544 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <MX_TIM5_Init+0xa0>)
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <MX_TIM5_Init+0xa4>)
 8002566:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_TIM5_Init+0xa0>)
 800256a:	2200      	movs	r2, #0
 800256c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <MX_TIM5_Init+0xa0>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_TIM5_Init+0xa0>)
 8002576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800257a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <MX_TIM5_Init+0xa0>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <MX_TIM5_Init+0xa0>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002588:	4816      	ldr	r0, [pc, #88]	; (80025e4 <MX_TIM5_Init+0xa0>)
 800258a:	f001 fe7b 	bl	8004284 <HAL_TIM_Base_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002594:	f7ff fc78 	bl	8001e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800259c:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	4619      	mov	r1, r3
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <MX_TIM5_Init+0xa0>)
 80025b2:	f002 fdf3 	bl	800519c <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80025bc:	f7ff fc64 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_TIM5_Init+0xa0>)
 80025ce:	f003 fd1b 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80025d8:	f7ff fc56 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000290 	.word	0x20000290
 80025e8:	40000c00 	.word	0x40000c00

080025ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <MX_TIM6_Init+0x68>)
 80025fe:	4a16      	ldr	r2, [pc, #88]	; (8002658 <MX_TIM6_Init+0x6c>)
 8002600:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5000-1;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_TIM6_Init+0x68>)
 8002604:	f241 3287 	movw	r2, #4999	; 0x1387
 8002608:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_TIM6_Init+0x68>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <MX_TIM6_Init+0x68>)
 8002612:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002616:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <MX_TIM6_Init+0x68>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800261e:	480d      	ldr	r0, [pc, #52]	; (8002654 <MX_TIM6_Init+0x68>)
 8002620:	f001 fe30 	bl	8004284 <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800262a:	f7ff fc2d 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4806      	ldr	r0, [pc, #24]	; (8002654 <MX_TIM6_Init+0x68>)
 800263c:	f003 fce4 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002646:	f7ff fc1f 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200002dc 	.word	0x200002dc
 8002658:	40001000 	.word	0x40001000

0800265c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08e      	sub	sp, #56	; 0x38
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_TIM_Base_MspInit+0x17c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d130      	bne.n	80026e0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002688:	6613      	str	r3, [r2, #96]	; 0x60
 800268a:	4b54      	ldr	r3, [pc, #336]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 800268c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	4a50      	ldr	r2, [pc, #320]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a2:	4b4e      	ldr	r3, [pc, #312]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 80026ae:	2304      	movs	r3, #4
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026be:	2302      	movs	r3, #2
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4845      	ldr	r0, [pc, #276]	; (80027e0 <HAL_TIM_Base_MspInit+0x184>)
 80026ca:	f000 fc03 	bl	8002ed4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2105      	movs	r1, #5
 80026d2:	201b      	movs	r0, #27
 80026d4:	f000 fbc9 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026d8:	201b      	movs	r0, #27
 80026da:	f000 fbe0 	bl	8002e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80026de:	e076      	b.n	80027ce <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d129      	bne.n	800273e <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ea:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	4a3b      	ldr	r2, [pc, #236]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a35      	ldr	r2, [pc, #212]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_E_Pin;
 800271a:	2301      	movs	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800272a:	230e      	movs	r3, #14
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_E_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f000 fbcc 	bl	8002ed4 <HAL_GPIO_Init>
}
 800273c:	e047      	b.n	80027ce <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM5)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_TIM_Base_MspInit+0x188>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d129      	bne.n	800279c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	4a23      	ldr	r2, [pc, #140]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6593      	str	r3, [r2, #88]	; 0x58
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_D_Pin;
 8002778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800278a:	2302      	movs	r3, #2
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder_D_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4814      	ldr	r0, [pc, #80]	; (80027e8 <HAL_TIM_Base_MspInit+0x18c>)
 8002796:	f000 fb9d 	bl	8002ed4 <HAL_GPIO_Init>
}
 800279a:	e018      	b.n	80027ce <HAL_TIM_Base_MspInit+0x172>
  else if(tim_baseHandle->Instance==TIM6)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_TIM_Base_MspInit+0x190>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d113      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 80027ac:	f043 0310 	orr.w	r3, r3, #16
 80027b0:	6593      	str	r3, [r2, #88]	; 0x58
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_TIM_Base_MspInit+0x180>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2105      	movs	r1, #5
 80027c2:	2036      	movs	r0, #54	; 0x36
 80027c4:	f000 fb51 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027c8:	2036      	movs	r0, #54	; 0x36
 80027ca:	f000 fb68 	bl	8002e9e <HAL_NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3738      	adds	r7, #56	; 0x38
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	48000800 	.word	0x48000800
 80027e4:	40000c00 	.word	0x40000c00
 80027e8:	48000400 	.word	0x48000400
 80027ec:	40001000 	.word	0x40001000

080027f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_TIM_PWM_MspInit+0x38>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10b      	bne.n	800281a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_TIM_PWM_MspInit+0x3c>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_TIM_PWM_MspInit+0x3c>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6593      	str	r3, [r2, #88]	; 0x58
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_TIM_PWM_MspInit+0x3c>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40000400 	.word	0x40000400
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_TIM_MspPostInit+0x64>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d11b      	bne.n	800288a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_TIM_MspPostInit+0x68>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_TIM_MspPostInit+0x68>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_TIM_MspPostInit+0x68>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1_Pin|PWM_2_Pin;
 800286a:	2330      	movs	r3, #48	; 0x30
 800286c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800287a:	2302      	movs	r3, #2
 800287c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <HAL_TIM_MspPostInit+0x6c>)
 8002886:	f000 fb25 	bl	8002ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800288a:	bf00      	nop
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40000400 	.word	0x40000400
 8002898:	40021000 	.word	0x40021000
 800289c:	48000400 	.word	0x48000400

080028a0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028a6:	4a22      	ldr	r2, [pc, #136]	; (8002930 <MX_LPUART1_UART_Init+0x90>)
 80028a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80028e2:	4812      	ldr	r0, [pc, #72]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028e4:	f003 fc6c 	bl	80061c0 <HAL_UART_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80028ee:	f7ff facb 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028f2:	2100      	movs	r1, #0
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 80028f6:	f004 fb07 	bl	8006f08 <HAL_UARTEx_SetTxFifoThreshold>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002900:	f7ff fac2 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002904:	2100      	movs	r1, #0
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 8002908:	f004 fb3c 	bl	8006f84 <HAL_UARTEx_SetRxFifoThreshold>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002912:	f7ff fab9 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <MX_LPUART1_UART_Init+0x8c>)
 8002918:	f004 fabd 	bl	8006e96 <HAL_UARTEx_DisableFifoMode>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002922:	f7ff fab1 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000328 	.word	0x20000328
 8002930:	40008000 	.word	0x40008000

08002934 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <MX_USART1_UART_Init+0x94>)
 800293c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002940:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 800295a:	220c      	movs	r2, #12
 800295c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 800296c:	2200      	movs	r2, #0
 800296e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002972:	2200      	movs	r2, #0
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002978:	2200      	movs	r2, #0
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800297c:	4811      	ldr	r0, [pc, #68]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 800297e:	f003 fc1f 	bl	80061c0 <HAL_UART_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002988:	f7ff fa7e 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800298c:	2100      	movs	r1, #0
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 8002990:	f004 faba 	bl	8006f08 <HAL_UARTEx_SetTxFifoThreshold>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800299a:	f7ff fa75 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800299e:	2100      	movs	r1, #0
 80029a0:	4808      	ldr	r0, [pc, #32]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 80029a2:	f004 faef 	bl	8006f84 <HAL_UARTEx_SetRxFifoThreshold>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029ac:	f7ff fa6c 	bl	8001e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <MX_USART1_UART_Init+0x90>)
 80029b2:	f004 fa70 	bl	8006e96 <HAL_UARTEx_DisableFifoMode>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029bc:	f7ff fa64 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	200003b8 	.word	0x200003b8
 80029c8:	40013800 	.word	0x40013800

080029cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0a2      	sub	sp, #136	; 0x88
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029e4:	f107 0320 	add.w	r3, r7, #32
 80029e8:	2254      	movs	r2, #84	; 0x54
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f007 f97b 	bl	8009ce8 <memset>
  if(uartHandle->Instance==LPUART1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a5e      	ldr	r2, [pc, #376]	; (8002b70 <HAL_UART_MspInit+0x1a4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d157      	bne.n	8002aac <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80029fc:	2320      	movs	r3, #32
 80029fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a04:	f107 0320 	add.w	r3, r7, #32
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 f9ed 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a14:	f7ff fa38 	bl	8001e88 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a18:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	4a55      	ldr	r2, [pc, #340]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a34:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a3c:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a48:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a54:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a60:	2301      	movs	r3, #1
 8002a62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a72:	2308      	movs	r3, #8
 8002a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	483e      	ldr	r0, [pc, #248]	; (8002b78 <HAL_UART_MspInit+0x1ac>)
 8002a80:	f000 fa28 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a84:	2304      	movs	r3, #4
 8002a86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002a96:	230c      	movs	r3, #12
 8002a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa6:	f000 fa15 	bl	8002ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002aaa:	e05c      	b.n	8002b66 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a32      	ldr	r2, [pc, #200]	; (8002b7c <HAL_UART_MspInit+0x1b0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d157      	bne.n	8002b66 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abe:	f107 0320 	add.w	r3, r7, #32
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 f990 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_UART_MspInit+0x106>
      Error_Handler();
 8002ace:	f7ff f9db 	bl	8001e88 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad6:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002adc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ade:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af6:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_UART_MspInit+0x1a8>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_RX_Pin;
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b2c:	2307      	movs	r3, #7
 8002b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b36:	4619      	mov	r1, r3
 8002b38:	480f      	ldr	r0, [pc, #60]	; (8002b78 <HAL_UART_MspInit+0x1ac>)
 8002b3a:	f000 f9cb 	bl	8002ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_TX_Pin;
 8002b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b52:	2307      	movs	r3, #7
 8002b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(HC05_TX_GPIO_Port, &GPIO_InitStruct);
 8002b58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b62:	f000 f9b7 	bl	8002ed4 <HAL_GPIO_Init>
}
 8002b66:	bf00      	nop
 8002b68:	3788      	adds	r7, #136	; 0x88
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40008000 	.word	0x40008000
 8002b74:	40021000 	.word	0x40021000
 8002b78:	48000800 	.word	0x48000800
 8002b7c:	40013800 	.word	0x40013800

08002b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8002b86:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b88:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <LoopForever+0xe>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b9c:	4c0b      	ldr	r4, [pc, #44]	; (8002bcc <LoopForever+0x16>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002baa:	f7ff fb8b 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f007 f867 	bl	8009c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bb2:	f7ff f8ff 	bl	8001db4 <main>

08002bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bb6:	e7fe      	b.n	8002bb6 <LoopForever>
  ldr   r0, =_estack
 8002bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002bc4:	0800ca40 	.word	0x0800ca40
  ldr r2, =_sbss
 8002bc8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002bcc:	20002664 	.word	0x20002664

08002bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC1_2_IRQHandler>

08002bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bdc:	2003      	movs	r0, #3
 8002bde:	f000 f939 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002be2:	200f      	movs	r0, #15
 8002be4:	f000 f80e 	bl	8002c04 <HAL_InitTick>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	71fb      	strb	r3, [r7, #7]
 8002bf2:	e001      	b.n	8002bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bf4:	f7ff fad0 	bl	8002198 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bf8:	79fb      	ldrb	r3, [r7, #7]

}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_InitTick+0x68>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d022      	beq.n	8002c5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_InitTick+0x6c>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <HAL_InitTick+0x68>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f944 	bl	8002eba <HAL_SYSTICK_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10f      	bne.n	8002c58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	d809      	bhi.n	8002c52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	f04f 30ff 	mov.w	r0, #4294967295
 8002c46:	f000 f910 	bl	8002e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_InitTick+0x70>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e007      	b.n	8002c62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e004      	b.n	8002c62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e001      	b.n	8002c62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000014 	.word	0x20000014
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	20000010 	.word	0x20000010

08002c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_IncTick+0x1c>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_IncTick+0x20>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <HAL_IncTick+0x1c>)
 8002c88:	6013      	str	r3, [r2, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000448 	.word	0x20000448
 8002c98:	20000014 	.word	0x20000014

08002c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_GetTick+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000448 	.word	0x20000448

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	; (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	; (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	; (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	; 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e20:	d301      	bcc.n	8002e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00f      	b.n	8002e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <SysTick_Config+0x40>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2e:	210f      	movs	r1, #15
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f7ff ff8e 	bl	8002d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <SysTick_Config+0x40>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <SysTick_Config+0x40>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff29 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff40 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff90 	bl	8002da8 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5f 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff33 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa4 	bl	8002e10 <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ee2:	e15a      	b.n	800319a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 814c 	beq.w	8003194 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d005      	beq.n	8002f14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d130      	bne.n	8002f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	f003 0201 	and.w	r2, r3, #1
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d017      	beq.n	8002fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d123      	bne.n	8003006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3208      	adds	r2, #8
 8002fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	6939      	ldr	r1, [r7, #16]
 8003002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	2203      	movs	r2, #3
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0203 	and.w	r2, r3, #3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80a6 	beq.w	8003194 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003048:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_GPIO_Init+0x2e4>)
 800304a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304c:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <HAL_GPIO_Init+0x2e4>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6613      	str	r3, [r2, #96]	; 0x60
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <HAL_GPIO_Init+0x2e4>)
 8003056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003060:	4a56      	ldr	r2, [pc, #344]	; (80031bc <HAL_GPIO_Init+0x2e8>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	3302      	adds	r3, #2
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	220f      	movs	r2, #15
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800308a:	d01f      	beq.n	80030cc <HAL_GPIO_Init+0x1f8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a4c      	ldr	r2, [pc, #304]	; (80031c0 <HAL_GPIO_Init+0x2ec>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d019      	beq.n	80030c8 <HAL_GPIO_Init+0x1f4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a4b      	ldr	r2, [pc, #300]	; (80031c4 <HAL_GPIO_Init+0x2f0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d013      	beq.n	80030c4 <HAL_GPIO_Init+0x1f0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a4a      	ldr	r2, [pc, #296]	; (80031c8 <HAL_GPIO_Init+0x2f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00d      	beq.n	80030c0 <HAL_GPIO_Init+0x1ec>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_GPIO_Init+0x2f8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <HAL_GPIO_Init+0x1e8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x2fc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_GPIO_Init+0x1e4>
 80030b4:	2305      	movs	r3, #5
 80030b6:	e00a      	b.n	80030ce <HAL_GPIO_Init+0x1fa>
 80030b8:	2306      	movs	r3, #6
 80030ba:	e008      	b.n	80030ce <HAL_GPIO_Init+0x1fa>
 80030bc:	2304      	movs	r3, #4
 80030be:	e006      	b.n	80030ce <HAL_GPIO_Init+0x1fa>
 80030c0:	2303      	movs	r3, #3
 80030c2:	e004      	b.n	80030ce <HAL_GPIO_Init+0x1fa>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e002      	b.n	80030ce <HAL_GPIO_Init+0x1fa>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_GPIO_Init+0x1fa>
 80030cc:	2300      	movs	r3, #0
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	f002 0203 	and.w	r2, r2, #3
 80030d4:	0092      	lsls	r2, r2, #2
 80030d6:	4093      	lsls	r3, r2
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030de:	4937      	ldr	r1, [pc, #220]	; (80031bc <HAL_GPIO_Init+0x2e8>)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_GPIO_Init+0x300>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003110:	4a30      	ldr	r2, [pc, #192]	; (80031d4 <HAL_GPIO_Init+0x300>)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003116:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_GPIO_Init+0x300>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800313a:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <HAL_GPIO_Init+0x300>)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_GPIO_Init+0x300>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_GPIO_Init+0x300>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_GPIO_Init+0x300>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_GPIO_Init+0x300>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f ae9d 	bne.w	8002ee4 <HAL_GPIO_Init+0x10>
  }
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010000 	.word	0x40010000
 80031c0:	48000400 	.word	0x48000400
 80031c4:	48000800 	.word	0x48000800
 80031c8:	48000c00 	.word	0x48000c00
 80031cc:	48001000 	.word	0x48001000
 80031d0:	48001400 	.word	0x48001400
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e001      	b.n	80031fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003224:	e002      	b.n	800322c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d141      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003246:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d131      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003254:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325a:	4a46      	ldr	r2, [pc, #280]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800326c:	4a41      	ldr	r2, [pc, #260]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003274:	4b40      	ldr	r3, [pc, #256]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2232      	movs	r2, #50	; 0x32
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a3f      	ldr	r2, [pc, #252]	; (800337c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	3301      	adds	r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800328a:	e002      	b.n	8003292 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	4b38      	ldr	r3, [pc, #224]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329e:	d102      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f2      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a6:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d158      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e057      	b.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032be:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032c8:	e04d      	b.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d141      	bne.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d131      	bne.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e0:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e6:	4a23      	ldr	r2, [pc, #140]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f8:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2232      	movs	r2, #50	; 0x32
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	0c9b      	lsrs	r3, r3, #18
 8003312:	3301      	adds	r3, #1
 8003314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003316:	e002      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3b01      	subs	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	d102      	bne.n	8003332 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f2      	bne.n	8003318 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d112      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e011      	b.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003354:	e007      	b.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800335e:	4a05      	ldr	r2, [pc, #20]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003364:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40007000 	.word	0x40007000
 8003378:	2000000c 	.word	0x2000000c
 800337c:	431bde83 	.word	0x431bde83

08003380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e306      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d075      	beq.n	800348a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339e:	4b97      	ldr	r3, [pc, #604]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a8:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d102      	bne.n	80033be <HAL_RCC_OscConfig+0x3e>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_OscConfig+0x44>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	4b8d      	ldr	r3, [pc, #564]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05b      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e2e1      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x74>
 80033e6:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a84      	ldr	r2, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x98>
 80033fe:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7e      	ldr	r2, [pc, #504]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7b      	ldr	r2, [pc, #492]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 8003418:	4b78      	ldr	r3, [pc, #480]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a77      	ldr	r2, [pc, #476]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b75      	ldr	r3, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a74      	ldr	r2, [pc, #464]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff fc30 	bl	8002c9c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7ff fc2c 	bl	8002c9c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e2a6      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003452:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xc0>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7ff fc1c 	bl	8002c9c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7ff fc18 	bl	8002c9c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e292      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347a:	4b60      	ldr	r3, [pc, #384]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d075      	beq.n	8003582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003496:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a0:	4b56      	ldr	r3, [pc, #344]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0x136>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_OscConfig+0x13c>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d11f      	bne.n	80034fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_OscConfig+0x154>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e265      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	4946      	ldr	r1, [pc, #280]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fb89 	bl	8002c04 <HAL_InitTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d043      	beq.n	8003580 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e251      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d023      	beq.n	800354c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7ff fbc4 	bl	8002c9c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7ff fbc0 	bl	8002c9c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e23a      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	492d      	ldr	r1, [pc, #180]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
 800354a:	e01a      	b.n	8003582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7ff fba0 	bl	8002c9c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7ff fb9c 	bl	8002c9c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e216      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1e0>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d041      	beq.n	8003612 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7ff fb79 	bl	8002c9c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ae:	f7ff fb75 	bl	8002c9c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1ef      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ef      	beq.n	80035ae <HAL_RCC_OscConfig+0x22e>
 80035ce:	e020      	b.n	8003612 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7ff fb5c 	bl	8002c9c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e6:	e00d      	b.n	8003604 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7ff fb58 	bl	8002c9c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d906      	bls.n	8003604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1d2      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003604:	4b8c      	ldr	r3, [pc, #560]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ea      	bne.n	80035e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a6 	beq.w	800376c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003624:	4b84      	ldr	r3, [pc, #528]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x2b4>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x2b6>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4a7e      	ldr	r2, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
 8003646:	4b7c      	ldr	r3, [pc, #496]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003656:	4b79      	ldr	r3, [pc, #484]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7ff fb15 	bl	8002c9c <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7ff fb11 	bl	8002c9c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e18b      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003688:	4b6c      	ldr	r3, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d108      	bne.n	80036ae <HAL_RCC_OscConfig+0x32e>
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ac:	e024      	b.n	80036f8 <HAL_RCC_OscConfig+0x378>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d110      	bne.n	80036d8 <HAL_RCC_OscConfig+0x358>
 80036b6:	4b60      	ldr	r3, [pc, #384]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	4a5e      	ldr	r2, [pc, #376]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	4a5a      	ldr	r2, [pc, #360]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d6:	e00f      	b.n	80036f8 <HAL_RCC_OscConfig+0x378>
 80036d8:	4b57      	ldr	r3, [pc, #348]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d016      	beq.n	800372e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7ff facc 	bl	8002c9c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7ff fac8 	bl	8002c9c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e140      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371e:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ed      	beq.n	8003708 <HAL_RCC_OscConfig+0x388>
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7ff fab5 	bl	8002c9c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7ff fab1 	bl	8002c9c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e129      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ed      	bne.n	8003736 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b35      	ldr	r3, [pc, #212]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	4a34      	ldr	r2, [pc, #208]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01c      	beq.n	80037ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7ff fa84 	bl	8002c9c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003798:	f7ff fa80 	bl	8002c9c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0fa      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCC_OscConfig+0x418>
 80037b8:	e01b      	b.n	80037f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7ff fa67 	bl	8002c9c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d2:	f7ff fa63 	bl	8002c9c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0dd      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ef      	bne.n	80037d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80d1 	beq.w	800399e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b0c      	cmp	r3, #12
 8003806:	f000 808b 	beq.w	8003920 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d15e      	bne.n	80038d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7ff fa3d 	bl	8002c9c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	e00c      	b.n	8003840 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7ff fa39 	bl	8002c9c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d905      	bls.n	8003840 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0b3      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
 8003838:	40021000 	.word	0x40021000
 800383c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ec      	bne.n	8003826 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	4b56      	ldr	r3, [pc, #344]	; (80039ac <HAL_RCC_OscConfig+0x62c>)
 8003852:	4013      	ands	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6a11      	ldr	r1, [r2, #32]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385c:	3a01      	subs	r2, #1
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003866:	0212      	lsls	r2, r2, #8
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	3a01      	subs	r2, #1
 8003872:	0552      	lsls	r2, r2, #21
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003886:	06d2      	lsls	r2, r2, #27
 8003888:	430a      	orrs	r2, r1
 800388a:	4947      	ldr	r1, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800388c:	4313      	orrs	r3, r2
 800388e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a41      	ldr	r2, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7ff f9f8 	bl	8002c9c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7ff f9f4 	bl	8002c9c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e06e      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x530>
 80038ce:	e066      	b.n	800399e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a34      	ldr	r2, [pc, #208]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a31      	ldr	r2, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a2e      	ldr	r2, [pc, #184]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7ff f9d0 	bl	8002c9c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7ff f9cc 	bl	8002c9c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e046      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x580>
 800391e:	e03e      	b.n	800399e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e039      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	429a      	cmp	r2, r3
 800393e:	d12c      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	3b01      	subs	r3, #1
 800394c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d123      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d11b      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d113      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d109      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	019f800c 	.word	0x019f800c

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e11e      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b91      	ldr	r3, [pc, #580]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b8e      	ldr	r3, [pc, #568]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	498c      	ldr	r1, [pc, #560]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b8a      	ldr	r3, [pc, #552]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e106      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d073      	beq.n	8003aec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d129      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0c:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0f4      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a1c:	f000 f99e 	bl	8003d5c <RCC_GetSysClockFreqFromPLLSource>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_ClockConfig+0x268>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d93f      	bls.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a2a:	4b7a      	ldr	r3, [pc, #488]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d033      	beq.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d12f      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a4a:	4b72      	ldr	r3, [pc, #456]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	4a70      	ldr	r2, [pc, #448]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e024      	b.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a68:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0c6      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0be      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a88:	f000 f8ce 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4a61      	ldr	r2, [pc, #388]	; (8003c18 <HAL_RCC_ClockConfig+0x268>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d909      	bls.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a96:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	4a5d      	ldr	r2, [pc, #372]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4957      	ldr	r1, [pc, #348]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7ff f8ee 	bl	8002c9c <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7ff f8ea 	bl	8002c9c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e095      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d023      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a42      	ldr	r2, [pc, #264]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b24:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4936      	ldr	r1, [pc, #216]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b46:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b52:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d21d      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b60:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 020f 	bic.w	r2, r3, #15
 8003b68:	4929      	ldr	r1, [pc, #164]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b70:	f7ff f894 	bl	8002c9c <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7ff f890 	bl	8002c9c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03b      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1ed      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4917      	ldr	r1, [pc, #92]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490f      	ldr	r1, [pc, #60]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bda:	f000 f825 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	490c      	ldr	r1, [pc, #48]	; (8003c1c <HAL_RCC_ClockConfig+0x26c>)
 8003bec:	5ccb      	ldrb	r3, [r1, r3]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_RCC_ClockConfig+0x270>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f800 	bl	8002c04 <HAL_InitTick>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	04c4b400 	.word	0x04c4b400
 8003c1c:	0800c750 	.word	0x0800c750
 8003c20:	2000000c 	.word	0x2000000c
 8003c24:	20000010 	.word	0x20000010

08003c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d102      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e047      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c4c:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e03e      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	d136      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3301      	adds	r3, #1
 8003c74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d10c      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c86:	68d2      	ldr	r2, [r2, #12]
 8003c88:	0a12      	lsrs	r2, r2, #8
 8003c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	617b      	str	r3, [r7, #20]
      break;
 8003c94:	e00c      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c96:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	0a12      	lsrs	r2, r2, #8
 8003ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]
      break;
 8003cae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0e5b      	lsrs	r3, r3, #25
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e001      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cd0:	693b      	ldr	r3, [r7, #16]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	007a1200 	.word	0x007a1200

08003cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4904      	ldr	r1, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	0800c760 	.word	0x0800c760

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d34:	f7ff ffda 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0adb      	lsrs	r3, r3, #11
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	0800c760 	.word	0x0800c760

08003d5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3301      	adds	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d10c      	bne.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d80:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d8a:	68d2      	ldr	r2, [r2, #12]
 8003d8c:	0a12      	lsrs	r2, r2, #8
 8003d8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	617b      	str	r3, [r7, #20]
    break;
 8003d98:	e00c      	b.n	8003db4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d9a:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	0a12      	lsrs	r2, r2, #8
 8003da8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	617b      	str	r3, [r7, #20]
    break;
 8003db2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0e5b      	lsrs	r3, r3, #25
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dce:	687b      	ldr	r3, [r7, #4]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	007a1200 	.word	0x007a1200
 8003de4:	00f42400 	.word	0x00f42400

08003de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df0:	2300      	movs	r3, #0
 8003df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003df4:	2300      	movs	r3, #0
 8003df6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8098 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
 8003e22:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e32:	4b3a      	ldr	r3, [pc, #232]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a39      	ldr	r2, [pc, #228]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e3e:	f7fe ff2d 	bl	8002c9c <HAL_GetTick>
 8003e42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e44:	e009      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fe ff29 	bl	8002c9c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d902      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	74fb      	strb	r3, [r7, #19]
        break;
 8003e58:	e005      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5a:	4b30      	ldr	r3, [pc, #192]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ef      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d159      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01e      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d019      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e88:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e94:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7fe fee9 	bl	8002c9c <HAL_GetTick>
 8003eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ecc:	e00b      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe fee5 	bl	8002c9c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d902      	bls.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ec      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f10:	e008      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	74bb      	strb	r3, [r7, #18]
 8003f16:	e005      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f24:	7c7b      	ldrb	r3, [r7, #17]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4ba7      	ldr	r3, [pc, #668]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	4aa6      	ldr	r2, [pc, #664]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f42:	4ba1      	ldr	r3, [pc, #644]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f023 0203 	bic.w	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	499d      	ldr	r1, [pc, #628]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f64:	4b98      	ldr	r3, [pc, #608]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f023 020c 	bic.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4995      	ldr	r1, [pc, #596]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f86:	4b90      	ldr	r3, [pc, #576]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	498c      	ldr	r1, [pc, #560]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa8:	4b87      	ldr	r3, [pc, #540]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	4984      	ldr	r1, [pc, #528]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fca:	4b7f      	ldr	r3, [pc, #508]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	497b      	ldr	r1, [pc, #492]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fec:	4b76      	ldr	r3, [pc, #472]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	4973      	ldr	r1, [pc, #460]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800400e:	4b6e      	ldr	r3, [pc, #440]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	496a      	ldr	r1, [pc, #424]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004030:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4962      	ldr	r1, [pc, #392]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004052:	4b5d      	ldr	r3, [pc, #372]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	4959      	ldr	r1, [pc, #356]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004074:	4b54      	ldr	r3, [pc, #336]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	4951      	ldr	r1, [pc, #324]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004096:	4b4c      	ldr	r3, [pc, #304]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4948      	ldr	r1, [pc, #288]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b8:	4b43      	ldr	r3, [pc, #268]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4940      	ldr	r1, [pc, #256]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d8:	4b3b      	ldr	r3, [pc, #236]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a3a      	ldr	r2, [pc, #232]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f0:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	4932      	ldr	r1, [pc, #200]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410e:	d105      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004110:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d015      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	4924      	ldr	r1, [pc, #144]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004146:	d105      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004152:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d015      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	4916      	ldr	r1, [pc, #88]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417e:	d105      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d019      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4908      	ldr	r1, [pc, #32]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b6:	d109      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a02      	ldr	r2, [pc, #8]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c2:	60d3      	str	r3, [r2, #12]
 80041c4:	e002      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d015      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4926      	ldr	r1, [pc, #152]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041f8:	4b21      	ldr	r3, [pc, #132]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	4918      	ldr	r1, [pc, #96]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004248:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800426e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004272:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004274:	7cbb      	ldrb	r3, [r7, #18]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000

08004284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e049      	b.n	800432a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe f9d6 	bl	800265c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f001 f8e2 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e04c      	b.n	80043e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <HAL_TIM_Base_Start+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d022      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d01d      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_TIM_Base_Start+0xc4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d018      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a21      	ldr	r2, [pc, #132]	; (80043fc <HAL_TIM_Base_Start+0xc8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d013      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <HAL_TIM_Base_Start+0xcc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00e      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <HAL_TIM_Base_Start+0xd0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <HAL_TIM_Base_Start+0xd4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_TIM_Base_Start+0xd8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d115      	bne.n	80043d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <HAL_TIM_Base_Start+0xdc>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d015      	beq.n	80043e2 <HAL_TIM_Base_Start+0xae>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d011      	beq.n	80043e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0201 	orr.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ce:	e008      	b.n	80043e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e000      	b.n	80043e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40013400 	.word	0x40013400
 8004408:	40014000 	.word	0x40014000
 800440c:	40015000 	.word	0x40015000
 8004410:	00010007 	.word	0x00010007

08004414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e054      	b.n	80044d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d022      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d01d      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1b      	ldr	r2, [pc, #108]	; (80044fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d115      	bne.n	80044c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_TIM_Base_Start_IT+0xec>)
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d015      	beq.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d011      	beq.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e008      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40013400 	.word	0x40013400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40015000 	.word	0x40015000
 8004500:	00010007 	.word	0x00010007

08004504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e049      	b.n	80045aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fe f960 	bl	80027f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f000 ffa2 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start+0x24>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e03c      	b.n	8004652 <HAL_TIM_PWM_Start+0x9e>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d109      	bne.n	80045f2 <HAL_TIM_PWM_Start+0x3e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	e02f      	b.n	8004652 <HAL_TIM_PWM_Start+0x9e>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start+0x58>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e022      	b.n	8004652 <HAL_TIM_PWM_Start+0x9e>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d109      	bne.n	8004626 <HAL_TIM_PWM_Start+0x72>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e015      	b.n	8004652 <HAL_TIM_PWM_Start+0x9e>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b10      	cmp	r3, #16
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x8c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e008      	b.n	8004652 <HAL_TIM_PWM_Start+0x9e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0a6      	b.n	80047a8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_TIM_PWM_Start+0xb6>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	e023      	b.n	80046b2 <HAL_TIM_PWM_Start+0xfe>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Start+0xc6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004678:	e01b      	b.n	80046b2 <HAL_TIM_PWM_Start+0xfe>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Start+0xd6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004688:	e013      	b.n	80046b2 <HAL_TIM_PWM_Start+0xfe>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b0c      	cmp	r3, #12
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Start+0xe6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004698:	e00b      	b.n	80046b2 <HAL_TIM_PWM_Start+0xfe>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b10      	cmp	r3, #16
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Start+0xf6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a8:	e003      	b.n	80046b2 <HAL_TIM_PWM_Start+0xfe>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2201      	movs	r2, #1
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 fc7e 	bl	8005fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3a      	ldr	r2, [pc, #232]	; (80047b0 <HAL_TIM_PWM_Start+0x1fc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d018      	beq.n	80046fc <HAL_TIM_PWM_Start+0x148>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a39      	ldr	r2, [pc, #228]	; (80047b4 <HAL_TIM_PWM_Start+0x200>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <HAL_TIM_PWM_Start+0x148>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a37      	ldr	r2, [pc, #220]	; (80047b8 <HAL_TIM_PWM_Start+0x204>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_PWM_Start+0x148>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a36      	ldr	r2, [pc, #216]	; (80047bc <HAL_TIM_PWM_Start+0x208>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_PWM_Start+0x148>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a34      	ldr	r2, [pc, #208]	; (80047c0 <HAL_TIM_PWM_Start+0x20c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_PWM_Start+0x148>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a33      	ldr	r2, [pc, #204]	; (80047c4 <HAL_TIM_PWM_Start+0x210>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d101      	bne.n	8004700 <HAL_TIM_PWM_Start+0x14c>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_TIM_PWM_Start+0x14e>
 8004700:	2300      	movs	r3, #0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a25      	ldr	r2, [pc, #148]	; (80047b0 <HAL_TIM_PWM_Start+0x1fc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d022      	beq.n	8004766 <HAL_TIM_PWM_Start+0x1b2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d01d      	beq.n	8004766 <HAL_TIM_PWM_Start+0x1b2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <HAL_TIM_PWM_Start+0x214>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d018      	beq.n	8004766 <HAL_TIM_PWM_Start+0x1b2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_TIM_PWM_Start+0x218>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_TIM_PWM_Start+0x1b2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_TIM_PWM_Start+0x21c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00e      	beq.n	8004766 <HAL_TIM_PWM_Start+0x1b2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_TIM_PWM_Start+0x200>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d009      	beq.n	8004766 <HAL_TIM_PWM_Start+0x1b2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_TIM_PWM_Start+0x204>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d004      	beq.n	8004766 <HAL_TIM_PWM_Start+0x1b2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <HAL_TIM_PWM_Start+0x210>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d115      	bne.n	8004792 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_TIM_PWM_Start+0x220>)
 800476e:	4013      	ands	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b06      	cmp	r3, #6
 8004776:	d015      	beq.n	80047a4 <HAL_TIM_PWM_Start+0x1f0>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477e:	d011      	beq.n	80047a4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	e008      	b.n	80047a4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e000      	b.n	80047a6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40013400 	.word	0x40013400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800
 80047c4:	40015000 	.word	0x40015000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	00010007 	.word	0x00010007

080047d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e049      	b.n	800487e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f841 	bl	8004886 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 fe38 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_IC_Start_IT+0x1e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e023      	b.n	8004902 <HAL_TIM_IC_Start_IT+0x66>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d104      	bne.n	80048ca <HAL_TIM_IC_Start_IT+0x2e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e01b      	b.n	8004902 <HAL_TIM_IC_Start_IT+0x66>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d104      	bne.n	80048da <HAL_TIM_IC_Start_IT+0x3e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	e013      	b.n	8004902 <HAL_TIM_IC_Start_IT+0x66>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b0c      	cmp	r3, #12
 80048de:	d104      	bne.n	80048ea <HAL_TIM_IC_Start_IT+0x4e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e00b      	b.n	8004902 <HAL_TIM_IC_Start_IT+0x66>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_IC_Start_IT+0x5e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	e003      	b.n	8004902 <HAL_TIM_IC_Start_IT+0x66>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004900:	b2db      	uxtb	r3, r3
 8004902:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <HAL_TIM_IC_Start_IT+0x78>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e013      	b.n	800493c <HAL_TIM_IC_Start_IT+0xa0>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b04      	cmp	r3, #4
 8004918:	d104      	bne.n	8004924 <HAL_TIM_IC_Start_IT+0x88>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e00b      	b.n	800493c <HAL_TIM_IC_Start_IT+0xa0>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b08      	cmp	r3, #8
 8004928:	d104      	bne.n	8004934 <HAL_TIM_IC_Start_IT+0x98>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e003      	b.n	800493c <HAL_TIM_IC_Start_IT+0xa0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800493a:	b2db      	uxtb	r3, r3
 800493c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d102      	bne.n	800494a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004944:	7b7b      	ldrb	r3, [r7, #13]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d001      	beq.n	800494e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e0e2      	b.n	8004b14 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_TIM_IC_Start_IT+0xc2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495c:	e023      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x10a>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d104      	bne.n	800496e <HAL_TIM_IC_Start_IT+0xd2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496c:	e01b      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x10a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d104      	bne.n	800497e <HAL_TIM_IC_Start_IT+0xe2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497c:	e013      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x10a>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d104      	bne.n	800498e <HAL_TIM_IC_Start_IT+0xf2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800498c:	e00b      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x10a>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b10      	cmp	r3, #16
 8004992:	d104      	bne.n	800499e <HAL_TIM_IC_Start_IT+0x102>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499c:	e003      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x10a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_IC_Start_IT+0x11a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b4:	e013      	b.n	80049de <HAL_TIM_IC_Start_IT+0x142>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_IC_Start_IT+0x12a>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c4:	e00b      	b.n	80049de <HAL_TIM_IC_Start_IT+0x142>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_IC_Start_IT+0x13a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d4:	e003      	b.n	80049de <HAL_TIM_IC_Start_IT+0x142>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	d841      	bhi.n	8004a68 <HAL_TIM_IC_Start_IT+0x1cc>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <HAL_TIM_IC_Start_IT+0x150>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a69 	.word	0x08004a69
 80049f4:	08004a69 	.word	0x08004a69
 80049f8:	08004a69 	.word	0x08004a69
 80049fc:	08004a33 	.word	0x08004a33
 8004a00:	08004a69 	.word	0x08004a69
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004a69 	.word	0x08004a69
 8004a0c:	08004a45 	.word	0x08004a45
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a69 	.word	0x08004a69
 8004a18:	08004a69 	.word	0x08004a69
 8004a1c:	08004a57 	.word	0x08004a57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0202 	orr.w	r2, r2, #2
 8004a2e:	60da      	str	r2, [r3, #12]
      break;
 8004a30:	e01d      	b.n	8004a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0204 	orr.w	r2, r2, #4
 8004a40:	60da      	str	r2, [r3, #12]
      break;
 8004a42:	e014      	b.n	8004a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	60da      	str	r2, [r3, #12]
      break;
 8004a54:	e00b      	b.n	8004a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0210 	orr.w	r2, r2, #16
 8004a64:	60da      	str	r2, [r3, #12]
      break;
 8004a66:	e002      	b.n	8004a6e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d14e      	bne.n	8004b12 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 fa9d 	bl	8005fbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a25      	ldr	r2, [pc, #148]	; (8004b1c <HAL_TIM_IC_Start_IT+0x280>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d022      	beq.n	8004ad2 <HAL_TIM_IC_Start_IT+0x236>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d01d      	beq.n	8004ad2 <HAL_TIM_IC_Start_IT+0x236>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <HAL_TIM_IC_Start_IT+0x284>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d018      	beq.n	8004ad2 <HAL_TIM_IC_Start_IT+0x236>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <HAL_TIM_IC_Start_IT+0x288>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_TIM_IC_Start_IT+0x236>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <HAL_TIM_IC_Start_IT+0x28c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_TIM_IC_Start_IT+0x236>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	; (8004b2c <HAL_TIM_IC_Start_IT+0x290>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_TIM_IC_Start_IT+0x236>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1b      	ldr	r2, [pc, #108]	; (8004b30 <HAL_TIM_IC_Start_IT+0x294>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIM_IC_Start_IT+0x236>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <HAL_TIM_IC_Start_IT+0x298>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d115      	bne.n	8004afe <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <HAL_TIM_IC_Start_IT+0x29c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b06      	cmp	r3, #6
 8004ae2:	d015      	beq.n	8004b10 <HAL_TIM_IC_Start_IT+0x274>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aea:	d011      	beq.n	8004b10 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afc:	e008      	b.n	8004b10 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e000      	b.n	8004b12 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40015000 	.word	0x40015000
 8004b38:	00010007 	.word	0x00010007

08004b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d122      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d11b      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0202 	mvn.w	r2, #2
 8004b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fef2 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fc62 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fc69 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d122      	bne.n	8004bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d11b      	bne.n	8004bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0204 	mvn.w	r2, #4
 8004bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fec8 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fc38 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fc3f 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0208 	mvn.w	r2, #8
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2204      	movs	r2, #4
 8004c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc fe9e 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fc0e 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fc15 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d122      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0210 	mvn.w	r2, #16
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fc fe74 	bl	8001968 <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fbe4 	bl	8005450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fbeb 	bl	8005464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10e      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d107      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0201 	mvn.w	r2, #1
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc ff44 	bl	8001b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b80      	cmp	r3, #128	; 0x80
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f001 fa2e 	bl	8006148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfa:	d10e      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d107      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f001 fa21 	bl	800615c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d10e      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d107      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fb99 	bl	8005478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d10e      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0220 	mvn.w	r2, #32
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 f9e1 	bl	8006134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d80:	d10f      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d90:	d107      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f001 f9e7 	bl	8006170 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004db0:	d10f      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc0:	d107      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f001 f9d9 	bl	8006184 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de0:	d10f      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 f9cb 	bl	8006198 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e10:	d10f      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e20:	d107      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f9bd 	bl	80061ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b086      	sub	sp, #24
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e088      	b.n	8004f6a <HAL_TIM_IC_ConfigChannel+0x130>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11b      	bne.n	8004e9e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f000 fedb 	bl	8005c30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 020c 	bic.w	r2, r2, #12
 8004e88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6999      	ldr	r1, [r3, #24]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	619a      	str	r2, [r3, #24]
 8004e9c:	e060      	b.n	8004f60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d11c      	bne.n	8004ede <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f000 ff5f 	bl	8005d76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ec6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6999      	ldr	r1, [r3, #24]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	021a      	lsls	r2, r3, #8
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	619a      	str	r2, [r3, #24]
 8004edc:	e040      	b.n	8004f60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6819      	ldr	r1, [r3, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f000 ffac 	bl	8005e50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 020c 	bic.w	r2, r2, #12
 8004f06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69d9      	ldr	r1, [r3, #28]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	61da      	str	r2, [r3, #28]
 8004f1a:	e021      	b.n	8004f60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d11c      	bne.n	8004f5c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f000 ffc9 	bl	8005ec8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f44:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69d9      	ldr	r1, [r3, #28]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	021a      	lsls	r2, r3, #8
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	61da      	str	r2, [r3, #28]
 8004f5a:	e001      	b.n	8004f60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0ff      	b.n	8005192 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b14      	cmp	r3, #20
 8004f9e:	f200 80f0 	bhi.w	8005182 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08005183 	.word	0x08005183
 8004fb0:	08005183 	.word	0x08005183
 8004fb4:	08005183 	.word	0x08005183
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	08005183 	.word	0x08005183
 8004fc0:	08005183 	.word	0x08005183
 8004fc4:	08005183 	.word	0x08005183
 8004fc8:	0800507f 	.word	0x0800507f
 8004fcc:	08005183 	.word	0x08005183
 8004fd0:	08005183 	.word	0x08005183
 8004fd4:	08005183 	.word	0x08005183
 8004fd8:	080050bf 	.word	0x080050bf
 8004fdc:	08005183 	.word	0x08005183
 8004fe0:	08005183 	.word	0x08005183
 8004fe4:	08005183 	.word	0x08005183
 8004fe8:	08005101 	.word	0x08005101
 8004fec:	08005183 	.word	0x08005183
 8004ff0:	08005183 	.word	0x08005183
 8004ff4:	08005183 	.word	0x08005183
 8004ff8:	08005141 	.word	0x08005141
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 faea 	bl	80055dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	619a      	str	r2, [r3, #24]
      break;
 800503a:	e0a5      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb64 	bl	8005710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	619a      	str	r2, [r3, #24]
      break;
 800507c:	e084      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fbd7 	bl	8005838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0208 	orr.w	r2, r2, #8
 8005098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0204 	bic.w	r2, r2, #4
 80050a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69d9      	ldr	r1, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	61da      	str	r2, [r3, #28]
      break;
 80050bc:	e064      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fc49 	bl	800595c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	021a      	lsls	r2, r3, #8
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	61da      	str	r2, [r3, #28]
      break;
 80050fe:	e043      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fcbc 	bl	8005a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800513e:	e023      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fd06 	bl	8005b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005180:	e002      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
      break;
 8005186:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop

0800519c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIM_ConfigClockSource+0x1c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0f6      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x20a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80051d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6f      	ldr	r2, [pc, #444]	; (80053b0 <HAL_TIM_ConfigClockSource+0x214>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	f000 80c1 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 80051f8:	4a6d      	ldr	r2, [pc, #436]	; (80053b0 <HAL_TIM_ConfigClockSource+0x214>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	f200 80c6 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005200:	4a6c      	ldr	r2, [pc, #432]	; (80053b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f000 80b9 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 8005208:	4a6a      	ldr	r2, [pc, #424]	; (80053b4 <HAL_TIM_ConfigClockSource+0x218>)
 800520a:	4293      	cmp	r3, r2
 800520c:	f200 80be 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005210:	4a69      	ldr	r2, [pc, #420]	; (80053b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	f000 80b1 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 8005218:	4a67      	ldr	r2, [pc, #412]	; (80053b8 <HAL_TIM_ConfigClockSource+0x21c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f200 80b6 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005220:	4a66      	ldr	r2, [pc, #408]	; (80053bc <HAL_TIM_ConfigClockSource+0x220>)
 8005222:	4293      	cmp	r3, r2
 8005224:	f000 80a9 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 8005228:	4a64      	ldr	r2, [pc, #400]	; (80053bc <HAL_TIM_ConfigClockSource+0x220>)
 800522a:	4293      	cmp	r3, r2
 800522c:	f200 80ae 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005230:	4a63      	ldr	r2, [pc, #396]	; (80053c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f000 80a1 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 8005238:	4a61      	ldr	r2, [pc, #388]	; (80053c0 <HAL_TIM_ConfigClockSource+0x224>)
 800523a:	4293      	cmp	r3, r2
 800523c:	f200 80a6 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005240:	4a60      	ldr	r2, [pc, #384]	; (80053c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005242:	4293      	cmp	r3, r2
 8005244:	f000 8099 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 8005248:	4a5e      	ldr	r2, [pc, #376]	; (80053c4 <HAL_TIM_ConfigClockSource+0x228>)
 800524a:	4293      	cmp	r3, r2
 800524c:	f200 809e 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005250:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005254:	f000 8091 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 8005258:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800525c:	f200 8096 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005264:	f000 8089 	beq.w	800537a <HAL_TIM_ConfigClockSource+0x1de>
 8005268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526c:	f200 808e 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005274:	d03e      	beq.n	80052f4 <HAL_TIM_ConfigClockSource+0x158>
 8005276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527a:	f200 8087 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005282:	f000 8086 	beq.w	8005392 <HAL_TIM_ConfigClockSource+0x1f6>
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528a:	d87f      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d01a      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x12a>
 8005290:	2b70      	cmp	r3, #112	; 0x70
 8005292:	d87b      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d050      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x19e>
 8005298:	2b60      	cmp	r3, #96	; 0x60
 800529a:	d877      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d03c      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x17e>
 80052a0:	2b50      	cmp	r3, #80	; 0x50
 80052a2:	d873      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d058      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x1be>
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d86f      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d064      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x1de>
 80052b0:	2b30      	cmp	r3, #48	; 0x30
 80052b2:	d86b      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d060      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x1de>
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d867      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05c      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x1de>
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d05a      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x1de>
 80052c4:	e062      	b.n	800538c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6899      	ldr	r1, [r3, #8]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f000 fe51 	bl	8005f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	609a      	str	r2, [r3, #8]
      break;
 80052f2:	e04f      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6899      	ldr	r1, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f000 fe3a 	bl	8005f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005316:	609a      	str	r2, [r3, #8]
      break;
 8005318:	e03c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	461a      	mov	r2, r3
 8005328:	f000 fcf6 	bl	8005d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2150      	movs	r1, #80	; 0x50
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fe05 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 8005338:	e02c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6859      	ldr	r1, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	461a      	mov	r2, r3
 8005348:	f000 fd52 	bl	8005df0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2160      	movs	r1, #96	; 0x60
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fdf5 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 8005358:	e01c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6859      	ldr	r1, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	461a      	mov	r2, r3
 8005368:	f000 fcd6 	bl	8005d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fde5 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 8005378:	e00c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f000 fddc 	bl	8005f42 <TIM_ITRx_SetConfig>
      break;
 800538a:	e003      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
      break;
 8005390:	e000      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	00100070 	.word	0x00100070
 80053b4:	00100060 	.word	0x00100060
 80053b8:	00100050 	.word	0x00100050
 80053bc:	00100040 	.word	0x00100040
 80053c0:	00100030 	.word	0x00100030
 80053c4:	00100020 	.word	0x00100020

080053c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d831      	bhi.n	8005440 <HAL_TIM_ReadCapturedValue+0x78>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	08005419 	.word	0x08005419
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005441 	.word	0x08005441
 80053f0:	08005441 	.word	0x08005441
 80053f4:	08005423 	.word	0x08005423
 80053f8:	08005441 	.word	0x08005441
 80053fc:	08005441 	.word	0x08005441
 8005400:	08005441 	.word	0x08005441
 8005404:	0800542d 	.word	0x0800542d
 8005408:	08005441 	.word	0x08005441
 800540c:	08005441 	.word	0x08005441
 8005410:	08005441 	.word	0x08005441
 8005414:	08005437 	.word	0x08005437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	60fb      	str	r3, [r7, #12]

      break;
 8005420:	e00f      	b.n	8005442 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	60fb      	str	r3, [r7, #12]

      break;
 800542a:	e00a      	b.n	8005442 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	60fb      	str	r3, [r7, #12]

      break;
 8005434:	e005      	b.n	8005442 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	60fb      	str	r3, [r7, #12]

      break;
 800543e:	e000      	b.n	8005442 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005440:	bf00      	nop
  }

  return tmpreg;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a46      	ldr	r2, [pc, #280]	; (80055b8 <TIM_Base_SetConfig+0x12c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d017      	beq.n	80054d4 <TIM_Base_SetConfig+0x48>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d013      	beq.n	80054d4 <TIM_Base_SetConfig+0x48>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a43      	ldr	r2, [pc, #268]	; (80055bc <TIM_Base_SetConfig+0x130>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00f      	beq.n	80054d4 <TIM_Base_SetConfig+0x48>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a42      	ldr	r2, [pc, #264]	; (80055c0 <TIM_Base_SetConfig+0x134>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_Base_SetConfig+0x48>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a41      	ldr	r2, [pc, #260]	; (80055c4 <TIM_Base_SetConfig+0x138>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_Base_SetConfig+0x48>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a40      	ldr	r2, [pc, #256]	; (80055c8 <TIM_Base_SetConfig+0x13c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0x48>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3f      	ldr	r2, [pc, #252]	; (80055cc <TIM_Base_SetConfig+0x140>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d108      	bne.n	80054e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a33      	ldr	r2, [pc, #204]	; (80055b8 <TIM_Base_SetConfig+0x12c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d023      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a30      	ldr	r2, [pc, #192]	; (80055bc <TIM_Base_SetConfig+0x130>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2f      	ldr	r2, [pc, #188]	; (80055c0 <TIM_Base_SetConfig+0x134>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2e      	ldr	r2, [pc, #184]	; (80055c4 <TIM_Base_SetConfig+0x138>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2d      	ldr	r2, [pc, #180]	; (80055c8 <TIM_Base_SetConfig+0x13c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2d      	ldr	r2, [pc, #180]	; (80055d0 <TIM_Base_SetConfig+0x144>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <TIM_Base_SetConfig+0x148>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <TIM_Base_SetConfig+0x14c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0xaa>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <TIM_Base_SetConfig+0x140>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a12      	ldr	r2, [pc, #72]	; (80055b8 <TIM_Base_SetConfig+0x12c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d013      	beq.n	800559c <TIM_Base_SetConfig+0x110>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <TIM_Base_SetConfig+0x13c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_Base_SetConfig+0x110>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a14      	ldr	r2, [pc, #80]	; (80055d0 <TIM_Base_SetConfig+0x144>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0x110>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <TIM_Base_SetConfig+0x148>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0x110>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a12      	ldr	r2, [pc, #72]	; (80055d8 <TIM_Base_SetConfig+0x14c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0x110>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a0d      	ldr	r2, [pc, #52]	; (80055cc <TIM_Base_SetConfig+0x140>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40013400 	.word	0x40013400
 80055cc:	40015000 	.word	0x40015000
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800

080055dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0201 	bic.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 0302 	bic.w	r3, r3, #2
 8005628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a30      	ldr	r2, [pc, #192]	; (80056f8 <TIM_OC1_SetConfig+0x11c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <TIM_OC1_SetConfig+0x88>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a2f      	ldr	r2, [pc, #188]	; (80056fc <TIM_OC1_SetConfig+0x120>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00f      	beq.n	8005664 <TIM_OC1_SetConfig+0x88>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <TIM_OC1_SetConfig+0x124>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_OC1_SetConfig+0x88>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a2d      	ldr	r2, [pc, #180]	; (8005704 <TIM_OC1_SetConfig+0x128>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_OC1_SetConfig+0x88>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <TIM_OC1_SetConfig+0x12c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_OC1_SetConfig+0x88>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a2b      	ldr	r2, [pc, #172]	; (800570c <TIM_OC1_SetConfig+0x130>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10c      	bne.n	800567e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0308 	bic.w	r3, r3, #8
 800566a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 0304 	bic.w	r3, r3, #4
 800567c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <TIM_OC1_SetConfig+0x11c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <TIM_OC1_SetConfig+0xd2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <TIM_OC1_SetConfig+0x120>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_OC1_SetConfig+0xd2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1b      	ldr	r2, [pc, #108]	; (8005700 <TIM_OC1_SetConfig+0x124>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_OC1_SetConfig+0xd2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <TIM_OC1_SetConfig+0x128>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_OC1_SetConfig+0xd2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a19      	ldr	r2, [pc, #100]	; (8005708 <TIM_OC1_SetConfig+0x12c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_OC1_SetConfig+0xd2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a18      	ldr	r2, [pc, #96]	; (800570c <TIM_OC1_SetConfig+0x130>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d111      	bne.n	80056d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40013400 	.word	0x40013400
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800
 800570c:	40015000 	.word	0x40015000

08005710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0210 	bic.w	r2, r3, #16
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0320 	bic.w	r3, r3, #32
 800575e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <TIM_OC2_SetConfig+0x110>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d007      	beq.n	8005784 <TIM_OC2_SetConfig+0x74>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2b      	ldr	r2, [pc, #172]	; (8005824 <TIM_OC2_SetConfig+0x114>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_OC2_SetConfig+0x74>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <TIM_OC2_SetConfig+0x118>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10d      	bne.n	80057a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <TIM_OC2_SetConfig+0x110>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <TIM_OC2_SetConfig+0xc0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <TIM_OC2_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00f      	beq.n	80057d0 <TIM_OC2_SetConfig+0xc0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1e      	ldr	r2, [pc, #120]	; (800582c <TIM_OC2_SetConfig+0x11c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_OC2_SetConfig+0xc0>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <TIM_OC2_SetConfig+0x120>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_OC2_SetConfig+0xc0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <TIM_OC2_SetConfig+0x124>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC2_SetConfig+0xc0>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a17      	ldr	r2, [pc, #92]	; (8005828 <TIM_OC2_SetConfig+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d113      	bne.n	80057f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40012c00 	.word	0x40012c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40015000 	.word	0x40015000
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800

08005838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0303 	bic.w	r3, r3, #3
 8005872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_OC3_SetConfig+0x10c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <TIM_OC3_SetConfig+0x72>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <TIM_OC3_SetConfig+0x110>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_OC3_SetConfig+0x72>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a29      	ldr	r2, [pc, #164]	; (800594c <TIM_OC3_SetConfig+0x114>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10d      	bne.n	80058c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <TIM_OC3_SetConfig+0x10c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <TIM_OC3_SetConfig+0xbe>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <TIM_OC3_SetConfig+0x110>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_OC3_SetConfig+0xbe>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <TIM_OC3_SetConfig+0x118>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_OC3_SetConfig+0xbe>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <TIM_OC3_SetConfig+0x11c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_OC3_SetConfig+0xbe>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <TIM_OC3_SetConfig+0x120>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC3_SetConfig+0xbe>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC3_SetConfig+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d113      	bne.n	800591e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	621a      	str	r2, [r3, #32]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40013400 	.word	0x40013400
 800594c:	40015000 	.word	0x40015000
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	031b      	lsls	r3, r3, #12
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a2c      	ldr	r2, [pc, #176]	; (8005a6c <TIM_OC4_SetConfig+0x110>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_OC4_SetConfig+0x74>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a2b      	ldr	r2, [pc, #172]	; (8005a70 <TIM_OC4_SetConfig+0x114>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC4_SetConfig+0x74>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <TIM_OC4_SetConfig+0x118>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d10d      	bne.n	80059ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	031b      	lsls	r3, r3, #12
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <TIM_OC4_SetConfig+0x110>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <TIM_OC4_SetConfig+0xc0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <TIM_OC4_SetConfig+0x114>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00f      	beq.n	8005a1c <TIM_OC4_SetConfig+0xc0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <TIM_OC4_SetConfig+0x11c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00b      	beq.n	8005a1c <TIM_OC4_SetConfig+0xc0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <TIM_OC4_SetConfig+0x120>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_OC4_SetConfig+0xc0>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	; (8005a80 <TIM_OC4_SetConfig+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC4_SetConfig+0xc0>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a17      	ldr	r2, [pc, #92]	; (8005a74 <TIM_OC4_SetConfig+0x118>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d113      	bne.n	8005a44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	019b      	lsls	r3, r3, #6
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40013400 	.word	0x40013400
 8005a74:	40015000 	.word	0x40015000
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <TIM_OC5_SetConfig+0xbc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <TIM_OC5_SetConfig+0x82>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <TIM_OC5_SetConfig+0xc0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00f      	beq.n	8005b06 <TIM_OC5_SetConfig+0x82>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <TIM_OC5_SetConfig+0xc4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <TIM_OC5_SetConfig+0x82>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <TIM_OC5_SetConfig+0xc8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <TIM_OC5_SetConfig+0x82>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <TIM_OC5_SetConfig+0xcc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_OC5_SetConfig+0x82>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a14      	ldr	r2, [pc, #80]	; (8005b54 <TIM_OC5_SetConfig+0xd0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d109      	bne.n	8005b1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	621a      	str	r2, [r3, #32]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40013400 	.word	0x40013400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800
 8005b54:	40015000 	.word	0x40015000

08005b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	051b      	lsls	r3, r3, #20
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <TIM_OC6_SetConfig+0xc0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <TIM_OC6_SetConfig+0x84>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <TIM_OC6_SetConfig+0xc4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00f      	beq.n	8005bdc <TIM_OC6_SetConfig+0x84>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a18      	ldr	r2, [pc, #96]	; (8005c20 <TIM_OC6_SetConfig+0xc8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_OC6_SetConfig+0x84>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <TIM_OC6_SetConfig+0xcc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC6_SetConfig+0x84>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <TIM_OC6_SetConfig+0xd0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC6_SetConfig+0x84>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <TIM_OC6_SetConfig+0xd4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800
 8005c2c:	40015000 	.word	0x40015000

08005c30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <TIM_TI1_SetConfig+0xcc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01b      	beq.n	8005c96 <TIM_TI1_SetConfig+0x66>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c64:	d017      	beq.n	8005c96 <TIM_TI1_SetConfig+0x66>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a25      	ldr	r2, [pc, #148]	; (8005d00 <TIM_TI1_SetConfig+0xd0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <TIM_TI1_SetConfig+0x66>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a24      	ldr	r2, [pc, #144]	; (8005d04 <TIM_TI1_SetConfig+0xd4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00f      	beq.n	8005c96 <TIM_TI1_SetConfig+0x66>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <TIM_TI1_SetConfig+0xd8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <TIM_TI1_SetConfig+0x66>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <TIM_TI1_SetConfig+0xdc>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <TIM_TI1_SetConfig+0x66>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <TIM_TI1_SetConfig+0xe0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_TI1_SetConfig+0x66>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4a20      	ldr	r2, [pc, #128]	; (8005d14 <TIM_TI1_SetConfig+0xe4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <TIM_TI1_SetConfig+0x6a>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <TIM_TI1_SetConfig+0x6c>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0303 	bic.w	r3, r3, #3
 8005ca6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e003      	b.n	8005cba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f023 030a 	bic.w	r3, r3, #10
 8005cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 030a 	and.w	r3, r3, #10
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40013400 	.word	0x40013400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40015000 	.word	0x40015000

08005d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f023 0201 	bic.w	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f023 030a 	bic.w	r3, r3, #10
 8005d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b087      	sub	sp, #28
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f023 0210 	bic.w	r2, r3, #16
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	031b      	lsls	r3, r3, #12
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f023 0210 	bic.w	r2, r3, #16
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	031b      	lsls	r3, r3, #12
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0303 	bic.w	r3, r3, #3
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	031b      	lsls	r3, r3, #12
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	031b      	lsls	r3, r3, #12
 8005f20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f043 0307 	orr.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2201      	movs	r2, #1
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1a      	ldr	r2, [r3, #32]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	401a      	ands	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1a      	ldr	r2, [r3, #32]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800601c:	2302      	movs	r3, #2
 800601e:	e074      	b.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a34      	ldr	r2, [pc, #208]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a33      	ldr	r2, [pc, #204]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a31      	ldr	r2, [pc, #196]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006064:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d022      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d01d      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d013      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a18      	ldr	r2, [pc, #96]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a11      	ldr	r2, [pc, #68]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d10c      	bne.n	80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40013400 	.word	0x40013400
 8006120:	40015000 	.word	0x40015000
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40014000 	.word	0x40014000

08006134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e042      	b.n	8006258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d106      	bne.n	80061ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fc fbf1 	bl	80029cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2224      	movs	r2, #36	; 0x24
 80061ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f996 	bl	8006534 <UART_SetConfig>
 8006208:	4603      	mov	r3, r0
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e022      	b.n	8006258 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fc86 	bl	8006b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800622e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800623e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fd0d 	bl	8006c70 <UART_CheckIdleState>
 8006256:	4603      	mov	r3, r0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	; 0x28
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006276:	2b20      	cmp	r3, #32
 8006278:	f040 8083 	bne.w	8006382 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_UART_Transmit+0x28>
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e07b      	b.n	8006384 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_UART_Transmit+0x3a>
 8006296:	2302      	movs	r3, #2
 8006298:	e074      	b.n	8006384 <HAL_UART_Transmit+0x124>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2221      	movs	r2, #33	; 0x21
 80062ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b2:	f7fc fcf3 	bl	8002c9c <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d0:	d108      	bne.n	80062e4 <HAL_UART_Transmit+0x84>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e003      	b.n	80062ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80062f4:	e02c      	b.n	8006350 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2200      	movs	r2, #0
 80062fe:	2180      	movs	r1, #128	; 0x80
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fd00 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e039      	b.n	8006384 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006324:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	3302      	adds	r3, #2
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	e007      	b.n	800633e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1cc      	bne.n	80062f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2200      	movs	r2, #0
 8006364:	2140      	movs	r1, #64	; 0x40
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fccd 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e006      	b.n	8006384 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e000      	b.n	8006384 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006382:	2302      	movs	r3, #2
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	f040 80c0 	bne.w	8006528 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_UART_Receive+0x28>
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0b8      	b.n	800652a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Receive+0x3a>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e0b1      	b.n	800652a <HAL_UART_Receive+0x19e>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2222      	movs	r2, #34	; 0x22
 80063da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063e4:	f7fc fc5a 	bl	8002c9c <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	88fa      	ldrh	r2, [r7, #6]
 80063ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006402:	d10e      	bne.n	8006422 <HAL_UART_Receive+0x96>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d105      	bne.n	8006418 <HAL_UART_Receive+0x8c>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006416:	e02d      	b.n	8006474 <HAL_UART_Receive+0xe8>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006420:	e028      	b.n	8006474 <HAL_UART_Receive+0xe8>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10d      	bne.n	8006446 <HAL_UART_Receive+0xba>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <HAL_UART_Receive+0xb0>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800643a:	e01b      	b.n	8006474 <HAL_UART_Receive+0xe8>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	227f      	movs	r2, #127	; 0x7f
 8006440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006444:	e016      	b.n	8006474 <HAL_UART_Receive+0xe8>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644e:	d10d      	bne.n	800646c <HAL_UART_Receive+0xe0>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <HAL_UART_Receive+0xd6>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	227f      	movs	r2, #127	; 0x7f
 800645c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006460:	e008      	b.n	8006474 <HAL_UART_Receive+0xe8>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	223f      	movs	r2, #63	; 0x3f
 8006466:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800646a:	e003      	b.n	8006474 <HAL_UART_Receive+0xe8>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800647a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006484:	d108      	bne.n	8006498 <HAL_UART_Receive+0x10c>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	e003      	b.n	80064a0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064a8:	e032      	b.n	8006510 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2120      	movs	r1, #32
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fc26 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e032      	b.n	800652a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	8a7b      	ldrh	r3, [r7, #18]
 80064d4:	4013      	ands	r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	3302      	adds	r3, #2
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e00c      	b.n	80064fe <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	8a7b      	ldrh	r3, [r7, #18]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	4013      	ands	r3, r2
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	3301      	adds	r3, #1
 80064fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1c6      	bne.n	80064aa <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006538:	b08c      	sub	sp, #48	; 0x30
 800653a:	af00      	add	r7, sp, #0
 800653c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	431a      	orrs	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	431a      	orrs	r2, r3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	4313      	orrs	r3, r2
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4baa      	ldr	r3, [pc, #680]	; (800680c <UART_SetConfig+0x2d8>)
 8006564:	4013      	ands	r3, r2
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800656c:	430b      	orrs	r3, r1
 800656e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a9f      	ldr	r2, [pc, #636]	; (8006810 <UART_SetConfig+0x2dc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d004      	beq.n	80065a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659c:	4313      	orrs	r3, r2
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	f023 010f 	bic.w	r1, r3, #15
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a90      	ldr	r2, [pc, #576]	; (8006814 <UART_SetConfig+0x2e0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d125      	bne.n	8006624 <UART_SetConfig+0xf0>
 80065d8:	4b8f      	ldr	r3, [pc, #572]	; (8006818 <UART_SetConfig+0x2e4>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d81a      	bhi.n	800661c <UART_SetConfig+0xe8>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <UART_SetConfig+0xb8>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	0800660d 	.word	0x0800660d
 80065f4:	08006605 	.word	0x08006605
 80065f8:	08006615 	.word	0x08006615
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006602:	e116      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660a:	e112      	b.n	8006832 <UART_SetConfig+0x2fe>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006612:	e10e      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661a:	e10a      	b.n	8006832 <UART_SetConfig+0x2fe>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006622:	e106      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a7c      	ldr	r2, [pc, #496]	; (800681c <UART_SetConfig+0x2e8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d138      	bne.n	80066a0 <UART_SetConfig+0x16c>
 800662e:	4b7a      	ldr	r3, [pc, #488]	; (8006818 <UART_SetConfig+0x2e4>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006634:	f003 030c 	and.w	r3, r3, #12
 8006638:	2b0c      	cmp	r3, #12
 800663a:	d82d      	bhi.n	8006698 <UART_SetConfig+0x164>
 800663c:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x110>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	08006679 	.word	0x08006679
 8006648:	08006699 	.word	0x08006699
 800664c:	08006699 	.word	0x08006699
 8006650:	08006699 	.word	0x08006699
 8006654:	08006689 	.word	0x08006689
 8006658:	08006699 	.word	0x08006699
 800665c:	08006699 	.word	0x08006699
 8006660:	08006699 	.word	0x08006699
 8006664:	08006681 	.word	0x08006681
 8006668:	08006699 	.word	0x08006699
 800666c:	08006699 	.word	0x08006699
 8006670:	08006699 	.word	0x08006699
 8006674:	08006691 	.word	0x08006691
 8006678:	2300      	movs	r3, #0
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e0d8      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006680:	2302      	movs	r3, #2
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e0d4      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006688:	2304      	movs	r3, #4
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e0d0      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006690:	2308      	movs	r3, #8
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006696:	e0cc      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006698:	2310      	movs	r3, #16
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e0c8      	b.n	8006832 <UART_SetConfig+0x2fe>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a5e      	ldr	r2, [pc, #376]	; (8006820 <UART_SetConfig+0x2ec>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d125      	bne.n	80066f6 <UART_SetConfig+0x1c2>
 80066aa:	4b5b      	ldr	r3, [pc, #364]	; (8006818 <UART_SetConfig+0x2e4>)
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066b4:	2b30      	cmp	r3, #48	; 0x30
 80066b6:	d016      	beq.n	80066e6 <UART_SetConfig+0x1b2>
 80066b8:	2b30      	cmp	r3, #48	; 0x30
 80066ba:	d818      	bhi.n	80066ee <UART_SetConfig+0x1ba>
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d00a      	beq.n	80066d6 <UART_SetConfig+0x1a2>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d814      	bhi.n	80066ee <UART_SetConfig+0x1ba>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <UART_SetConfig+0x19a>
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d008      	beq.n	80066de <UART_SetConfig+0x1aa>
 80066cc:	e00f      	b.n	80066ee <UART_SetConfig+0x1ba>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d4:	e0ad      	b.n	8006832 <UART_SetConfig+0x2fe>
 80066d6:	2302      	movs	r3, #2
 80066d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066dc:	e0a9      	b.n	8006832 <UART_SetConfig+0x2fe>
 80066de:	2304      	movs	r3, #4
 80066e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e4:	e0a5      	b.n	8006832 <UART_SetConfig+0x2fe>
 80066e6:	2308      	movs	r3, #8
 80066e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ec:	e0a1      	b.n	8006832 <UART_SetConfig+0x2fe>
 80066ee:	2310      	movs	r3, #16
 80066f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f4:	e09d      	b.n	8006832 <UART_SetConfig+0x2fe>
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4a      	ldr	r2, [pc, #296]	; (8006824 <UART_SetConfig+0x2f0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d125      	bne.n	800674c <UART_SetConfig+0x218>
 8006700:	4b45      	ldr	r3, [pc, #276]	; (8006818 <UART_SetConfig+0x2e4>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800670a:	2bc0      	cmp	r3, #192	; 0xc0
 800670c:	d016      	beq.n	800673c <UART_SetConfig+0x208>
 800670e:	2bc0      	cmp	r3, #192	; 0xc0
 8006710:	d818      	bhi.n	8006744 <UART_SetConfig+0x210>
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d00a      	beq.n	800672c <UART_SetConfig+0x1f8>
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d814      	bhi.n	8006744 <UART_SetConfig+0x210>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <UART_SetConfig+0x1f0>
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d008      	beq.n	8006734 <UART_SetConfig+0x200>
 8006722:	e00f      	b.n	8006744 <UART_SetConfig+0x210>
 8006724:	2300      	movs	r3, #0
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672a:	e082      	b.n	8006832 <UART_SetConfig+0x2fe>
 800672c:	2302      	movs	r3, #2
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006732:	e07e      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006734:	2304      	movs	r3, #4
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673a:	e07a      	b.n	8006832 <UART_SetConfig+0x2fe>
 800673c:	2308      	movs	r3, #8
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006742:	e076      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674a:	e072      	b.n	8006832 <UART_SetConfig+0x2fe>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a35      	ldr	r2, [pc, #212]	; (8006828 <UART_SetConfig+0x2f4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d12a      	bne.n	80067ac <UART_SetConfig+0x278>
 8006756:	4b30      	ldr	r3, [pc, #192]	; (8006818 <UART_SetConfig+0x2e4>)
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006764:	d01a      	beq.n	800679c <UART_SetConfig+0x268>
 8006766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676a:	d81b      	bhi.n	80067a4 <UART_SetConfig+0x270>
 800676c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006770:	d00c      	beq.n	800678c <UART_SetConfig+0x258>
 8006772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006776:	d815      	bhi.n	80067a4 <UART_SetConfig+0x270>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <UART_SetConfig+0x250>
 800677c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006780:	d008      	beq.n	8006794 <UART_SetConfig+0x260>
 8006782:	e00f      	b.n	80067a4 <UART_SetConfig+0x270>
 8006784:	2300      	movs	r3, #0
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678a:	e052      	b.n	8006832 <UART_SetConfig+0x2fe>
 800678c:	2302      	movs	r3, #2
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006792:	e04e      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679a:	e04a      	b.n	8006832 <UART_SetConfig+0x2fe>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a2:	e046      	b.n	8006832 <UART_SetConfig+0x2fe>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067aa:	e042      	b.n	8006832 <UART_SetConfig+0x2fe>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a17      	ldr	r2, [pc, #92]	; (8006810 <UART_SetConfig+0x2dc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d13a      	bne.n	800682c <UART_SetConfig+0x2f8>
 80067b6:	4b18      	ldr	r3, [pc, #96]	; (8006818 <UART_SetConfig+0x2e4>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c4:	d01a      	beq.n	80067fc <UART_SetConfig+0x2c8>
 80067c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ca:	d81b      	bhi.n	8006804 <UART_SetConfig+0x2d0>
 80067cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d0:	d00c      	beq.n	80067ec <UART_SetConfig+0x2b8>
 80067d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d6:	d815      	bhi.n	8006804 <UART_SetConfig+0x2d0>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <UART_SetConfig+0x2b0>
 80067dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e0:	d008      	beq.n	80067f4 <UART_SetConfig+0x2c0>
 80067e2:	e00f      	b.n	8006804 <UART_SetConfig+0x2d0>
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ea:	e022      	b.n	8006832 <UART_SetConfig+0x2fe>
 80067ec:	2302      	movs	r3, #2
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f2:	e01e      	b.n	8006832 <UART_SetConfig+0x2fe>
 80067f4:	2304      	movs	r3, #4
 80067f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fa:	e01a      	b.n	8006832 <UART_SetConfig+0x2fe>
 80067fc:	2308      	movs	r3, #8
 80067fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006802:	e016      	b.n	8006832 <UART_SetConfig+0x2fe>
 8006804:	2310      	movs	r3, #16
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680a:	e012      	b.n	8006832 <UART_SetConfig+0x2fe>
 800680c:	cfff69f3 	.word	0xcfff69f3
 8006810:	40008000 	.word	0x40008000
 8006814:	40013800 	.word	0x40013800
 8006818:	40021000 	.word	0x40021000
 800681c:	40004400 	.word	0x40004400
 8006820:	40004800 	.word	0x40004800
 8006824:	40004c00 	.word	0x40004c00
 8006828:	40005000 	.word	0x40005000
 800682c:	2310      	movs	r3, #16
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4aae      	ldr	r2, [pc, #696]	; (8006af0 <UART_SetConfig+0x5bc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	f040 8097 	bne.w	800696c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800683e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006842:	2b08      	cmp	r3, #8
 8006844:	d823      	bhi.n	800688e <UART_SetConfig+0x35a>
 8006846:	a201      	add	r2, pc, #4	; (adr r2, 800684c <UART_SetConfig+0x318>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	08006871 	.word	0x08006871
 8006850:	0800688f 	.word	0x0800688f
 8006854:	08006879 	.word	0x08006879
 8006858:	0800688f 	.word	0x0800688f
 800685c:	0800687f 	.word	0x0800687f
 8006860:	0800688f 	.word	0x0800688f
 8006864:	0800688f 	.word	0x0800688f
 8006868:	0800688f 	.word	0x0800688f
 800686c:	08006887 	.word	0x08006887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006870:	f7fd fa48 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006874:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006876:	e010      	b.n	800689a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006878:	4b9e      	ldr	r3, [pc, #632]	; (8006af4 <UART_SetConfig+0x5c0>)
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800687c:	e00d      	b.n	800689a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800687e:	f7fd f9d3 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006884:	e009      	b.n	800689a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800688c:	e005      	b.n	800689a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8130 	beq.w	8006b02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	4a94      	ldr	r2, [pc, #592]	; (8006af8 <UART_SetConfig+0x5c4>)
 80068a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ac:	461a      	mov	r2, r3
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4413      	add	r3, r2
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d305      	bcc.n	80068d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d903      	bls.n	80068da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068d8:	e113      	b.n	8006b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	2200      	movs	r2, #0
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	60fa      	str	r2, [r7, #12]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	4a84      	ldr	r2, [pc, #528]	; (8006af8 <UART_SetConfig+0x5c4>)
 80068e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2200      	movs	r2, #0
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068fc:	f7fa f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	020b      	lsls	r3, r1, #8
 8006912:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006916:	0202      	lsls	r2, r0, #8
 8006918:	6979      	ldr	r1, [r7, #20]
 800691a:	6849      	ldr	r1, [r1, #4]
 800691c:	0849      	lsrs	r1, r1, #1
 800691e:	2000      	movs	r0, #0
 8006920:	460c      	mov	r4, r1
 8006922:	4605      	mov	r5, r0
 8006924:	eb12 0804 	adds.w	r8, r2, r4
 8006928:	eb43 0905 	adc.w	r9, r3, r5
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	469a      	mov	sl, r3
 8006934:	4693      	mov	fp, r2
 8006936:	4652      	mov	r2, sl
 8006938:	465b      	mov	r3, fp
 800693a:	4640      	mov	r0, r8
 800693c:	4649      	mov	r1, r9
 800693e:	f7fa f9a3 	bl	8000c88 <__aeabi_uldivmod>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4613      	mov	r3, r2
 8006948:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006950:	d308      	bcc.n	8006964 <UART_SetConfig+0x430>
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006958:	d204      	bcs.n	8006964 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	e0ce      	b.n	8006b02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800696a:	e0ca      	b.n	8006b02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006974:	d166      	bne.n	8006a44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800697a:	2b08      	cmp	r3, #8
 800697c:	d827      	bhi.n	80069ce <UART_SetConfig+0x49a>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <UART_SetConfig+0x450>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069a9 	.word	0x080069a9
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069b9 	.word	0x080069b9
 8006990:	080069cf 	.word	0x080069cf
 8006994:	080069bf 	.word	0x080069bf
 8006998:	080069cf 	.word	0x080069cf
 800699c:	080069cf 	.word	0x080069cf
 80069a0:	080069cf 	.word	0x080069cf
 80069a4:	080069c7 	.word	0x080069c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a8:	f7fd f9ac 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80069ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069ae:	e014      	b.n	80069da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b0:	f7fd f9be 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80069b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069b6:	e010      	b.n	80069da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b8:	4b4e      	ldr	r3, [pc, #312]	; (8006af4 <UART_SetConfig+0x5c0>)
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069bc:	e00d      	b.n	80069da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069be:	f7fd f933 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069c4:	e009      	b.n	80069da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069cc:	e005      	b.n	80069da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8090 	beq.w	8006b02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	4a44      	ldr	r2, [pc, #272]	; (8006af8 <UART_SetConfig+0x5c4>)
 80069e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f4:	005a      	lsls	r2, r3, #1
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	441a      	add	r2, r3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	2b0f      	cmp	r3, #15
 8006a0c:	d916      	bls.n	8006a3c <UART_SetConfig+0x508>
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a14:	d212      	bcs.n	8006a3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f023 030f 	bic.w	r3, r3, #15
 8006a1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	8bfb      	ldrh	r3, [r7, #30]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	8bfa      	ldrh	r2, [r7, #30]
 8006a38:	60da      	str	r2, [r3, #12]
 8006a3a:	e062      	b.n	8006b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a42:	e05e      	b.n	8006b02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d828      	bhi.n	8006a9e <UART_SetConfig+0x56a>
 8006a4c:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0x520>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a81 	.word	0x08006a81
 8006a5c:	08006a89 	.word	0x08006a89
 8006a60:	08006a9f 	.word	0x08006a9f
 8006a64:	08006a8f 	.word	0x08006a8f
 8006a68:	08006a9f 	.word	0x08006a9f
 8006a6c:	08006a9f 	.word	0x08006a9f
 8006a70:	08006a9f 	.word	0x08006a9f
 8006a74:	08006a97 	.word	0x08006a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a78:	f7fd f944 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a7e:	e014      	b.n	8006aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a80:	f7fd f956 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a86:	e010      	b.n	8006aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a88:	4b1a      	ldr	r3, [pc, #104]	; (8006af4 <UART_SetConfig+0x5c0>)
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a8c:	e00d      	b.n	8006aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8e:	f7fd f8cb 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8006a92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a94:	e009      	b.n	8006aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a9c:	e005      	b.n	8006aaa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d028      	beq.n	8006b02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	4a10      	ldr	r2, [pc, #64]	; (8006af8 <UART_SetConfig+0x5c4>)
 8006ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aba:	461a      	mov	r2, r3
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	085b      	lsrs	r3, r3, #1
 8006ac8:	441a      	add	r2, r3
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d910      	bls.n	8006afc <UART_SetConfig+0x5c8>
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae0:	d20c      	bcs.n	8006afc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e009      	b.n	8006b02 <UART_SetConfig+0x5ce>
 8006aee:	bf00      	nop
 8006af0:	40008000 	.word	0x40008000
 8006af4:	00f42400 	.word	0x00f42400
 8006af8:	0800c768 	.word	0x0800c768
      }
      else
      {
        ret = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3730      	adds	r7, #48	; 0x30
 8006b26:	46bd      	mov	sp, r7
 8006b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01a      	beq.n	8006c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2a:	d10a      	bne.n	8006c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c80:	f7fc f80c 	bl	8002c9c <HAL_GetTick>
 8006c84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d10e      	bne.n	8006cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f82f 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e025      	b.n	8006cfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d10e      	bne.n	8006cde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f819 	bl	8006d06 <UART_WaitOnFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e00f      	b.n	8006cfe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b09c      	sub	sp, #112	; 0x70
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d16:	e0a9      	b.n	8006e6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1e:	f000 80a5 	beq.w	8006e6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d22:	f7fb ffbb 	bl	8002c9c <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d140      	bne.n	8006dba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e6      	bne.n	8006d38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	663b      	str	r3, [r7, #96]	; 0x60
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e069      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d051      	beq.n	8006e6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd6:	d149      	bne.n	8006e6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
 8006e02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e6      	bne.n	8006de2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3308      	adds	r3, #8
 8006e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	613b      	str	r3, [r7, #16]
   return(result);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3308      	adds	r3, #8
 8006e32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e34:	623a      	str	r2, [r7, #32]
 8006e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	69f9      	ldr	r1, [r7, #28]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e5      	bne.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e010      	b.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69da      	ldr	r2, [r3, #28]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4013      	ands	r3, r2
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	2300      	movne	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	f43f af46 	beq.w	8006d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3770      	adds	r7, #112	; 0x70
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_UARTEx_DisableFifoMode+0x16>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e027      	b.n	8006efc <HAL_UARTEx_DisableFifoMode+0x66>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2224      	movs	r2, #36	; 0x24
 8006eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006eda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e02d      	b.n	8006f7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	; 0x24
 8006f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f84f 	bl	8007000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e02d      	b.n	8006ff8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2224      	movs	r2, #36	; 0x24
 8006fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f811 	bl	8007000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007020:	e031      	b.n	8007086 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007022:	2308      	movs	r3, #8
 8007024:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007026:	2308      	movs	r3, #8
 8007028:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	0e5b      	lsrs	r3, r3, #25
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	0f5b      	lsrs	r3, r3, #29
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	7b3a      	ldrb	r2, [r7, #12]
 800704e:	4911      	ldr	r1, [pc, #68]	; (8007094 <UARTEx_SetNbDataToProcess+0x94>)
 8007050:	5c8a      	ldrb	r2, [r1, r2]
 8007052:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007056:	7b3a      	ldrb	r2, [r7, #12]
 8007058:	490f      	ldr	r1, [pc, #60]	; (8007098 <UARTEx_SetNbDataToProcess+0x98>)
 800705a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800705c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	7b7a      	ldrb	r2, [r7, #13]
 800706c:	4909      	ldr	r1, [pc, #36]	; (8007094 <UARTEx_SetNbDataToProcess+0x94>)
 800706e:	5c8a      	ldrb	r2, [r1, r2]
 8007070:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007074:	7b7a      	ldrb	r2, [r7, #13]
 8007076:	4908      	ldr	r1, [pc, #32]	; (8007098 <UARTEx_SetNbDataToProcess+0x98>)
 8007078:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800707a:	fb93 f3f2 	sdiv	r3, r3, r2
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	0800c780 	.word	0x0800c780
 8007098:	0800c788 	.word	0x0800c788

0800709c <__NVIC_SetPriority>:
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	db0a      	blt.n	80070c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	490c      	ldr	r1, [pc, #48]	; (80070e8 <__NVIC_SetPriority+0x4c>)
 80070b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ba:	0112      	lsls	r2, r2, #4
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	440b      	add	r3, r1
 80070c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070c4:	e00a      	b.n	80070dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	4908      	ldr	r1, [pc, #32]	; (80070ec <__NVIC_SetPriority+0x50>)
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	3b04      	subs	r3, #4
 80070d4:	0112      	lsls	r2, r2, #4
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	440b      	add	r3, r1
 80070da:	761a      	strb	r2, [r3, #24]
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	e000e100 	.word	0xe000e100
 80070ec:	e000ed00 	.word	0xe000ed00

080070f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80070f4:	2100      	movs	r1, #0
 80070f6:	f06f 0004 	mvn.w	r0, #4
 80070fa:	f7ff ffcf 	bl	800709c <__NVIC_SetPriority>
#endif
}
 80070fe:	bf00      	nop
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800710a:	f3ef 8305 	mrs	r3, IPSR
 800710e:	603b      	str	r3, [r7, #0]
  return(result);
 8007110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007116:	f06f 0305 	mvn.w	r3, #5
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	e00c      	b.n	8007138 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <osKernelInitialize+0x44>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d105      	bne.n	8007132 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <osKernelInitialize+0x44>)
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800712c:	2300      	movs	r3, #0
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	e002      	b.n	8007138 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007132:	f04f 33ff 	mov.w	r3, #4294967295
 8007136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007138:	687b      	ldr	r3, [r7, #4]
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	2000044c 	.word	0x2000044c

0800714c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007152:	f3ef 8305 	mrs	r3, IPSR
 8007156:	603b      	str	r3, [r7, #0]
  return(result);
 8007158:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <osKernelStart+0x1a>
    stat = osErrorISR;
 800715e:	f06f 0305 	mvn.w	r3, #5
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	e010      	b.n	8007188 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <osKernelStart+0x48>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d109      	bne.n	8007182 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800716e:	f7ff ffbf 	bl	80070f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <osKernelStart+0x48>)
 8007174:	2202      	movs	r2, #2
 8007176:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007178:	f001 fa3c 	bl	80085f4 <vTaskStartScheduler>
      stat = osOK;
 800717c:	2300      	movs	r3, #0
 800717e:	607b      	str	r3, [r7, #4]
 8007180:	e002      	b.n	8007188 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007182:	f04f 33ff 	mov.w	r3, #4294967295
 8007186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007188:	687b      	ldr	r3, [r7, #4]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	2000044c 	.word	0x2000044c

08007198 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b08e      	sub	sp, #56	; 0x38
 800719c:	af04      	add	r7, sp, #16
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a8:	f3ef 8305 	mrs	r3, IPSR
 80071ac:	617b      	str	r3, [r7, #20]
  return(result);
 80071ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d17e      	bne.n	80072b2 <osThreadNew+0x11a>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d07b      	beq.n	80072b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80071ba:	2380      	movs	r3, #128	; 0x80
 80071bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80071be:	2318      	movs	r3, #24
 80071c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d045      	beq.n	800725e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <osThreadNew+0x48>
        name = attr->name;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d008      	beq.n	8007206 <osThreadNew+0x6e>
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b38      	cmp	r3, #56	; 0x38
 80071f8:	d805      	bhi.n	8007206 <osThreadNew+0x6e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <osThreadNew+0x72>
        return (NULL);
 8007206:	2300      	movs	r3, #0
 8007208:	e054      	b.n	80072b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	089b      	lsrs	r3, r3, #2
 8007218:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00e      	beq.n	8007240 <osThreadNew+0xa8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2bbb      	cmp	r3, #187	; 0xbb
 8007228:	d90a      	bls.n	8007240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800722e:	2b00      	cmp	r3, #0
 8007230:	d006      	beq.n	8007240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <osThreadNew+0xa8>
        mem = 1;
 800723a:	2301      	movs	r3, #1
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	e010      	b.n	8007262 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10c      	bne.n	8007262 <osThreadNew+0xca>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d108      	bne.n	8007262 <osThreadNew+0xca>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <osThreadNew+0xca>
          mem = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e001      	b.n	8007262 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d110      	bne.n	800728a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007270:	9202      	str	r2, [sp, #8]
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f001 f818 	bl	80082b4 <xTaskCreateStatic>
 8007284:	4603      	mov	r3, r0
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	e013      	b.n	80072b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d110      	bne.n	80072b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	b29a      	uxth	r2, r3
 8007294:	f107 0310 	add.w	r3, r7, #16
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f001 f836 	bl	8008314 <xTaskCreate>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d001      	beq.n	80072b2 <osThreadNew+0x11a>
            hTask = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072b2:	693b      	ldr	r3, [r7, #16]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3728      	adds	r7, #40	; 0x28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072c4:	f3ef 8305 	mrs	r3, IPSR
 80072c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80072ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <osDelay+0x1c>
    stat = osErrorISR;
 80072d0:	f06f 0305 	mvn.w	r3, #5
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e007      	b.n	80072e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f962 	bl	80085ac <vTaskDelay>
    }
  }

  return (stat);
 80072e8:	68fb      	ldr	r3, [r7, #12]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b08a      	sub	sp, #40	; 0x28
 80072f6:	af02      	add	r7, sp, #8
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007302:	f3ef 8305 	mrs	r3, IPSR
 8007306:	613b      	str	r3, [r7, #16]
  return(result);
 8007308:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800730a:	2b00      	cmp	r3, #0
 800730c:	d175      	bne.n	80073fa <osSemaphoreNew+0x108>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d072      	beq.n	80073fa <osSemaphoreNew+0x108>
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	429a      	cmp	r2, r3
 800731a:	d86e      	bhi.n	80073fa <osSemaphoreNew+0x108>
    mem = -1;
 800731c:	f04f 33ff 	mov.w	r3, #4294967295
 8007320:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d015      	beq.n	8007354 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <osSemaphoreNew+0x4c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	2b4f      	cmp	r3, #79	; 0x4f
 8007336:	d902      	bls.n	800733e <osSemaphoreNew+0x4c>
        mem = 1;
 8007338:	2301      	movs	r3, #1
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	e00c      	b.n	8007358 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d108      	bne.n	8007358 <osSemaphoreNew+0x66>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <osSemaphoreNew+0x66>
          mem = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e001      	b.n	8007358 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d04c      	beq.n	80073fa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d128      	bne.n	80073b8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d10a      	bne.n	8007382 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2203      	movs	r2, #3
 8007372:	9200      	str	r2, [sp, #0]
 8007374:	2200      	movs	r2, #0
 8007376:	2100      	movs	r1, #0
 8007378:	2001      	movs	r0, #1
 800737a:	f000 fa1b 	bl	80077b4 <xQueueGenericCreateStatic>
 800737e:	61f8      	str	r0, [r7, #28]
 8007380:	e005      	b.n	800738e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007382:	2203      	movs	r2, #3
 8007384:	2100      	movs	r1, #0
 8007386:	2001      	movs	r0, #1
 8007388:	f000 fa33 	bl	80077f2 <xQueueGenericCreate>
 800738c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d022      	beq.n	80073da <osSemaphoreNew+0xe8>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01f      	beq.n	80073da <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800739a:	2300      	movs	r3, #0
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	69f8      	ldr	r0, [r7, #28]
 80073a2:	f000 faa5 	bl	80078f0 <xQueueGenericSend>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d016      	beq.n	80073da <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80073ac:	69f8      	ldr	r0, [r7, #28]
 80073ae:	f000 fdbc 	bl	8007f2a <vQueueDelete>
            hSemaphore = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	e010      	b.n	80073da <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d108      	bne.n	80073d0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	461a      	mov	r2, r3
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 fa62 	bl	8007890 <xQueueCreateCountingSemaphoreStatic>
 80073cc:	61f8      	str	r0, [r7, #28]
 80073ce:	e004      	b.n	80073da <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 fa76 	bl	80078c4 <xQueueCreateCountingSemaphore>
 80073d8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00c      	beq.n	80073fa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <osSemaphoreNew+0xfc>
          name = attr->name;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e001      	b.n	80073f2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80073f2:	6979      	ldr	r1, [r7, #20]
 80073f4:	69f8      	ldr	r0, [r7, #28]
 80073f6:	f000 fed5 	bl	80081a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80073fa:	69fb      	ldr	r3, [r7, #28]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800741c:	f06f 0303 	mvn.w	r3, #3
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e039      	b.n	8007498 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007424:	f3ef 8305 	mrs	r3, IPSR
 8007428:	60fb      	str	r3, [r7, #12]
  return(result);
 800742a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800742c:	2b00      	cmp	r3, #0
 800742e:	d022      	beq.n	8007476 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007436:	f06f 0303 	mvn.w	r3, #3
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e02c      	b.n	8007498 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007442:	f107 0308 	add.w	r3, r7, #8
 8007446:	461a      	mov	r2, r3
 8007448:	2100      	movs	r1, #0
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f000 fd16 	bl	8007e7c <xQueueReceiveFromISR>
 8007450:	4603      	mov	r3, r0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d003      	beq.n	800745e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007456:	f06f 0302 	mvn.w	r3, #2
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e01c      	b.n	8007498 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d019      	beq.n	8007498 <osSemaphoreAcquire+0x94>
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <osSemaphoreAcquire+0xa0>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	e010      	b.n	8007498 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6938      	ldr	r0, [r7, #16]
 800747a:	f000 fc37 	bl	8007cec <xQueueSemaphoreTake>
 800747e:	4603      	mov	r3, r0
 8007480:	2b01      	cmp	r3, #1
 8007482:	d009      	beq.n	8007498 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800748a:	f06f 0301 	mvn.w	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e002      	b.n	8007498 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007492:	f06f 0302 	mvn.w	r3, #2
 8007496:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007498:	697b      	ldr	r3, [r7, #20]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	e000ed04 	.word	0xe000ed04

080074a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80074be:	f06f 0303 	mvn.w	r3, #3
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	e02c      	b.n	8007520 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c6:	f3ef 8305 	mrs	r3, IPSR
 80074ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80074cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01a      	beq.n	8007508 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	4619      	mov	r1, r3
 80074dc:	6938      	ldr	r0, [r7, #16]
 80074de:	f000 fb0e 	bl	8007afe <xQueueGiveFromISR>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d003      	beq.n	80074f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80074e8:	f06f 0302 	mvn.w	r3, #2
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e017      	b.n	8007520 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d014      	beq.n	8007520 <osSemaphoreRelease+0x78>
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <osSemaphoreRelease+0x84>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	e00b      	b.n	8007520 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007508:	2300      	movs	r3, #0
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	6938      	ldr	r0, [r7, #16]
 8007510:	f000 f9ee 	bl	80078f0 <xQueueGenericSend>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	d002      	beq.n	8007520 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800751a:	f06f 0302 	mvn.w	r3, #2
 800751e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007520:	697b      	ldr	r3, [r7, #20]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4a07      	ldr	r2, [pc, #28]	; (800755c <vApplicationGetIdleTaskMemory+0x2c>)
 8007540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a06      	ldr	r2, [pc, #24]	; (8007560 <vApplicationGetIdleTaskMemory+0x30>)
 8007546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2280      	movs	r2, #128	; 0x80
 800754c:	601a      	str	r2, [r3, #0]
}
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000450 	.word	0x20000450
 8007560:	2000050c 	.word	0x2000050c

08007564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4a07      	ldr	r2, [pc, #28]	; (8007590 <vApplicationGetTimerTaskMemory+0x2c>)
 8007574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4a06      	ldr	r2, [pc, #24]	; (8007594 <vApplicationGetTimerTaskMemory+0x30>)
 800757a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	2000070c 	.word	0x2000070c
 8007594:	200007c8 	.word	0x200007c8

08007598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f103 0208 	add.w	r2, r3, #8
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f04f 32ff 	mov.w	r2, #4294967295
 80075b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f103 0208 	add.w	r2, r3, #8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f103 0208 	add.w	r2, r3, #8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	601a      	str	r2, [r3, #0]
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d103      	bne.n	800765a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e00c      	b.n	8007674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3308      	adds	r3, #8
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e002      	b.n	8007668 <vListInsert+0x2e>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	429a      	cmp	r2, r3
 8007672:	d2f6      	bcs.n	8007662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	601a      	str	r2, [r3, #0]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6892      	ldr	r2, [r2, #8]
 80076c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6852      	ldr	r2, [r2, #4]
 80076cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d103      	bne.n	80076e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	1e5a      	subs	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800770e:	f002 f861 	bl	80097d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800771e:	fb01 f303 	mul.w	r3, r1, r3
 8007722:	441a      	add	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	3b01      	subs	r3, #1
 8007740:	68f9      	ldr	r1, [r7, #12]
 8007742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	441a      	add	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	22ff      	movs	r2, #255	; 0xff
 8007752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	22ff      	movs	r2, #255	; 0xff
 800775a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d114      	bne.n	800778e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01a      	beq.n	80077a2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3310      	adds	r3, #16
 8007770:	4618      	mov	r0, r3
 8007772:	f001 f97d 	bl	8008a70 <xTaskRemoveFromEventList>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d012      	beq.n	80077a2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800777c:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <xQueueGenericReset+0xb0>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	e009      	b.n	80077a2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3310      	adds	r3, #16
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff ff00 	bl	8007598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fefb 	bl	8007598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077a2:	f002 f831 	bl	8009808 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077a6:	2301      	movs	r3, #1
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00d      	beq.n	80077e8 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4613      	mov	r3, r2
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f831 	bl	800784a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077e8:	697b      	ldr	r3, [r7, #20]
	}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b08a      	sub	sp, #40	; 0x28
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	4613      	mov	r3, r2
 80077fe:	71fb      	strb	r3, [r7, #7]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	3350      	adds	r3, #80	; 0x50
 800780e:	4618      	mov	r0, r3
 8007810:	f002 f89a 	bl	8009948 <pvPortMalloc>
 8007814:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d011      	beq.n	8007840 <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	3350      	adds	r3, #80	; 0x50
 8007824:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800782e:	79fa      	ldrb	r2, [r7, #7]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f805 	bl	800784a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007840:	69bb      	ldr	r3, [r7, #24]
	}
 8007842:	4618      	mov	r0, r3
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e002      	b.n	800786c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007878:	2101      	movs	r1, #1
 800787a:	69b8      	ldr	r0, [r7, #24]
 800787c:	f7ff ff40 	bl	8007700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800789c:	2302      	movs	r3, #2
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff ff84 	bl	80077b4 <xQueueGenericCreateStatic>
 80078ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80078ba:	697b      	ldr	r3, [r7, #20]
	}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80078ce:	2202      	movs	r2, #2
 80078d0:	2100      	movs	r1, #0
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff ff8d 	bl	80077f2 <xQueueGenericCreate>
 80078d8:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80078e6:	68fb      	ldr	r3, [r7, #12]
	}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	; 0x28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078fe:	2300      	movs	r3, #0
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007906:	f001 ff65 	bl	80097d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	429a      	cmp	r2, r3
 8007914:	d302      	bcc.n	800791c <xQueueGenericSend+0x2c>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d129      	bne.n	8007970 <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	6a38      	ldr	r0, [r7, #32]
 8007922:	f000 fb2f 	bl	8007f84 <prvCopyDataToQueue>
 8007926:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d010      	beq.n	8007952 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	3324      	adds	r3, #36	; 0x24
 8007934:	4618      	mov	r0, r3
 8007936:	f001 f89b 	bl	8008a70 <xTaskRemoveFromEventList>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d013      	beq.n	8007968 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007940:	4b3f      	ldr	r3, [pc, #252]	; (8007a40 <xQueueGenericSend+0x150>)
 8007942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	e00a      	b.n	8007968 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007958:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <xQueueGenericSend+0x150>)
 800795a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007968:	f001 ff4e 	bl	8009808 <vPortExitCritical>
				return pdPASS;
 800796c:	2301      	movs	r3, #1
 800796e:	e063      	b.n	8007a38 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007976:	f001 ff47 	bl	8009808 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800797a:	2300      	movs	r3, #0
 800797c:	e05c      	b.n	8007a38 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007984:	f107 0314 	add.w	r3, r7, #20
 8007988:	4618      	mov	r0, r3
 800798a:	f001 f8c7 	bl	8008b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007992:	f001 ff39 	bl	8009808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007996:	f000 fe8d 	bl	80086b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800799a:	f001 ff1b 	bl	80097d4 <vPortEnterCritical>
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079a4:	b25b      	sxtb	r3, r3
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d103      	bne.n	80079b4 <xQueueGenericSend+0xc4>
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ba:	b25b      	sxtb	r3, r3
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d103      	bne.n	80079ca <xQueueGenericSend+0xda>
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079ca:	f001 ff1d 	bl	8009808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079ce:	1d3a      	adds	r2, r7, #4
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 f8b6 	bl	8008b48 <xTaskCheckForTimeOut>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d124      	bne.n	8007a2c <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079e2:	6a38      	ldr	r0, [r7, #32]
 80079e4:	f000 fbc6 	bl	8008174 <prvIsQueueFull>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d018      	beq.n	8007a20 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	3310      	adds	r3, #16
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 f806 	bl	8008a08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079fc:	6a38      	ldr	r0, [r7, #32]
 80079fe:	f000 fb51 	bl	80080a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a02:	f000 fe65 	bl	80086d0 <xTaskResumeAll>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f47f af7c 	bne.w	8007906 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <xQueueGenericSend+0x150>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	e772      	b.n	8007906 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a20:	6a38      	ldr	r0, [r7, #32]
 8007a22:	f000 fb3f 	bl	80080a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a26:	f000 fe53 	bl	80086d0 <xTaskResumeAll>
 8007a2a:	e76c      	b.n	8007906 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a2c:	6a38      	ldr	r0, [r7, #32]
 8007a2e:	f000 fb39 	bl	80080a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a32:	f000 fe4d 	bl	80086d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08c      	sub	sp, #48	; 0x30
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a56:	f3ef 8211 	mrs	r2, BASEPRI
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	61ba      	str	r2, [r7, #24]
 8007a6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <xQueueGenericSendFromISR+0x40>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d12f      	bne.n	8007ae4 <xQueueGenericSendFromISR+0xa0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a9a:	f000 fa73 	bl	8007f84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a9e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d112      	bne.n	8007ace <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d016      	beq.n	8007ade <xQueueGenericSendFromISR+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	3324      	adds	r3, #36	; 0x24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 ffdb 	bl	8008a70 <xTaskRemoveFromEventList>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00e      	beq.n	8007ade <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <xQueueGenericSendFromISR+0x9a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	e007      	b.n	8007ade <xQueueGenericSendFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	b25a      	sxtb	r2, r3
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8007ae2:	e001      	b.n	8007ae8 <xQueueGenericSendFromISR+0xa4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007af2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3730      	adds	r7, #48	; 0x30
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b08a      	sub	sp, #40	; 0x28
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	623b      	str	r3, [r7, #32]
	__asm volatile
 8007b0c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	613a      	str	r2, [r7, #16]
 8007b22:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8007b24:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b26:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d229      	bcs.n	8007b8c <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b3e:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d112      	bne.n	8007b78 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d015      	beq.n	8007b86 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	3324      	adds	r3, #36	; 0x24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 ff86 	bl	8008a70 <xTaskRemoveFromEventList>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e006      	b.n	8007b86 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	b25a      	sxtb	r2, r3
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b86:	2301      	movs	r3, #1
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8a:	e001      	b.n	8007b90 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f383 8811 	msr	BASEPRI, r3
}
 8007b9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3728      	adds	r7, #40	; 0x28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bbc:	f001 fe0a 	bl	80097d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01f      	beq.n	8007c0c <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	6a38      	ldr	r0, [r7, #32]
 8007bd0:	f000 fa42 	bl	8008058 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	1e5a      	subs	r2, r3, #1
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00f      	beq.n	8007c04 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	3310      	adds	r3, #16
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 ff41 	bl	8008a70 <xTaskRemoveFromEventList>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d007      	beq.n	8007c04 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bf4:	4b3c      	ldr	r3, [pc, #240]	; (8007ce8 <xQueueReceive+0x140>)
 8007bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c04:	f001 fe00 	bl	8009808 <vPortExitCritical>
				return pdPASS;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e069      	b.n	8007ce0 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c12:	f001 fdf9 	bl	8009808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e062      	b.n	8007ce0 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d106      	bne.n	8007c2e <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c20:	f107 0314 	add.w	r3, r7, #20
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 ff79 	bl	8008b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c2e:	f001 fdeb 	bl	8009808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c32:	f000 fd3f 	bl	80086b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c36:	f001 fdcd 	bl	80097d4 <vPortEnterCritical>
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c40:	b25b      	sxtb	r3, r3
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c46:	d103      	bne.n	8007c50 <xQueueReceive+0xa8>
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d103      	bne.n	8007c66 <xQueueReceive+0xbe>
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c66:	f001 fdcf 	bl	8009808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c6a:	1d3a      	adds	r2, r7, #4
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 ff68 	bl	8008b48 <xTaskCheckForTimeOut>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d123      	bne.n	8007cc6 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7e:	6a38      	ldr	r0, [r7, #32]
 8007c80:	f000 fa62 	bl	8008148 <prvIsQueueEmpty>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d017      	beq.n	8007cba <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	3324      	adds	r3, #36	; 0x24
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	4611      	mov	r1, r2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 feb8 	bl	8008a08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c98:	6a38      	ldr	r0, [r7, #32]
 8007c9a:	f000 fa03 	bl	80080a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c9e:	f000 fd17 	bl	80086d0 <xTaskResumeAll>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d189      	bne.n	8007bbc <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <xQueueReceive+0x140>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	e780      	b.n	8007bbc <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cba:	6a38      	ldr	r0, [r7, #32]
 8007cbc:	f000 f9f2 	bl	80080a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cc0:	f000 fd06 	bl	80086d0 <xTaskResumeAll>
 8007cc4:	e77a      	b.n	8007bbc <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cc6:	6a38      	ldr	r0, [r7, #32]
 8007cc8:	f000 f9ec 	bl	80080a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ccc:	f000 fd00 	bl	80086d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cd0:	6a38      	ldr	r0, [r7, #32]
 8007cd2:	f000 fa39 	bl	8008148 <prvIsQueueEmpty>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f43f af6f 	beq.w	8007bbc <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3728      	adds	r7, #40	; 0x28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08a      	sub	sp, #40	; 0x28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d02:	f001 fd67 	bl	80097d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d024      	beq.n	8007d5c <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	1e5a      	subs	r2, r3, #1
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d104      	bne.n	8007d2c <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d22:	f001 f95f 	bl	8008fe4 <pvTaskIncrementMutexHeldCount>
 8007d26:	4602      	mov	r2, r0
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00f      	beq.n	8007d54 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3310      	adds	r3, #16
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fe99 	bl	8008a70 <xTaskRemoveFromEventList>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d44:	4b4c      	ldr	r3, [pc, #304]	; (8007e78 <xQueueSemaphoreTake+0x18c>)
 8007d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d54:	f001 fd58 	bl	8009808 <vPortExitCritical>
				return pdPASS;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e089      	b.n	8007e70 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d103      	bne.n	8007d6a <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007d62:	f001 fd51 	bl	8009808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e082      	b.n	8007e70 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fed1 	bl	8008b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d7e:	f001 fd43 	bl	8009808 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d82:	f000 fc97 	bl	80086b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d86:	f001 fd25 	bl	80097d4 <vPortEnterCritical>
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d103      	bne.n	8007da0 <xQueueSemaphoreTake+0xb4>
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d103      	bne.n	8007db6 <xQueueSemaphoreTake+0xca>
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db6:	f001 fd27 	bl	8009808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dba:	463a      	mov	r2, r7
 8007dbc:	f107 030c 	add.w	r3, r7, #12
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fec0 	bl	8008b48 <xTaskCheckForTimeOut>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d132      	bne.n	8007e34 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dce:	69f8      	ldr	r0, [r7, #28]
 8007dd0:	f000 f9ba 	bl	8008148 <prvIsQueueEmpty>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d026      	beq.n	8007e28 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8007de2:	f001 fcf7 	bl	80097d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 ffe6 	bl	8008dbc <xTaskPriorityInherit>
 8007df0:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8007df2:	f001 fd09 	bl	8009808 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fe02 	bl	8008a08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e04:	69f8      	ldr	r0, [r7, #28]
 8007e06:	f000 f94d 	bl	80080a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e0a:	f000 fc61 	bl	80086d0 <xTaskResumeAll>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f47f af76 	bne.w	8007d02 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8007e16:	4b18      	ldr	r3, [pc, #96]	; (8007e78 <xQueueSemaphoreTake+0x18c>)
 8007e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	e76c      	b.n	8007d02 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e28:	69f8      	ldr	r0, [r7, #28]
 8007e2a:	f000 f93b 	bl	80080a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e2e:	f000 fc4f 	bl	80086d0 <xTaskResumeAll>
 8007e32:	e766      	b.n	8007d02 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007e34:	69f8      	ldr	r0, [r7, #28]
 8007e36:	f000 f935 	bl	80080a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e3a:	f000 fc49 	bl	80086d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e3e:	69f8      	ldr	r0, [r7, #28]
 8007e40:	f000 f982 	bl	8008148 <prvIsQueueEmpty>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f43f af5b 	beq.w	8007d02 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8007e52:	f001 fcbf 	bl	80097d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007e56:	69f8      	ldr	r0, [r7, #28]
 8007e58:	f000 f87c 	bl	8007f54 <prvGetDisinheritPriorityAfterTimeout>
 8007e5c:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	6979      	ldr	r1, [r7, #20]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 f85d 	bl	8008f24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007e6a:	f001 fccd 	bl	8009808 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08c      	sub	sp, #48	; 0x30
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm volatile
 8007e8c:	f3ef 8211 	mrs	r2, BASEPRI
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	61ba      	str	r2, [r7, #24]
 8007ea2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d02d      	beq.n	8007f10 <xQueueReceiveFromISR+0x94>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eba:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ec0:	f000 f8ca 	bl	8008058 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	1e5a      	subs	r2, r3, #1
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ecc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d112      	bne.n	8007efc <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d015      	beq.n	8007f0a <xQueueReceiveFromISR+0x8e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fdc4 	bl	8008a70 <xTaskRemoveFromEventList>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00d      	beq.n	8007f0a <xQueueReceiveFromISR+0x8e>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <xQueueReceiveFromISR+0x8e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	e006      	b.n	8007f0a <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007efc:	7ffb      	ldrb	r3, [r7, #31]
 8007efe:	3301      	adds	r3, #1
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	b25a      	sxtb	r2, r3
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f0e:	e001      	b.n	8007f14 <xQueueReceiveFromISR+0x98>
		}
		else
		{
			xReturn = pdFAIL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f383 8811 	msr	BASEPRI, r3
}
 8007f1e:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3730      	adds	r7, #48	; 0x30
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 f95e 	bl	80081f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f001 fd98 	bl	8009a7c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e001      	b.n	8007f76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f76:	68fb      	ldr	r3, [r7, #12]
	}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10d      	bne.n	8007fbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d14d      	bne.n	8008046 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 ff6c 	bl	8008e8c <xTaskPriorityDisinherit>
 8007fb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	609a      	str	r2, [r3, #8]
 8007fbc:	e043      	b.n	8008046 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d119      	bne.n	8007ff8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6858      	ldr	r0, [r3, #4]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	f001 fe7c 	bl	8009ccc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d32b      	bcc.n	8008046 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	605a      	str	r2, [r3, #4]
 8007ff6:	e026      	b.n	8008046 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68d8      	ldr	r0, [r3, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008000:	461a      	mov	r2, r3
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	f001 fe62 	bl	8009ccc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	425b      	negs	r3, r3
 8008012:	441a      	add	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d207      	bcs.n	8008034 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	425b      	negs	r3, r3
 800802e:	441a      	add	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d105      	bne.n	8008046 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3b01      	subs	r3, #1
 8008044:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800804e:	697b      	ldr	r3, [r7, #20]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	2b00      	cmp	r3, #0
 8008068:	d018      	beq.n	800809c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	441a      	add	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d303      	bcc.n	800808c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68d9      	ldr	r1, [r3, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	461a      	mov	r2, r3
 8008096:	6838      	ldr	r0, [r7, #0]
 8008098:	f001 fe18 	bl	8009ccc <memcpy>
	}
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080ac:	f001 fb92 	bl	80097d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080b8:	e011      	b.n	80080de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d012      	beq.n	80080e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3324      	adds	r3, #36	; 0x24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fcd2 	bl	8008a70 <xTaskRemoveFromEventList>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080d2:	f000 fd7f 	bl	8008bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	3b01      	subs	r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dce9      	bgt.n	80080ba <prvUnlockQueue+0x16>
 80080e6:	e000      	b.n	80080ea <prvUnlockQueue+0x46>
					break;
 80080e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	22ff      	movs	r2, #255	; 0xff
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080f2:	f001 fb89 	bl	8009808 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080f6:	f001 fb6d 	bl	80097d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008100:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008102:	e011      	b.n	8008128 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d012      	beq.n	8008132 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3310      	adds	r3, #16
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fcad 	bl	8008a70 <xTaskRemoveFromEventList>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800811c:	f000 fd5a 	bl	8008bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	3b01      	subs	r3, #1
 8008124:	b2db      	uxtb	r3, r3
 8008126:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dce9      	bgt.n	8008104 <prvUnlockQueue+0x60>
 8008130:	e000      	b.n	8008134 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008132:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	22ff      	movs	r2, #255	; 0xff
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800813c:	f001 fb64 	bl	8009808 <vPortExitCritical>
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008150:	f001 fb40 	bl	80097d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	e001      	b.n	8008166 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008166:	f001 fb4f 	bl	8009808 <vPortExitCritical>

	return xReturn;
 800816a:	68fb      	ldr	r3, [r7, #12]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800817c:	f001 fb2a 	bl	80097d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	429a      	cmp	r2, r3
 800818a:	d102      	bne.n	8008192 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e001      	b.n	8008196 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008196:	f001 fb37 	bl	8009808 <vPortExitCritical>

	return xReturn;
 800819a:	68fb      	ldr	r3, [r7, #12]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	e014      	b.n	80081de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081b4:	4a0f      	ldr	r2, [pc, #60]	; (80081f4 <vQueueAddToRegistry+0x50>)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10b      	bne.n	80081d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081c0:	490c      	ldr	r1, [pc, #48]	; (80081f4 <vQueueAddToRegistry+0x50>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081ca:	4a0a      	ldr	r2, [pc, #40]	; (80081f4 <vQueueAddToRegistry+0x50>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	4413      	add	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081d6:	e006      	b.n	80081e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b07      	cmp	r3, #7
 80081e2:	d9e7      	bls.n	80081b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000bc8 	.word	0x20000bc8

080081f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e016      	b.n	8008234 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008206:	4a10      	ldr	r2, [pc, #64]	; (8008248 <vQueueUnregisterQueue+0x50>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4413      	add	r3, r2
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d10b      	bne.n	800822e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008216:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <vQueueUnregisterQueue+0x50>)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2100      	movs	r1, #0
 800821c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <vQueueUnregisterQueue+0x50>)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	4413      	add	r3, r2
 8008228:	2200      	movs	r2, #0
 800822a:	605a      	str	r2, [r3, #4]
				break;
 800822c:	e006      	b.n	800823c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b07      	cmp	r3, #7
 8008238:	d9e5      	bls.n	8008206 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	20000bc8 	.word	0x20000bc8

0800824c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800825c:	f001 faba 	bl	80097d4 <vPortEnterCritical>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008266:	b25b      	sxtb	r3, r3
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826c:	d103      	bne.n	8008276 <vQueueWaitForMessageRestricted+0x2a>
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800827c:	b25b      	sxtb	r3, r3
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d103      	bne.n	800828c <vQueueWaitForMessageRestricted+0x40>
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800828c:	f001 fabc 	bl	8009808 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	3324      	adds	r3, #36	; 0x24
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fbc7 	bl	8008a34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082a6:	6978      	ldr	r0, [r7, #20]
 80082a8:	f7ff fefc 	bl	80080a4 <prvUnlockQueue>
	}
 80082ac:	bf00      	nop
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	; 0x28
 80082b8:	af04      	add	r7, sp, #16
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01e      	beq.n	8008306 <xTaskCreateStatic+0x52>
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01b      	beq.n	8008306 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082e0:	2300      	movs	r3, #0
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	9302      	str	r3, [sp, #8]
 80082e8:	f107 0310 	add.w	r3, r7, #16
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f851 	bl	80083a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082fe:	6978      	ldr	r0, [r7, #20]
 8008300:	f000 f8e4 	bl	80084cc <prvAddNewTaskToReadyList>
 8008304:	e001      	b.n	800830a <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 800830a:	693b      	ldr	r3, [r7, #16]
	}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08c      	sub	sp, #48	; 0x30
 8008318:	af04      	add	r7, sp, #16
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	4613      	mov	r3, r2
 8008322:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4618      	mov	r0, r3
 800832a:	f001 fb0d 	bl	8009948 <pvPortMalloc>
 800832e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00e      	beq.n	8008354 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008336:	20bc      	movs	r0, #188	; 0xbc
 8008338:	f001 fb06 	bl	8009948 <pvPortMalloc>
 800833c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	631a      	str	r2, [r3, #48]	; 0x30
 800834a:	e005      	b.n	8008358 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800834c:	6978      	ldr	r0, [r7, #20]
 800834e:	f001 fb95 	bl	8009a7c <vPortFree>
 8008352:	e001      	b.n	8008358 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d017      	beq.n	800838e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	2300      	movs	r3, #0
 800836a:	9303      	str	r3, [sp, #12]
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	9302      	str	r3, [sp, #8]
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f80f 	bl	80083a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008382:	69f8      	ldr	r0, [r7, #28]
 8008384:	f000 f8a2 	bl	80084cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008388:	2301      	movs	r3, #1
 800838a:	61bb      	str	r3, [r7, #24]
 800838c:	e002      	b.n	8008394 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800838e:	f04f 33ff 	mov.w	r3, #4294967295
 8008392:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008394:	69bb      	ldr	r3, [r7, #24]
	}
 8008396:	4618      	mov	r0, r3
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	461a      	mov	r2, r3
 80083b8:	21a5      	movs	r1, #165	; 0xa5
 80083ba:	f001 fc95 	bl	8009ce8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083c8:	3b01      	subs	r3, #1
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f023 0307 	bic.w	r3, r3, #7
 80083d6:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01f      	beq.n	800841e <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e012      	b.n	800840a <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	4413      	add	r3, r2
 80083ea:	7819      	ldrb	r1, [r3, #0]
 80083ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	4413      	add	r3, r2
 80083f2:	3334      	adds	r3, #52	; 0x34
 80083f4:	460a      	mov	r2, r1
 80083f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	4413      	add	r3, r2
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d006      	beq.n	8008412 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3301      	adds	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b0f      	cmp	r3, #15
 800840e:	d9e9      	bls.n	80083e4 <prvInitialiseNewTask+0x44>
 8008410:	e000      	b.n	8008414 <prvInitialiseNewTask+0x74>
			{
				break;
 8008412:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800841c:	e003      	b.n	8008426 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	2b37      	cmp	r3, #55	; 0x37
 800842a:	d901      	bls.n	8008430 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800842c:	2337      	movs	r3, #55	; 0x37
 800842e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	6a3a      	ldr	r2, [r7, #32]
 8008434:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	6a3a      	ldr	r2, [r7, #32]
 800843a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	2200      	movs	r2, #0
 8008440:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	3304      	adds	r3, #4
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff f8c6 	bl	80075d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	3318      	adds	r3, #24
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff f8c1 	bl	80075d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800845a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800846a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2200      	movs	r2, #0
 8008478:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	3354      	adds	r3, #84	; 0x54
 8008480:	2260      	movs	r2, #96	; 0x60
 8008482:	2100      	movs	r1, #0
 8008484:	4618      	mov	r0, r3
 8008486:	f001 fc2f 	bl	8009ce8 <memset>
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <prvInitialiseNewTask+0x120>)
 800848e:	659a      	str	r2, [r3, #88]	; 0x58
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	4a0c      	ldr	r2, [pc, #48]	; (80084c4 <prvInitialiseNewTask+0x124>)
 8008494:	65da      	str	r2, [r3, #92]	; 0x5c
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	4a0b      	ldr	r2, [pc, #44]	; (80084c8 <prvInitialiseNewTask+0x128>)
 800849a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	68f9      	ldr	r1, [r7, #12]
 80084a0:	6938      	ldr	r0, [r7, #16]
 80084a2:	f001 f8f5 	bl	8009690 <pxPortInitialiseStack>
 80084a6:	4602      	mov	r2, r0
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084b8:	bf00      	nop
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	0800c7b0 	.word	0x0800c7b0
 80084c4:	0800c7d0 	.word	0x0800c7d0
 80084c8:	0800c790 	.word	0x0800c790

080084cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084d4:	f001 f97e 	bl	80097d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084d8:	4b2d      	ldr	r3, [pc, #180]	; (8008590 <prvAddNewTaskToReadyList+0xc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3301      	adds	r3, #1
 80084de:	4a2c      	ldr	r2, [pc, #176]	; (8008590 <prvAddNewTaskToReadyList+0xc4>)
 80084e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084e2:	4b2c      	ldr	r3, [pc, #176]	; (8008594 <prvAddNewTaskToReadyList+0xc8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084ea:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <prvAddNewTaskToReadyList+0xc8>)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084f0:	4b27      	ldr	r3, [pc, #156]	; (8008590 <prvAddNewTaskToReadyList+0xc4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d110      	bne.n	800851a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084f8:	f000 fb90 	bl	8008c1c <prvInitialiseTaskLists>
 80084fc:	e00d      	b.n	800851a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084fe:	4b26      	ldr	r3, [pc, #152]	; (8008598 <prvAddNewTaskToReadyList+0xcc>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008506:	4b23      	ldr	r3, [pc, #140]	; (8008594 <prvAddNewTaskToReadyList+0xc8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	429a      	cmp	r2, r3
 8008512:	d802      	bhi.n	800851a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008514:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <prvAddNewTaskToReadyList+0xc8>)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800851a:	4b20      	ldr	r3, [pc, #128]	; (800859c <prvAddNewTaskToReadyList+0xd0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3301      	adds	r3, #1
 8008520:	4a1e      	ldr	r2, [pc, #120]	; (800859c <prvAddNewTaskToReadyList+0xd0>)
 8008522:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008524:	4b1d      	ldr	r3, [pc, #116]	; (800859c <prvAddNewTaskToReadyList+0xd0>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	4b1b      	ldr	r3, [pc, #108]	; (80085a0 <prvAddNewTaskToReadyList+0xd4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d903      	bls.n	8008540 <prvAddNewTaskToReadyList+0x74>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	4a18      	ldr	r2, [pc, #96]	; (80085a0 <prvAddNewTaskToReadyList+0xd4>)
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4a15      	ldr	r2, [pc, #84]	; (80085a4 <prvAddNewTaskToReadyList+0xd8>)
 800854e:	441a      	add	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f7ff f84b 	bl	80075f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800855c:	f001 f954 	bl	8009808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008560:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <prvAddNewTaskToReadyList+0xcc>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00e      	beq.n	8008586 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <prvAddNewTaskToReadyList+0xc8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	429a      	cmp	r2, r3
 8008574:	d207      	bcs.n	8008586 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008576:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <prvAddNewTaskToReadyList+0xdc>)
 8008578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008586:	bf00      	nop
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200010dc 	.word	0x200010dc
 8008594:	20000c08 	.word	0x20000c08
 8008598:	200010e8 	.word	0x200010e8
 800859c:	200010f8 	.word	0x200010f8
 80085a0:	200010e4 	.word	0x200010e4
 80085a4:	20000c0c 	.word	0x20000c0c
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80085be:	f000 f879 	bl	80086b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085c2:	2100      	movs	r1, #0
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fd21 	bl	800900c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085ca:	f000 f881 	bl	80086d0 <xTaskResumeAll>
 80085ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d107      	bne.n	80085e6 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 80085d6:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <vTaskDelay+0x44>)
 80085d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	; 0x28
 80085f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008602:	1d3a      	adds	r2, r7, #4
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	f107 030c 	add.w	r3, r7, #12
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe ff8f 	bl	8007530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	9202      	str	r2, [sp, #8]
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	2300      	movs	r3, #0
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	2300      	movs	r3, #0
 8008622:	460a      	mov	r2, r1
 8008624:	491b      	ldr	r1, [pc, #108]	; (8008694 <vTaskStartScheduler+0xa0>)
 8008626:	481c      	ldr	r0, [pc, #112]	; (8008698 <vTaskStartScheduler+0xa4>)
 8008628:	f7ff fe44 	bl	80082b4 <xTaskCreateStatic>
 800862c:	4603      	mov	r3, r0
 800862e:	4a1b      	ldr	r2, [pc, #108]	; (800869c <vTaskStartScheduler+0xa8>)
 8008630:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008632:	4b1a      	ldr	r3, [pc, #104]	; (800869c <vTaskStartScheduler+0xa8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800863a:	2301      	movs	r3, #1
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e001      	b.n	8008644 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d102      	bne.n	8008650 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800864a:	f000 fd33 	bl	80090b4 <xTimerCreateTimerTask>
 800864e:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d11a      	bne.n	800868c <vTaskStartScheduler+0x98>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	613b      	str	r3, [r7, #16]
}
 8008668:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <vTaskStartScheduler+0xac>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3354      	adds	r3, #84	; 0x54
 8008670:	4a0c      	ldr	r2, [pc, #48]	; (80086a4 <vTaskStartScheduler+0xb0>)
 8008672:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008674:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <vTaskStartScheduler+0xb4>)
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800867c:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <vTaskStartScheduler+0xb8>)
 800867e:	2201      	movs	r2, #1
 8008680:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008682:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <vTaskStartScheduler+0xbc>)
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008688:	f001 f87a 	bl	8009780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800868c:	bf00      	nop
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	0800c664 	.word	0x0800c664
 8008698:	08008bed 	.word	0x08008bed
 800869c:	20001100 	.word	0x20001100
 80086a0:	20000c08 	.word	0x20000c08
 80086a4:	2000001c 	.word	0x2000001c
 80086a8:	200010fc 	.word	0x200010fc
 80086ac:	200010e8 	.word	0x200010e8
 80086b0:	200010e0 	.word	0x200010e0

080086b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086b8:	4b04      	ldr	r3, [pc, #16]	; (80086cc <vTaskSuspendAll+0x18>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	4a03      	ldr	r2, [pc, #12]	; (80086cc <vTaskSuspendAll+0x18>)
 80086c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086c2:	bf00      	nop
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20001104 	.word	0x20001104

080086d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086de:	f001 f879 	bl	80097d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086e2:	4b39      	ldr	r3, [pc, #228]	; (80087c8 <xTaskResumeAll+0xf8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	4a37      	ldr	r2, [pc, #220]	; (80087c8 <xTaskResumeAll+0xf8>)
 80086ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ec:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <xTaskResumeAll+0xf8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d162      	bne.n	80087ba <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086f4:	4b35      	ldr	r3, [pc, #212]	; (80087cc <xTaskResumeAll+0xfc>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d05e      	beq.n	80087ba <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086fc:	e02f      	b.n	800875e <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fe:	4b34      	ldr	r3, [pc, #208]	; (80087d0 <xTaskResumeAll+0x100>)
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3318      	adds	r3, #24
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe ffce 	bl	80076ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3304      	adds	r3, #4
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe ffc9 	bl	80076ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	4b2d      	ldr	r3, [pc, #180]	; (80087d4 <xTaskResumeAll+0x104>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d903      	bls.n	800872e <xTaskResumeAll+0x5e>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	4a2a      	ldr	r2, [pc, #168]	; (80087d4 <xTaskResumeAll+0x104>)
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4a27      	ldr	r2, [pc, #156]	; (80087d8 <xTaskResumeAll+0x108>)
 800873c:	441a      	add	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3304      	adds	r3, #4
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f7fe ff54 	bl	80075f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874e:	4b23      	ldr	r3, [pc, #140]	; (80087dc <xTaskResumeAll+0x10c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	429a      	cmp	r2, r3
 8008756:	d302      	bcc.n	800875e <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8008758:	4b21      	ldr	r3, [pc, #132]	; (80087e0 <xTaskResumeAll+0x110>)
 800875a:	2201      	movs	r2, #1
 800875c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800875e:	4b1c      	ldr	r3, [pc, #112]	; (80087d0 <xTaskResumeAll+0x100>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1cb      	bne.n	80086fe <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800876c:	f000 fae8 	bl	8008d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008770:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <xTaskResumeAll+0x114>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d010      	beq.n	800879e <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800877c:	f000 f846 	bl	800880c <xTaskIncrementTick>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8008786:	4b16      	ldr	r3, [pc, #88]	; (80087e0 <xTaskResumeAll+0x110>)
 8008788:	2201      	movs	r2, #1
 800878a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3b01      	subs	r3, #1
 8008790:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1f1      	bne.n	800877c <xTaskResumeAll+0xac>

						xPendedTicks = 0;
 8008798:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <xTaskResumeAll+0x114>)
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800879e:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <xTaskResumeAll+0x110>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087aa:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <xTaskResumeAll+0x118>)
 80087ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087ba:	f001 f825 	bl	8009808 <vPortExitCritical>

	return xAlreadyYielded;
 80087be:	68bb      	ldr	r3, [r7, #8]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20001104 	.word	0x20001104
 80087cc:	200010dc 	.word	0x200010dc
 80087d0:	2000109c 	.word	0x2000109c
 80087d4:	200010e4 	.word	0x200010e4
 80087d8:	20000c0c 	.word	0x20000c0c
 80087dc:	20000c08 	.word	0x20000c08
 80087e0:	200010f0 	.word	0x200010f0
 80087e4:	200010ec 	.word	0x200010ec
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <xTaskGetTickCount+0x1c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087f8:	687b      	ldr	r3, [r7, #4]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	200010e0 	.word	0x200010e0

0800880c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008812:	2300      	movs	r3, #0
 8008814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008816:	4b46      	ldr	r3, [pc, #280]	; (8008930 <xTaskIncrementTick+0x124>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d17e      	bne.n	800891c <xTaskIncrementTick+0x110>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800881e:	4b45      	ldr	r3, [pc, #276]	; (8008934 <xTaskIncrementTick+0x128>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3301      	adds	r3, #1
 8008824:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008826:	4a43      	ldr	r2, [pc, #268]	; (8008934 <xTaskIncrementTick+0x128>)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d110      	bne.n	8008854 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8008832:	4b41      	ldr	r3, [pc, #260]	; (8008938 <xTaskIncrementTick+0x12c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	4b40      	ldr	r3, [pc, #256]	; (800893c <xTaskIncrementTick+0x130>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a3e      	ldr	r2, [pc, #248]	; (8008938 <xTaskIncrementTick+0x12c>)
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	4a3e      	ldr	r2, [pc, #248]	; (800893c <xTaskIncrementTick+0x130>)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	4b3e      	ldr	r3, [pc, #248]	; (8008940 <xTaskIncrementTick+0x134>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	4a3c      	ldr	r2, [pc, #240]	; (8008940 <xTaskIncrementTick+0x134>)
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	f000 fa76 	bl	8008d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008854:	4b3b      	ldr	r3, [pc, #236]	; (8008944 <xTaskIncrementTick+0x138>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	429a      	cmp	r2, r3
 800885c:	d349      	bcc.n	80088f2 <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800885e:	4b36      	ldr	r3, [pc, #216]	; (8008938 <xTaskIncrementTick+0x12c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d104      	bne.n	8008872 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008868:	4b36      	ldr	r3, [pc, #216]	; (8008944 <xTaskIncrementTick+0x138>)
 800886a:	f04f 32ff 	mov.w	r2, #4294967295
 800886e:	601a      	str	r2, [r3, #0]
					break;
 8008870:	e03f      	b.n	80088f2 <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008872:	4b31      	ldr	r3, [pc, #196]	; (8008938 <xTaskIncrementTick+0x12c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d203      	bcs.n	8008892 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800888a:	4a2e      	ldr	r2, [pc, #184]	; (8008944 <xTaskIncrementTick+0x138>)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008890:	e02f      	b.n	80088f2 <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	3304      	adds	r3, #4
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe ff08 	bl	80076ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3318      	adds	r3, #24
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe feff 	bl	80076ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b2:	4b25      	ldr	r3, [pc, #148]	; (8008948 <xTaskIncrementTick+0x13c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d903      	bls.n	80088c2 <xTaskIncrementTick+0xb6>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	4a22      	ldr	r2, [pc, #136]	; (8008948 <xTaskIncrementTick+0x13c>)
 80088c0:	6013      	str	r3, [r2, #0]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4a1f      	ldr	r2, [pc, #124]	; (800894c <xTaskIncrementTick+0x140>)
 80088d0:	441a      	add	r2, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	3304      	adds	r3, #4
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f7fe fe8a 	bl	80075f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <xTaskIncrementTick+0x144>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d3b8      	bcc.n	800885e <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80088ec:	2301      	movs	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f0:	e7b5      	b.n	800885e <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088f2:	4b17      	ldr	r3, [pc, #92]	; (8008950 <xTaskIncrementTick+0x144>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	4914      	ldr	r1, [pc, #80]	; (800894c <xTaskIncrementTick+0x140>)
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d901      	bls.n	800890e <xTaskIncrementTick+0x102>
			{
				xSwitchRequired = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800890e:	4b11      	ldr	r3, [pc, #68]	; (8008954 <xTaskIncrementTick+0x148>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d007      	beq.n	8008926 <xTaskIncrementTick+0x11a>
			{
				xSwitchRequired = pdTRUE;
 8008916:	2301      	movs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e004      	b.n	8008926 <xTaskIncrementTick+0x11a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <xTaskIncrementTick+0x14c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3301      	adds	r3, #1
 8008922:	4a0d      	ldr	r2, [pc, #52]	; (8008958 <xTaskIncrementTick+0x14c>)
 8008924:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008926:	697b      	ldr	r3, [r7, #20]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20001104 	.word	0x20001104
 8008934:	200010e0 	.word	0x200010e0
 8008938:	20001094 	.word	0x20001094
 800893c:	20001098 	.word	0x20001098
 8008940:	200010f4 	.word	0x200010f4
 8008944:	200010fc 	.word	0x200010fc
 8008948:	200010e4 	.word	0x200010e4
 800894c:	20000c0c 	.word	0x20000c0c
 8008950:	20000c08 	.word	0x20000c08
 8008954:	200010f0 	.word	0x200010f0
 8008958:	200010ec 	.word	0x200010ec

0800895c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <vTaskSwitchContext+0x94>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800896a:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <vTaskSwitchContext+0x98>)
 800896c:	2201      	movs	r2, #1
 800896e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008970:	e038      	b.n	80089e4 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8008972:	4b20      	ldr	r3, [pc, #128]	; (80089f4 <vTaskSwitchContext+0x98>)
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008978:	4b1f      	ldr	r3, [pc, #124]	; (80089f8 <vTaskSwitchContext+0x9c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	607b      	str	r3, [r7, #4]
 800897e:	e002      	b.n	8008986 <vTaskSwitchContext+0x2a>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3b01      	subs	r3, #1
 8008984:	607b      	str	r3, [r7, #4]
 8008986:	491d      	ldr	r1, [pc, #116]	; (80089fc <vTaskSwitchContext+0xa0>)
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f2      	beq.n	8008980 <vTaskSwitchContext+0x24>
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a15      	ldr	r2, [pc, #84]	; (80089fc <vTaskSwitchContext+0xa0>)
 80089a6:	4413      	add	r3, r2
 80089a8:	603b      	str	r3, [r7, #0]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	605a      	str	r2, [r3, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	3308      	adds	r3, #8
 80089bc:	429a      	cmp	r2, r3
 80089be:	d104      	bne.n	80089ca <vTaskSwitchContext+0x6e>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	605a      	str	r2, [r3, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	4a0b      	ldr	r2, [pc, #44]	; (8008a00 <vTaskSwitchContext+0xa4>)
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	4a08      	ldr	r2, [pc, #32]	; (80089f8 <vTaskSwitchContext+0x9c>)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <vTaskSwitchContext+0xa4>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3354      	adds	r3, #84	; 0x54
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <vTaskSwitchContext+0xa8>)
 80089e2:	6013      	str	r3, [r2, #0]
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20001104 	.word	0x20001104
 80089f4:	200010f0 	.word	0x200010f0
 80089f8:	200010e4 	.word	0x200010e4
 80089fc:	20000c0c 	.word	0x20000c0c
 8008a00:	20000c08 	.word	0x20000c08
 8008a04:	2000001c 	.word	0x2000001c

08008a08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a12:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <vTaskPlaceOnEventList+0x28>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3318      	adds	r3, #24
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fe fe0d 	bl	800763a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a20:	2101      	movs	r1, #1
 8008a22:	6838      	ldr	r0, [r7, #0]
 8008a24:	f000 faf2 	bl	800900c <prvAddCurrentTaskToDelayedList>
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000c08 	.word	0x20000c08

08008a34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <vTaskPlaceOnEventListRestricted+0x38>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3318      	adds	r3, #24
 8008a46:	4619      	mov	r1, r3
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7fe fdd2 	bl	80075f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
 8008a58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	68b8      	ldr	r0, [r7, #8]
 8008a5e:	f000 fad5 	bl	800900c <prvAddCurrentTaskToDelayedList>
	}
 8008a62:	bf00      	nop
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000c08 	.word	0x20000c08

08008a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3318      	adds	r3, #24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe fe11 	bl	80076ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a8a:	4b1e      	ldr	r3, [pc, #120]	; (8008b04 <xTaskRemoveFromEventList+0x94>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d11d      	bne.n	8008ace <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fe08 	bl	80076ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa0:	4b19      	ldr	r3, [pc, #100]	; (8008b08 <xTaskRemoveFromEventList+0x98>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d903      	bls.n	8008ab0 <xTaskRemoveFromEventList+0x40>
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	4a16      	ldr	r2, [pc, #88]	; (8008b08 <xTaskRemoveFromEventList+0x98>)
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <xTaskRemoveFromEventList+0x9c>)
 8008abe:	441a      	add	r2, r3
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fe fd93 	bl	80075f2 <vListInsertEnd>
 8008acc:	e005      	b.n	8008ada <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	3318      	adds	r3, #24
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	480e      	ldr	r0, [pc, #56]	; (8008b10 <xTaskRemoveFromEventList+0xa0>)
 8008ad6:	f7fe fd8c 	bl	80075f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <xTaskRemoveFromEventList+0xa4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d905      	bls.n	8008af4 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <xTaskRemoveFromEventList+0xa8>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	e001      	b.n	8008af8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008af8:	68fb      	ldr	r3, [r7, #12]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20001104 	.word	0x20001104
 8008b08:	200010e4 	.word	0x200010e4
 8008b0c:	20000c0c 	.word	0x20000c0c
 8008b10:	2000109c 	.word	0x2000109c
 8008b14:	20000c08 	.word	0x20000c08
 8008b18:	200010f0 	.word	0x200010f0

08008b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b24:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <vTaskInternalSetTimeOutState+0x24>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <vTaskInternalSetTimeOutState+0x28>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	605a      	str	r2, [r3, #4]
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	200010f4 	.word	0x200010f4
 8008b44:	200010e0 	.word	0x200010e0

08008b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8008b52:	f000 fe3f 	bl	80097d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b56:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <xTaskCheckForTimeOut+0x84>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d102      	bne.n	8008b76 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e023      	b.n	8008bbe <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <xTaskCheckForTimeOut+0x88>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d007      	beq.n	8008b92 <xTaskCheckForTimeOut+0x4a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d302      	bcc.n	8008b92 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e015      	b.n	8008bbe <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d20b      	bcs.n	8008bb4 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ffb7 	bl	8008b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e004      	b.n	8008bbe <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008bbe:	f000 fe23 	bl	8009808 <vPortExitCritical>

	return xReturn;
 8008bc2:	697b      	ldr	r3, [r7, #20]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	200010e0 	.word	0x200010e0
 8008bd0:	200010f4 	.word	0x200010f4

08008bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bd8:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <vTaskMissedYield+0x14>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
}
 8008bde:	bf00      	nop
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	200010f0 	.word	0x200010f0

08008bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bf4:	f000 f852 	bl	8008c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bf8:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <prvIdleTask+0x28>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d9f9      	bls.n	8008bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c00:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <prvIdleTask+0x2c>)
 8008c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c10:	e7f0      	b.n	8008bf4 <prvIdleTask+0x8>
 8008c12:	bf00      	nop
 8008c14:	20000c0c 	.word	0x20000c0c
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
 8008c26:	e00c      	b.n	8008c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4a12      	ldr	r2, [pc, #72]	; (8008c7c <prvInitialiseTaskLists+0x60>)
 8008c34:	4413      	add	r3, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fcae 	bl	8007598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b37      	cmp	r3, #55	; 0x37
 8008c46:	d9ef      	bls.n	8008c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c48:	480d      	ldr	r0, [pc, #52]	; (8008c80 <prvInitialiseTaskLists+0x64>)
 8008c4a:	f7fe fca5 	bl	8007598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c4e:	480d      	ldr	r0, [pc, #52]	; (8008c84 <prvInitialiseTaskLists+0x68>)
 8008c50:	f7fe fca2 	bl	8007598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c54:	480c      	ldr	r0, [pc, #48]	; (8008c88 <prvInitialiseTaskLists+0x6c>)
 8008c56:	f7fe fc9f 	bl	8007598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c5a:	480c      	ldr	r0, [pc, #48]	; (8008c8c <prvInitialiseTaskLists+0x70>)
 8008c5c:	f7fe fc9c 	bl	8007598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c60:	480b      	ldr	r0, [pc, #44]	; (8008c90 <prvInitialiseTaskLists+0x74>)
 8008c62:	f7fe fc99 	bl	8007598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <prvInitialiseTaskLists+0x78>)
 8008c68:	4a05      	ldr	r2, [pc, #20]	; (8008c80 <prvInitialiseTaskLists+0x64>)
 8008c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <prvInitialiseTaskLists+0x7c>)
 8008c6e:	4a05      	ldr	r2, [pc, #20]	; (8008c84 <prvInitialiseTaskLists+0x68>)
 8008c70:	601a      	str	r2, [r3, #0]
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000c0c 	.word	0x20000c0c
 8008c80:	2000106c 	.word	0x2000106c
 8008c84:	20001080 	.word	0x20001080
 8008c88:	2000109c 	.word	0x2000109c
 8008c8c:	200010b0 	.word	0x200010b0
 8008c90:	200010c8 	.word	0x200010c8
 8008c94:	20001094 	.word	0x20001094
 8008c98:	20001098 	.word	0x20001098

08008c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca2:	e019      	b.n	8008cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ca4:	f000 fd96 	bl	80097d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <prvCheckTasksWaitingTermination+0x50>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe fcf9 	bl	80076ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <prvCheckTasksWaitingTermination+0x54>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	4a0b      	ldr	r2, [pc, #44]	; (8008cf0 <prvCheckTasksWaitingTermination+0x54>)
 8008cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	4a0a      	ldr	r2, [pc, #40]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cce:	f000 fd9b 	bl	8009808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f810 	bl	8008cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <prvCheckTasksWaitingTermination+0x58>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e1      	bne.n	8008ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200010b0 	.word	0x200010b0
 8008cf0:	200010dc 	.word	0x200010dc
 8008cf4:	200010c4 	.word	0x200010c4

08008cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3354      	adds	r3, #84	; 0x54
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 f899 	bl	8009e3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d108      	bne.n	8008d26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 feaf 	bl	8009a7c <vPortFree>
				vPortFree( pxTCB );
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 feac 	bl	8009a7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d24:	e007      	b.n	8008d36 <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fea3 	bl	8009a7c <vPortFree>
	}
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvResetNextTaskUnblockTime+0x38>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d104      	bne.n	8008d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <prvResetNextTaskUnblockTime+0x3c>)
 8008d52:	f04f 32ff 	mov.w	r2, #4294967295
 8008d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d58:	e008      	b.n	8008d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5a:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <prvResetNextTaskUnblockTime+0x38>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4a04      	ldr	r2, [pc, #16]	; (8008d7c <prvResetNextTaskUnblockTime+0x3c>)
 8008d6a:	6013      	str	r3, [r2, #0]
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	20001094 	.word	0x20001094
 8008d7c:	200010fc 	.word	0x200010fc

08008d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d86:	4b0b      	ldr	r3, [pc, #44]	; (8008db4 <xTaskGetSchedulerState+0x34>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	607b      	str	r3, [r7, #4]
 8008d92:	e008      	b.n	8008da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d94:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <xTaskGetSchedulerState+0x38>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	e001      	b.n	8008da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008da6:	687b      	ldr	r3, [r7, #4]
	}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	200010e8 	.word	0x200010e8
 8008db8:	20001104 	.word	0x20001104

08008dbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d051      	beq.n	8008e76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd6:	4b2a      	ldr	r3, [pc, #168]	; (8008e80 <xTaskPriorityInherit+0xc4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d241      	bcs.n	8008e64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	db06      	blt.n	8008df6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de8:	4b25      	ldr	r3, [pc, #148]	; (8008e80 <xTaskPriorityInherit+0xc4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6959      	ldr	r1, [r3, #20]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <xTaskPriorityInherit+0xc8>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	4299      	cmp	r1, r3
 8008e0c:	d122      	bne.n	8008e54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fc4a 	bl	80076ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e18:	4b19      	ldr	r3, [pc, #100]	; (8008e80 <xTaskPriorityInherit+0xc4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e26:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <xTaskPriorityInherit+0xcc>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d903      	bls.n	8008e36 <xTaskPriorityInherit+0x7a>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	4a15      	ldr	r2, [pc, #84]	; (8008e88 <xTaskPriorityInherit+0xcc>)
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4a10      	ldr	r2, [pc, #64]	; (8008e84 <xTaskPriorityInherit+0xc8>)
 8008e44:	441a      	add	r2, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f7fe fbd0 	bl	80075f2 <vListInsertEnd>
 8008e52:	e004      	b.n	8008e5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e54:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <xTaskPriorityInherit+0xc4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e008      	b.n	8008e76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e68:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <xTaskPriorityInherit+0xc4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d201      	bcs.n	8008e76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e72:	2301      	movs	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e76:	68fb      	ldr	r3, [r7, #12]
	}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20000c08 	.word	0x20000c08
 8008e84:	20000c0c 	.word	0x20000c0c
 8008e88:	200010e4 	.word	0x200010e4

08008e8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d037      	beq.n	8008f12 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea6:	1e5a      	subs	r2, r3, #1
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d02c      	beq.n	8008f12 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d128      	bne.n	8008f12 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe fbf1 	bl	80076ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <xTaskPriorityDisinherit+0x90>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d903      	bls.n	8008ef2 <xTaskPriorityDisinherit+0x66>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	4a0b      	ldr	r2, [pc, #44]	; (8008f1c <xTaskPriorityDisinherit+0x90>)
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a08      	ldr	r2, [pc, #32]	; (8008f20 <xTaskPriorityDisinherit+0x94>)
 8008f00:	441a      	add	r2, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fe fb72 	bl	80075f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f12:	68fb      	ldr	r3, [r7, #12]
	}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	200010e4 	.word	0x200010e4
 8008f20:	20000c0c 	.word	0x20000c0c

08008f24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f32:	2301      	movs	r3, #1
 8008f34:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d04b      	beq.n	8008fd4 <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d902      	bls.n	8008f4c <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e002      	b.n	8008f52 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f50:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d03b      	beq.n	8008fd4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d136      	bne.n	8008fd4 <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	db04      	blt.n	8008f84 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	6959      	ldr	r1, [r3, #20]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4a12      	ldr	r2, [pc, #72]	; (8008fdc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f94:	4413      	add	r3, r2
 8008f96:	4299      	cmp	r1, r3
 8008f98:	d11c      	bne.n	8008fd4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fb84 	bl	80076ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d903      	bls.n	8008fb8 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4a05      	ldr	r2, [pc, #20]	; (8008fdc <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008fc6:	441a      	add	r2, r3
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4610      	mov	r0, r2
 8008fd0:	f7fe fb0f 	bl	80075f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000c0c 	.word	0x20000c0c
 8008fe0:	200010e4 	.word	0x200010e4

08008fe4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ff6:	3201      	adds	r2, #1
 8008ff8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ffa:	4b03      	ldr	r3, [pc, #12]	; (8009008 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
	}
 8008ffe:	4618      	mov	r0, r3
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	20000c08 	.word	0x20000c08

0800900c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009016:	4b21      	ldr	r3, [pc, #132]	; (800909c <prvAddCurrentTaskToDelayedList+0x90>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800901c:	4b20      	ldr	r3, [pc, #128]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3304      	adds	r3, #4
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fb42 	bl	80076ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902e:	d10a      	bne.n	8009046 <prvAddCurrentTaskToDelayedList+0x3a>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009036:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3304      	adds	r3, #4
 800903c:	4619      	mov	r1, r3
 800903e:	4819      	ldr	r0, [pc, #100]	; (80090a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009040:	f7fe fad7 	bl	80075f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009044:	e026      	b.n	8009094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4413      	add	r3, r2
 800904c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	429a      	cmp	r2, r3
 800905c:	d209      	bcs.n	8009072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905e:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3304      	adds	r3, #4
 8009068:	4619      	mov	r1, r3
 800906a:	4610      	mov	r0, r2
 800906c:	f7fe fae5 	bl	800763a <vListInsert>
}
 8009070:	e010      	b.n	8009094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009072:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b0a      	ldr	r3, [pc, #40]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3304      	adds	r3, #4
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fe fadb 	bl	800763a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	429a      	cmp	r2, r3
 800908c:	d202      	bcs.n	8009094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800908e:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	6013      	str	r3, [r2, #0]
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	200010e0 	.word	0x200010e0
 80090a0:	20000c08 	.word	0x20000c08
 80090a4:	200010c8 	.word	0x200010c8
 80090a8:	20001098 	.word	0x20001098
 80090ac:	20001094 	.word	0x20001094
 80090b0:	200010fc 	.word	0x200010fc

080090b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090be:	f000 faa7 	bl	8009610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090c2:	4b15      	ldr	r3, [pc, #84]	; (8009118 <xTimerCreateTimerTask+0x64>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d020      	beq.n	800910c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090d2:	463a      	mov	r2, r7
 80090d4:	1d39      	adds	r1, r7, #4
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fa42 	bl	8007564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	9202      	str	r2, [sp, #8]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	2302      	movs	r3, #2
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	2300      	movs	r3, #0
 80090f0:	460a      	mov	r2, r1
 80090f2:	490a      	ldr	r1, [pc, #40]	; (800911c <xTimerCreateTimerTask+0x68>)
 80090f4:	480a      	ldr	r0, [pc, #40]	; (8009120 <xTimerCreateTimerTask+0x6c>)
 80090f6:	f7ff f8dd 	bl	80082b4 <xTaskCreateStatic>
 80090fa:	4603      	mov	r3, r0
 80090fc:	4a09      	ldr	r2, [pc, #36]	; (8009124 <xTimerCreateTimerTask+0x70>)
 80090fe:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009100:	4b08      	ldr	r3, [pc, #32]	; (8009124 <xTimerCreateTimerTask+0x70>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009108:	2301      	movs	r3, #1
 800910a:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 800910c:	68fb      	ldr	r3, [r7, #12]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20001138 	.word	0x20001138
 800911c:	0800c66c 	.word	0x0800c66c
 8009120:	08009229 	.word	0x08009229
 8009124:	2000113c 	.word	0x2000113c

08009128 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	; 0x28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009136:	2300      	movs	r3, #0
 8009138:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800913a:	4b1a      	ldr	r3, [pc, #104]	; (80091a4 <xTimerGenericCommand+0x7c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d02a      	beq.n	8009198 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b05      	cmp	r3, #5
 8009152:	dc18      	bgt.n	8009186 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009154:	f7ff fe14 	bl	8008d80 <xTaskGetSchedulerState>
 8009158:	4603      	mov	r3, r0
 800915a:	2b02      	cmp	r3, #2
 800915c:	d109      	bne.n	8009172 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800915e:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <xTimerGenericCommand+0x7c>)
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f107 0114 	add.w	r1, r7, #20
 8009166:	2300      	movs	r3, #0
 8009168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916a:	f7fe fbc1 	bl	80078f0 <xQueueGenericSend>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24
 8009170:	e012      	b.n	8009198 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <xTimerGenericCommand+0x7c>)
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	f107 0114 	add.w	r1, r7, #20
 800917a:	2300      	movs	r3, #0
 800917c:	2200      	movs	r2, #0
 800917e:	f7fe fbb7 	bl	80078f0 <xQueueGenericSend>
 8009182:	6278      	str	r0, [r7, #36]	; 0x24
 8009184:	e008      	b.n	8009198 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009186:	4b07      	ldr	r3, [pc, #28]	; (80091a4 <xTimerGenericCommand+0x7c>)
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f107 0114 	add.w	r1, r7, #20
 800918e:	2300      	movs	r3, #0
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	f7fe fc57 	bl	8007a44 <xQueueGenericSendFromISR>
 8009196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800919a:	4618      	mov	r0, r3
 800919c:	3728      	adds	r7, #40	; 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20001138 	.word	0x20001138

080091a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b2:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <prvProcessExpiredTimer+0x7c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3304      	adds	r3, #4
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe fa73 	bl	80076ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d015      	beq.n	8009200 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	699a      	ldr	r2, [r3, #24]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	18d1      	adds	r1, r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f8c5 	bl	8009370 <prvInsertTimerInActiveList>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d012      	beq.n	8009212 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	2300      	movs	r3, #0
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	2100      	movs	r1, #0
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff ff96 	bl	8009128 <xTimerGenericCommand>
 80091fc:	60b8      	str	r0, [r7, #8]
 80091fe:	e008      	b.n	8009212 <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009206:	f023 0301 	bic.w	r3, r3, #1
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	4798      	blx	r3
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20001130 	.word	0x20001130

08009228 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009230:	f107 0308 	add.w	r3, r7, #8
 8009234:	4618      	mov	r0, r3
 8009236:	f000 f857 	bl	80092e8 <prvGetNextExpireTime>
 800923a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	4619      	mov	r1, r3
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f803 	bl	800924c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009246:	f000 f8d5 	bl	80093f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800924a:	e7f1      	b.n	8009230 <prvTimerTask+0x8>

0800924c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009256:	f7ff fa2d 	bl	80086b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f866 	bl	8009330 <prvSampleTimeNow>
 8009264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d130      	bne.n	80092ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <prvProcessTimerOrBlockTask+0x3c>
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	429a      	cmp	r2, r3
 8009278:	d806      	bhi.n	8009288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800927a:	f7ff fa29 	bl	80086d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff ff91 	bl	80091a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009286:	e024      	b.n	80092d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d008      	beq.n	80092a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <prvProcessTimerOrBlockTask+0x90>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <prvProcessTimerOrBlockTask+0x50>
 8009298:	2301      	movs	r3, #1
 800929a:	e000      	b.n	800929e <prvProcessTimerOrBlockTask+0x52>
 800929c:	2300      	movs	r3, #0
 800929e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092a0:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <prvProcessTimerOrBlockTask+0x94>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7fe ffcd 	bl	800824c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092b2:	f7ff fa0d 	bl	80086d0 <xTaskResumeAll>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <prvProcessTimerOrBlockTask+0x98>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
}
 80092cc:	e001      	b.n	80092d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092ce:	f7ff f9ff 	bl	80086d0 <xTaskResumeAll>
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20001134 	.word	0x20001134
 80092e0:	20001138 	.word	0x20001138
 80092e4:	e000ed04 	.word	0xe000ed04

080092e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <prvGetNextExpireTime+0x44>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <prvGetNextExpireTime+0x16>
 80092fa:	2201      	movs	r2, #1
 80092fc:	e000      	b.n	8009300 <prvGetNextExpireTime+0x18>
 80092fe:	2200      	movs	r2, #0
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800930c:	4b07      	ldr	r3, [pc, #28]	; (800932c <prvGetNextExpireTime+0x44>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	e001      	b.n	800931c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800931c:	68fb      	ldr	r3, [r7, #12]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	20001130 	.word	0x20001130

08009330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009338:	f7ff fa58 	bl	80087ec <xTaskGetTickCount>
 800933c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800933e:	4b0b      	ldr	r3, [pc, #44]	; (800936c <prvSampleTimeNow+0x3c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	429a      	cmp	r2, r3
 8009346:	d205      	bcs.n	8009354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009348:	f000 f90c 	bl	8009564 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e002      	b.n	800935a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800935a:	4a04      	ldr	r2, [pc, #16]	; (800936c <prvSampleTimeNow+0x3c>)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009360:	68fb      	ldr	r3, [r7, #12]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20001140 	.word	0x20001140

08009370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	429a      	cmp	r2, r3
 8009394:	d812      	bhi.n	80093bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d302      	bcc.n	80093aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e01b      	b.n	80093e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093aa:	4b10      	ldr	r3, [pc, #64]	; (80093ec <prvInsertTimerInActiveList+0x7c>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7fe f940 	bl	800763a <vListInsert>
 80093ba:	e012      	b.n	80093e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d206      	bcs.n	80093d2 <prvInsertTimerInActiveList+0x62>
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d302      	bcc.n	80093d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093cc:	2301      	movs	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	e007      	b.n	80093e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093d2:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <prvInsertTimerInActiveList+0x80>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3304      	adds	r3, #4
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7fe f92c 	bl	800763a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093e2:	697b      	ldr	r3, [r7, #20]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20001134 	.word	0x20001134
 80093f0:	20001130 	.word	0x20001130

080093f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08c      	sub	sp, #48	; 0x30
 80093f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093fa:	e0a0      	b.n	800953e <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	da0b      	bge.n	800941a <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	3304      	adds	r3, #4
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009410:	6850      	ldr	r0, [r2, #4]
 8009412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009414:	6892      	ldr	r2, [r2, #8]
 8009416:	4611      	mov	r1, r2
 8009418:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f2c0 808d 	blt.w	800953c <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d004      	beq.n	8009438 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	3304      	adds	r3, #4
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe f93a 	bl	80076ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009438:	1d3b      	adds	r3, r7, #4
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff ff78 	bl	8009330 <prvSampleTimeNow>
 8009440:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b09      	cmp	r3, #9
 8009446:	d87a      	bhi.n	800953e <prvProcessReceivedCommands+0x14a>
 8009448:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <prvProcessReceivedCommands+0x5c>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	08009479 	.word	0x08009479
 8009454:	08009479 	.word	0x08009479
 8009458:	08009479 	.word	0x08009479
 800945c:	080094d3 	.word	0x080094d3
 8009460:	080094e7 	.word	0x080094e7
 8009464:	08009513 	.word	0x08009513
 8009468:	08009479 	.word	0x08009479
 800946c:	08009479 	.word	0x08009479
 8009470:	080094d3 	.word	0x080094d3
 8009474:	080094e7 	.word	0x080094e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	b2da      	uxtb	r2, r3
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	18d1      	adds	r1, r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	6a38      	ldr	r0, [r7, #32]
 8009498:	f7ff ff6a 	bl	8009370 <prvInsertTimerInActiveList>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d04d      	beq.n	800953e <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	6a38      	ldr	r0, [r7, #32]
 80094a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d042      	beq.n	800953e <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	441a      	add	r2, r3
 80094c0:	2300      	movs	r3, #0
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2300      	movs	r3, #0
 80094c6:	2100      	movs	r1, #0
 80094c8:	6a38      	ldr	r0, [r7, #32]
 80094ca:	f7ff fe2d 	bl	8009128 <xTimerGenericCommand>
 80094ce:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 80094d0:	e035      	b.n	800953e <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d2:	6a3b      	ldr	r3, [r7, #32]
 80094d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d8:	f023 0301 	bic.w	r3, r3, #1
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094e4:	e02b      	b.n	800953e <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094ec:	f043 0301 	orr.w	r3, r3, #1
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	18d1      	adds	r1, r2, r3
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	6a38      	ldr	r0, [r7, #32]
 800950c:	f7ff ff30 	bl	8009370 <prvInsertTimerInActiveList>
					break;
 8009510:	e015      	b.n	800953e <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d103      	bne.n	8009528 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 8009520:	6a38      	ldr	r0, [r7, #32]
 8009522:	f000 faab 	bl	8009a7c <vPortFree>
 8009526:	e00a      	b.n	800953e <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	b2da      	uxtb	r2, r3
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800953a:	e000      	b.n	800953e <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800953c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800953e:	4b08      	ldr	r3, [pc, #32]	; (8009560 <prvProcessReceivedCommands+0x16c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f107 0108 	add.w	r1, r7, #8
 8009546:	2200      	movs	r2, #0
 8009548:	4618      	mov	r0, r3
 800954a:	f7fe fb2d 	bl	8007ba8 <xQueueReceive>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	f47f af53 	bne.w	80093fc <prvProcessReceivedCommands+0x8>
	}
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	3728      	adds	r7, #40	; 0x28
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20001138 	.word	0x20001138

08009564 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800956a:	e03a      	b.n	80095e2 <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800956c:	4b26      	ldr	r3, [pc, #152]	; (8009608 <prvSwitchTimerLists+0xa4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009576:	4b24      	ldr	r3, [pc, #144]	; (8009608 <prvSwitchTimerLists+0xa4>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3304      	adds	r3, #4
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe f891 	bl	80076ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d020      	beq.n	80095e2 <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d90e      	bls.n	80095d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095be:	4b12      	ldr	r3, [pc, #72]	; (8009608 <prvSwitchTimerLists+0xa4>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4619      	mov	r1, r3
 80095c8:	4610      	mov	r0, r2
 80095ca:	f7fe f836 	bl	800763a <vListInsert>
 80095ce:	e008      	b.n	80095e2 <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095d0:	2300      	movs	r3, #0
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	2100      	movs	r1, #0
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f7ff fda4 	bl	8009128 <xTimerGenericCommand>
 80095e0:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <prvSwitchTimerLists+0xa4>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1bf      	bne.n	800956c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095ec:	4b06      	ldr	r3, [pc, #24]	; (8009608 <prvSwitchTimerLists+0xa4>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095f2:	4b06      	ldr	r3, [pc, #24]	; (800960c <prvSwitchTimerLists+0xa8>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a04      	ldr	r2, [pc, #16]	; (8009608 <prvSwitchTimerLists+0xa4>)
 80095f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095fa:	4a04      	ldr	r2, [pc, #16]	; (800960c <prvSwitchTimerLists+0xa8>)
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	6013      	str	r3, [r2, #0]
}
 8009600:	bf00      	nop
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	20001130 	.word	0x20001130
 800960c:	20001134 	.word	0x20001134

08009610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009616:	f000 f8dd 	bl	80097d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800961a:	4b15      	ldr	r3, [pc, #84]	; (8009670 <prvCheckForValidListAndQueue+0x60>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d120      	bne.n	8009664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009622:	4814      	ldr	r0, [pc, #80]	; (8009674 <prvCheckForValidListAndQueue+0x64>)
 8009624:	f7fd ffb8 	bl	8007598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009628:	4813      	ldr	r0, [pc, #76]	; (8009678 <prvCheckForValidListAndQueue+0x68>)
 800962a:	f7fd ffb5 	bl	8007598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800962e:	4b13      	ldr	r3, [pc, #76]	; (800967c <prvCheckForValidListAndQueue+0x6c>)
 8009630:	4a10      	ldr	r2, [pc, #64]	; (8009674 <prvCheckForValidListAndQueue+0x64>)
 8009632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009634:	4b12      	ldr	r3, [pc, #72]	; (8009680 <prvCheckForValidListAndQueue+0x70>)
 8009636:	4a10      	ldr	r2, [pc, #64]	; (8009678 <prvCheckForValidListAndQueue+0x68>)
 8009638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800963a:	2300      	movs	r3, #0
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	4b11      	ldr	r3, [pc, #68]	; (8009684 <prvCheckForValidListAndQueue+0x74>)
 8009640:	4a11      	ldr	r2, [pc, #68]	; (8009688 <prvCheckForValidListAndQueue+0x78>)
 8009642:	2110      	movs	r1, #16
 8009644:	200a      	movs	r0, #10
 8009646:	f7fe f8b5 	bl	80077b4 <xQueueGenericCreateStatic>
 800964a:	4603      	mov	r3, r0
 800964c:	4a08      	ldr	r2, [pc, #32]	; (8009670 <prvCheckForValidListAndQueue+0x60>)
 800964e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009650:	4b07      	ldr	r3, [pc, #28]	; (8009670 <prvCheckForValidListAndQueue+0x60>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d005      	beq.n	8009664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <prvCheckForValidListAndQueue+0x60>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	490b      	ldr	r1, [pc, #44]	; (800968c <prvCheckForValidListAndQueue+0x7c>)
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe fda0 	bl	80081a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009664:	f000 f8d0 	bl	8009808 <vPortExitCritical>
}
 8009668:	bf00      	nop
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20001138 	.word	0x20001138
 8009674:	20001108 	.word	0x20001108
 8009678:	2000111c 	.word	0x2000111c
 800967c:	20001130 	.word	0x20001130
 8009680:	20001134 	.word	0x20001134
 8009684:	200011e4 	.word	0x200011e4
 8009688:	20001144 	.word	0x20001144
 800968c:	0800c674 	.word	0x0800c674

08009690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3b04      	subs	r3, #4
 80096a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3b04      	subs	r3, #4
 80096ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f023 0201 	bic.w	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3b04      	subs	r3, #4
 80096be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096c0:	4a0c      	ldr	r2, [pc, #48]	; (80096f4 <pxPortInitialiseStack+0x64>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3b14      	subs	r3, #20
 80096ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3b04      	subs	r3, #4
 80096d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f06f 0202 	mvn.w	r2, #2
 80096de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3b20      	subs	r3, #32
 80096e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	080096f9 	.word	0x080096f9

080096f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	607b      	str	r3, [r7, #4]
}
 8009714:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009716:	bf00      	nop
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0fc      	beq.n	8009718 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800971e:	bf00      	nop
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	0000      	movs	r0, r0
	...

08009730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009730:	4b07      	ldr	r3, [pc, #28]	; (8009750 <pxCurrentTCBConst2>)
 8009732:	6819      	ldr	r1, [r3, #0]
 8009734:	6808      	ldr	r0, [r1, #0]
 8009736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973a:	f380 8809 	msr	PSP, r0
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f04f 0000 	mov.w	r0, #0
 8009746:	f380 8811 	msr	BASEPRI, r0
 800974a:	4770      	bx	lr
 800974c:	f3af 8000 	nop.w

08009750 <pxCurrentTCBConst2>:
 8009750:	20000c08 	.word	0x20000c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009758:	4808      	ldr	r0, [pc, #32]	; (800977c <prvPortStartFirstTask+0x24>)
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	6800      	ldr	r0, [r0, #0]
 800975e:	f380 8808 	msr	MSP, r0
 8009762:	f04f 0000 	mov.w	r0, #0
 8009766:	f380 8814 	msr	CONTROL, r0
 800976a:	b662      	cpsie	i
 800976c:	b661      	cpsie	f
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	df00      	svc	0
 8009778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800977a:	bf00      	nop
 800977c:	e000ed08 	.word	0xe000ed08

08009780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009784:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <xPortStartScheduler+0x48>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a0f      	ldr	r2, [pc, #60]	; (80097c8 <xPortStartScheduler+0x48>)
 800978a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800978e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009790:	4b0d      	ldr	r3, [pc, #52]	; (80097c8 <xPortStartScheduler+0x48>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a0c      	ldr	r2, [pc, #48]	; (80097c8 <xPortStartScheduler+0x48>)
 8009796:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800979a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800979c:	f000 f8a6 	bl	80098ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <xPortStartScheduler+0x4c>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097a6:	f000 f8c5 	bl	8009934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <xPortStartScheduler+0x50>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <xPortStartScheduler+0x50>)
 80097b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097b4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097b6:	f7ff ffcf 	bl	8009758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097ba:	f7ff f8cf 	bl	800895c <vTaskSwitchContext>
	prvTaskExitError();
 80097be:	f7ff ff9b 	bl	80096f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	e000ed20 	.word	0xe000ed20
 80097cc:	20000018 	.word	0x20000018
 80097d0:	e000ef34 	.word	0xe000ef34

080097d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	607b      	str	r3, [r7, #4]
}
 80097ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097ee:	4b05      	ldr	r3, [pc, #20]	; (8009804 <vPortEnterCritical+0x30>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3301      	adds	r3, #1
 80097f4:	4a03      	ldr	r2, [pc, #12]	; (8009804 <vPortEnterCritical+0x30>)
 80097f6:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	20000018 	.word	0x20000018

08009808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800980e:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <vPortExitCritical+0x30>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3b01      	subs	r3, #1
 8009814:	4a08      	ldr	r2, [pc, #32]	; (8009838 <vPortExitCritical+0x30>)
 8009816:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009818:	4b07      	ldr	r3, [pc, #28]	; (8009838 <vPortExitCritical+0x30>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d105      	bne.n	800982c <vPortExitCritical+0x24>
 8009820:	2300      	movs	r3, #0
 8009822:	607b      	str	r3, [r7, #4]
	__asm volatile
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f383 8811 	msr	BASEPRI, r3
}
 800982a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	20000018 	.word	0x20000018
 800983c:	00000000 	.word	0x00000000

08009840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009840:	f3ef 8009 	mrs	r0, PSP
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <pxCurrentTCBConst>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	f01e 0f10 	tst.w	lr, #16
 8009850:	bf08      	it	eq
 8009852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	6010      	str	r0, [r2, #0]
 800985c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009864:	f380 8811 	msr	BASEPRI, r0
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f7ff f874 	bl	800895c <vTaskSwitchContext>
 8009874:	f04f 0000 	mov.w	r0, #0
 8009878:	f380 8811 	msr	BASEPRI, r0
 800987c:	bc09      	pop	{r0, r3}
 800987e:	6819      	ldr	r1, [r3, #0]
 8009880:	6808      	ldr	r0, [r1, #0]
 8009882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009886:	f01e 0f10 	tst.w	lr, #16
 800988a:	bf08      	it	eq
 800988c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009890:	f380 8809 	msr	PSP, r0
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	f3af 8000 	nop.w

080098a0 <pxCurrentTCBConst>:
 80098a0:	20000c08 	.word	0x20000c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop

080098a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	607b      	str	r3, [r7, #4]
}
 80098c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098c2:	f7fe ffa3 	bl	800880c <xTaskIncrementTick>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098cc:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <xPortSysTickHandler+0x40>)
 80098ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	2300      	movs	r3, #0
 80098d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f383 8811 	msr	BASEPRI, r3
}
 80098de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	e000ed04 	.word	0xe000ed04

080098ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098f0:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <vPortSetupTimerInterrupt+0x34>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098f6:	4b0b      	ldr	r3, [pc, #44]	; (8009924 <vPortSetupTimerInterrupt+0x38>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <vPortSetupTimerInterrupt+0x3c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a0a      	ldr	r2, [pc, #40]	; (800992c <vPortSetupTimerInterrupt+0x40>)
 8009902:	fba2 2303 	umull	r2, r3, r2, r3
 8009906:	099b      	lsrs	r3, r3, #6
 8009908:	4a09      	ldr	r2, [pc, #36]	; (8009930 <vPortSetupTimerInterrupt+0x44>)
 800990a:	3b01      	subs	r3, #1
 800990c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800990e:	4b04      	ldr	r3, [pc, #16]	; (8009920 <vPortSetupTimerInterrupt+0x34>)
 8009910:	2207      	movs	r2, #7
 8009912:	601a      	str	r2, [r3, #0]
}
 8009914:	bf00      	nop
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	e000e010 	.word	0xe000e010
 8009924:	e000e018 	.word	0xe000e018
 8009928:	2000000c 	.word	0x2000000c
 800992c:	10624dd3 	.word	0x10624dd3
 8009930:	e000e014 	.word	0xe000e014

08009934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009944 <vPortEnableVFP+0x10>
 8009938:	6801      	ldr	r1, [r0, #0]
 800993a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800993e:	6001      	str	r1, [r0, #0]
 8009940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009942:	bf00      	nop
 8009944:	e000ed88 	.word	0xe000ed88

08009948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8009954:	f7fe feae 	bl	80086b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009958:	4b42      	ldr	r3, [pc, #264]	; (8009a64 <pvPortMalloc+0x11c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009960:	f000 f8cc 	bl	8009afc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009964:	4b40      	ldr	r3, [pc, #256]	; (8009a68 <pvPortMalloc+0x120>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4013      	ands	r3, r2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d172      	bne.n	8009a56 <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8009976:	2208      	movs	r2, #8
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4413      	add	r3, r2
 800997c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f023 0307 	bic.w	r3, r3, #7
 800998e:	3308      	adds	r3, #8
 8009990:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d05e      	beq.n	8009a56 <pvPortMalloc+0x10e>
 8009998:	4b34      	ldr	r3, [pc, #208]	; (8009a6c <pvPortMalloc+0x124>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d859      	bhi.n	8009a56 <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099a2:	4b33      	ldr	r3, [pc, #204]	; (8009a70 <pvPortMalloc+0x128>)
 80099a4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80099a6:	4b32      	ldr	r3, [pc, #200]	; (8009a70 <pvPortMalloc+0x128>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ac:	e004      	b.n	80099b8 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d903      	bls.n	80099ca <pvPortMalloc+0x82>
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f1      	bne.n	80099ae <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099ca:	4b26      	ldr	r3, [pc, #152]	; (8009a64 <pvPortMalloc+0x11c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d040      	beq.n	8009a56 <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2208      	movs	r2, #8
 80099da:	4413      	add	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	1ad2      	subs	r2, r2, r3
 80099ee:	2308      	movs	r3, #8
 80099f0:	005b      	lsls	r3, r3, #1
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d90f      	bls.n	8009a16 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4413      	add	r3, r2
 80099fc:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1ad2      	subs	r2, r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a10:	68b8      	ldr	r0, [r7, #8]
 8009a12:	f000 f8d5 	bl	8009bc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a16:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <pvPortMalloc+0x124>)
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	4a12      	ldr	r2, [pc, #72]	; (8009a6c <pvPortMalloc+0x124>)
 8009a22:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <pvPortMalloc+0x124>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <pvPortMalloc+0x12c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d203      	bcs.n	8009a38 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a30:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <pvPortMalloc+0x124>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a0f      	ldr	r2, [pc, #60]	; (8009a74 <pvPortMalloc+0x12c>)
 8009a36:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <pvPortMalloc+0x120>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	431a      	orrs	r2, r3
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <pvPortMalloc+0x130>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <pvPortMalloc+0x130>)
 8009a54:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a56:	f7fe fe3b 	bl	80086d0 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	2000263c 	.word	0x2000263c
 8009a68:	20002650 	.word	0x20002650
 8009a6c:	20002640 	.word	0x20002640
 8009a70:	20002634 	.word	0x20002634
 8009a74:	20002644 	.word	0x20002644
 8009a78:	20002648 	.word	0x20002648

08009a7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d02c      	beq.n	8009ae8 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a8e:	2308      	movs	r3, #8
 8009a90:	425b      	negs	r3, r3
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	4b13      	ldr	r3, [pc, #76]	; (8009af0 <vPortFree+0x74>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01e      	beq.n	8009ae8 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d11a      	bne.n	8009ae8 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <vPortFree+0x74>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	43db      	mvns	r3, r3
 8009abc:	401a      	ands	r2, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ac2:	f7fe fdf7 	bl	80086b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <vPortFree+0x78>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4413      	add	r3, r2
 8009ad0:	4a08      	ldr	r2, [pc, #32]	; (8009af4 <vPortFree+0x78>)
 8009ad2:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ad4:	68b8      	ldr	r0, [r7, #8]
 8009ad6:	f000 f873 	bl	8009bc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <vPortFree+0x7c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	4a05      	ldr	r2, [pc, #20]	; (8009af8 <vPortFree+0x7c>)
 8009ae2:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ae4:	f7fe fdf4 	bl	80086d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ae8:	bf00      	nop
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20002650 	.word	0x20002650
 8009af4:	20002640 	.word	0x20002640
 8009af8:	2000264c 	.word	0x2000264c

08009afc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009b06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b08:	4b27      	ldr	r3, [pc, #156]	; (8009ba8 <prvHeapInit+0xac>)
 8009b0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00c      	beq.n	8009b30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3307      	adds	r3, #7
 8009b1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f023 0307 	bic.w	r3, r3, #7
 8009b22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	4a1f      	ldr	r2, [pc, #124]	; (8009ba8 <prvHeapInit+0xac>)
 8009b2c:	4413      	add	r3, r2
 8009b2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b34:	4a1d      	ldr	r2, [pc, #116]	; (8009bac <prvHeapInit+0xb0>)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b3a:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <prvHeapInit+0xb0>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	4413      	add	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b48:	2208      	movs	r2, #8
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <prvHeapInit+0xb4>)
 8009b5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b5e:	4b14      	ldr	r3, [pc, #80]	; (8009bb0 <prvHeapInit+0xb4>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2200      	movs	r2, #0
 8009b64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b66:	4b12      	ldr	r3, [pc, #72]	; (8009bb0 <prvHeapInit+0xb4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b7c:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <prvHeapInit+0xb4>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	4a0a      	ldr	r2, [pc, #40]	; (8009bb4 <prvHeapInit+0xb8>)
 8009b8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	4a09      	ldr	r2, [pc, #36]	; (8009bb8 <prvHeapInit+0xbc>)
 8009b92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b94:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <prvHeapInit+0xc0>)
 8009b96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b9a:	601a      	str	r2, [r3, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	20001234 	.word	0x20001234
 8009bac:	20002634 	.word	0x20002634
 8009bb0:	2000263c 	.word	0x2000263c
 8009bb4:	20002644 	.word	0x20002644
 8009bb8:	20002640 	.word	0x20002640
 8009bbc:	20002650 	.word	0x20002650

08009bc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bc8:	4b28      	ldr	r3, [pc, #160]	; (8009c6c <prvInsertBlockIntoFreeList+0xac>)
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e002      	b.n	8009bd4 <prvInsertBlockIntoFreeList+0x14>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d8f7      	bhi.n	8009bce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	4413      	add	r3, r2
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d108      	bne.n	8009c02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	441a      	add	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d118      	bne.n	8009c48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <prvInsertBlockIntoFreeList+0xb0>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d00d      	beq.n	8009c3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	e008      	b.n	8009c50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c3e:	4b0c      	ldr	r3, [pc, #48]	; (8009c70 <prvInsertBlockIntoFreeList+0xb0>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	e003      	b.n	8009c50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d002      	beq.n	8009c5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c5e:	bf00      	nop
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	20002634 	.word	0x20002634
 8009c70:	2000263c 	.word	0x2000263c

08009c74 <__errno>:
 8009c74:	4b01      	ldr	r3, [pc, #4]	; (8009c7c <__errno+0x8>)
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	2000001c 	.word	0x2000001c

08009c80 <__libc_init_array>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	4d0d      	ldr	r5, [pc, #52]	; (8009cb8 <__libc_init_array+0x38>)
 8009c84:	4c0d      	ldr	r4, [pc, #52]	; (8009cbc <__libc_init_array+0x3c>)
 8009c86:	1b64      	subs	r4, r4, r5
 8009c88:	10a4      	asrs	r4, r4, #2
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	42a6      	cmp	r6, r4
 8009c8e:	d109      	bne.n	8009ca4 <__libc_init_array+0x24>
 8009c90:	4d0b      	ldr	r5, [pc, #44]	; (8009cc0 <__libc_init_array+0x40>)
 8009c92:	4c0c      	ldr	r4, [pc, #48]	; (8009cc4 <__libc_init_array+0x44>)
 8009c94:	f002 fc52 	bl	800c53c <_init>
 8009c98:	1b64      	subs	r4, r4, r5
 8009c9a:	10a4      	asrs	r4, r4, #2
 8009c9c:	2600      	movs	r6, #0
 8009c9e:	42a6      	cmp	r6, r4
 8009ca0:	d105      	bne.n	8009cae <__libc_init_array+0x2e>
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca8:	4798      	blx	r3
 8009caa:	3601      	adds	r6, #1
 8009cac:	e7ee      	b.n	8009c8c <__libc_init_array+0xc>
 8009cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb2:	4798      	blx	r3
 8009cb4:	3601      	adds	r6, #1
 8009cb6:	e7f2      	b.n	8009c9e <__libc_init_array+0x1e>
 8009cb8:	0800ca38 	.word	0x0800ca38
 8009cbc:	0800ca38 	.word	0x0800ca38
 8009cc0:	0800ca38 	.word	0x0800ca38
 8009cc4:	0800ca3c 	.word	0x0800ca3c

08009cc8 <__retarget_lock_acquire_recursive>:
 8009cc8:	4770      	bx	lr

08009cca <__retarget_lock_release_recursive>:
 8009cca:	4770      	bx	lr

08009ccc <memcpy>:
 8009ccc:	440a      	add	r2, r1
 8009cce:	4291      	cmp	r1, r2
 8009cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cd4:	d100      	bne.n	8009cd8 <memcpy+0xc>
 8009cd6:	4770      	bx	lr
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ce2:	4291      	cmp	r1, r2
 8009ce4:	d1f9      	bne.n	8009cda <memcpy+0xe>
 8009ce6:	bd10      	pop	{r4, pc}

08009ce8 <memset>:
 8009ce8:	4402      	add	r2, r0
 8009cea:	4603      	mov	r3, r0
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d100      	bne.n	8009cf2 <memset+0xa>
 8009cf0:	4770      	bx	lr
 8009cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cf6:	e7f9      	b.n	8009cec <memset+0x4>

08009cf8 <sbrk_aligned>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	4e0e      	ldr	r6, [pc, #56]	; (8009d34 <sbrk_aligned+0x3c>)
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	6831      	ldr	r1, [r6, #0]
 8009d00:	4605      	mov	r5, r0
 8009d02:	b911      	cbnz	r1, 8009d0a <sbrk_aligned+0x12>
 8009d04:	f000 f8f6 	bl	8009ef4 <_sbrk_r>
 8009d08:	6030      	str	r0, [r6, #0]
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 f8f1 	bl	8009ef4 <_sbrk_r>
 8009d12:	1c43      	adds	r3, r0, #1
 8009d14:	d00a      	beq.n	8009d2c <sbrk_aligned+0x34>
 8009d16:	1cc4      	adds	r4, r0, #3
 8009d18:	f024 0403 	bic.w	r4, r4, #3
 8009d1c:	42a0      	cmp	r0, r4
 8009d1e:	d007      	beq.n	8009d30 <sbrk_aligned+0x38>
 8009d20:	1a21      	subs	r1, r4, r0
 8009d22:	4628      	mov	r0, r5
 8009d24:	f000 f8e6 	bl	8009ef4 <_sbrk_r>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d101      	bne.n	8009d30 <sbrk_aligned+0x38>
 8009d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d30:	4620      	mov	r0, r4
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	2000265c 	.word	0x2000265c

08009d38 <_malloc_r>:
 8009d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	1ccd      	adds	r5, r1, #3
 8009d3e:	f025 0503 	bic.w	r5, r5, #3
 8009d42:	3508      	adds	r5, #8
 8009d44:	2d0c      	cmp	r5, #12
 8009d46:	bf38      	it	cc
 8009d48:	250c      	movcc	r5, #12
 8009d4a:	2d00      	cmp	r5, #0
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	db01      	blt.n	8009d54 <_malloc_r+0x1c>
 8009d50:	42a9      	cmp	r1, r5
 8009d52:	d905      	bls.n	8009d60 <_malloc_r+0x28>
 8009d54:	230c      	movs	r3, #12
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	2600      	movs	r6, #0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d60:	4e2e      	ldr	r6, [pc, #184]	; (8009e1c <_malloc_r+0xe4>)
 8009d62:	f000 f8f7 	bl	8009f54 <__malloc_lock>
 8009d66:	6833      	ldr	r3, [r6, #0]
 8009d68:	461c      	mov	r4, r3
 8009d6a:	bb34      	cbnz	r4, 8009dba <_malloc_r+0x82>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f7ff ffc2 	bl	8009cf8 <sbrk_aligned>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	4604      	mov	r4, r0
 8009d78:	d14d      	bne.n	8009e16 <_malloc_r+0xde>
 8009d7a:	6834      	ldr	r4, [r6, #0]
 8009d7c:	4626      	mov	r6, r4
 8009d7e:	2e00      	cmp	r6, #0
 8009d80:	d140      	bne.n	8009e04 <_malloc_r+0xcc>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	4631      	mov	r1, r6
 8009d86:	4638      	mov	r0, r7
 8009d88:	eb04 0803 	add.w	r8, r4, r3
 8009d8c:	f000 f8b2 	bl	8009ef4 <_sbrk_r>
 8009d90:	4580      	cmp	r8, r0
 8009d92:	d13a      	bne.n	8009e0a <_malloc_r+0xd2>
 8009d94:	6821      	ldr	r1, [r4, #0]
 8009d96:	3503      	adds	r5, #3
 8009d98:	1a6d      	subs	r5, r5, r1
 8009d9a:	f025 0503 	bic.w	r5, r5, #3
 8009d9e:	3508      	adds	r5, #8
 8009da0:	2d0c      	cmp	r5, #12
 8009da2:	bf38      	it	cc
 8009da4:	250c      	movcc	r5, #12
 8009da6:	4629      	mov	r1, r5
 8009da8:	4638      	mov	r0, r7
 8009daa:	f7ff ffa5 	bl	8009cf8 <sbrk_aligned>
 8009dae:	3001      	adds	r0, #1
 8009db0:	d02b      	beq.n	8009e0a <_malloc_r+0xd2>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	442b      	add	r3, r5
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	e00e      	b.n	8009dd8 <_malloc_r+0xa0>
 8009dba:	6822      	ldr	r2, [r4, #0]
 8009dbc:	1b52      	subs	r2, r2, r5
 8009dbe:	d41e      	bmi.n	8009dfe <_malloc_r+0xc6>
 8009dc0:	2a0b      	cmp	r2, #11
 8009dc2:	d916      	bls.n	8009df2 <_malloc_r+0xba>
 8009dc4:	1961      	adds	r1, r4, r5
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	6025      	str	r5, [r4, #0]
 8009dca:	bf18      	it	ne
 8009dcc:	6059      	strne	r1, [r3, #4]
 8009dce:	6863      	ldr	r3, [r4, #4]
 8009dd0:	bf08      	it	eq
 8009dd2:	6031      	streq	r1, [r6, #0]
 8009dd4:	5162      	str	r2, [r4, r5]
 8009dd6:	604b      	str	r3, [r1, #4]
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f104 060b 	add.w	r6, r4, #11
 8009dde:	f000 f8bf 	bl	8009f60 <__malloc_unlock>
 8009de2:	f026 0607 	bic.w	r6, r6, #7
 8009de6:	1d23      	adds	r3, r4, #4
 8009de8:	1af2      	subs	r2, r6, r3
 8009dea:	d0b6      	beq.n	8009d5a <_malloc_r+0x22>
 8009dec:	1b9b      	subs	r3, r3, r6
 8009dee:	50a3      	str	r3, [r4, r2]
 8009df0:	e7b3      	b.n	8009d5a <_malloc_r+0x22>
 8009df2:	6862      	ldr	r2, [r4, #4]
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	bf0c      	ite	eq
 8009df8:	6032      	streq	r2, [r6, #0]
 8009dfa:	605a      	strne	r2, [r3, #4]
 8009dfc:	e7ec      	b.n	8009dd8 <_malloc_r+0xa0>
 8009dfe:	4623      	mov	r3, r4
 8009e00:	6864      	ldr	r4, [r4, #4]
 8009e02:	e7b2      	b.n	8009d6a <_malloc_r+0x32>
 8009e04:	4634      	mov	r4, r6
 8009e06:	6876      	ldr	r6, [r6, #4]
 8009e08:	e7b9      	b.n	8009d7e <_malloc_r+0x46>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	603b      	str	r3, [r7, #0]
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f000 f8a6 	bl	8009f60 <__malloc_unlock>
 8009e14:	e7a1      	b.n	8009d5a <_malloc_r+0x22>
 8009e16:	6025      	str	r5, [r4, #0]
 8009e18:	e7de      	b.n	8009dd8 <_malloc_r+0xa0>
 8009e1a:	bf00      	nop
 8009e1c:	20002658 	.word	0x20002658

08009e20 <cleanup_glue>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	460c      	mov	r4, r1
 8009e24:	6809      	ldr	r1, [r1, #0]
 8009e26:	4605      	mov	r5, r0
 8009e28:	b109      	cbz	r1, 8009e2e <cleanup_glue+0xe>
 8009e2a:	f7ff fff9 	bl	8009e20 <cleanup_glue>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4628      	mov	r0, r5
 8009e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e36:	f000 b899 	b.w	8009f6c <_free_r>
	...

08009e3c <_reclaim_reent>:
 8009e3c:	4b2c      	ldr	r3, [pc, #176]	; (8009ef0 <_reclaim_reent+0xb4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4283      	cmp	r3, r0
 8009e42:	b570      	push	{r4, r5, r6, lr}
 8009e44:	4604      	mov	r4, r0
 8009e46:	d051      	beq.n	8009eec <_reclaim_reent+0xb0>
 8009e48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009e4a:	b143      	cbz	r3, 8009e5e <_reclaim_reent+0x22>
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d14a      	bne.n	8009ee8 <_reclaim_reent+0xac>
 8009e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e54:	6819      	ldr	r1, [r3, #0]
 8009e56:	b111      	cbz	r1, 8009e5e <_reclaim_reent+0x22>
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 f887 	bl	8009f6c <_free_r>
 8009e5e:	6961      	ldr	r1, [r4, #20]
 8009e60:	b111      	cbz	r1, 8009e68 <_reclaim_reent+0x2c>
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 f882 	bl	8009f6c <_free_r>
 8009e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009e6a:	b111      	cbz	r1, 8009e72 <_reclaim_reent+0x36>
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 f87d 	bl	8009f6c <_free_r>
 8009e72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009e74:	b111      	cbz	r1, 8009e7c <_reclaim_reent+0x40>
 8009e76:	4620      	mov	r0, r4
 8009e78:	f000 f878 	bl	8009f6c <_free_r>
 8009e7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009e7e:	b111      	cbz	r1, 8009e86 <_reclaim_reent+0x4a>
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 f873 	bl	8009f6c <_free_r>
 8009e86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009e88:	b111      	cbz	r1, 8009e90 <_reclaim_reent+0x54>
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 f86e 	bl	8009f6c <_free_r>
 8009e90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009e92:	b111      	cbz	r1, 8009e9a <_reclaim_reent+0x5e>
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 f869 	bl	8009f6c <_free_r>
 8009e9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009e9c:	b111      	cbz	r1, 8009ea4 <_reclaim_reent+0x68>
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 f864 	bl	8009f6c <_free_r>
 8009ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ea6:	b111      	cbz	r1, 8009eae <_reclaim_reent+0x72>
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 f85f 	bl	8009f6c <_free_r>
 8009eae:	69a3      	ldr	r3, [r4, #24]
 8009eb0:	b1e3      	cbz	r3, 8009eec <_reclaim_reent+0xb0>
 8009eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4798      	blx	r3
 8009eb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009eba:	b1b9      	cbz	r1, 8009eec <_reclaim_reent+0xb0>
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ec2:	f7ff bfad 	b.w	8009e20 <cleanup_glue>
 8009ec6:	5949      	ldr	r1, [r1, r5]
 8009ec8:	b941      	cbnz	r1, 8009edc <_reclaim_reent+0xa0>
 8009eca:	3504      	adds	r5, #4
 8009ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ece:	2d80      	cmp	r5, #128	; 0x80
 8009ed0:	68d9      	ldr	r1, [r3, #12]
 8009ed2:	d1f8      	bne.n	8009ec6 <_reclaim_reent+0x8a>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 f849 	bl	8009f6c <_free_r>
 8009eda:	e7ba      	b.n	8009e52 <_reclaim_reent+0x16>
 8009edc:	680e      	ldr	r6, [r1, #0]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f844 	bl	8009f6c <_free_r>
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	e7ef      	b.n	8009ec8 <_reclaim_reent+0x8c>
 8009ee8:	2500      	movs	r5, #0
 8009eea:	e7ef      	b.n	8009ecc <_reclaim_reent+0x90>
 8009eec:	bd70      	pop	{r4, r5, r6, pc}
 8009eee:	bf00      	nop
 8009ef0:	2000001c 	.word	0x2000001c

08009ef4 <_sbrk_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d06      	ldr	r5, [pc, #24]	; (8009f10 <_sbrk_r+0x1c>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f8 f9aa 	bl	8002258 <_sbrk>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_sbrk_r+0x1a>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_sbrk_r+0x1a>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	20002660 	.word	0x20002660

08009f14 <siprintf>:
 8009f14:	b40e      	push	{r1, r2, r3}
 8009f16:	b500      	push	{lr}
 8009f18:	b09c      	sub	sp, #112	; 0x70
 8009f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f1c:	9002      	str	r0, [sp, #8]
 8009f1e:	9006      	str	r0, [sp, #24]
 8009f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f24:	4809      	ldr	r0, [pc, #36]	; (8009f4c <siprintf+0x38>)
 8009f26:	9107      	str	r1, [sp, #28]
 8009f28:	9104      	str	r1, [sp, #16]
 8009f2a:	4909      	ldr	r1, [pc, #36]	; (8009f50 <siprintf+0x3c>)
 8009f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f30:	9105      	str	r1, [sp, #20]
 8009f32:	6800      	ldr	r0, [r0, #0]
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	a902      	add	r1, sp, #8
 8009f38:	f000 f8c0 	bl	800a0bc <_svfiprintf_r>
 8009f3c:	9b02      	ldr	r3, [sp, #8]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	b01c      	add	sp, #112	; 0x70
 8009f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f48:	b003      	add	sp, #12
 8009f4a:	4770      	bx	lr
 8009f4c:	2000001c 	.word	0x2000001c
 8009f50:	ffff0208 	.word	0xffff0208

08009f54 <__malloc_lock>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__malloc_lock+0x8>)
 8009f56:	f7ff beb7 	b.w	8009cc8 <__retarget_lock_acquire_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	20002654 	.word	0x20002654

08009f60 <__malloc_unlock>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__malloc_unlock+0x8>)
 8009f62:	f7ff beb2 	b.w	8009cca <__retarget_lock_release_recursive>
 8009f66:	bf00      	nop
 8009f68:	20002654 	.word	0x20002654

08009f6c <_free_r>:
 8009f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d044      	beq.n	8009ffc <_free_r+0x90>
 8009f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f76:	9001      	str	r0, [sp, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f7e:	bfb8      	it	lt
 8009f80:	18e4      	addlt	r4, r4, r3
 8009f82:	f7ff ffe7 	bl	8009f54 <__malloc_lock>
 8009f86:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <_free_r+0x94>)
 8009f88:	9801      	ldr	r0, [sp, #4]
 8009f8a:	6813      	ldr	r3, [r2, #0]
 8009f8c:	b933      	cbnz	r3, 8009f9c <_free_r+0x30>
 8009f8e:	6063      	str	r3, [r4, #4]
 8009f90:	6014      	str	r4, [r2, #0]
 8009f92:	b003      	add	sp, #12
 8009f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f98:	f7ff bfe2 	b.w	8009f60 <__malloc_unlock>
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	d908      	bls.n	8009fb2 <_free_r+0x46>
 8009fa0:	6825      	ldr	r5, [r4, #0]
 8009fa2:	1961      	adds	r1, r4, r5
 8009fa4:	428b      	cmp	r3, r1
 8009fa6:	bf01      	itttt	eq
 8009fa8:	6819      	ldreq	r1, [r3, #0]
 8009faa:	685b      	ldreq	r3, [r3, #4]
 8009fac:	1949      	addeq	r1, r1, r5
 8009fae:	6021      	streq	r1, [r4, #0]
 8009fb0:	e7ed      	b.n	8009f8e <_free_r+0x22>
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	b10b      	cbz	r3, 8009fbc <_free_r+0x50>
 8009fb8:	42a3      	cmp	r3, r4
 8009fba:	d9fa      	bls.n	8009fb2 <_free_r+0x46>
 8009fbc:	6811      	ldr	r1, [r2, #0]
 8009fbe:	1855      	adds	r5, r2, r1
 8009fc0:	42a5      	cmp	r5, r4
 8009fc2:	d10b      	bne.n	8009fdc <_free_r+0x70>
 8009fc4:	6824      	ldr	r4, [r4, #0]
 8009fc6:	4421      	add	r1, r4
 8009fc8:	1854      	adds	r4, r2, r1
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	6011      	str	r1, [r2, #0]
 8009fce:	d1e0      	bne.n	8009f92 <_free_r+0x26>
 8009fd0:	681c      	ldr	r4, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	6053      	str	r3, [r2, #4]
 8009fd6:	4421      	add	r1, r4
 8009fd8:	6011      	str	r1, [r2, #0]
 8009fda:	e7da      	b.n	8009f92 <_free_r+0x26>
 8009fdc:	d902      	bls.n	8009fe4 <_free_r+0x78>
 8009fde:	230c      	movs	r3, #12
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	e7d6      	b.n	8009f92 <_free_r+0x26>
 8009fe4:	6825      	ldr	r5, [r4, #0]
 8009fe6:	1961      	adds	r1, r4, r5
 8009fe8:	428b      	cmp	r3, r1
 8009fea:	bf04      	itt	eq
 8009fec:	6819      	ldreq	r1, [r3, #0]
 8009fee:	685b      	ldreq	r3, [r3, #4]
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	bf04      	itt	eq
 8009ff4:	1949      	addeq	r1, r1, r5
 8009ff6:	6021      	streq	r1, [r4, #0]
 8009ff8:	6054      	str	r4, [r2, #4]
 8009ffa:	e7ca      	b.n	8009f92 <_free_r+0x26>
 8009ffc:	b003      	add	sp, #12
 8009ffe:	bd30      	pop	{r4, r5, pc}
 800a000:	20002658 	.word	0x20002658

0800a004 <__ssputs_r>:
 800a004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a008:	688e      	ldr	r6, [r1, #8]
 800a00a:	429e      	cmp	r6, r3
 800a00c:	4682      	mov	sl, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	4690      	mov	r8, r2
 800a012:	461f      	mov	r7, r3
 800a014:	d838      	bhi.n	800a088 <__ssputs_r+0x84>
 800a016:	898a      	ldrh	r2, [r1, #12]
 800a018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a01c:	d032      	beq.n	800a084 <__ssputs_r+0x80>
 800a01e:	6825      	ldr	r5, [r4, #0]
 800a020:	6909      	ldr	r1, [r1, #16]
 800a022:	eba5 0901 	sub.w	r9, r5, r1
 800a026:	6965      	ldr	r5, [r4, #20]
 800a028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a02c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a030:	3301      	adds	r3, #1
 800a032:	444b      	add	r3, r9
 800a034:	106d      	asrs	r5, r5, #1
 800a036:	429d      	cmp	r5, r3
 800a038:	bf38      	it	cc
 800a03a:	461d      	movcc	r5, r3
 800a03c:	0553      	lsls	r3, r2, #21
 800a03e:	d531      	bpl.n	800a0a4 <__ssputs_r+0xa0>
 800a040:	4629      	mov	r1, r5
 800a042:	f7ff fe79 	bl	8009d38 <_malloc_r>
 800a046:	4606      	mov	r6, r0
 800a048:	b950      	cbnz	r0, 800a060 <__ssputs_r+0x5c>
 800a04a:	230c      	movs	r3, #12
 800a04c:	f8ca 3000 	str.w	r3, [sl]
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a056:	81a3      	strh	r3, [r4, #12]
 800a058:	f04f 30ff 	mov.w	r0, #4294967295
 800a05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a060:	6921      	ldr	r1, [r4, #16]
 800a062:	464a      	mov	r2, r9
 800a064:	f7ff fe32 	bl	8009ccc <memcpy>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	6126      	str	r6, [r4, #16]
 800a076:	6165      	str	r5, [r4, #20]
 800a078:	444e      	add	r6, r9
 800a07a:	eba5 0509 	sub.w	r5, r5, r9
 800a07e:	6026      	str	r6, [r4, #0]
 800a080:	60a5      	str	r5, [r4, #8]
 800a082:	463e      	mov	r6, r7
 800a084:	42be      	cmp	r6, r7
 800a086:	d900      	bls.n	800a08a <__ssputs_r+0x86>
 800a088:	463e      	mov	r6, r7
 800a08a:	6820      	ldr	r0, [r4, #0]
 800a08c:	4632      	mov	r2, r6
 800a08e:	4641      	mov	r1, r8
 800a090:	f000 faa8 	bl	800a5e4 <memmove>
 800a094:	68a3      	ldr	r3, [r4, #8]
 800a096:	1b9b      	subs	r3, r3, r6
 800a098:	60a3      	str	r3, [r4, #8]
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	4433      	add	r3, r6
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e7db      	b.n	800a05c <__ssputs_r+0x58>
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	f000 fab7 	bl	800a618 <_realloc_r>
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d1e1      	bne.n	800a074 <__ssputs_r+0x70>
 800a0b0:	6921      	ldr	r1, [r4, #16]
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	f7ff ff5a 	bl	8009f6c <_free_r>
 800a0b8:	e7c7      	b.n	800a04a <__ssputs_r+0x46>
	...

0800a0bc <_svfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	4698      	mov	r8, r3
 800a0c2:	898b      	ldrh	r3, [r1, #12]
 800a0c4:	061b      	lsls	r3, r3, #24
 800a0c6:	b09d      	sub	sp, #116	; 0x74
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	d50e      	bpl.n	800a0ee <_svfiprintf_r+0x32>
 800a0d0:	690b      	ldr	r3, [r1, #16]
 800a0d2:	b963      	cbnz	r3, 800a0ee <_svfiprintf_r+0x32>
 800a0d4:	2140      	movs	r1, #64	; 0x40
 800a0d6:	f7ff fe2f 	bl	8009d38 <_malloc_r>
 800a0da:	6028      	str	r0, [r5, #0]
 800a0dc:	6128      	str	r0, [r5, #16]
 800a0de:	b920      	cbnz	r0, 800a0ea <_svfiprintf_r+0x2e>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	e0d1      	b.n	800a28e <_svfiprintf_r+0x1d2>
 800a0ea:	2340      	movs	r3, #64	; 0x40
 800a0ec:	616b      	str	r3, [r5, #20]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f2:	2320      	movs	r3, #32
 800a0f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0fc:	2330      	movs	r3, #48	; 0x30
 800a0fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a2a8 <_svfiprintf_r+0x1ec>
 800a102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a106:	f04f 0901 	mov.w	r9, #1
 800a10a:	4623      	mov	r3, r4
 800a10c:	469a      	mov	sl, r3
 800a10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a112:	b10a      	cbz	r2, 800a118 <_svfiprintf_r+0x5c>
 800a114:	2a25      	cmp	r2, #37	; 0x25
 800a116:	d1f9      	bne.n	800a10c <_svfiprintf_r+0x50>
 800a118:	ebba 0b04 	subs.w	fp, sl, r4
 800a11c:	d00b      	beq.n	800a136 <_svfiprintf_r+0x7a>
 800a11e:	465b      	mov	r3, fp
 800a120:	4622      	mov	r2, r4
 800a122:	4629      	mov	r1, r5
 800a124:	4638      	mov	r0, r7
 800a126:	f7ff ff6d 	bl	800a004 <__ssputs_r>
 800a12a:	3001      	adds	r0, #1
 800a12c:	f000 80aa 	beq.w	800a284 <_svfiprintf_r+0x1c8>
 800a130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a132:	445a      	add	r2, fp
 800a134:	9209      	str	r2, [sp, #36]	; 0x24
 800a136:	f89a 3000 	ldrb.w	r3, [sl]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 80a2 	beq.w	800a284 <_svfiprintf_r+0x1c8>
 800a140:	2300      	movs	r3, #0
 800a142:	f04f 32ff 	mov.w	r2, #4294967295
 800a146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a14a:	f10a 0a01 	add.w	sl, sl, #1
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	9307      	str	r3, [sp, #28]
 800a152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a156:	931a      	str	r3, [sp, #104]	; 0x68
 800a158:	4654      	mov	r4, sl
 800a15a:	2205      	movs	r2, #5
 800a15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a160:	4851      	ldr	r0, [pc, #324]	; (800a2a8 <_svfiprintf_r+0x1ec>)
 800a162:	f7f6 f85d 	bl	8000220 <memchr>
 800a166:	9a04      	ldr	r2, [sp, #16]
 800a168:	b9d8      	cbnz	r0, 800a1a2 <_svfiprintf_r+0xe6>
 800a16a:	06d0      	lsls	r0, r2, #27
 800a16c:	bf44      	itt	mi
 800a16e:	2320      	movmi	r3, #32
 800a170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a174:	0711      	lsls	r1, r2, #28
 800a176:	bf44      	itt	mi
 800a178:	232b      	movmi	r3, #43	; 0x2b
 800a17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a17e:	f89a 3000 	ldrb.w	r3, [sl]
 800a182:	2b2a      	cmp	r3, #42	; 0x2a
 800a184:	d015      	beq.n	800a1b2 <_svfiprintf_r+0xf6>
 800a186:	9a07      	ldr	r2, [sp, #28]
 800a188:	4654      	mov	r4, sl
 800a18a:	2000      	movs	r0, #0
 800a18c:	f04f 0c0a 	mov.w	ip, #10
 800a190:	4621      	mov	r1, r4
 800a192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a196:	3b30      	subs	r3, #48	; 0x30
 800a198:	2b09      	cmp	r3, #9
 800a19a:	d94e      	bls.n	800a23a <_svfiprintf_r+0x17e>
 800a19c:	b1b0      	cbz	r0, 800a1cc <_svfiprintf_r+0x110>
 800a19e:	9207      	str	r2, [sp, #28]
 800a1a0:	e014      	b.n	800a1cc <_svfiprintf_r+0x110>
 800a1a2:	eba0 0308 	sub.w	r3, r0, r8
 800a1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	46a2      	mov	sl, r4
 800a1b0:	e7d2      	b.n	800a158 <_svfiprintf_r+0x9c>
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	1d19      	adds	r1, r3, #4
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	9103      	str	r1, [sp, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bfbb      	ittet	lt
 800a1be:	425b      	neglt	r3, r3
 800a1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c4:	9307      	strge	r3, [sp, #28]
 800a1c6:	9307      	strlt	r3, [sp, #28]
 800a1c8:	bfb8      	it	lt
 800a1ca:	9204      	strlt	r2, [sp, #16]
 800a1cc:	7823      	ldrb	r3, [r4, #0]
 800a1ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a1d0:	d10c      	bne.n	800a1ec <_svfiprintf_r+0x130>
 800a1d2:	7863      	ldrb	r3, [r4, #1]
 800a1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d6:	d135      	bne.n	800a244 <_svfiprintf_r+0x188>
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	1d1a      	adds	r2, r3, #4
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	9203      	str	r2, [sp, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	bfb8      	it	lt
 800a1e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1e8:	3402      	adds	r4, #2
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a2b8 <_svfiprintf_r+0x1fc>
 800a1f0:	7821      	ldrb	r1, [r4, #0]
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	f7f6 f813 	bl	8000220 <memchr>
 800a1fa:	b140      	cbz	r0, 800a20e <_svfiprintf_r+0x152>
 800a1fc:	2340      	movs	r3, #64	; 0x40
 800a1fe:	eba0 000a 	sub.w	r0, r0, sl
 800a202:	fa03 f000 	lsl.w	r0, r3, r0
 800a206:	9b04      	ldr	r3, [sp, #16]
 800a208:	4303      	orrs	r3, r0
 800a20a:	3401      	adds	r4, #1
 800a20c:	9304      	str	r3, [sp, #16]
 800a20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a212:	4826      	ldr	r0, [pc, #152]	; (800a2ac <_svfiprintf_r+0x1f0>)
 800a214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a218:	2206      	movs	r2, #6
 800a21a:	f7f6 f801 	bl	8000220 <memchr>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d038      	beq.n	800a294 <_svfiprintf_r+0x1d8>
 800a222:	4b23      	ldr	r3, [pc, #140]	; (800a2b0 <_svfiprintf_r+0x1f4>)
 800a224:	bb1b      	cbnz	r3, 800a26e <_svfiprintf_r+0x1b2>
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	3307      	adds	r3, #7
 800a22a:	f023 0307 	bic.w	r3, r3, #7
 800a22e:	3308      	adds	r3, #8
 800a230:	9303      	str	r3, [sp, #12]
 800a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a234:	4433      	add	r3, r6
 800a236:	9309      	str	r3, [sp, #36]	; 0x24
 800a238:	e767      	b.n	800a10a <_svfiprintf_r+0x4e>
 800a23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a23e:	460c      	mov	r4, r1
 800a240:	2001      	movs	r0, #1
 800a242:	e7a5      	b.n	800a190 <_svfiprintf_r+0xd4>
 800a244:	2300      	movs	r3, #0
 800a246:	3401      	adds	r4, #1
 800a248:	9305      	str	r3, [sp, #20]
 800a24a:	4619      	mov	r1, r3
 800a24c:	f04f 0c0a 	mov.w	ip, #10
 800a250:	4620      	mov	r0, r4
 800a252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a256:	3a30      	subs	r2, #48	; 0x30
 800a258:	2a09      	cmp	r2, #9
 800a25a:	d903      	bls.n	800a264 <_svfiprintf_r+0x1a8>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0c5      	beq.n	800a1ec <_svfiprintf_r+0x130>
 800a260:	9105      	str	r1, [sp, #20]
 800a262:	e7c3      	b.n	800a1ec <_svfiprintf_r+0x130>
 800a264:	fb0c 2101 	mla	r1, ip, r1, r2
 800a268:	4604      	mov	r4, r0
 800a26a:	2301      	movs	r3, #1
 800a26c:	e7f0      	b.n	800a250 <_svfiprintf_r+0x194>
 800a26e:	ab03      	add	r3, sp, #12
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	462a      	mov	r2, r5
 800a274:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <_svfiprintf_r+0x1f8>)
 800a276:	a904      	add	r1, sp, #16
 800a278:	4638      	mov	r0, r7
 800a27a:	f3af 8000 	nop.w
 800a27e:	1c42      	adds	r2, r0, #1
 800a280:	4606      	mov	r6, r0
 800a282:	d1d6      	bne.n	800a232 <_svfiprintf_r+0x176>
 800a284:	89ab      	ldrh	r3, [r5, #12]
 800a286:	065b      	lsls	r3, r3, #25
 800a288:	f53f af2c 	bmi.w	800a0e4 <_svfiprintf_r+0x28>
 800a28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a28e:	b01d      	add	sp, #116	; 0x74
 800a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a294:	ab03      	add	r3, sp, #12
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	462a      	mov	r2, r5
 800a29a:	4b06      	ldr	r3, [pc, #24]	; (800a2b4 <_svfiprintf_r+0x1f8>)
 800a29c:	a904      	add	r1, sp, #16
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f000 f87a 	bl	800a398 <_printf_i>
 800a2a4:	e7eb      	b.n	800a27e <_svfiprintf_r+0x1c2>
 800a2a6:	bf00      	nop
 800a2a8:	0800c7f0 	.word	0x0800c7f0
 800a2ac:	0800c7fa 	.word	0x0800c7fa
 800a2b0:	00000000 	.word	0x00000000
 800a2b4:	0800a005 	.word	0x0800a005
 800a2b8:	0800c7f6 	.word	0x0800c7f6

0800a2bc <_printf_common>:
 800a2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c0:	4616      	mov	r6, r2
 800a2c2:	4699      	mov	r9, r3
 800a2c4:	688a      	ldr	r2, [r1, #8]
 800a2c6:	690b      	ldr	r3, [r1, #16]
 800a2c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	bfb8      	it	lt
 800a2d0:	4613      	movlt	r3, r2
 800a2d2:	6033      	str	r3, [r6, #0]
 800a2d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2d8:	4607      	mov	r7, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	b10a      	cbz	r2, 800a2e2 <_printf_common+0x26>
 800a2de:	3301      	adds	r3, #1
 800a2e0:	6033      	str	r3, [r6, #0]
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	0699      	lsls	r1, r3, #26
 800a2e6:	bf42      	ittt	mi
 800a2e8:	6833      	ldrmi	r3, [r6, #0]
 800a2ea:	3302      	addmi	r3, #2
 800a2ec:	6033      	strmi	r3, [r6, #0]
 800a2ee:	6825      	ldr	r5, [r4, #0]
 800a2f0:	f015 0506 	ands.w	r5, r5, #6
 800a2f4:	d106      	bne.n	800a304 <_printf_common+0x48>
 800a2f6:	f104 0a19 	add.w	sl, r4, #25
 800a2fa:	68e3      	ldr	r3, [r4, #12]
 800a2fc:	6832      	ldr	r2, [r6, #0]
 800a2fe:	1a9b      	subs	r3, r3, r2
 800a300:	42ab      	cmp	r3, r5
 800a302:	dc26      	bgt.n	800a352 <_printf_common+0x96>
 800a304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a308:	1e13      	subs	r3, r2, #0
 800a30a:	6822      	ldr	r2, [r4, #0]
 800a30c:	bf18      	it	ne
 800a30e:	2301      	movne	r3, #1
 800a310:	0692      	lsls	r2, r2, #26
 800a312:	d42b      	bmi.n	800a36c <_printf_common+0xb0>
 800a314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a318:	4649      	mov	r1, r9
 800a31a:	4638      	mov	r0, r7
 800a31c:	47c0      	blx	r8
 800a31e:	3001      	adds	r0, #1
 800a320:	d01e      	beq.n	800a360 <_printf_common+0xa4>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	68e5      	ldr	r5, [r4, #12]
 800a326:	6832      	ldr	r2, [r6, #0]
 800a328:	f003 0306 	and.w	r3, r3, #6
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	bf08      	it	eq
 800a330:	1aad      	subeq	r5, r5, r2
 800a332:	68a3      	ldr	r3, [r4, #8]
 800a334:	6922      	ldr	r2, [r4, #16]
 800a336:	bf0c      	ite	eq
 800a338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a33c:	2500      	movne	r5, #0
 800a33e:	4293      	cmp	r3, r2
 800a340:	bfc4      	itt	gt
 800a342:	1a9b      	subgt	r3, r3, r2
 800a344:	18ed      	addgt	r5, r5, r3
 800a346:	2600      	movs	r6, #0
 800a348:	341a      	adds	r4, #26
 800a34a:	42b5      	cmp	r5, r6
 800a34c:	d11a      	bne.n	800a384 <_printf_common+0xc8>
 800a34e:	2000      	movs	r0, #0
 800a350:	e008      	b.n	800a364 <_printf_common+0xa8>
 800a352:	2301      	movs	r3, #1
 800a354:	4652      	mov	r2, sl
 800a356:	4649      	mov	r1, r9
 800a358:	4638      	mov	r0, r7
 800a35a:	47c0      	blx	r8
 800a35c:	3001      	adds	r0, #1
 800a35e:	d103      	bne.n	800a368 <_printf_common+0xac>
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a368:	3501      	adds	r5, #1
 800a36a:	e7c6      	b.n	800a2fa <_printf_common+0x3e>
 800a36c:	18e1      	adds	r1, r4, r3
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	2030      	movs	r0, #48	; 0x30
 800a372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a376:	4422      	add	r2, r4
 800a378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a37c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a380:	3302      	adds	r3, #2
 800a382:	e7c7      	b.n	800a314 <_printf_common+0x58>
 800a384:	2301      	movs	r3, #1
 800a386:	4622      	mov	r2, r4
 800a388:	4649      	mov	r1, r9
 800a38a:	4638      	mov	r0, r7
 800a38c:	47c0      	blx	r8
 800a38e:	3001      	adds	r0, #1
 800a390:	d0e6      	beq.n	800a360 <_printf_common+0xa4>
 800a392:	3601      	adds	r6, #1
 800a394:	e7d9      	b.n	800a34a <_printf_common+0x8e>
	...

0800a398 <_printf_i>:
 800a398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a39c:	7e0f      	ldrb	r7, [r1, #24]
 800a39e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3a0:	2f78      	cmp	r7, #120	; 0x78
 800a3a2:	4691      	mov	r9, r2
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	469a      	mov	sl, r3
 800a3aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3ae:	d807      	bhi.n	800a3c0 <_printf_i+0x28>
 800a3b0:	2f62      	cmp	r7, #98	; 0x62
 800a3b2:	d80a      	bhi.n	800a3ca <_printf_i+0x32>
 800a3b4:	2f00      	cmp	r7, #0
 800a3b6:	f000 80d8 	beq.w	800a56a <_printf_i+0x1d2>
 800a3ba:	2f58      	cmp	r7, #88	; 0x58
 800a3bc:	f000 80a3 	beq.w	800a506 <_printf_i+0x16e>
 800a3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3c8:	e03a      	b.n	800a440 <_printf_i+0xa8>
 800a3ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3ce:	2b15      	cmp	r3, #21
 800a3d0:	d8f6      	bhi.n	800a3c0 <_printf_i+0x28>
 800a3d2:	a101      	add	r1, pc, #4	; (adr r1, 800a3d8 <_printf_i+0x40>)
 800a3d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3d8:	0800a431 	.word	0x0800a431
 800a3dc:	0800a445 	.word	0x0800a445
 800a3e0:	0800a3c1 	.word	0x0800a3c1
 800a3e4:	0800a3c1 	.word	0x0800a3c1
 800a3e8:	0800a3c1 	.word	0x0800a3c1
 800a3ec:	0800a3c1 	.word	0x0800a3c1
 800a3f0:	0800a445 	.word	0x0800a445
 800a3f4:	0800a3c1 	.word	0x0800a3c1
 800a3f8:	0800a3c1 	.word	0x0800a3c1
 800a3fc:	0800a3c1 	.word	0x0800a3c1
 800a400:	0800a3c1 	.word	0x0800a3c1
 800a404:	0800a551 	.word	0x0800a551
 800a408:	0800a475 	.word	0x0800a475
 800a40c:	0800a533 	.word	0x0800a533
 800a410:	0800a3c1 	.word	0x0800a3c1
 800a414:	0800a3c1 	.word	0x0800a3c1
 800a418:	0800a573 	.word	0x0800a573
 800a41c:	0800a3c1 	.word	0x0800a3c1
 800a420:	0800a475 	.word	0x0800a475
 800a424:	0800a3c1 	.word	0x0800a3c1
 800a428:	0800a3c1 	.word	0x0800a3c1
 800a42c:	0800a53b 	.word	0x0800a53b
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	1d1a      	adds	r2, r3, #4
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	602a      	str	r2, [r5, #0]
 800a438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a43c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a440:	2301      	movs	r3, #1
 800a442:	e0a3      	b.n	800a58c <_printf_i+0x1f4>
 800a444:	6820      	ldr	r0, [r4, #0]
 800a446:	6829      	ldr	r1, [r5, #0]
 800a448:	0606      	lsls	r6, r0, #24
 800a44a:	f101 0304 	add.w	r3, r1, #4
 800a44e:	d50a      	bpl.n	800a466 <_printf_i+0xce>
 800a450:	680e      	ldr	r6, [r1, #0]
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	2e00      	cmp	r6, #0
 800a456:	da03      	bge.n	800a460 <_printf_i+0xc8>
 800a458:	232d      	movs	r3, #45	; 0x2d
 800a45a:	4276      	negs	r6, r6
 800a45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a460:	485e      	ldr	r0, [pc, #376]	; (800a5dc <_printf_i+0x244>)
 800a462:	230a      	movs	r3, #10
 800a464:	e019      	b.n	800a49a <_printf_i+0x102>
 800a466:	680e      	ldr	r6, [r1, #0]
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a46e:	bf18      	it	ne
 800a470:	b236      	sxthne	r6, r6
 800a472:	e7ef      	b.n	800a454 <_printf_i+0xbc>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	1d19      	adds	r1, r3, #4
 800a47a:	6029      	str	r1, [r5, #0]
 800a47c:	0601      	lsls	r1, r0, #24
 800a47e:	d501      	bpl.n	800a484 <_printf_i+0xec>
 800a480:	681e      	ldr	r6, [r3, #0]
 800a482:	e002      	b.n	800a48a <_printf_i+0xf2>
 800a484:	0646      	lsls	r6, r0, #25
 800a486:	d5fb      	bpl.n	800a480 <_printf_i+0xe8>
 800a488:	881e      	ldrh	r6, [r3, #0]
 800a48a:	4854      	ldr	r0, [pc, #336]	; (800a5dc <_printf_i+0x244>)
 800a48c:	2f6f      	cmp	r7, #111	; 0x6f
 800a48e:	bf0c      	ite	eq
 800a490:	2308      	moveq	r3, #8
 800a492:	230a      	movne	r3, #10
 800a494:	2100      	movs	r1, #0
 800a496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a49a:	6865      	ldr	r5, [r4, #4]
 800a49c:	60a5      	str	r5, [r4, #8]
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	bfa2      	ittt	ge
 800a4a2:	6821      	ldrge	r1, [r4, #0]
 800a4a4:	f021 0104 	bicge.w	r1, r1, #4
 800a4a8:	6021      	strge	r1, [r4, #0]
 800a4aa:	b90e      	cbnz	r6, 800a4b0 <_printf_i+0x118>
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	d04d      	beq.n	800a54c <_printf_i+0x1b4>
 800a4b0:	4615      	mov	r5, r2
 800a4b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4b6:	fb03 6711 	mls	r7, r3, r1, r6
 800a4ba:	5dc7      	ldrb	r7, [r0, r7]
 800a4bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4c0:	4637      	mov	r7, r6
 800a4c2:	42bb      	cmp	r3, r7
 800a4c4:	460e      	mov	r6, r1
 800a4c6:	d9f4      	bls.n	800a4b2 <_printf_i+0x11a>
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d10b      	bne.n	800a4e4 <_printf_i+0x14c>
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	07de      	lsls	r6, r3, #31
 800a4d0:	d508      	bpl.n	800a4e4 <_printf_i+0x14c>
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	6861      	ldr	r1, [r4, #4]
 800a4d6:	4299      	cmp	r1, r3
 800a4d8:	bfde      	ittt	le
 800a4da:	2330      	movle	r3, #48	; 0x30
 800a4dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4e4:	1b52      	subs	r2, r2, r5
 800a4e6:	6122      	str	r2, [r4, #16]
 800a4e8:	f8cd a000 	str.w	sl, [sp]
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	aa03      	add	r2, sp, #12
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	f7ff fee2 	bl	800a2bc <_printf_common>
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d14c      	bne.n	800a596 <_printf_i+0x1fe>
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a500:	b004      	add	sp, #16
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	4835      	ldr	r0, [pc, #212]	; (800a5dc <_printf_i+0x244>)
 800a508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a50c:	6829      	ldr	r1, [r5, #0]
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	f851 6b04 	ldr.w	r6, [r1], #4
 800a514:	6029      	str	r1, [r5, #0]
 800a516:	061d      	lsls	r5, r3, #24
 800a518:	d514      	bpl.n	800a544 <_printf_i+0x1ac>
 800a51a:	07df      	lsls	r7, r3, #31
 800a51c:	bf44      	itt	mi
 800a51e:	f043 0320 	orrmi.w	r3, r3, #32
 800a522:	6023      	strmi	r3, [r4, #0]
 800a524:	b91e      	cbnz	r6, 800a52e <_printf_i+0x196>
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	f023 0320 	bic.w	r3, r3, #32
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	2310      	movs	r3, #16
 800a530:	e7b0      	b.n	800a494 <_printf_i+0xfc>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	f043 0320 	orr.w	r3, r3, #32
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	2378      	movs	r3, #120	; 0x78
 800a53c:	4828      	ldr	r0, [pc, #160]	; (800a5e0 <_printf_i+0x248>)
 800a53e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a542:	e7e3      	b.n	800a50c <_printf_i+0x174>
 800a544:	0659      	lsls	r1, r3, #25
 800a546:	bf48      	it	mi
 800a548:	b2b6      	uxthmi	r6, r6
 800a54a:	e7e6      	b.n	800a51a <_printf_i+0x182>
 800a54c:	4615      	mov	r5, r2
 800a54e:	e7bb      	b.n	800a4c8 <_printf_i+0x130>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	6826      	ldr	r6, [r4, #0]
 800a554:	6961      	ldr	r1, [r4, #20]
 800a556:	1d18      	adds	r0, r3, #4
 800a558:	6028      	str	r0, [r5, #0]
 800a55a:	0635      	lsls	r5, r6, #24
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	d501      	bpl.n	800a564 <_printf_i+0x1cc>
 800a560:	6019      	str	r1, [r3, #0]
 800a562:	e002      	b.n	800a56a <_printf_i+0x1d2>
 800a564:	0670      	lsls	r0, r6, #25
 800a566:	d5fb      	bpl.n	800a560 <_printf_i+0x1c8>
 800a568:	8019      	strh	r1, [r3, #0]
 800a56a:	2300      	movs	r3, #0
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	4615      	mov	r5, r2
 800a570:	e7ba      	b.n	800a4e8 <_printf_i+0x150>
 800a572:	682b      	ldr	r3, [r5, #0]
 800a574:	1d1a      	adds	r2, r3, #4
 800a576:	602a      	str	r2, [r5, #0]
 800a578:	681d      	ldr	r5, [r3, #0]
 800a57a:	6862      	ldr	r2, [r4, #4]
 800a57c:	2100      	movs	r1, #0
 800a57e:	4628      	mov	r0, r5
 800a580:	f7f5 fe4e 	bl	8000220 <memchr>
 800a584:	b108      	cbz	r0, 800a58a <_printf_i+0x1f2>
 800a586:	1b40      	subs	r0, r0, r5
 800a588:	6060      	str	r0, [r4, #4]
 800a58a:	6863      	ldr	r3, [r4, #4]
 800a58c:	6123      	str	r3, [r4, #16]
 800a58e:	2300      	movs	r3, #0
 800a590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a594:	e7a8      	b.n	800a4e8 <_printf_i+0x150>
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	462a      	mov	r2, r5
 800a59a:	4649      	mov	r1, r9
 800a59c:	4640      	mov	r0, r8
 800a59e:	47d0      	blx	sl
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d0ab      	beq.n	800a4fc <_printf_i+0x164>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	079b      	lsls	r3, r3, #30
 800a5a8:	d413      	bmi.n	800a5d2 <_printf_i+0x23a>
 800a5aa:	68e0      	ldr	r0, [r4, #12]
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	4298      	cmp	r0, r3
 800a5b0:	bfb8      	it	lt
 800a5b2:	4618      	movlt	r0, r3
 800a5b4:	e7a4      	b.n	800a500 <_printf_i+0x168>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4632      	mov	r2, r6
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4640      	mov	r0, r8
 800a5be:	47d0      	blx	sl
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d09b      	beq.n	800a4fc <_printf_i+0x164>
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	9903      	ldr	r1, [sp, #12]
 800a5ca:	1a5b      	subs	r3, r3, r1
 800a5cc:	42ab      	cmp	r3, r5
 800a5ce:	dcf2      	bgt.n	800a5b6 <_printf_i+0x21e>
 800a5d0:	e7eb      	b.n	800a5aa <_printf_i+0x212>
 800a5d2:	2500      	movs	r5, #0
 800a5d4:	f104 0619 	add.w	r6, r4, #25
 800a5d8:	e7f5      	b.n	800a5c6 <_printf_i+0x22e>
 800a5da:	bf00      	nop
 800a5dc:	0800c801 	.word	0x0800c801
 800a5e0:	0800c812 	.word	0x0800c812

0800a5e4 <memmove>:
 800a5e4:	4288      	cmp	r0, r1
 800a5e6:	b510      	push	{r4, lr}
 800a5e8:	eb01 0402 	add.w	r4, r1, r2
 800a5ec:	d902      	bls.n	800a5f4 <memmove+0x10>
 800a5ee:	4284      	cmp	r4, r0
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	d807      	bhi.n	800a604 <memmove+0x20>
 800a5f4:	1e43      	subs	r3, r0, #1
 800a5f6:	42a1      	cmp	r1, r4
 800a5f8:	d008      	beq.n	800a60c <memmove+0x28>
 800a5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a602:	e7f8      	b.n	800a5f6 <memmove+0x12>
 800a604:	4402      	add	r2, r0
 800a606:	4601      	mov	r1, r0
 800a608:	428a      	cmp	r2, r1
 800a60a:	d100      	bne.n	800a60e <memmove+0x2a>
 800a60c:	bd10      	pop	{r4, pc}
 800a60e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a616:	e7f7      	b.n	800a608 <memmove+0x24>

0800a618 <_realloc_r>:
 800a618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a61c:	4680      	mov	r8, r0
 800a61e:	4614      	mov	r4, r2
 800a620:	460e      	mov	r6, r1
 800a622:	b921      	cbnz	r1, 800a62e <_realloc_r+0x16>
 800a624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a628:	4611      	mov	r1, r2
 800a62a:	f7ff bb85 	b.w	8009d38 <_malloc_r>
 800a62e:	b92a      	cbnz	r2, 800a63c <_realloc_r+0x24>
 800a630:	f7ff fc9c 	bl	8009f6c <_free_r>
 800a634:	4625      	mov	r5, r4
 800a636:	4628      	mov	r0, r5
 800a638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63c:	f000 f81b 	bl	800a676 <_malloc_usable_size_r>
 800a640:	4284      	cmp	r4, r0
 800a642:	4607      	mov	r7, r0
 800a644:	d802      	bhi.n	800a64c <_realloc_r+0x34>
 800a646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a64a:	d812      	bhi.n	800a672 <_realloc_r+0x5a>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4640      	mov	r0, r8
 800a650:	f7ff fb72 	bl	8009d38 <_malloc_r>
 800a654:	4605      	mov	r5, r0
 800a656:	2800      	cmp	r0, #0
 800a658:	d0ed      	beq.n	800a636 <_realloc_r+0x1e>
 800a65a:	42bc      	cmp	r4, r7
 800a65c:	4622      	mov	r2, r4
 800a65e:	4631      	mov	r1, r6
 800a660:	bf28      	it	cs
 800a662:	463a      	movcs	r2, r7
 800a664:	f7ff fb32 	bl	8009ccc <memcpy>
 800a668:	4631      	mov	r1, r6
 800a66a:	4640      	mov	r0, r8
 800a66c:	f7ff fc7e 	bl	8009f6c <_free_r>
 800a670:	e7e1      	b.n	800a636 <_realloc_r+0x1e>
 800a672:	4635      	mov	r5, r6
 800a674:	e7df      	b.n	800a636 <_realloc_r+0x1e>

0800a676 <_malloc_usable_size_r>:
 800a676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67a:	1f18      	subs	r0, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	bfbc      	itt	lt
 800a680:	580b      	ldrlt	r3, [r1, r0]
 800a682:	18c0      	addlt	r0, r0, r3
 800a684:	4770      	bx	lr
	...

0800a688 <cos>:
 800a688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a68a:	ec53 2b10 	vmov	r2, r3, d0
 800a68e:	4826      	ldr	r0, [pc, #152]	; (800a728 <cos+0xa0>)
 800a690:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a694:	4281      	cmp	r1, r0
 800a696:	dc06      	bgt.n	800a6a6 <cos+0x1e>
 800a698:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a720 <cos+0x98>
 800a69c:	b005      	add	sp, #20
 800a69e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a2:	f001 b929 	b.w	800b8f8 <__kernel_cos>
 800a6a6:	4821      	ldr	r0, [pc, #132]	; (800a72c <cos+0xa4>)
 800a6a8:	4281      	cmp	r1, r0
 800a6aa:	dd09      	ble.n	800a6c0 <cos+0x38>
 800a6ac:	ee10 0a10 	vmov	r0, s0
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f7f5 fe09 	bl	80002c8 <__aeabi_dsub>
 800a6b6:	ec41 0b10 	vmov	d0, r0, r1
 800a6ba:	b005      	add	sp, #20
 800a6bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6c0:	4668      	mov	r0, sp
 800a6c2:	f000 fe59 	bl	800b378 <__ieee754_rem_pio2>
 800a6c6:	f000 0003 	and.w	r0, r0, #3
 800a6ca:	2801      	cmp	r0, #1
 800a6cc:	d00b      	beq.n	800a6e6 <cos+0x5e>
 800a6ce:	2802      	cmp	r0, #2
 800a6d0:	d016      	beq.n	800a700 <cos+0x78>
 800a6d2:	b9e0      	cbnz	r0, 800a70e <cos+0x86>
 800a6d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6d8:	ed9d 0b00 	vldr	d0, [sp]
 800a6dc:	f001 f90c 	bl	800b8f8 <__kernel_cos>
 800a6e0:	ec51 0b10 	vmov	r0, r1, d0
 800a6e4:	e7e7      	b.n	800a6b6 <cos+0x2e>
 800a6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ea:	ed9d 0b00 	vldr	d0, [sp]
 800a6ee:	f001 fd1b 	bl	800c128 <__kernel_sin>
 800a6f2:	ec53 2b10 	vmov	r2, r3, d0
 800a6f6:	ee10 0a10 	vmov	r0, s0
 800a6fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6fe:	e7da      	b.n	800a6b6 <cos+0x2e>
 800a700:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a704:	ed9d 0b00 	vldr	d0, [sp]
 800a708:	f001 f8f6 	bl	800b8f8 <__kernel_cos>
 800a70c:	e7f1      	b.n	800a6f2 <cos+0x6a>
 800a70e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a712:	ed9d 0b00 	vldr	d0, [sp]
 800a716:	2001      	movs	r0, #1
 800a718:	f001 fd06 	bl	800c128 <__kernel_sin>
 800a71c:	e7e0      	b.n	800a6e0 <cos+0x58>
 800a71e:	bf00      	nop
	...
 800a728:	3fe921fb 	.word	0x3fe921fb
 800a72c:	7fefffff 	.word	0x7fefffff

0800a730 <sin>:
 800a730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a732:	ec53 2b10 	vmov	r2, r3, d0
 800a736:	4828      	ldr	r0, [pc, #160]	; (800a7d8 <sin+0xa8>)
 800a738:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a73c:	4281      	cmp	r1, r0
 800a73e:	dc07      	bgt.n	800a750 <sin+0x20>
 800a740:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a7d0 <sin+0xa0>
 800a744:	2000      	movs	r0, #0
 800a746:	b005      	add	sp, #20
 800a748:	f85d eb04 	ldr.w	lr, [sp], #4
 800a74c:	f001 bcec 	b.w	800c128 <__kernel_sin>
 800a750:	4822      	ldr	r0, [pc, #136]	; (800a7dc <sin+0xac>)
 800a752:	4281      	cmp	r1, r0
 800a754:	dd09      	ble.n	800a76a <sin+0x3a>
 800a756:	ee10 0a10 	vmov	r0, s0
 800a75a:	4619      	mov	r1, r3
 800a75c:	f7f5 fdb4 	bl	80002c8 <__aeabi_dsub>
 800a760:	ec41 0b10 	vmov	d0, r0, r1
 800a764:	b005      	add	sp, #20
 800a766:	f85d fb04 	ldr.w	pc, [sp], #4
 800a76a:	4668      	mov	r0, sp
 800a76c:	f000 fe04 	bl	800b378 <__ieee754_rem_pio2>
 800a770:	f000 0003 	and.w	r0, r0, #3
 800a774:	2801      	cmp	r0, #1
 800a776:	d00c      	beq.n	800a792 <sin+0x62>
 800a778:	2802      	cmp	r0, #2
 800a77a:	d011      	beq.n	800a7a0 <sin+0x70>
 800a77c:	b9f0      	cbnz	r0, 800a7bc <sin+0x8c>
 800a77e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a782:	ed9d 0b00 	vldr	d0, [sp]
 800a786:	2001      	movs	r0, #1
 800a788:	f001 fcce 	bl	800c128 <__kernel_sin>
 800a78c:	ec51 0b10 	vmov	r0, r1, d0
 800a790:	e7e6      	b.n	800a760 <sin+0x30>
 800a792:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a796:	ed9d 0b00 	vldr	d0, [sp]
 800a79a:	f001 f8ad 	bl	800b8f8 <__kernel_cos>
 800a79e:	e7f5      	b.n	800a78c <sin+0x5c>
 800a7a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7a4:	ed9d 0b00 	vldr	d0, [sp]
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	f001 fcbd 	bl	800c128 <__kernel_sin>
 800a7ae:	ec53 2b10 	vmov	r2, r3, d0
 800a7b2:	ee10 0a10 	vmov	r0, s0
 800a7b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7ba:	e7d1      	b.n	800a760 <sin+0x30>
 800a7bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7c0:	ed9d 0b00 	vldr	d0, [sp]
 800a7c4:	f001 f898 	bl	800b8f8 <__kernel_cos>
 800a7c8:	e7f1      	b.n	800a7ae <sin+0x7e>
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w
	...
 800a7d8:	3fe921fb 	.word	0x3fe921fb
 800a7dc:	7fefffff 	.word	0x7fefffff

0800a7e0 <pow>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	ed2d 8b02 	vpush	{d8}
 800a7e6:	eeb0 8a40 	vmov.f32	s16, s0
 800a7ea:	eef0 8a60 	vmov.f32	s17, s1
 800a7ee:	ec55 4b11 	vmov	r4, r5, d1
 800a7f2:	f000 f891 	bl	800a918 <__ieee754_pow>
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	462b      	mov	r3, r5
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	ec57 6b10 	vmov	r6, r7, d0
 800a802:	f7f6 f9b3 	bl	8000b6c <__aeabi_dcmpun>
 800a806:	2800      	cmp	r0, #0
 800a808:	d13b      	bne.n	800a882 <pow+0xa2>
 800a80a:	ec51 0b18 	vmov	r0, r1, d8
 800a80e:	2200      	movs	r2, #0
 800a810:	2300      	movs	r3, #0
 800a812:	f7f6 f979 	bl	8000b08 <__aeabi_dcmpeq>
 800a816:	b1b8      	cbz	r0, 800a848 <pow+0x68>
 800a818:	2200      	movs	r2, #0
 800a81a:	2300      	movs	r3, #0
 800a81c:	4620      	mov	r0, r4
 800a81e:	4629      	mov	r1, r5
 800a820:	f7f6 f972 	bl	8000b08 <__aeabi_dcmpeq>
 800a824:	2800      	cmp	r0, #0
 800a826:	d146      	bne.n	800a8b6 <pow+0xd6>
 800a828:	ec45 4b10 	vmov	d0, r4, r5
 800a82c:	f001 fd73 	bl	800c316 <finite>
 800a830:	b338      	cbz	r0, 800a882 <pow+0xa2>
 800a832:	2200      	movs	r2, #0
 800a834:	2300      	movs	r3, #0
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f6 f96f 	bl	8000b1c <__aeabi_dcmplt>
 800a83e:	b300      	cbz	r0, 800a882 <pow+0xa2>
 800a840:	f7ff fa18 	bl	8009c74 <__errno>
 800a844:	2322      	movs	r3, #34	; 0x22
 800a846:	e01b      	b.n	800a880 <pow+0xa0>
 800a848:	ec47 6b10 	vmov	d0, r6, r7
 800a84c:	f001 fd63 	bl	800c316 <finite>
 800a850:	b9e0      	cbnz	r0, 800a88c <pow+0xac>
 800a852:	eeb0 0a48 	vmov.f32	s0, s16
 800a856:	eef0 0a68 	vmov.f32	s1, s17
 800a85a:	f001 fd5c 	bl	800c316 <finite>
 800a85e:	b1a8      	cbz	r0, 800a88c <pow+0xac>
 800a860:	ec45 4b10 	vmov	d0, r4, r5
 800a864:	f001 fd57 	bl	800c316 <finite>
 800a868:	b180      	cbz	r0, 800a88c <pow+0xac>
 800a86a:	4632      	mov	r2, r6
 800a86c:	463b      	mov	r3, r7
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f6 f97b 	bl	8000b6c <__aeabi_dcmpun>
 800a876:	2800      	cmp	r0, #0
 800a878:	d0e2      	beq.n	800a840 <pow+0x60>
 800a87a:	f7ff f9fb 	bl	8009c74 <__errno>
 800a87e:	2321      	movs	r3, #33	; 0x21
 800a880:	6003      	str	r3, [r0, #0]
 800a882:	ecbd 8b02 	vpop	{d8}
 800a886:	ec47 6b10 	vmov	d0, r6, r7
 800a88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a88c:	2200      	movs	r2, #0
 800a88e:	2300      	movs	r3, #0
 800a890:	4630      	mov	r0, r6
 800a892:	4639      	mov	r1, r7
 800a894:	f7f6 f938 	bl	8000b08 <__aeabi_dcmpeq>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d0f2      	beq.n	800a882 <pow+0xa2>
 800a89c:	eeb0 0a48 	vmov.f32	s0, s16
 800a8a0:	eef0 0a68 	vmov.f32	s1, s17
 800a8a4:	f001 fd37 	bl	800c316 <finite>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d0ea      	beq.n	800a882 <pow+0xa2>
 800a8ac:	ec45 4b10 	vmov	d0, r4, r5
 800a8b0:	f001 fd31 	bl	800c316 <finite>
 800a8b4:	e7c3      	b.n	800a83e <pow+0x5e>
 800a8b6:	4f01      	ldr	r7, [pc, #4]	; (800a8bc <pow+0xdc>)
 800a8b8:	2600      	movs	r6, #0
 800a8ba:	e7e2      	b.n	800a882 <pow+0xa2>
 800a8bc:	3ff00000 	.word	0x3ff00000

0800a8c0 <sqrt>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	ed2d 8b02 	vpush	{d8}
 800a8c6:	ec55 4b10 	vmov	r4, r5, d0
 800a8ca:	f000 ff61 	bl	800b790 <__ieee754_sqrt>
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	eeb0 8a40 	vmov.f32	s16, s0
 800a8da:	eef0 8a60 	vmov.f32	s17, s1
 800a8de:	f7f6 f945 	bl	8000b6c <__aeabi_dcmpun>
 800a8e2:	b990      	cbnz	r0, 800a90a <sqrt+0x4a>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	f7f6 f916 	bl	8000b1c <__aeabi_dcmplt>
 800a8f0:	b158      	cbz	r0, 800a90a <sqrt+0x4a>
 800a8f2:	f7ff f9bf 	bl	8009c74 <__errno>
 800a8f6:	2321      	movs	r3, #33	; 0x21
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4610      	mov	r0, r2
 800a900:	4619      	mov	r1, r3
 800a902:	f7f5 ffc3 	bl	800088c <__aeabi_ddiv>
 800a906:	ec41 0b18 	vmov	d8, r0, r1
 800a90a:	eeb0 0a48 	vmov.f32	s0, s16
 800a90e:	eef0 0a68 	vmov.f32	s1, s17
 800a912:	ecbd 8b02 	vpop	{d8}
 800a916:	bd38      	pop	{r3, r4, r5, pc}

0800a918 <__ieee754_pow>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	ed2d 8b06 	vpush	{d8-d10}
 800a920:	b089      	sub	sp, #36	; 0x24
 800a922:	ed8d 1b00 	vstr	d1, [sp]
 800a926:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a92a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a92e:	ea58 0102 	orrs.w	r1, r8, r2
 800a932:	ec57 6b10 	vmov	r6, r7, d0
 800a936:	d115      	bne.n	800a964 <__ieee754_pow+0x4c>
 800a938:	19b3      	adds	r3, r6, r6
 800a93a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a93e:	4152      	adcs	r2, r2
 800a940:	4299      	cmp	r1, r3
 800a942:	4b89      	ldr	r3, [pc, #548]	; (800ab68 <__ieee754_pow+0x250>)
 800a944:	4193      	sbcs	r3, r2
 800a946:	f080 84d2 	bcs.w	800b2ee <__ieee754_pow+0x9d6>
 800a94a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a94e:	4630      	mov	r0, r6
 800a950:	4639      	mov	r1, r7
 800a952:	f7f5 fcbb 	bl	80002cc <__adddf3>
 800a956:	ec41 0b10 	vmov	d0, r0, r1
 800a95a:	b009      	add	sp, #36	; 0x24
 800a95c:	ecbd 8b06 	vpop	{d8-d10}
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	4b81      	ldr	r3, [pc, #516]	; (800ab6c <__ieee754_pow+0x254>)
 800a966:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a96a:	429c      	cmp	r4, r3
 800a96c:	ee10 aa10 	vmov	sl, s0
 800a970:	463d      	mov	r5, r7
 800a972:	dc06      	bgt.n	800a982 <__ieee754_pow+0x6a>
 800a974:	d101      	bne.n	800a97a <__ieee754_pow+0x62>
 800a976:	2e00      	cmp	r6, #0
 800a978:	d1e7      	bne.n	800a94a <__ieee754_pow+0x32>
 800a97a:	4598      	cmp	r8, r3
 800a97c:	dc01      	bgt.n	800a982 <__ieee754_pow+0x6a>
 800a97e:	d10f      	bne.n	800a9a0 <__ieee754_pow+0x88>
 800a980:	b172      	cbz	r2, 800a9a0 <__ieee754_pow+0x88>
 800a982:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a986:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a98a:	ea55 050a 	orrs.w	r5, r5, sl
 800a98e:	d1dc      	bne.n	800a94a <__ieee754_pow+0x32>
 800a990:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a994:	18db      	adds	r3, r3, r3
 800a996:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a99a:	4152      	adcs	r2, r2
 800a99c:	429d      	cmp	r5, r3
 800a99e:	e7d0      	b.n	800a942 <__ieee754_pow+0x2a>
 800a9a0:	2d00      	cmp	r5, #0
 800a9a2:	da3b      	bge.n	800aa1c <__ieee754_pow+0x104>
 800a9a4:	4b72      	ldr	r3, [pc, #456]	; (800ab70 <__ieee754_pow+0x258>)
 800a9a6:	4598      	cmp	r8, r3
 800a9a8:	dc51      	bgt.n	800aa4e <__ieee754_pow+0x136>
 800a9aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a9ae:	4598      	cmp	r8, r3
 800a9b0:	f340 84ac 	ble.w	800b30c <__ieee754_pow+0x9f4>
 800a9b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a9b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a9bc:	2b14      	cmp	r3, #20
 800a9be:	dd0f      	ble.n	800a9e0 <__ieee754_pow+0xc8>
 800a9c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a9c4:	fa22 f103 	lsr.w	r1, r2, r3
 800a9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	f040 849d 	bne.w	800b30c <__ieee754_pow+0x9f4>
 800a9d2:	f001 0101 	and.w	r1, r1, #1
 800a9d6:	f1c1 0302 	rsb	r3, r1, #2
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	b182      	cbz	r2, 800aa00 <__ieee754_pow+0xe8>
 800a9de:	e05f      	b.n	800aaa0 <__ieee754_pow+0x188>
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d15b      	bne.n	800aa9c <__ieee754_pow+0x184>
 800a9e4:	f1c3 0314 	rsb	r3, r3, #20
 800a9e8:	fa48 f103 	asr.w	r1, r8, r3
 800a9ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f0:	4543      	cmp	r3, r8
 800a9f2:	f040 8488 	bne.w	800b306 <__ieee754_pow+0x9ee>
 800a9f6:	f001 0101 	and.w	r1, r1, #1
 800a9fa:	f1c1 0302 	rsb	r3, r1, #2
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	4b5c      	ldr	r3, [pc, #368]	; (800ab74 <__ieee754_pow+0x25c>)
 800aa02:	4598      	cmp	r8, r3
 800aa04:	d132      	bne.n	800aa6c <__ieee754_pow+0x154>
 800aa06:	f1b9 0f00 	cmp.w	r9, #0
 800aa0a:	f280 8478 	bge.w	800b2fe <__ieee754_pow+0x9e6>
 800aa0e:	4959      	ldr	r1, [pc, #356]	; (800ab74 <__ieee754_pow+0x25c>)
 800aa10:	4632      	mov	r2, r6
 800aa12:	463b      	mov	r3, r7
 800aa14:	2000      	movs	r0, #0
 800aa16:	f7f5 ff39 	bl	800088c <__aeabi_ddiv>
 800aa1a:	e79c      	b.n	800a956 <__ieee754_pow+0x3e>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	2a00      	cmp	r2, #0
 800aa22:	d13d      	bne.n	800aaa0 <__ieee754_pow+0x188>
 800aa24:	4b51      	ldr	r3, [pc, #324]	; (800ab6c <__ieee754_pow+0x254>)
 800aa26:	4598      	cmp	r8, r3
 800aa28:	d1ea      	bne.n	800aa00 <__ieee754_pow+0xe8>
 800aa2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aa2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aa32:	ea53 030a 	orrs.w	r3, r3, sl
 800aa36:	f000 845a 	beq.w	800b2ee <__ieee754_pow+0x9d6>
 800aa3a:	4b4f      	ldr	r3, [pc, #316]	; (800ab78 <__ieee754_pow+0x260>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	dd08      	ble.n	800aa52 <__ieee754_pow+0x13a>
 800aa40:	f1b9 0f00 	cmp.w	r9, #0
 800aa44:	f2c0 8457 	blt.w	800b2f6 <__ieee754_pow+0x9de>
 800aa48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa4c:	e783      	b.n	800a956 <__ieee754_pow+0x3e>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e7e5      	b.n	800aa1e <__ieee754_pow+0x106>
 800aa52:	f1b9 0f00 	cmp.w	r9, #0
 800aa56:	f04f 0000 	mov.w	r0, #0
 800aa5a:	f04f 0100 	mov.w	r1, #0
 800aa5e:	f6bf af7a 	bge.w	800a956 <__ieee754_pow+0x3e>
 800aa62:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aa66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa6a:	e774      	b.n	800a956 <__ieee754_pow+0x3e>
 800aa6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800aa70:	d106      	bne.n	800aa80 <__ieee754_pow+0x168>
 800aa72:	4632      	mov	r2, r6
 800aa74:	463b      	mov	r3, r7
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f5 fddd 	bl	8000638 <__aeabi_dmul>
 800aa7e:	e76a      	b.n	800a956 <__ieee754_pow+0x3e>
 800aa80:	4b3e      	ldr	r3, [pc, #248]	; (800ab7c <__ieee754_pow+0x264>)
 800aa82:	4599      	cmp	r9, r3
 800aa84:	d10c      	bne.n	800aaa0 <__ieee754_pow+0x188>
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	db0a      	blt.n	800aaa0 <__ieee754_pow+0x188>
 800aa8a:	ec47 6b10 	vmov	d0, r6, r7
 800aa8e:	b009      	add	sp, #36	; 0x24
 800aa90:	ecbd 8b06 	vpop	{d8-d10}
 800aa94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	f000 be7a 	b.w	800b790 <__ieee754_sqrt>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	ec47 6b10 	vmov	d0, r6, r7
 800aaa4:	f001 fc2e 	bl	800c304 <fabs>
 800aaa8:	ec51 0b10 	vmov	r0, r1, d0
 800aaac:	f1ba 0f00 	cmp.w	sl, #0
 800aab0:	d129      	bne.n	800ab06 <__ieee754_pow+0x1ee>
 800aab2:	b124      	cbz	r4, 800aabe <__ieee754_pow+0x1a6>
 800aab4:	4b2f      	ldr	r3, [pc, #188]	; (800ab74 <__ieee754_pow+0x25c>)
 800aab6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d123      	bne.n	800ab06 <__ieee754_pow+0x1ee>
 800aabe:	f1b9 0f00 	cmp.w	r9, #0
 800aac2:	da05      	bge.n	800aad0 <__ieee754_pow+0x1b8>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	2000      	movs	r0, #0
 800aaca:	492a      	ldr	r1, [pc, #168]	; (800ab74 <__ieee754_pow+0x25c>)
 800aacc:	f7f5 fede 	bl	800088c <__aeabi_ddiv>
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	f6bf af40 	bge.w	800a956 <__ieee754_pow+0x3e>
 800aad6:	9b04      	ldr	r3, [sp, #16]
 800aad8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aadc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aae0:	4323      	orrs	r3, r4
 800aae2:	d108      	bne.n	800aaf6 <__ieee754_pow+0x1de>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4610      	mov	r0, r2
 800aaea:	4619      	mov	r1, r3
 800aaec:	f7f5 fbec 	bl	80002c8 <__aeabi_dsub>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	e78f      	b.n	800aa16 <__ieee754_pow+0xfe>
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	f47f af2c 	bne.w	800a956 <__ieee754_pow+0x3e>
 800aafe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab02:	4619      	mov	r1, r3
 800ab04:	e727      	b.n	800a956 <__ieee754_pow+0x3e>
 800ab06:	0feb      	lsrs	r3, r5, #31
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	9306      	str	r3, [sp, #24]
 800ab0c:	9a06      	ldr	r2, [sp, #24]
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	d102      	bne.n	800ab1a <__ieee754_pow+0x202>
 800ab14:	4632      	mov	r2, r6
 800ab16:	463b      	mov	r3, r7
 800ab18:	e7e6      	b.n	800aae8 <__ieee754_pow+0x1d0>
 800ab1a:	4b19      	ldr	r3, [pc, #100]	; (800ab80 <__ieee754_pow+0x268>)
 800ab1c:	4598      	cmp	r8, r3
 800ab1e:	f340 80fb 	ble.w	800ad18 <__ieee754_pow+0x400>
 800ab22:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ab26:	4598      	cmp	r8, r3
 800ab28:	4b13      	ldr	r3, [pc, #76]	; (800ab78 <__ieee754_pow+0x260>)
 800ab2a:	dd0c      	ble.n	800ab46 <__ieee754_pow+0x22e>
 800ab2c:	429c      	cmp	r4, r3
 800ab2e:	dc0f      	bgt.n	800ab50 <__ieee754_pow+0x238>
 800ab30:	f1b9 0f00 	cmp.w	r9, #0
 800ab34:	da0f      	bge.n	800ab56 <__ieee754_pow+0x23e>
 800ab36:	2000      	movs	r0, #0
 800ab38:	b009      	add	sp, #36	; 0x24
 800ab3a:	ecbd 8b06 	vpop	{d8-d10}
 800ab3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab42:	f001 bbd6 	b.w	800c2f2 <__math_oflow>
 800ab46:	429c      	cmp	r4, r3
 800ab48:	dbf2      	blt.n	800ab30 <__ieee754_pow+0x218>
 800ab4a:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <__ieee754_pow+0x25c>)
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	dd19      	ble.n	800ab84 <__ieee754_pow+0x26c>
 800ab50:	f1b9 0f00 	cmp.w	r9, #0
 800ab54:	dcef      	bgt.n	800ab36 <__ieee754_pow+0x21e>
 800ab56:	2000      	movs	r0, #0
 800ab58:	b009      	add	sp, #36	; 0x24
 800ab5a:	ecbd 8b06 	vpop	{d8-d10}
 800ab5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab62:	f001 bbbd 	b.w	800c2e0 <__math_uflow>
 800ab66:	bf00      	nop
 800ab68:	fff00000 	.word	0xfff00000
 800ab6c:	7ff00000 	.word	0x7ff00000
 800ab70:	433fffff 	.word	0x433fffff
 800ab74:	3ff00000 	.word	0x3ff00000
 800ab78:	3fefffff 	.word	0x3fefffff
 800ab7c:	3fe00000 	.word	0x3fe00000
 800ab80:	41e00000 	.word	0x41e00000
 800ab84:	4b60      	ldr	r3, [pc, #384]	; (800ad08 <__ieee754_pow+0x3f0>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	f7f5 fb9e 	bl	80002c8 <__aeabi_dsub>
 800ab8c:	a354      	add	r3, pc, #336	; (adr r3, 800ace0 <__ieee754_pow+0x3c8>)
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	4604      	mov	r4, r0
 800ab94:	460d      	mov	r5, r1
 800ab96:	f7f5 fd4f 	bl	8000638 <__aeabi_dmul>
 800ab9a:	a353      	add	r3, pc, #332	; (adr r3, 800ace8 <__ieee754_pow+0x3d0>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	4606      	mov	r6, r0
 800aba2:	460f      	mov	r7, r1
 800aba4:	4620      	mov	r0, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	f7f5 fd46 	bl	8000638 <__aeabi_dmul>
 800abac:	4b57      	ldr	r3, [pc, #348]	; (800ad0c <__ieee754_pow+0x3f4>)
 800abae:	4682      	mov	sl, r0
 800abb0:	468b      	mov	fp, r1
 800abb2:	2200      	movs	r2, #0
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fd3e 	bl	8000638 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	a14b      	add	r1, pc, #300	; (adr r1, 800acf0 <__ieee754_pow+0x3d8>)
 800abc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abc6:	f7f5 fb7f 	bl	80002c8 <__aeabi_dsub>
 800abca:	4622      	mov	r2, r4
 800abcc:	462b      	mov	r3, r5
 800abce:	f7f5 fd33 	bl	8000638 <__aeabi_dmul>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	2000      	movs	r0, #0
 800abd8:	494d      	ldr	r1, [pc, #308]	; (800ad10 <__ieee754_pow+0x3f8>)
 800abda:	f7f5 fb75 	bl	80002c8 <__aeabi_dsub>
 800abde:	4622      	mov	r2, r4
 800abe0:	4680      	mov	r8, r0
 800abe2:	4689      	mov	r9, r1
 800abe4:	462b      	mov	r3, r5
 800abe6:	4620      	mov	r0, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	f7f5 fd25 	bl	8000638 <__aeabi_dmul>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f7f5 fd1f 	bl	8000638 <__aeabi_dmul>
 800abfa:	a33f      	add	r3, pc, #252	; (adr r3, 800acf8 <__ieee754_pow+0x3e0>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fd1a 	bl	8000638 <__aeabi_dmul>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4650      	mov	r0, sl
 800ac0a:	4659      	mov	r1, fp
 800ac0c:	f7f5 fb5c 	bl	80002c8 <__aeabi_dsub>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4680      	mov	r8, r0
 800ac16:	4689      	mov	r9, r1
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 fb56 	bl	80002cc <__adddf3>
 800ac20:	2000      	movs	r0, #0
 800ac22:	4632      	mov	r2, r6
 800ac24:	463b      	mov	r3, r7
 800ac26:	4604      	mov	r4, r0
 800ac28:	460d      	mov	r5, r1
 800ac2a:	f7f5 fb4d 	bl	80002c8 <__aeabi_dsub>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	4640      	mov	r0, r8
 800ac34:	4649      	mov	r1, r9
 800ac36:	f7f5 fb47 	bl	80002c8 <__aeabi_dsub>
 800ac3a:	9b04      	ldr	r3, [sp, #16]
 800ac3c:	9a06      	ldr	r2, [sp, #24]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	4313      	orrs	r3, r2
 800ac42:	4682      	mov	sl, r0
 800ac44:	468b      	mov	fp, r1
 800ac46:	f040 81e7 	bne.w	800b018 <__ieee754_pow+0x700>
 800ac4a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ad00 <__ieee754_pow+0x3e8>
 800ac4e:	eeb0 8a47 	vmov.f32	s16, s14
 800ac52:	eef0 8a67 	vmov.f32	s17, s15
 800ac56:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac5a:	2600      	movs	r6, #0
 800ac5c:	4632      	mov	r2, r6
 800ac5e:	463b      	mov	r3, r7
 800ac60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac64:	f7f5 fb30 	bl	80002c8 <__aeabi_dsub>
 800ac68:	4622      	mov	r2, r4
 800ac6a:	462b      	mov	r3, r5
 800ac6c:	f7f5 fce4 	bl	8000638 <__aeabi_dmul>
 800ac70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	4650      	mov	r0, sl
 800ac7a:	4659      	mov	r1, fp
 800ac7c:	f7f5 fcdc 	bl	8000638 <__aeabi_dmul>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4640      	mov	r0, r8
 800ac86:	4649      	mov	r1, r9
 800ac88:	f7f5 fb20 	bl	80002cc <__adddf3>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	4680      	mov	r8, r0
 800ac92:	4689      	mov	r9, r1
 800ac94:	4620      	mov	r0, r4
 800ac96:	4629      	mov	r1, r5
 800ac98:	f7f5 fcce 	bl	8000638 <__aeabi_dmul>
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4604      	mov	r4, r0
 800aca0:	460d      	mov	r5, r1
 800aca2:	4602      	mov	r2, r0
 800aca4:	4649      	mov	r1, r9
 800aca6:	4640      	mov	r0, r8
 800aca8:	f7f5 fb10 	bl	80002cc <__adddf3>
 800acac:	4b19      	ldr	r3, [pc, #100]	; (800ad14 <__ieee754_pow+0x3fc>)
 800acae:	4299      	cmp	r1, r3
 800acb0:	ec45 4b19 	vmov	d9, r4, r5
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	468b      	mov	fp, r1
 800acba:	f340 82f1 	ble.w	800b2a0 <__ieee754_pow+0x988>
 800acbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800acc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800acc6:	4303      	orrs	r3, r0
 800acc8:	f000 81e4 	beq.w	800b094 <__ieee754_pow+0x77c>
 800accc:	ec51 0b18 	vmov	r0, r1, d8
 800acd0:	2200      	movs	r2, #0
 800acd2:	2300      	movs	r3, #0
 800acd4:	f7f5 ff22 	bl	8000b1c <__aeabi_dcmplt>
 800acd8:	3800      	subs	r0, #0
 800acda:	bf18      	it	ne
 800acdc:	2001      	movne	r0, #1
 800acde:	e72b      	b.n	800ab38 <__ieee754_pow+0x220>
 800ace0:	60000000 	.word	0x60000000
 800ace4:	3ff71547 	.word	0x3ff71547
 800ace8:	f85ddf44 	.word	0xf85ddf44
 800acec:	3e54ae0b 	.word	0x3e54ae0b
 800acf0:	55555555 	.word	0x55555555
 800acf4:	3fd55555 	.word	0x3fd55555
 800acf8:	652b82fe 	.word	0x652b82fe
 800acfc:	3ff71547 	.word	0x3ff71547
 800ad00:	00000000 	.word	0x00000000
 800ad04:	bff00000 	.word	0xbff00000
 800ad08:	3ff00000 	.word	0x3ff00000
 800ad0c:	3fd00000 	.word	0x3fd00000
 800ad10:	3fe00000 	.word	0x3fe00000
 800ad14:	408fffff 	.word	0x408fffff
 800ad18:	4bd5      	ldr	r3, [pc, #852]	; (800b070 <__ieee754_pow+0x758>)
 800ad1a:	402b      	ands	r3, r5
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	b92b      	cbnz	r3, 800ad2c <__ieee754_pow+0x414>
 800ad20:	4bd4      	ldr	r3, [pc, #848]	; (800b074 <__ieee754_pow+0x75c>)
 800ad22:	f7f5 fc89 	bl	8000638 <__aeabi_dmul>
 800ad26:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	1523      	asrs	r3, r4, #20
 800ad2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad32:	4413      	add	r3, r2
 800ad34:	9305      	str	r3, [sp, #20]
 800ad36:	4bd0      	ldr	r3, [pc, #832]	; (800b078 <__ieee754_pow+0x760>)
 800ad38:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ad3c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ad40:	429c      	cmp	r4, r3
 800ad42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ad46:	dd08      	ble.n	800ad5a <__ieee754_pow+0x442>
 800ad48:	4bcc      	ldr	r3, [pc, #816]	; (800b07c <__ieee754_pow+0x764>)
 800ad4a:	429c      	cmp	r4, r3
 800ad4c:	f340 8162 	ble.w	800b014 <__ieee754_pow+0x6fc>
 800ad50:	9b05      	ldr	r3, [sp, #20]
 800ad52:	3301      	adds	r3, #1
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ad5a:	2400      	movs	r4, #0
 800ad5c:	00e3      	lsls	r3, r4, #3
 800ad5e:	9307      	str	r3, [sp, #28]
 800ad60:	4bc7      	ldr	r3, [pc, #796]	; (800b080 <__ieee754_pow+0x768>)
 800ad62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad66:	ed93 7b00 	vldr	d7, [r3]
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	ec53 2b17 	vmov	r2, r3, d7
 800ad70:	eeb0 9a47 	vmov.f32	s18, s14
 800ad74:	eef0 9a67 	vmov.f32	s19, s15
 800ad78:	4682      	mov	sl, r0
 800ad7a:	f7f5 faa5 	bl	80002c8 <__aeabi_dsub>
 800ad7e:	4652      	mov	r2, sl
 800ad80:	4606      	mov	r6, r0
 800ad82:	460f      	mov	r7, r1
 800ad84:	462b      	mov	r3, r5
 800ad86:	ec51 0b19 	vmov	r0, r1, d9
 800ad8a:	f7f5 fa9f 	bl	80002cc <__adddf3>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	2000      	movs	r0, #0
 800ad94:	49bb      	ldr	r1, [pc, #748]	; (800b084 <__ieee754_pow+0x76c>)
 800ad96:	f7f5 fd79 	bl	800088c <__aeabi_ddiv>
 800ad9a:	ec41 0b1a 	vmov	d10, r0, r1
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4630      	mov	r0, r6
 800ada4:	4639      	mov	r1, r7
 800ada6:	f7f5 fc47 	bl	8000638 <__aeabi_dmul>
 800adaa:	2300      	movs	r3, #0
 800adac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adb0:	9302      	str	r3, [sp, #8]
 800adb2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800adb6:	46ab      	mov	fp, r5
 800adb8:	106d      	asrs	r5, r5, #1
 800adba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800adbe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800adc2:	ec41 0b18 	vmov	d8, r0, r1
 800adc6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800adca:	2200      	movs	r2, #0
 800adcc:	4640      	mov	r0, r8
 800adce:	4649      	mov	r1, r9
 800add0:	4614      	mov	r4, r2
 800add2:	461d      	mov	r5, r3
 800add4:	f7f5 fc30 	bl	8000638 <__aeabi_dmul>
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	f7f5 fa72 	bl	80002c8 <__aeabi_dsub>
 800ade4:	ec53 2b19 	vmov	r2, r3, d9
 800ade8:	4606      	mov	r6, r0
 800adea:	460f      	mov	r7, r1
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	f7f5 fa6a 	bl	80002c8 <__aeabi_dsub>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4650      	mov	r0, sl
 800adfa:	4659      	mov	r1, fp
 800adfc:	f7f5 fa64 	bl	80002c8 <__aeabi_dsub>
 800ae00:	4642      	mov	r2, r8
 800ae02:	464b      	mov	r3, r9
 800ae04:	f7f5 fc18 	bl	8000638 <__aeabi_dmul>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	4639      	mov	r1, r7
 800ae10:	f7f5 fa5a 	bl	80002c8 <__aeabi_dsub>
 800ae14:	ec53 2b1a 	vmov	r2, r3, d10
 800ae18:	f7f5 fc0e 	bl	8000638 <__aeabi_dmul>
 800ae1c:	ec53 2b18 	vmov	r2, r3, d8
 800ae20:	ec41 0b19 	vmov	d9, r0, r1
 800ae24:	ec51 0b18 	vmov	r0, r1, d8
 800ae28:	f7f5 fc06 	bl	8000638 <__aeabi_dmul>
 800ae2c:	a37c      	add	r3, pc, #496	; (adr r3, 800b020 <__ieee754_pow+0x708>)
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	4604      	mov	r4, r0
 800ae34:	460d      	mov	r5, r1
 800ae36:	f7f5 fbff 	bl	8000638 <__aeabi_dmul>
 800ae3a:	a37b      	add	r3, pc, #492	; (adr r3, 800b028 <__ieee754_pow+0x710>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f7f5 fa44 	bl	80002cc <__adddf3>
 800ae44:	4622      	mov	r2, r4
 800ae46:	462b      	mov	r3, r5
 800ae48:	f7f5 fbf6 	bl	8000638 <__aeabi_dmul>
 800ae4c:	a378      	add	r3, pc, #480	; (adr r3, 800b030 <__ieee754_pow+0x718>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	f7f5 fa3b 	bl	80002cc <__adddf3>
 800ae56:	4622      	mov	r2, r4
 800ae58:	462b      	mov	r3, r5
 800ae5a:	f7f5 fbed 	bl	8000638 <__aeabi_dmul>
 800ae5e:	a376      	add	r3, pc, #472	; (adr r3, 800b038 <__ieee754_pow+0x720>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	f7f5 fa32 	bl	80002cc <__adddf3>
 800ae68:	4622      	mov	r2, r4
 800ae6a:	462b      	mov	r3, r5
 800ae6c:	f7f5 fbe4 	bl	8000638 <__aeabi_dmul>
 800ae70:	a373      	add	r3, pc, #460	; (adr r3, 800b040 <__ieee754_pow+0x728>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f7f5 fa29 	bl	80002cc <__adddf3>
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	462b      	mov	r3, r5
 800ae7e:	f7f5 fbdb 	bl	8000638 <__aeabi_dmul>
 800ae82:	a371      	add	r3, pc, #452	; (adr r3, 800b048 <__ieee754_pow+0x730>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 fa20 	bl	80002cc <__adddf3>
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4606      	mov	r6, r0
 800ae90:	460f      	mov	r7, r1
 800ae92:	462b      	mov	r3, r5
 800ae94:	4620      	mov	r0, r4
 800ae96:	4629      	mov	r1, r5
 800ae98:	f7f5 fbce 	bl	8000638 <__aeabi_dmul>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4630      	mov	r0, r6
 800aea2:	4639      	mov	r1, r7
 800aea4:	f7f5 fbc8 	bl	8000638 <__aeabi_dmul>
 800aea8:	4642      	mov	r2, r8
 800aeaa:	4604      	mov	r4, r0
 800aeac:	460d      	mov	r5, r1
 800aeae:	464b      	mov	r3, r9
 800aeb0:	ec51 0b18 	vmov	r0, r1, d8
 800aeb4:	f7f5 fa0a 	bl	80002cc <__adddf3>
 800aeb8:	ec53 2b19 	vmov	r2, r3, d9
 800aebc:	f7f5 fbbc 	bl	8000638 <__aeabi_dmul>
 800aec0:	4622      	mov	r2, r4
 800aec2:	462b      	mov	r3, r5
 800aec4:	f7f5 fa02 	bl	80002cc <__adddf3>
 800aec8:	4642      	mov	r2, r8
 800aeca:	4682      	mov	sl, r0
 800aecc:	468b      	mov	fp, r1
 800aece:	464b      	mov	r3, r9
 800aed0:	4640      	mov	r0, r8
 800aed2:	4649      	mov	r1, r9
 800aed4:	f7f5 fbb0 	bl	8000638 <__aeabi_dmul>
 800aed8:	4b6b      	ldr	r3, [pc, #428]	; (800b088 <__ieee754_pow+0x770>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	4606      	mov	r6, r0
 800aede:	460f      	mov	r7, r1
 800aee0:	f7f5 f9f4 	bl	80002cc <__adddf3>
 800aee4:	4652      	mov	r2, sl
 800aee6:	465b      	mov	r3, fp
 800aee8:	f7f5 f9f0 	bl	80002cc <__adddf3>
 800aeec:	2000      	movs	r0, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	460d      	mov	r5, r1
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4640      	mov	r0, r8
 800aef8:	4649      	mov	r1, r9
 800aefa:	f7f5 fb9d 	bl	8000638 <__aeabi_dmul>
 800aefe:	4b62      	ldr	r3, [pc, #392]	; (800b088 <__ieee754_pow+0x770>)
 800af00:	4680      	mov	r8, r0
 800af02:	4689      	mov	r9, r1
 800af04:	2200      	movs	r2, #0
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	f7f5 f9dd 	bl	80002c8 <__aeabi_dsub>
 800af0e:	4632      	mov	r2, r6
 800af10:	463b      	mov	r3, r7
 800af12:	f7f5 f9d9 	bl	80002c8 <__aeabi_dsub>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4650      	mov	r0, sl
 800af1c:	4659      	mov	r1, fp
 800af1e:	f7f5 f9d3 	bl	80002c8 <__aeabi_dsub>
 800af22:	ec53 2b18 	vmov	r2, r3, d8
 800af26:	f7f5 fb87 	bl	8000638 <__aeabi_dmul>
 800af2a:	4622      	mov	r2, r4
 800af2c:	4606      	mov	r6, r0
 800af2e:	460f      	mov	r7, r1
 800af30:	462b      	mov	r3, r5
 800af32:	ec51 0b19 	vmov	r0, r1, d9
 800af36:	f7f5 fb7f 	bl	8000638 <__aeabi_dmul>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	4630      	mov	r0, r6
 800af40:	4639      	mov	r1, r7
 800af42:	f7f5 f9c3 	bl	80002cc <__adddf3>
 800af46:	4606      	mov	r6, r0
 800af48:	460f      	mov	r7, r1
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4640      	mov	r0, r8
 800af50:	4649      	mov	r1, r9
 800af52:	f7f5 f9bb 	bl	80002cc <__adddf3>
 800af56:	a33e      	add	r3, pc, #248	; (adr r3, 800b050 <__ieee754_pow+0x738>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	2000      	movs	r0, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	460d      	mov	r5, r1
 800af62:	f7f5 fb69 	bl	8000638 <__aeabi_dmul>
 800af66:	4642      	mov	r2, r8
 800af68:	ec41 0b18 	vmov	d8, r0, r1
 800af6c:	464b      	mov	r3, r9
 800af6e:	4620      	mov	r0, r4
 800af70:	4629      	mov	r1, r5
 800af72:	f7f5 f9a9 	bl	80002c8 <__aeabi_dsub>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	4630      	mov	r0, r6
 800af7c:	4639      	mov	r1, r7
 800af7e:	f7f5 f9a3 	bl	80002c8 <__aeabi_dsub>
 800af82:	a335      	add	r3, pc, #212	; (adr r3, 800b058 <__ieee754_pow+0x740>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 fb56 	bl	8000638 <__aeabi_dmul>
 800af8c:	a334      	add	r3, pc, #208	; (adr r3, 800b060 <__ieee754_pow+0x748>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	4620      	mov	r0, r4
 800af98:	4629      	mov	r1, r5
 800af9a:	f7f5 fb4d 	bl	8000638 <__aeabi_dmul>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4630      	mov	r0, r6
 800afa4:	4639      	mov	r1, r7
 800afa6:	f7f5 f991 	bl	80002cc <__adddf3>
 800afaa:	9a07      	ldr	r2, [sp, #28]
 800afac:	4b37      	ldr	r3, [pc, #220]	; (800b08c <__ieee754_pow+0x774>)
 800afae:	4413      	add	r3, r2
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 f98a 	bl	80002cc <__adddf3>
 800afb8:	4682      	mov	sl, r0
 800afba:	9805      	ldr	r0, [sp, #20]
 800afbc:	468b      	mov	fp, r1
 800afbe:	f7f5 fad1 	bl	8000564 <__aeabi_i2d>
 800afc2:	9a07      	ldr	r2, [sp, #28]
 800afc4:	4b32      	ldr	r3, [pc, #200]	; (800b090 <__ieee754_pow+0x778>)
 800afc6:	4413      	add	r3, r2
 800afc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afcc:	4606      	mov	r6, r0
 800afce:	460f      	mov	r7, r1
 800afd0:	4652      	mov	r2, sl
 800afd2:	465b      	mov	r3, fp
 800afd4:	ec51 0b18 	vmov	r0, r1, d8
 800afd8:	f7f5 f978 	bl	80002cc <__adddf3>
 800afdc:	4642      	mov	r2, r8
 800afde:	464b      	mov	r3, r9
 800afe0:	f7f5 f974 	bl	80002cc <__adddf3>
 800afe4:	4632      	mov	r2, r6
 800afe6:	463b      	mov	r3, r7
 800afe8:	f7f5 f970 	bl	80002cc <__adddf3>
 800afec:	2000      	movs	r0, #0
 800afee:	4632      	mov	r2, r6
 800aff0:	463b      	mov	r3, r7
 800aff2:	4604      	mov	r4, r0
 800aff4:	460d      	mov	r5, r1
 800aff6:	f7f5 f967 	bl	80002c8 <__aeabi_dsub>
 800affa:	4642      	mov	r2, r8
 800affc:	464b      	mov	r3, r9
 800affe:	f7f5 f963 	bl	80002c8 <__aeabi_dsub>
 800b002:	ec53 2b18 	vmov	r2, r3, d8
 800b006:	f7f5 f95f 	bl	80002c8 <__aeabi_dsub>
 800b00a:	4602      	mov	r2, r0
 800b00c:	460b      	mov	r3, r1
 800b00e:	4650      	mov	r0, sl
 800b010:	4659      	mov	r1, fp
 800b012:	e610      	b.n	800ac36 <__ieee754_pow+0x31e>
 800b014:	2401      	movs	r4, #1
 800b016:	e6a1      	b.n	800ad5c <__ieee754_pow+0x444>
 800b018:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b068 <__ieee754_pow+0x750>
 800b01c:	e617      	b.n	800ac4e <__ieee754_pow+0x336>
 800b01e:	bf00      	nop
 800b020:	4a454eef 	.word	0x4a454eef
 800b024:	3fca7e28 	.word	0x3fca7e28
 800b028:	93c9db65 	.word	0x93c9db65
 800b02c:	3fcd864a 	.word	0x3fcd864a
 800b030:	a91d4101 	.word	0xa91d4101
 800b034:	3fd17460 	.word	0x3fd17460
 800b038:	518f264d 	.word	0x518f264d
 800b03c:	3fd55555 	.word	0x3fd55555
 800b040:	db6fabff 	.word	0xdb6fabff
 800b044:	3fdb6db6 	.word	0x3fdb6db6
 800b048:	33333303 	.word	0x33333303
 800b04c:	3fe33333 	.word	0x3fe33333
 800b050:	e0000000 	.word	0xe0000000
 800b054:	3feec709 	.word	0x3feec709
 800b058:	dc3a03fd 	.word	0xdc3a03fd
 800b05c:	3feec709 	.word	0x3feec709
 800b060:	145b01f5 	.word	0x145b01f5
 800b064:	be3e2fe0 	.word	0xbe3e2fe0
 800b068:	00000000 	.word	0x00000000
 800b06c:	3ff00000 	.word	0x3ff00000
 800b070:	7ff00000 	.word	0x7ff00000
 800b074:	43400000 	.word	0x43400000
 800b078:	0003988e 	.word	0x0003988e
 800b07c:	000bb679 	.word	0x000bb679
 800b080:	0800c828 	.word	0x0800c828
 800b084:	3ff00000 	.word	0x3ff00000
 800b088:	40080000 	.word	0x40080000
 800b08c:	0800c848 	.word	0x0800c848
 800b090:	0800c838 	.word	0x0800c838
 800b094:	a3b5      	add	r3, pc, #724	; (adr r3, 800b36c <__ieee754_pow+0xa54>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	4640      	mov	r0, r8
 800b09c:	4649      	mov	r1, r9
 800b09e:	f7f5 f915 	bl	80002cc <__adddf3>
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	ec41 0b1a 	vmov	d10, r0, r1
 800b0a8:	462b      	mov	r3, r5
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	4639      	mov	r1, r7
 800b0ae:	f7f5 f90b 	bl	80002c8 <__aeabi_dsub>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	ec51 0b1a 	vmov	r0, r1, d10
 800b0ba:	f7f5 fd4d 	bl	8000b58 <__aeabi_dcmpgt>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f47f ae04 	bne.w	800accc <__ieee754_pow+0x3b4>
 800b0c4:	4aa4      	ldr	r2, [pc, #656]	; (800b358 <__ieee754_pow+0xa40>)
 800b0c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	f340 8108 	ble.w	800b2e0 <__ieee754_pow+0x9c8>
 800b0d0:	151b      	asrs	r3, r3, #20
 800b0d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b0d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b0da:	fa4a f303 	asr.w	r3, sl, r3
 800b0de:	445b      	add	r3, fp
 800b0e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b0e4:	4e9d      	ldr	r6, [pc, #628]	; (800b35c <__ieee754_pow+0xa44>)
 800b0e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b0ea:	4116      	asrs	r6, r2
 800b0ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	ea23 0106 	bic.w	r1, r3, r6
 800b0f6:	f1c2 0214 	rsb	r2, r2, #20
 800b0fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b0fe:	fa4a fa02 	asr.w	sl, sl, r2
 800b102:	f1bb 0f00 	cmp.w	fp, #0
 800b106:	4602      	mov	r2, r0
 800b108:	460b      	mov	r3, r1
 800b10a:	4620      	mov	r0, r4
 800b10c:	4629      	mov	r1, r5
 800b10e:	bfb8      	it	lt
 800b110:	f1ca 0a00 	rsblt	sl, sl, #0
 800b114:	f7f5 f8d8 	bl	80002c8 <__aeabi_dsub>
 800b118:	ec41 0b19 	vmov	d9, r0, r1
 800b11c:	4642      	mov	r2, r8
 800b11e:	464b      	mov	r3, r9
 800b120:	ec51 0b19 	vmov	r0, r1, d9
 800b124:	f7f5 f8d2 	bl	80002cc <__adddf3>
 800b128:	a37b      	add	r3, pc, #492	; (adr r3, 800b318 <__ieee754_pow+0xa00>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	2000      	movs	r0, #0
 800b130:	4604      	mov	r4, r0
 800b132:	460d      	mov	r5, r1
 800b134:	f7f5 fa80 	bl	8000638 <__aeabi_dmul>
 800b138:	ec53 2b19 	vmov	r2, r3, d9
 800b13c:	4606      	mov	r6, r0
 800b13e:	460f      	mov	r7, r1
 800b140:	4620      	mov	r0, r4
 800b142:	4629      	mov	r1, r5
 800b144:	f7f5 f8c0 	bl	80002c8 <__aeabi_dsub>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	4640      	mov	r0, r8
 800b14e:	4649      	mov	r1, r9
 800b150:	f7f5 f8ba 	bl	80002c8 <__aeabi_dsub>
 800b154:	a372      	add	r3, pc, #456	; (adr r3, 800b320 <__ieee754_pow+0xa08>)
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	f7f5 fa6d 	bl	8000638 <__aeabi_dmul>
 800b15e:	a372      	add	r3, pc, #456	; (adr r3, 800b328 <__ieee754_pow+0xa10>)
 800b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b164:	4680      	mov	r8, r0
 800b166:	4689      	mov	r9, r1
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f5 fa64 	bl	8000638 <__aeabi_dmul>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4640      	mov	r0, r8
 800b176:	4649      	mov	r1, r9
 800b178:	f7f5 f8a8 	bl	80002cc <__adddf3>
 800b17c:	4604      	mov	r4, r0
 800b17e:	460d      	mov	r5, r1
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4630      	mov	r0, r6
 800b186:	4639      	mov	r1, r7
 800b188:	f7f5 f8a0 	bl	80002cc <__adddf3>
 800b18c:	4632      	mov	r2, r6
 800b18e:	463b      	mov	r3, r7
 800b190:	4680      	mov	r8, r0
 800b192:	4689      	mov	r9, r1
 800b194:	f7f5 f898 	bl	80002c8 <__aeabi_dsub>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	4620      	mov	r0, r4
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7f5 f892 	bl	80002c8 <__aeabi_dsub>
 800b1a4:	4642      	mov	r2, r8
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	464b      	mov	r3, r9
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	f7f5 fa42 	bl	8000638 <__aeabi_dmul>
 800b1b4:	a35e      	add	r3, pc, #376	; (adr r3, 800b330 <__ieee754_pow+0xa18>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	460d      	mov	r5, r1
 800b1be:	f7f5 fa3b 	bl	8000638 <__aeabi_dmul>
 800b1c2:	a35d      	add	r3, pc, #372	; (adr r3, 800b338 <__ieee754_pow+0xa20>)
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	f7f5 f87e 	bl	80002c8 <__aeabi_dsub>
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	462b      	mov	r3, r5
 800b1d0:	f7f5 fa32 	bl	8000638 <__aeabi_dmul>
 800b1d4:	a35a      	add	r3, pc, #360	; (adr r3, 800b340 <__ieee754_pow+0xa28>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	f7f5 f877 	bl	80002cc <__adddf3>
 800b1de:	4622      	mov	r2, r4
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	f7f5 fa29 	bl	8000638 <__aeabi_dmul>
 800b1e6:	a358      	add	r3, pc, #352	; (adr r3, 800b348 <__ieee754_pow+0xa30>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f5 f86c 	bl	80002c8 <__aeabi_dsub>
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	462b      	mov	r3, r5
 800b1f4:	f7f5 fa20 	bl	8000638 <__aeabi_dmul>
 800b1f8:	a355      	add	r3, pc, #340	; (adr r3, 800b350 <__ieee754_pow+0xa38>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f865 	bl	80002cc <__adddf3>
 800b202:	4622      	mov	r2, r4
 800b204:	462b      	mov	r3, r5
 800b206:	f7f5 fa17 	bl	8000638 <__aeabi_dmul>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 f859 	bl	80002c8 <__aeabi_dsub>
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 fa09 	bl	8000638 <__aeabi_dmul>
 800b226:	2200      	movs	r2, #0
 800b228:	ec41 0b19 	vmov	d9, r0, r1
 800b22c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 f848 	bl	80002c8 <__aeabi_dsub>
 800b238:	4602      	mov	r2, r0
 800b23a:	460b      	mov	r3, r1
 800b23c:	ec51 0b19 	vmov	r0, r1, d9
 800b240:	f7f5 fb24 	bl	800088c <__aeabi_ddiv>
 800b244:	4632      	mov	r2, r6
 800b246:	4604      	mov	r4, r0
 800b248:	460d      	mov	r5, r1
 800b24a:	463b      	mov	r3, r7
 800b24c:	4640      	mov	r0, r8
 800b24e:	4649      	mov	r1, r9
 800b250:	f7f5 f9f2 	bl	8000638 <__aeabi_dmul>
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	f7f5 f838 	bl	80002cc <__adddf3>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4620      	mov	r0, r4
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 f830 	bl	80002c8 <__aeabi_dsub>
 800b268:	4642      	mov	r2, r8
 800b26a:	464b      	mov	r3, r9
 800b26c:	f7f5 f82c 	bl	80002c8 <__aeabi_dsub>
 800b270:	460b      	mov	r3, r1
 800b272:	4602      	mov	r2, r0
 800b274:	493a      	ldr	r1, [pc, #232]	; (800b360 <__ieee754_pow+0xa48>)
 800b276:	2000      	movs	r0, #0
 800b278:	f7f5 f826 	bl	80002c8 <__aeabi_dsub>
 800b27c:	ec41 0b10 	vmov	d0, r0, r1
 800b280:	ee10 3a90 	vmov	r3, s1
 800b284:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b28c:	da2b      	bge.n	800b2e6 <__ieee754_pow+0x9ce>
 800b28e:	4650      	mov	r0, sl
 800b290:	f001 f8ce 	bl	800c430 <scalbn>
 800b294:	ec51 0b10 	vmov	r0, r1, d0
 800b298:	ec53 2b18 	vmov	r2, r3, d8
 800b29c:	f7ff bbed 	b.w	800aa7a <__ieee754_pow+0x162>
 800b2a0:	4b30      	ldr	r3, [pc, #192]	; (800b364 <__ieee754_pow+0xa4c>)
 800b2a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b2a6:	429e      	cmp	r6, r3
 800b2a8:	f77f af0c 	ble.w	800b0c4 <__ieee754_pow+0x7ac>
 800b2ac:	4b2e      	ldr	r3, [pc, #184]	; (800b368 <__ieee754_pow+0xa50>)
 800b2ae:	440b      	add	r3, r1
 800b2b0:	4303      	orrs	r3, r0
 800b2b2:	d009      	beq.n	800b2c8 <__ieee754_pow+0x9b0>
 800b2b4:	ec51 0b18 	vmov	r0, r1, d8
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f7f5 fc2e 	bl	8000b1c <__aeabi_dcmplt>
 800b2c0:	3800      	subs	r0, #0
 800b2c2:	bf18      	it	ne
 800b2c4:	2001      	movne	r0, #1
 800b2c6:	e447      	b.n	800ab58 <__ieee754_pow+0x240>
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	f7f4 fffc 	bl	80002c8 <__aeabi_dsub>
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	464b      	mov	r3, r9
 800b2d4:	f7f5 fc36 	bl	8000b44 <__aeabi_dcmpge>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	f43f aef3 	beq.w	800b0c4 <__ieee754_pow+0x7ac>
 800b2de:	e7e9      	b.n	800b2b4 <__ieee754_pow+0x99c>
 800b2e0:	f04f 0a00 	mov.w	sl, #0
 800b2e4:	e71a      	b.n	800b11c <__ieee754_pow+0x804>
 800b2e6:	ec51 0b10 	vmov	r0, r1, d0
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	e7d4      	b.n	800b298 <__ieee754_pow+0x980>
 800b2ee:	491c      	ldr	r1, [pc, #112]	; (800b360 <__ieee754_pow+0xa48>)
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	f7ff bb30 	b.w	800a956 <__ieee754_pow+0x3e>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	f7ff bb2c 	b.w	800a956 <__ieee754_pow+0x3e>
 800b2fe:	4630      	mov	r0, r6
 800b300:	4639      	mov	r1, r7
 800b302:	f7ff bb28 	b.w	800a956 <__ieee754_pow+0x3e>
 800b306:	9204      	str	r2, [sp, #16]
 800b308:	f7ff bb7a 	b.w	800aa00 <__ieee754_pow+0xe8>
 800b30c:	2300      	movs	r3, #0
 800b30e:	f7ff bb64 	b.w	800a9da <__ieee754_pow+0xc2>
 800b312:	bf00      	nop
 800b314:	f3af 8000 	nop.w
 800b318:	00000000 	.word	0x00000000
 800b31c:	3fe62e43 	.word	0x3fe62e43
 800b320:	fefa39ef 	.word	0xfefa39ef
 800b324:	3fe62e42 	.word	0x3fe62e42
 800b328:	0ca86c39 	.word	0x0ca86c39
 800b32c:	be205c61 	.word	0xbe205c61
 800b330:	72bea4d0 	.word	0x72bea4d0
 800b334:	3e663769 	.word	0x3e663769
 800b338:	c5d26bf1 	.word	0xc5d26bf1
 800b33c:	3ebbbd41 	.word	0x3ebbbd41
 800b340:	af25de2c 	.word	0xaf25de2c
 800b344:	3f11566a 	.word	0x3f11566a
 800b348:	16bebd93 	.word	0x16bebd93
 800b34c:	3f66c16c 	.word	0x3f66c16c
 800b350:	5555553e 	.word	0x5555553e
 800b354:	3fc55555 	.word	0x3fc55555
 800b358:	3fe00000 	.word	0x3fe00000
 800b35c:	000fffff 	.word	0x000fffff
 800b360:	3ff00000 	.word	0x3ff00000
 800b364:	4090cbff 	.word	0x4090cbff
 800b368:	3f6f3400 	.word	0x3f6f3400
 800b36c:	652b82fe 	.word	0x652b82fe
 800b370:	3c971547 	.word	0x3c971547
 800b374:	00000000 	.word	0x00000000

0800b378 <__ieee754_rem_pio2>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	ed2d 8b02 	vpush	{d8}
 800b380:	ec55 4b10 	vmov	r4, r5, d0
 800b384:	4bca      	ldr	r3, [pc, #808]	; (800b6b0 <__ieee754_rem_pio2+0x338>)
 800b386:	b08b      	sub	sp, #44	; 0x2c
 800b388:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b38c:	4598      	cmp	r8, r3
 800b38e:	4682      	mov	sl, r0
 800b390:	9502      	str	r5, [sp, #8]
 800b392:	dc08      	bgt.n	800b3a6 <__ieee754_rem_pio2+0x2e>
 800b394:	2200      	movs	r2, #0
 800b396:	2300      	movs	r3, #0
 800b398:	ed80 0b00 	vstr	d0, [r0]
 800b39c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b3a0:	f04f 0b00 	mov.w	fp, #0
 800b3a4:	e028      	b.n	800b3f8 <__ieee754_rem_pio2+0x80>
 800b3a6:	4bc3      	ldr	r3, [pc, #780]	; (800b6b4 <__ieee754_rem_pio2+0x33c>)
 800b3a8:	4598      	cmp	r8, r3
 800b3aa:	dc78      	bgt.n	800b49e <__ieee754_rem_pio2+0x126>
 800b3ac:	9b02      	ldr	r3, [sp, #8]
 800b3ae:	4ec2      	ldr	r6, [pc, #776]	; (800b6b8 <__ieee754_rem_pio2+0x340>)
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	ee10 0a10 	vmov	r0, s0
 800b3b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b678 <__ieee754_rem_pio2+0x300>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	4629      	mov	r1, r5
 800b3be:	dd39      	ble.n	800b434 <__ieee754_rem_pio2+0xbc>
 800b3c0:	f7f4 ff82 	bl	80002c8 <__aeabi_dsub>
 800b3c4:	45b0      	cmp	r8, r6
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	460d      	mov	r5, r1
 800b3ca:	d01b      	beq.n	800b404 <__ieee754_rem_pio2+0x8c>
 800b3cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b680 <__ieee754_rem_pio2+0x308>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f4 ff79 	bl	80002c8 <__aeabi_dsub>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	e9ca 2300 	strd	r2, r3, [sl]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7f4 ff71 	bl	80002c8 <__aeabi_dsub>
 800b3e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b680 <__ieee754_rem_pio2+0x308>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f7f4 ff6c 	bl	80002c8 <__aeabi_dsub>
 800b3f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3f4:	f04f 0b01 	mov.w	fp, #1
 800b3f8:	4658      	mov	r0, fp
 800b3fa:	b00b      	add	sp, #44	; 0x2c
 800b3fc:	ecbd 8b02 	vpop	{d8}
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b404:	a3a0      	add	r3, pc, #640	; (adr r3, 800b688 <__ieee754_rem_pio2+0x310>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f7f4 ff5d 	bl	80002c8 <__aeabi_dsub>
 800b40e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b690 <__ieee754_rem_pio2+0x318>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	f7f4 ff56 	bl	80002c8 <__aeabi_dsub>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	e9ca 2300 	strd	r2, r3, [sl]
 800b424:	4620      	mov	r0, r4
 800b426:	4629      	mov	r1, r5
 800b428:	f7f4 ff4e 	bl	80002c8 <__aeabi_dsub>
 800b42c:	a398      	add	r3, pc, #608	; (adr r3, 800b690 <__ieee754_rem_pio2+0x318>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	e7db      	b.n	800b3ec <__ieee754_rem_pio2+0x74>
 800b434:	f7f4 ff4a 	bl	80002cc <__adddf3>
 800b438:	45b0      	cmp	r8, r6
 800b43a:	4604      	mov	r4, r0
 800b43c:	460d      	mov	r5, r1
 800b43e:	d016      	beq.n	800b46e <__ieee754_rem_pio2+0xf6>
 800b440:	a38f      	add	r3, pc, #572	; (adr r3, 800b680 <__ieee754_rem_pio2+0x308>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f7f4 ff41 	bl	80002cc <__adddf3>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	e9ca 2300 	strd	r2, r3, [sl]
 800b452:	4620      	mov	r0, r4
 800b454:	4629      	mov	r1, r5
 800b456:	f7f4 ff37 	bl	80002c8 <__aeabi_dsub>
 800b45a:	a389      	add	r3, pc, #548	; (adr r3, 800b680 <__ieee754_rem_pio2+0x308>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f4 ff34 	bl	80002cc <__adddf3>
 800b464:	f04f 3bff 	mov.w	fp, #4294967295
 800b468:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b46c:	e7c4      	b.n	800b3f8 <__ieee754_rem_pio2+0x80>
 800b46e:	a386      	add	r3, pc, #536	; (adr r3, 800b688 <__ieee754_rem_pio2+0x310>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	f7f4 ff2a 	bl	80002cc <__adddf3>
 800b478:	a385      	add	r3, pc, #532	; (adr r3, 800b690 <__ieee754_rem_pio2+0x318>)
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	4604      	mov	r4, r0
 800b480:	460d      	mov	r5, r1
 800b482:	f7f4 ff23 	bl	80002cc <__adddf3>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	e9ca 2300 	strd	r2, r3, [sl]
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f4 ff19 	bl	80002c8 <__aeabi_dsub>
 800b496:	a37e      	add	r3, pc, #504	; (adr r3, 800b690 <__ieee754_rem_pio2+0x318>)
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	e7e0      	b.n	800b460 <__ieee754_rem_pio2+0xe8>
 800b49e:	4b87      	ldr	r3, [pc, #540]	; (800b6bc <__ieee754_rem_pio2+0x344>)
 800b4a0:	4598      	cmp	r8, r3
 800b4a2:	f300 80d9 	bgt.w	800b658 <__ieee754_rem_pio2+0x2e0>
 800b4a6:	f000 ff2d 	bl	800c304 <fabs>
 800b4aa:	ec55 4b10 	vmov	r4, r5, d0
 800b4ae:	ee10 0a10 	vmov	r0, s0
 800b4b2:	a379      	add	r3, pc, #484	; (adr r3, 800b698 <__ieee754_rem_pio2+0x320>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	f7f5 f8bd 	bl	8000638 <__aeabi_dmul>
 800b4be:	4b80      	ldr	r3, [pc, #512]	; (800b6c0 <__ieee754_rem_pio2+0x348>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f7f4 ff03 	bl	80002cc <__adddf3>
 800b4c6:	f7f5 fb67 	bl	8000b98 <__aeabi_d2iz>
 800b4ca:	4683      	mov	fp, r0
 800b4cc:	f7f5 f84a 	bl	8000564 <__aeabi_i2d>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	ec43 2b18 	vmov	d8, r2, r3
 800b4d8:	a367      	add	r3, pc, #412	; (adr r3, 800b678 <__ieee754_rem_pio2+0x300>)
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f7f5 f8ab 	bl	8000638 <__aeabi_dmul>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	f7f4 feed 	bl	80002c8 <__aeabi_dsub>
 800b4ee:	a364      	add	r3, pc, #400	; (adr r3, 800b680 <__ieee754_rem_pio2+0x308>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	ec51 0b18 	vmov	r0, r1, d8
 800b4fc:	f7f5 f89c 	bl	8000638 <__aeabi_dmul>
 800b500:	f1bb 0f1f 	cmp.w	fp, #31
 800b504:	4604      	mov	r4, r0
 800b506:	460d      	mov	r5, r1
 800b508:	dc0d      	bgt.n	800b526 <__ieee754_rem_pio2+0x1ae>
 800b50a:	4b6e      	ldr	r3, [pc, #440]	; (800b6c4 <__ieee754_rem_pio2+0x34c>)
 800b50c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b514:	4543      	cmp	r3, r8
 800b516:	d006      	beq.n	800b526 <__ieee754_rem_pio2+0x1ae>
 800b518:	4622      	mov	r2, r4
 800b51a:	462b      	mov	r3, r5
 800b51c:	4630      	mov	r0, r6
 800b51e:	4639      	mov	r1, r7
 800b520:	f7f4 fed2 	bl	80002c8 <__aeabi_dsub>
 800b524:	e00f      	b.n	800b546 <__ieee754_rem_pio2+0x1ce>
 800b526:	462b      	mov	r3, r5
 800b528:	4622      	mov	r2, r4
 800b52a:	4630      	mov	r0, r6
 800b52c:	4639      	mov	r1, r7
 800b52e:	f7f4 fecb 	bl	80002c8 <__aeabi_dsub>
 800b532:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b536:	9303      	str	r3, [sp, #12]
 800b538:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b53c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b540:	f1b8 0f10 	cmp.w	r8, #16
 800b544:	dc02      	bgt.n	800b54c <__ieee754_rem_pio2+0x1d4>
 800b546:	e9ca 0100 	strd	r0, r1, [sl]
 800b54a:	e039      	b.n	800b5c0 <__ieee754_rem_pio2+0x248>
 800b54c:	a34e      	add	r3, pc, #312	; (adr r3, 800b688 <__ieee754_rem_pio2+0x310>)
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	ec51 0b18 	vmov	r0, r1, d8
 800b556:	f7f5 f86f 	bl	8000638 <__aeabi_dmul>
 800b55a:	4604      	mov	r4, r0
 800b55c:	460d      	mov	r5, r1
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	4630      	mov	r0, r6
 800b564:	4639      	mov	r1, r7
 800b566:	f7f4 feaf 	bl	80002c8 <__aeabi_dsub>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4680      	mov	r8, r0
 800b570:	4689      	mov	r9, r1
 800b572:	4630      	mov	r0, r6
 800b574:	4639      	mov	r1, r7
 800b576:	f7f4 fea7 	bl	80002c8 <__aeabi_dsub>
 800b57a:	4622      	mov	r2, r4
 800b57c:	462b      	mov	r3, r5
 800b57e:	f7f4 fea3 	bl	80002c8 <__aeabi_dsub>
 800b582:	a343      	add	r3, pc, #268	; (adr r3, 800b690 <__ieee754_rem_pio2+0x318>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	4604      	mov	r4, r0
 800b58a:	460d      	mov	r5, r1
 800b58c:	ec51 0b18 	vmov	r0, r1, d8
 800b590:	f7f5 f852 	bl	8000638 <__aeabi_dmul>
 800b594:	4622      	mov	r2, r4
 800b596:	462b      	mov	r3, r5
 800b598:	f7f4 fe96 	bl	80002c8 <__aeabi_dsub>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	4649      	mov	r1, r9
 800b5a8:	f7f4 fe8e 	bl	80002c8 <__aeabi_dsub>
 800b5ac:	9a03      	ldr	r2, [sp, #12]
 800b5ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	2b31      	cmp	r3, #49	; 0x31
 800b5b6:	dc24      	bgt.n	800b602 <__ieee754_rem_pio2+0x28a>
 800b5b8:	e9ca 0100 	strd	r0, r1, [sl]
 800b5bc:	4646      	mov	r6, r8
 800b5be:	464f      	mov	r7, r9
 800b5c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f4 fe7c 	bl	80002c8 <__aeabi_dsub>
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	f7f4 fe78 	bl	80002c8 <__aeabi_dsub>
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b5e0:	f6bf af0a 	bge.w	800b3f8 <__ieee754_rem_pio2+0x80>
 800b5e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b5e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5f0:	f8ca 8000 	str.w	r8, [sl]
 800b5f4:	f8ca 0008 	str.w	r0, [sl, #8]
 800b5f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b5fc:	f1cb 0b00 	rsb	fp, fp, #0
 800b600:	e6fa      	b.n	800b3f8 <__ieee754_rem_pio2+0x80>
 800b602:	a327      	add	r3, pc, #156	; (adr r3, 800b6a0 <__ieee754_rem_pio2+0x328>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	ec51 0b18 	vmov	r0, r1, d8
 800b60c:	f7f5 f814 	bl	8000638 <__aeabi_dmul>
 800b610:	4604      	mov	r4, r0
 800b612:	460d      	mov	r5, r1
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4640      	mov	r0, r8
 800b61a:	4649      	mov	r1, r9
 800b61c:	f7f4 fe54 	bl	80002c8 <__aeabi_dsub>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4606      	mov	r6, r0
 800b626:	460f      	mov	r7, r1
 800b628:	4640      	mov	r0, r8
 800b62a:	4649      	mov	r1, r9
 800b62c:	f7f4 fe4c 	bl	80002c8 <__aeabi_dsub>
 800b630:	4622      	mov	r2, r4
 800b632:	462b      	mov	r3, r5
 800b634:	f7f4 fe48 	bl	80002c8 <__aeabi_dsub>
 800b638:	a31b      	add	r3, pc, #108	; (adr r3, 800b6a8 <__ieee754_rem_pio2+0x330>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	4604      	mov	r4, r0
 800b640:	460d      	mov	r5, r1
 800b642:	ec51 0b18 	vmov	r0, r1, d8
 800b646:	f7f4 fff7 	bl	8000638 <__aeabi_dmul>
 800b64a:	4622      	mov	r2, r4
 800b64c:	462b      	mov	r3, r5
 800b64e:	f7f4 fe3b 	bl	80002c8 <__aeabi_dsub>
 800b652:	4604      	mov	r4, r0
 800b654:	460d      	mov	r5, r1
 800b656:	e75f      	b.n	800b518 <__ieee754_rem_pio2+0x1a0>
 800b658:	4b1b      	ldr	r3, [pc, #108]	; (800b6c8 <__ieee754_rem_pio2+0x350>)
 800b65a:	4598      	cmp	r8, r3
 800b65c:	dd36      	ble.n	800b6cc <__ieee754_rem_pio2+0x354>
 800b65e:	ee10 2a10 	vmov	r2, s0
 800b662:	462b      	mov	r3, r5
 800b664:	4620      	mov	r0, r4
 800b666:	4629      	mov	r1, r5
 800b668:	f7f4 fe2e 	bl	80002c8 <__aeabi_dsub>
 800b66c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b670:	e9ca 0100 	strd	r0, r1, [sl]
 800b674:	e694      	b.n	800b3a0 <__ieee754_rem_pio2+0x28>
 800b676:	bf00      	nop
 800b678:	54400000 	.word	0x54400000
 800b67c:	3ff921fb 	.word	0x3ff921fb
 800b680:	1a626331 	.word	0x1a626331
 800b684:	3dd0b461 	.word	0x3dd0b461
 800b688:	1a600000 	.word	0x1a600000
 800b68c:	3dd0b461 	.word	0x3dd0b461
 800b690:	2e037073 	.word	0x2e037073
 800b694:	3ba3198a 	.word	0x3ba3198a
 800b698:	6dc9c883 	.word	0x6dc9c883
 800b69c:	3fe45f30 	.word	0x3fe45f30
 800b6a0:	2e000000 	.word	0x2e000000
 800b6a4:	3ba3198a 	.word	0x3ba3198a
 800b6a8:	252049c1 	.word	0x252049c1
 800b6ac:	397b839a 	.word	0x397b839a
 800b6b0:	3fe921fb 	.word	0x3fe921fb
 800b6b4:	4002d97b 	.word	0x4002d97b
 800b6b8:	3ff921fb 	.word	0x3ff921fb
 800b6bc:	413921fb 	.word	0x413921fb
 800b6c0:	3fe00000 	.word	0x3fe00000
 800b6c4:	0800c858 	.word	0x0800c858
 800b6c8:	7fefffff 	.word	0x7fefffff
 800b6cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b6d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b6d4:	ee10 0a10 	vmov	r0, s0
 800b6d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b6dc:	ee10 6a10 	vmov	r6, s0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	f7f5 fa59 	bl	8000b98 <__aeabi_d2iz>
 800b6e6:	f7f4 ff3d 	bl	8000564 <__aeabi_i2d>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6f6:	f7f4 fde7 	bl	80002c8 <__aeabi_dsub>
 800b6fa:	4b23      	ldr	r3, [pc, #140]	; (800b788 <__ieee754_rem_pio2+0x410>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f7f4 ff9b 	bl	8000638 <__aeabi_dmul>
 800b702:	460f      	mov	r7, r1
 800b704:	4606      	mov	r6, r0
 800b706:	f7f5 fa47 	bl	8000b98 <__aeabi_d2iz>
 800b70a:	f7f4 ff2b 	bl	8000564 <__aeabi_i2d>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4630      	mov	r0, r6
 800b714:	4639      	mov	r1, r7
 800b716:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b71a:	f7f4 fdd5 	bl	80002c8 <__aeabi_dsub>
 800b71e:	4b1a      	ldr	r3, [pc, #104]	; (800b788 <__ieee754_rem_pio2+0x410>)
 800b720:	2200      	movs	r2, #0
 800b722:	f7f4 ff89 	bl	8000638 <__aeabi_dmul>
 800b726:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b72a:	ad04      	add	r5, sp, #16
 800b72c:	f04f 0803 	mov.w	r8, #3
 800b730:	46a9      	mov	r9, r5
 800b732:	2600      	movs	r6, #0
 800b734:	2700      	movs	r7, #0
 800b736:	4632      	mov	r2, r6
 800b738:	463b      	mov	r3, r7
 800b73a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b73e:	46c3      	mov	fp, r8
 800b740:	3d08      	subs	r5, #8
 800b742:	f108 38ff 	add.w	r8, r8, #4294967295
 800b746:	f7f5 f9df 	bl	8000b08 <__aeabi_dcmpeq>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d1f3      	bne.n	800b736 <__ieee754_rem_pio2+0x3be>
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <__ieee754_rem_pio2+0x414>)
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	2302      	movs	r3, #2
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	4622      	mov	r2, r4
 800b758:	465b      	mov	r3, fp
 800b75a:	4651      	mov	r1, sl
 800b75c:	4648      	mov	r0, r9
 800b75e:	f000 f993 	bl	800ba88 <__kernel_rem_pio2>
 800b762:	9b02      	ldr	r3, [sp, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	4683      	mov	fp, r0
 800b768:	f6bf ae46 	bge.w	800b3f8 <__ieee754_rem_pio2+0x80>
 800b76c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b770:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b774:	e9ca 2300 	strd	r2, r3, [sl]
 800b778:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b77c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b780:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b784:	e73a      	b.n	800b5fc <__ieee754_rem_pio2+0x284>
 800b786:	bf00      	nop
 800b788:	41700000 	.word	0x41700000
 800b78c:	0800c8d8 	.word	0x0800c8d8

0800b790 <__ieee754_sqrt>:
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	ec55 4b10 	vmov	r4, r5, d0
 800b798:	4e55      	ldr	r6, [pc, #340]	; (800b8f0 <__ieee754_sqrt+0x160>)
 800b79a:	43ae      	bics	r6, r5
 800b79c:	ee10 0a10 	vmov	r0, s0
 800b7a0:	ee10 3a10 	vmov	r3, s0
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	d110      	bne.n	800b7cc <__ieee754_sqrt+0x3c>
 800b7aa:	ee10 2a10 	vmov	r2, s0
 800b7ae:	462b      	mov	r3, r5
 800b7b0:	f7f4 ff42 	bl	8000638 <__aeabi_dmul>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	f7f4 fd86 	bl	80002cc <__adddf3>
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	460d      	mov	r5, r1
 800b7c4:	ec45 4b10 	vmov	d0, r4, r5
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	2d00      	cmp	r5, #0
 800b7ce:	dc10      	bgt.n	800b7f2 <__ieee754_sqrt+0x62>
 800b7d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b7d4:	4330      	orrs	r0, r6
 800b7d6:	d0f5      	beq.n	800b7c4 <__ieee754_sqrt+0x34>
 800b7d8:	b15d      	cbz	r5, 800b7f2 <__ieee754_sqrt+0x62>
 800b7da:	ee10 2a10 	vmov	r2, s0
 800b7de:	462b      	mov	r3, r5
 800b7e0:	ee10 0a10 	vmov	r0, s0
 800b7e4:	f7f4 fd70 	bl	80002c8 <__aeabi_dsub>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	f7f5 f84e 	bl	800088c <__aeabi_ddiv>
 800b7f0:	e7e6      	b.n	800b7c0 <__ieee754_sqrt+0x30>
 800b7f2:	1512      	asrs	r2, r2, #20
 800b7f4:	d074      	beq.n	800b8e0 <__ieee754_sqrt+0x150>
 800b7f6:	07d4      	lsls	r4, r2, #31
 800b7f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b7fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b804:	bf5e      	ittt	pl
 800b806:	0fda      	lsrpl	r2, r3, #31
 800b808:	005b      	lslpl	r3, r3, #1
 800b80a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b80e:	2400      	movs	r4, #0
 800b810:	0fda      	lsrs	r2, r3, #31
 800b812:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b816:	107f      	asrs	r7, r7, #1
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	2516      	movs	r5, #22
 800b81c:	4620      	mov	r0, r4
 800b81e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b822:	1886      	adds	r6, r0, r2
 800b824:	428e      	cmp	r6, r1
 800b826:	bfde      	ittt	le
 800b828:	1b89      	suble	r1, r1, r6
 800b82a:	18b0      	addle	r0, r6, r2
 800b82c:	18a4      	addle	r4, r4, r2
 800b82e:	0049      	lsls	r1, r1, #1
 800b830:	3d01      	subs	r5, #1
 800b832:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b836:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b83a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b83e:	d1f0      	bne.n	800b822 <__ieee754_sqrt+0x92>
 800b840:	462a      	mov	r2, r5
 800b842:	f04f 0e20 	mov.w	lr, #32
 800b846:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b84a:	4281      	cmp	r1, r0
 800b84c:	eb06 0c05 	add.w	ip, r6, r5
 800b850:	dc02      	bgt.n	800b858 <__ieee754_sqrt+0xc8>
 800b852:	d113      	bne.n	800b87c <__ieee754_sqrt+0xec>
 800b854:	459c      	cmp	ip, r3
 800b856:	d811      	bhi.n	800b87c <__ieee754_sqrt+0xec>
 800b858:	f1bc 0f00 	cmp.w	ip, #0
 800b85c:	eb0c 0506 	add.w	r5, ip, r6
 800b860:	da43      	bge.n	800b8ea <__ieee754_sqrt+0x15a>
 800b862:	2d00      	cmp	r5, #0
 800b864:	db41      	blt.n	800b8ea <__ieee754_sqrt+0x15a>
 800b866:	f100 0801 	add.w	r8, r0, #1
 800b86a:	1a09      	subs	r1, r1, r0
 800b86c:	459c      	cmp	ip, r3
 800b86e:	bf88      	it	hi
 800b870:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b874:	eba3 030c 	sub.w	r3, r3, ip
 800b878:	4432      	add	r2, r6
 800b87a:	4640      	mov	r0, r8
 800b87c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b880:	f1be 0e01 	subs.w	lr, lr, #1
 800b884:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b888:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b88c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b890:	d1db      	bne.n	800b84a <__ieee754_sqrt+0xba>
 800b892:	430b      	orrs	r3, r1
 800b894:	d006      	beq.n	800b8a4 <__ieee754_sqrt+0x114>
 800b896:	1c50      	adds	r0, r2, #1
 800b898:	bf13      	iteet	ne
 800b89a:	3201      	addne	r2, #1
 800b89c:	3401      	addeq	r4, #1
 800b89e:	4672      	moveq	r2, lr
 800b8a0:	f022 0201 	bicne.w	r2, r2, #1
 800b8a4:	1063      	asrs	r3, r4, #1
 800b8a6:	0852      	lsrs	r2, r2, #1
 800b8a8:	07e1      	lsls	r1, r4, #31
 800b8aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b8ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b8b2:	bf48      	it	mi
 800b8b4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b8b8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b8bc:	4614      	mov	r4, r2
 800b8be:	e781      	b.n	800b7c4 <__ieee754_sqrt+0x34>
 800b8c0:	0ad9      	lsrs	r1, r3, #11
 800b8c2:	3815      	subs	r0, #21
 800b8c4:	055b      	lsls	r3, r3, #21
 800b8c6:	2900      	cmp	r1, #0
 800b8c8:	d0fa      	beq.n	800b8c0 <__ieee754_sqrt+0x130>
 800b8ca:	02cd      	lsls	r5, r1, #11
 800b8cc:	d50a      	bpl.n	800b8e4 <__ieee754_sqrt+0x154>
 800b8ce:	f1c2 0420 	rsb	r4, r2, #32
 800b8d2:	fa23 f404 	lsr.w	r4, r3, r4
 800b8d6:	1e55      	subs	r5, r2, #1
 800b8d8:	4093      	lsls	r3, r2
 800b8da:	4321      	orrs	r1, r4
 800b8dc:	1b42      	subs	r2, r0, r5
 800b8de:	e78a      	b.n	800b7f6 <__ieee754_sqrt+0x66>
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	e7f0      	b.n	800b8c6 <__ieee754_sqrt+0x136>
 800b8e4:	0049      	lsls	r1, r1, #1
 800b8e6:	3201      	adds	r2, #1
 800b8e8:	e7ef      	b.n	800b8ca <__ieee754_sqrt+0x13a>
 800b8ea:	4680      	mov	r8, r0
 800b8ec:	e7bd      	b.n	800b86a <__ieee754_sqrt+0xda>
 800b8ee:	bf00      	nop
 800b8f0:	7ff00000 	.word	0x7ff00000
 800b8f4:	00000000 	.word	0x00000000

0800b8f8 <__kernel_cos>:
 800b8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fc:	ec57 6b10 	vmov	r6, r7, d0
 800b900:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b904:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b908:	ed8d 1b00 	vstr	d1, [sp]
 800b90c:	da07      	bge.n	800b91e <__kernel_cos+0x26>
 800b90e:	ee10 0a10 	vmov	r0, s0
 800b912:	4639      	mov	r1, r7
 800b914:	f7f5 f940 	bl	8000b98 <__aeabi_d2iz>
 800b918:	2800      	cmp	r0, #0
 800b91a:	f000 8088 	beq.w	800ba2e <__kernel_cos+0x136>
 800b91e:	4632      	mov	r2, r6
 800b920:	463b      	mov	r3, r7
 800b922:	4630      	mov	r0, r6
 800b924:	4639      	mov	r1, r7
 800b926:	f7f4 fe87 	bl	8000638 <__aeabi_dmul>
 800b92a:	4b51      	ldr	r3, [pc, #324]	; (800ba70 <__kernel_cos+0x178>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	460d      	mov	r5, r1
 800b932:	f7f4 fe81 	bl	8000638 <__aeabi_dmul>
 800b936:	a340      	add	r3, pc, #256	; (adr r3, 800ba38 <__kernel_cos+0x140>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	4682      	mov	sl, r0
 800b93e:	468b      	mov	fp, r1
 800b940:	4620      	mov	r0, r4
 800b942:	4629      	mov	r1, r5
 800b944:	f7f4 fe78 	bl	8000638 <__aeabi_dmul>
 800b948:	a33d      	add	r3, pc, #244	; (adr r3, 800ba40 <__kernel_cos+0x148>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fcbd 	bl	80002cc <__adddf3>
 800b952:	4622      	mov	r2, r4
 800b954:	462b      	mov	r3, r5
 800b956:	f7f4 fe6f 	bl	8000638 <__aeabi_dmul>
 800b95a:	a33b      	add	r3, pc, #236	; (adr r3, 800ba48 <__kernel_cos+0x150>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	f7f4 fcb2 	bl	80002c8 <__aeabi_dsub>
 800b964:	4622      	mov	r2, r4
 800b966:	462b      	mov	r3, r5
 800b968:	f7f4 fe66 	bl	8000638 <__aeabi_dmul>
 800b96c:	a338      	add	r3, pc, #224	; (adr r3, 800ba50 <__kernel_cos+0x158>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fcab 	bl	80002cc <__adddf3>
 800b976:	4622      	mov	r2, r4
 800b978:	462b      	mov	r3, r5
 800b97a:	f7f4 fe5d 	bl	8000638 <__aeabi_dmul>
 800b97e:	a336      	add	r3, pc, #216	; (adr r3, 800ba58 <__kernel_cos+0x160>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f7f4 fca0 	bl	80002c8 <__aeabi_dsub>
 800b988:	4622      	mov	r2, r4
 800b98a:	462b      	mov	r3, r5
 800b98c:	f7f4 fe54 	bl	8000638 <__aeabi_dmul>
 800b990:	a333      	add	r3, pc, #204	; (adr r3, 800ba60 <__kernel_cos+0x168>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fc99 	bl	80002cc <__adddf3>
 800b99a:	4622      	mov	r2, r4
 800b99c:	462b      	mov	r3, r5
 800b99e:	f7f4 fe4b 	bl	8000638 <__aeabi_dmul>
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	462b      	mov	r3, r5
 800b9a6:	f7f4 fe47 	bl	8000638 <__aeabi_dmul>
 800b9aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	460d      	mov	r5, r1
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f7f4 fe3f 	bl	8000638 <__aeabi_dmul>
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4602      	mov	r2, r0
 800b9be:	4629      	mov	r1, r5
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f7f4 fc81 	bl	80002c8 <__aeabi_dsub>
 800b9c6:	4b2b      	ldr	r3, [pc, #172]	; (800ba74 <__kernel_cos+0x17c>)
 800b9c8:	4598      	cmp	r8, r3
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	460f      	mov	r7, r1
 800b9ce:	dc10      	bgt.n	800b9f2 <__kernel_cos+0xfa>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4650      	mov	r0, sl
 800b9d6:	4659      	mov	r1, fp
 800b9d8:	f7f4 fc76 	bl	80002c8 <__aeabi_dsub>
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4926      	ldr	r1, [pc, #152]	; (800ba78 <__kernel_cos+0x180>)
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f7f4 fc70 	bl	80002c8 <__aeabi_dsub>
 800b9e8:	ec41 0b10 	vmov	d0, r0, r1
 800b9ec:	b003      	add	sp, #12
 800b9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f2:	4b22      	ldr	r3, [pc, #136]	; (800ba7c <__kernel_cos+0x184>)
 800b9f4:	4920      	ldr	r1, [pc, #128]	; (800ba78 <__kernel_cos+0x180>)
 800b9f6:	4598      	cmp	r8, r3
 800b9f8:	bfcc      	ite	gt
 800b9fa:	4d21      	ldrgt	r5, [pc, #132]	; (800ba80 <__kernel_cos+0x188>)
 800b9fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ba00:	2400      	movs	r4, #0
 800ba02:	4622      	mov	r2, r4
 800ba04:	462b      	mov	r3, r5
 800ba06:	2000      	movs	r0, #0
 800ba08:	f7f4 fc5e 	bl	80002c8 <__aeabi_dsub>
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4680      	mov	r8, r0
 800ba10:	4689      	mov	r9, r1
 800ba12:	462b      	mov	r3, r5
 800ba14:	4650      	mov	r0, sl
 800ba16:	4659      	mov	r1, fp
 800ba18:	f7f4 fc56 	bl	80002c8 <__aeabi_dsub>
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	f7f4 fc52 	bl	80002c8 <__aeabi_dsub>
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	4640      	mov	r0, r8
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	e7da      	b.n	800b9e4 <__kernel_cos+0xec>
 800ba2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ba68 <__kernel_cos+0x170>
 800ba32:	e7db      	b.n	800b9ec <__kernel_cos+0xf4>
 800ba34:	f3af 8000 	nop.w
 800ba38:	be8838d4 	.word	0xbe8838d4
 800ba3c:	bda8fae9 	.word	0xbda8fae9
 800ba40:	bdb4b1c4 	.word	0xbdb4b1c4
 800ba44:	3e21ee9e 	.word	0x3e21ee9e
 800ba48:	809c52ad 	.word	0x809c52ad
 800ba4c:	3e927e4f 	.word	0x3e927e4f
 800ba50:	19cb1590 	.word	0x19cb1590
 800ba54:	3efa01a0 	.word	0x3efa01a0
 800ba58:	16c15177 	.word	0x16c15177
 800ba5c:	3f56c16c 	.word	0x3f56c16c
 800ba60:	5555554c 	.word	0x5555554c
 800ba64:	3fa55555 	.word	0x3fa55555
 800ba68:	00000000 	.word	0x00000000
 800ba6c:	3ff00000 	.word	0x3ff00000
 800ba70:	3fe00000 	.word	0x3fe00000
 800ba74:	3fd33332 	.word	0x3fd33332
 800ba78:	3ff00000 	.word	0x3ff00000
 800ba7c:	3fe90000 	.word	0x3fe90000
 800ba80:	3fd20000 	.word	0x3fd20000
 800ba84:	00000000 	.word	0x00000000

0800ba88 <__kernel_rem_pio2>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	ed2d 8b02 	vpush	{d8}
 800ba90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ba94:	f112 0f14 	cmn.w	r2, #20
 800ba98:	9308      	str	r3, [sp, #32]
 800ba9a:	9101      	str	r1, [sp, #4]
 800ba9c:	4bc4      	ldr	r3, [pc, #784]	; (800bdb0 <__kernel_rem_pio2+0x328>)
 800ba9e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800baa0:	900b      	str	r0, [sp, #44]	; 0x2c
 800baa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800baae:	bfa8      	it	ge
 800bab0:	1ed4      	subge	r4, r2, #3
 800bab2:	9306      	str	r3, [sp, #24]
 800bab4:	bfb2      	itee	lt
 800bab6:	2400      	movlt	r4, #0
 800bab8:	2318      	movge	r3, #24
 800baba:	fb94 f4f3 	sdivge	r4, r4, r3
 800babe:	f06f 0317 	mvn.w	r3, #23
 800bac2:	fb04 3303 	mla	r3, r4, r3, r3
 800bac6:	eb03 0a02 	add.w	sl, r3, r2
 800baca:	9b02      	ldr	r3, [sp, #8]
 800bacc:	9a06      	ldr	r2, [sp, #24]
 800bace:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800bda0 <__kernel_rem_pio2+0x318>
 800bad2:	eb03 0802 	add.w	r8, r3, r2
 800bad6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bad8:	1aa7      	subs	r7, r4, r2
 800bada:	ae22      	add	r6, sp, #136	; 0x88
 800badc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bae0:	2500      	movs	r5, #0
 800bae2:	4545      	cmp	r5, r8
 800bae4:	dd13      	ble.n	800bb0e <__kernel_rem_pio2+0x86>
 800bae6:	9b08      	ldr	r3, [sp, #32]
 800bae8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800bda0 <__kernel_rem_pio2+0x318>
 800baec:	aa22      	add	r2, sp, #136	; 0x88
 800baee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800baf2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800baf6:	f04f 0800 	mov.w	r8, #0
 800bafa:	9b02      	ldr	r3, [sp, #8]
 800bafc:	4598      	cmp	r8, r3
 800bafe:	dc2f      	bgt.n	800bb60 <__kernel_rem_pio2+0xd8>
 800bb00:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bb04:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bb08:	462f      	mov	r7, r5
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	e01b      	b.n	800bb46 <__kernel_rem_pio2+0xbe>
 800bb0e:	42ef      	cmn	r7, r5
 800bb10:	d407      	bmi.n	800bb22 <__kernel_rem_pio2+0x9a>
 800bb12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bb16:	f7f4 fd25 	bl	8000564 <__aeabi_i2d>
 800bb1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bb1e:	3501      	adds	r5, #1
 800bb20:	e7df      	b.n	800bae2 <__kernel_rem_pio2+0x5a>
 800bb22:	ec51 0b18 	vmov	r0, r1, d8
 800bb26:	e7f8      	b.n	800bb1a <__kernel_rem_pio2+0x92>
 800bb28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bb30:	f7f4 fd82 	bl	8000638 <__aeabi_dmul>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb3c:	f7f4 fbc6 	bl	80002cc <__adddf3>
 800bb40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb44:	3601      	adds	r6, #1
 800bb46:	9b06      	ldr	r3, [sp, #24]
 800bb48:	429e      	cmp	r6, r3
 800bb4a:	f1a7 0708 	sub.w	r7, r7, #8
 800bb4e:	ddeb      	ble.n	800bb28 <__kernel_rem_pio2+0xa0>
 800bb50:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bb54:	f108 0801 	add.w	r8, r8, #1
 800bb58:	ecab 7b02 	vstmia	fp!, {d7}
 800bb5c:	3508      	adds	r5, #8
 800bb5e:	e7cc      	b.n	800bafa <__kernel_rem_pio2+0x72>
 800bb60:	9b02      	ldr	r3, [sp, #8]
 800bb62:	aa0e      	add	r2, sp, #56	; 0x38
 800bb64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb68:	930d      	str	r3, [sp, #52]	; 0x34
 800bb6a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bb6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb70:	9c02      	ldr	r4, [sp, #8]
 800bb72:	930c      	str	r3, [sp, #48]	; 0x30
 800bb74:	00e3      	lsls	r3, r4, #3
 800bb76:	930a      	str	r3, [sp, #40]	; 0x28
 800bb78:	ab9a      	add	r3, sp, #616	; 0x268
 800bb7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb7e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bb82:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bb86:	ab72      	add	r3, sp, #456	; 0x1c8
 800bb88:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bb8c:	46c3      	mov	fp, r8
 800bb8e:	46a1      	mov	r9, r4
 800bb90:	f1b9 0f00 	cmp.w	r9, #0
 800bb94:	f1a5 0508 	sub.w	r5, r5, #8
 800bb98:	dc77      	bgt.n	800bc8a <__kernel_rem_pio2+0x202>
 800bb9a:	ec47 6b10 	vmov	d0, r6, r7
 800bb9e:	4650      	mov	r0, sl
 800bba0:	f000 fc46 	bl	800c430 <scalbn>
 800bba4:	ec57 6b10 	vmov	r6, r7, d0
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bbae:	ee10 0a10 	vmov	r0, s0
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 fd40 	bl	8000638 <__aeabi_dmul>
 800bbb8:	ec41 0b10 	vmov	d0, r0, r1
 800bbbc:	f000 fbb8 	bl	800c330 <floor>
 800bbc0:	4b7c      	ldr	r3, [pc, #496]	; (800bdb4 <__kernel_rem_pio2+0x32c>)
 800bbc2:	ec51 0b10 	vmov	r0, r1, d0
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f7f4 fd36 	bl	8000638 <__aeabi_dmul>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	4639      	mov	r1, r7
 800bbd4:	f7f4 fb78 	bl	80002c8 <__aeabi_dsub>
 800bbd8:	460f      	mov	r7, r1
 800bbda:	4606      	mov	r6, r0
 800bbdc:	f7f4 ffdc 	bl	8000b98 <__aeabi_d2iz>
 800bbe0:	9004      	str	r0, [sp, #16]
 800bbe2:	f7f4 fcbf 	bl	8000564 <__aeabi_i2d>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4630      	mov	r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	f7f4 fb6b 	bl	80002c8 <__aeabi_dsub>
 800bbf2:	f1ba 0f00 	cmp.w	sl, #0
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	dd6d      	ble.n	800bcd8 <__kernel_rem_pio2+0x250>
 800bbfc:	1e62      	subs	r2, r4, #1
 800bbfe:	ab0e      	add	r3, sp, #56	; 0x38
 800bc00:	9d04      	ldr	r5, [sp, #16]
 800bc02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc06:	f1ca 0118 	rsb	r1, sl, #24
 800bc0a:	fa40 f301 	asr.w	r3, r0, r1
 800bc0e:	441d      	add	r5, r3
 800bc10:	408b      	lsls	r3, r1
 800bc12:	1ac0      	subs	r0, r0, r3
 800bc14:	ab0e      	add	r3, sp, #56	; 0x38
 800bc16:	9504      	str	r5, [sp, #16]
 800bc18:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bc1c:	f1ca 0317 	rsb	r3, sl, #23
 800bc20:	fa40 fb03 	asr.w	fp, r0, r3
 800bc24:	f1bb 0f00 	cmp.w	fp, #0
 800bc28:	dd65      	ble.n	800bcf6 <__kernel_rem_pio2+0x26e>
 800bc2a:	9b04      	ldr	r3, [sp, #16]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	3301      	adds	r3, #1
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	4615      	mov	r5, r2
 800bc34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bc38:	4294      	cmp	r4, r2
 800bc3a:	f300 809c 	bgt.w	800bd76 <__kernel_rem_pio2+0x2ee>
 800bc3e:	f1ba 0f00 	cmp.w	sl, #0
 800bc42:	dd07      	ble.n	800bc54 <__kernel_rem_pio2+0x1cc>
 800bc44:	f1ba 0f01 	cmp.w	sl, #1
 800bc48:	f000 80c0 	beq.w	800bdcc <__kernel_rem_pio2+0x344>
 800bc4c:	f1ba 0f02 	cmp.w	sl, #2
 800bc50:	f000 80c6 	beq.w	800bde0 <__kernel_rem_pio2+0x358>
 800bc54:	f1bb 0f02 	cmp.w	fp, #2
 800bc58:	d14d      	bne.n	800bcf6 <__kernel_rem_pio2+0x26e>
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	463b      	mov	r3, r7
 800bc5e:	4956      	ldr	r1, [pc, #344]	; (800bdb8 <__kernel_rem_pio2+0x330>)
 800bc60:	2000      	movs	r0, #0
 800bc62:	f7f4 fb31 	bl	80002c8 <__aeabi_dsub>
 800bc66:	4606      	mov	r6, r0
 800bc68:	460f      	mov	r7, r1
 800bc6a:	2d00      	cmp	r5, #0
 800bc6c:	d043      	beq.n	800bcf6 <__kernel_rem_pio2+0x26e>
 800bc6e:	4650      	mov	r0, sl
 800bc70:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800bda8 <__kernel_rem_pio2+0x320>
 800bc74:	f000 fbdc 	bl	800c430 <scalbn>
 800bc78:	4630      	mov	r0, r6
 800bc7a:	4639      	mov	r1, r7
 800bc7c:	ec53 2b10 	vmov	r2, r3, d0
 800bc80:	f7f4 fb22 	bl	80002c8 <__aeabi_dsub>
 800bc84:	4606      	mov	r6, r0
 800bc86:	460f      	mov	r7, r1
 800bc88:	e035      	b.n	800bcf6 <__kernel_rem_pio2+0x26e>
 800bc8a:	4b4c      	ldr	r3, [pc, #304]	; (800bdbc <__kernel_rem_pio2+0x334>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4630      	mov	r0, r6
 800bc90:	4639      	mov	r1, r7
 800bc92:	f7f4 fcd1 	bl	8000638 <__aeabi_dmul>
 800bc96:	f7f4 ff7f 	bl	8000b98 <__aeabi_d2iz>
 800bc9a:	f7f4 fc63 	bl	8000564 <__aeabi_i2d>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	ec43 2b18 	vmov	d8, r2, r3
 800bca6:	4b46      	ldr	r3, [pc, #280]	; (800bdc0 <__kernel_rem_pio2+0x338>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f7f4 fcc5 	bl	8000638 <__aeabi_dmul>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 fb07 	bl	80002c8 <__aeabi_dsub>
 800bcba:	f7f4 ff6d 	bl	8000b98 <__aeabi_d2iz>
 800bcbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcc2:	f84b 0b04 	str.w	r0, [fp], #4
 800bcc6:	ec51 0b18 	vmov	r0, r1, d8
 800bcca:	f7f4 faff 	bl	80002cc <__adddf3>
 800bcce:	f109 39ff 	add.w	r9, r9, #4294967295
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460f      	mov	r7, r1
 800bcd6:	e75b      	b.n	800bb90 <__kernel_rem_pio2+0x108>
 800bcd8:	d106      	bne.n	800bce8 <__kernel_rem_pio2+0x260>
 800bcda:	1e63      	subs	r3, r4, #1
 800bcdc:	aa0e      	add	r2, sp, #56	; 0x38
 800bcde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bce2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bce6:	e79d      	b.n	800bc24 <__kernel_rem_pio2+0x19c>
 800bce8:	4b36      	ldr	r3, [pc, #216]	; (800bdc4 <__kernel_rem_pio2+0x33c>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	f7f4 ff2a 	bl	8000b44 <__aeabi_dcmpge>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d13d      	bne.n	800bd70 <__kernel_rem_pio2+0x2e8>
 800bcf4:	4683      	mov	fp, r0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	f7f4 ff03 	bl	8000b08 <__aeabi_dcmpeq>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	f000 80c0 	beq.w	800be88 <__kernel_rem_pio2+0x400>
 800bd08:	1e65      	subs	r5, r4, #1
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	9902      	ldr	r1, [sp, #8]
 800bd10:	428b      	cmp	r3, r1
 800bd12:	da6c      	bge.n	800bdee <__kernel_rem_pio2+0x366>
 800bd14:	2a00      	cmp	r2, #0
 800bd16:	f000 8089 	beq.w	800be2c <__kernel_rem_pio2+0x3a4>
 800bd1a:	ab0e      	add	r3, sp, #56	; 0x38
 800bd1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bd20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 80ad 	beq.w	800be84 <__kernel_rem_pio2+0x3fc>
 800bd2a:	4650      	mov	r0, sl
 800bd2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800bda8 <__kernel_rem_pio2+0x320>
 800bd30:	f000 fb7e 	bl	800c430 <scalbn>
 800bd34:	ab9a      	add	r3, sp, #616	; 0x268
 800bd36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bd3a:	ec57 6b10 	vmov	r6, r7, d0
 800bd3e:	00ec      	lsls	r4, r5, #3
 800bd40:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bd44:	46aa      	mov	sl, r5
 800bd46:	f1ba 0f00 	cmp.w	sl, #0
 800bd4a:	f280 80d6 	bge.w	800befa <__kernel_rem_pio2+0x472>
 800bd4e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800bda0 <__kernel_rem_pio2+0x318>
 800bd52:	462e      	mov	r6, r5
 800bd54:	2e00      	cmp	r6, #0
 800bd56:	f2c0 8104 	blt.w	800bf62 <__kernel_rem_pio2+0x4da>
 800bd5a:	ab72      	add	r3, sp, #456	; 0x1c8
 800bd5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bd60:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bdc8 <__kernel_rem_pio2+0x340>
 800bd64:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bd68:	f04f 0800 	mov.w	r8, #0
 800bd6c:	1baf      	subs	r7, r5, r6
 800bd6e:	e0ea      	b.n	800bf46 <__kernel_rem_pio2+0x4be>
 800bd70:	f04f 0b02 	mov.w	fp, #2
 800bd74:	e759      	b.n	800bc2a <__kernel_rem_pio2+0x1a2>
 800bd76:	f8d8 3000 	ldr.w	r3, [r8]
 800bd7a:	b955      	cbnz	r5, 800bd92 <__kernel_rem_pio2+0x30a>
 800bd7c:	b123      	cbz	r3, 800bd88 <__kernel_rem_pio2+0x300>
 800bd7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bd82:	f8c8 3000 	str.w	r3, [r8]
 800bd86:	2301      	movs	r3, #1
 800bd88:	3201      	adds	r2, #1
 800bd8a:	f108 0804 	add.w	r8, r8, #4
 800bd8e:	461d      	mov	r5, r3
 800bd90:	e752      	b.n	800bc38 <__kernel_rem_pio2+0x1b0>
 800bd92:	1acb      	subs	r3, r1, r3
 800bd94:	f8c8 3000 	str.w	r3, [r8]
 800bd98:	462b      	mov	r3, r5
 800bd9a:	e7f5      	b.n	800bd88 <__kernel_rem_pio2+0x300>
 800bd9c:	f3af 8000 	nop.w
	...
 800bdac:	3ff00000 	.word	0x3ff00000
 800bdb0:	0800ca20 	.word	0x0800ca20
 800bdb4:	40200000 	.word	0x40200000
 800bdb8:	3ff00000 	.word	0x3ff00000
 800bdbc:	3e700000 	.word	0x3e700000
 800bdc0:	41700000 	.word	0x41700000
 800bdc4:	3fe00000 	.word	0x3fe00000
 800bdc8:	0800c9e0 	.word	0x0800c9e0
 800bdcc:	1e62      	subs	r2, r4, #1
 800bdce:	ab0e      	add	r3, sp, #56	; 0x38
 800bdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bdd8:	a90e      	add	r1, sp, #56	; 0x38
 800bdda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bdde:	e739      	b.n	800bc54 <__kernel_rem_pio2+0x1cc>
 800bde0:	1e62      	subs	r2, r4, #1
 800bde2:	ab0e      	add	r3, sp, #56	; 0x38
 800bde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bdec:	e7f4      	b.n	800bdd8 <__kernel_rem_pio2+0x350>
 800bdee:	a90e      	add	r1, sp, #56	; 0x38
 800bdf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	e789      	b.n	800bd0e <__kernel_rem_pio2+0x286>
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800be00:	2900      	cmp	r1, #0
 800be02:	d0fa      	beq.n	800bdfa <__kernel_rem_pio2+0x372>
 800be04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be06:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800be0a:	446a      	add	r2, sp
 800be0c:	3a98      	subs	r2, #152	; 0x98
 800be0e:	920a      	str	r2, [sp, #40]	; 0x28
 800be10:	9a08      	ldr	r2, [sp, #32]
 800be12:	18e3      	adds	r3, r4, r3
 800be14:	18a5      	adds	r5, r4, r2
 800be16:	aa22      	add	r2, sp, #136	; 0x88
 800be18:	f104 0801 	add.w	r8, r4, #1
 800be1c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	4543      	cmp	r3, r8
 800be26:	da04      	bge.n	800be32 <__kernel_rem_pio2+0x3aa>
 800be28:	461c      	mov	r4, r3
 800be2a:	e6a3      	b.n	800bb74 <__kernel_rem_pio2+0xec>
 800be2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be2e:	2301      	movs	r3, #1
 800be30:	e7e4      	b.n	800bdfc <__kernel_rem_pio2+0x374>
 800be32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800be38:	f7f4 fb94 	bl	8000564 <__aeabi_i2d>
 800be3c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800be40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be42:	46ab      	mov	fp, r5
 800be44:	461c      	mov	r4, r3
 800be46:	f04f 0900 	mov.w	r9, #0
 800be4a:	2600      	movs	r6, #0
 800be4c:	2700      	movs	r7, #0
 800be4e:	9b06      	ldr	r3, [sp, #24]
 800be50:	4599      	cmp	r9, r3
 800be52:	dd06      	ble.n	800be62 <__kernel_rem_pio2+0x3da>
 800be54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be56:	e8e3 6702 	strd	r6, r7, [r3], #8
 800be5a:	f108 0801 	add.w	r8, r8, #1
 800be5e:	930a      	str	r3, [sp, #40]	; 0x28
 800be60:	e7df      	b.n	800be22 <__kernel_rem_pio2+0x39a>
 800be62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800be66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800be6a:	f7f4 fbe5 	bl	8000638 <__aeabi_dmul>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	f7f4 fa29 	bl	80002cc <__adddf3>
 800be7a:	f109 0901 	add.w	r9, r9, #1
 800be7e:	4606      	mov	r6, r0
 800be80:	460f      	mov	r7, r1
 800be82:	e7e4      	b.n	800be4e <__kernel_rem_pio2+0x3c6>
 800be84:	3d01      	subs	r5, #1
 800be86:	e748      	b.n	800bd1a <__kernel_rem_pio2+0x292>
 800be88:	ec47 6b10 	vmov	d0, r6, r7
 800be8c:	f1ca 0000 	rsb	r0, sl, #0
 800be90:	f000 face 	bl	800c430 <scalbn>
 800be94:	ec57 6b10 	vmov	r6, r7, d0
 800be98:	4ba0      	ldr	r3, [pc, #640]	; (800c11c <__kernel_rem_pio2+0x694>)
 800be9a:	ee10 0a10 	vmov	r0, s0
 800be9e:	2200      	movs	r2, #0
 800bea0:	4639      	mov	r1, r7
 800bea2:	f7f4 fe4f 	bl	8000b44 <__aeabi_dcmpge>
 800bea6:	b1f8      	cbz	r0, 800bee8 <__kernel_rem_pio2+0x460>
 800bea8:	4b9d      	ldr	r3, [pc, #628]	; (800c120 <__kernel_rem_pio2+0x698>)
 800beaa:	2200      	movs	r2, #0
 800beac:	4630      	mov	r0, r6
 800beae:	4639      	mov	r1, r7
 800beb0:	f7f4 fbc2 	bl	8000638 <__aeabi_dmul>
 800beb4:	f7f4 fe70 	bl	8000b98 <__aeabi_d2iz>
 800beb8:	4680      	mov	r8, r0
 800beba:	f7f4 fb53 	bl	8000564 <__aeabi_i2d>
 800bebe:	4b97      	ldr	r3, [pc, #604]	; (800c11c <__kernel_rem_pio2+0x694>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	f7f4 fbb9 	bl	8000638 <__aeabi_dmul>
 800bec6:	460b      	mov	r3, r1
 800bec8:	4602      	mov	r2, r0
 800beca:	4639      	mov	r1, r7
 800becc:	4630      	mov	r0, r6
 800bece:	f7f4 f9fb 	bl	80002c8 <__aeabi_dsub>
 800bed2:	f7f4 fe61 	bl	8000b98 <__aeabi_d2iz>
 800bed6:	1c65      	adds	r5, r4, #1
 800bed8:	ab0e      	add	r3, sp, #56	; 0x38
 800beda:	f10a 0a18 	add.w	sl, sl, #24
 800bede:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bee2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bee6:	e720      	b.n	800bd2a <__kernel_rem_pio2+0x2a2>
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fe54 	bl	8000b98 <__aeabi_d2iz>
 800bef0:	ab0e      	add	r3, sp, #56	; 0x38
 800bef2:	4625      	mov	r5, r4
 800bef4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bef8:	e717      	b.n	800bd2a <__kernel_rem_pio2+0x2a2>
 800befa:	ab0e      	add	r3, sp, #56	; 0x38
 800befc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bf00:	f7f4 fb30 	bl	8000564 <__aeabi_i2d>
 800bf04:	4632      	mov	r2, r6
 800bf06:	463b      	mov	r3, r7
 800bf08:	f7f4 fb96 	bl	8000638 <__aeabi_dmul>
 800bf0c:	4b84      	ldr	r3, [pc, #528]	; (800c120 <__kernel_rem_pio2+0x698>)
 800bf0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bf12:	2200      	movs	r2, #0
 800bf14:	4630      	mov	r0, r6
 800bf16:	4639      	mov	r1, r7
 800bf18:	f7f4 fb8e 	bl	8000638 <__aeabi_dmul>
 800bf1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf20:	4606      	mov	r6, r0
 800bf22:	460f      	mov	r7, r1
 800bf24:	e70f      	b.n	800bd46 <__kernel_rem_pio2+0x2be>
 800bf26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bf2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bf2e:	f7f4 fb83 	bl	8000638 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf3a:	f7f4 f9c7 	bl	80002cc <__adddf3>
 800bf3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf42:	f108 0801 	add.w	r8, r8, #1
 800bf46:	9b02      	ldr	r3, [sp, #8]
 800bf48:	4598      	cmp	r8, r3
 800bf4a:	dc01      	bgt.n	800bf50 <__kernel_rem_pio2+0x4c8>
 800bf4c:	45b8      	cmp	r8, r7
 800bf4e:	ddea      	ble.n	800bf26 <__kernel_rem_pio2+0x49e>
 800bf50:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bf54:	ab4a      	add	r3, sp, #296	; 0x128
 800bf56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bf5a:	ed87 7b00 	vstr	d7, [r7]
 800bf5e:	3e01      	subs	r6, #1
 800bf60:	e6f8      	b.n	800bd54 <__kernel_rem_pio2+0x2cc>
 800bf62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	dc0b      	bgt.n	800bf80 <__kernel_rem_pio2+0x4f8>
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dc35      	bgt.n	800bfd8 <__kernel_rem_pio2+0x550>
 800bf6c:	d059      	beq.n	800c022 <__kernel_rem_pio2+0x59a>
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	f003 0007 	and.w	r0, r3, #7
 800bf74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bf78:	ecbd 8b02 	vpop	{d8}
 800bf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bf82:	2b03      	cmp	r3, #3
 800bf84:	d1f3      	bne.n	800bf6e <__kernel_rem_pio2+0x4e6>
 800bf86:	ab4a      	add	r3, sp, #296	; 0x128
 800bf88:	4423      	add	r3, r4
 800bf8a:	9306      	str	r3, [sp, #24]
 800bf8c:	461c      	mov	r4, r3
 800bf8e:	469a      	mov	sl, r3
 800bf90:	9502      	str	r5, [sp, #8]
 800bf92:	9b02      	ldr	r3, [sp, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f1aa 0a08 	sub.w	sl, sl, #8
 800bf9a:	dc6b      	bgt.n	800c074 <__kernel_rem_pio2+0x5ec>
 800bf9c:	46aa      	mov	sl, r5
 800bf9e:	f1ba 0f01 	cmp.w	sl, #1
 800bfa2:	f1a4 0408 	sub.w	r4, r4, #8
 800bfa6:	f300 8085 	bgt.w	800c0b4 <__kernel_rem_pio2+0x62c>
 800bfaa:	9c06      	ldr	r4, [sp, #24]
 800bfac:	2000      	movs	r0, #0
 800bfae:	3408      	adds	r4, #8
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	2d01      	cmp	r5, #1
 800bfb4:	f300 809d 	bgt.w	800c0f2 <__kernel_rem_pio2+0x66a>
 800bfb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800bfbc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800bfc0:	f1bb 0f00 	cmp.w	fp, #0
 800bfc4:	f040 809b 	bne.w	800c0fe <__kernel_rem_pio2+0x676>
 800bfc8:	9b01      	ldr	r3, [sp, #4]
 800bfca:	e9c3 5600 	strd	r5, r6, [r3]
 800bfce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bfd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bfd6:	e7ca      	b.n	800bf6e <__kernel_rem_pio2+0x4e6>
 800bfd8:	3408      	adds	r4, #8
 800bfda:	ab4a      	add	r3, sp, #296	; 0x128
 800bfdc:	441c      	add	r4, r3
 800bfde:	462e      	mov	r6, r5
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	2e00      	cmp	r6, #0
 800bfe6:	da36      	bge.n	800c056 <__kernel_rem_pio2+0x5ce>
 800bfe8:	f1bb 0f00 	cmp.w	fp, #0
 800bfec:	d039      	beq.n	800c062 <__kernel_rem_pio2+0x5da>
 800bfee:	4602      	mov	r2, r0
 800bff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bff4:	9c01      	ldr	r4, [sp, #4]
 800bff6:	e9c4 2300 	strd	r2, r3, [r4]
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c002:	f7f4 f961 	bl	80002c8 <__aeabi_dsub>
 800c006:	ae4c      	add	r6, sp, #304	; 0x130
 800c008:	2401      	movs	r4, #1
 800c00a:	42a5      	cmp	r5, r4
 800c00c:	da2c      	bge.n	800c068 <__kernel_rem_pio2+0x5e0>
 800c00e:	f1bb 0f00 	cmp.w	fp, #0
 800c012:	d002      	beq.n	800c01a <__kernel_rem_pio2+0x592>
 800c014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c018:	4619      	mov	r1, r3
 800c01a:	9b01      	ldr	r3, [sp, #4]
 800c01c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c020:	e7a5      	b.n	800bf6e <__kernel_rem_pio2+0x4e6>
 800c022:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c026:	eb0d 0403 	add.w	r4, sp, r3
 800c02a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c02e:	2000      	movs	r0, #0
 800c030:	2100      	movs	r1, #0
 800c032:	2d00      	cmp	r5, #0
 800c034:	da09      	bge.n	800c04a <__kernel_rem_pio2+0x5c2>
 800c036:	f1bb 0f00 	cmp.w	fp, #0
 800c03a:	d002      	beq.n	800c042 <__kernel_rem_pio2+0x5ba>
 800c03c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c040:	4619      	mov	r1, r3
 800c042:	9b01      	ldr	r3, [sp, #4]
 800c044:	e9c3 0100 	strd	r0, r1, [r3]
 800c048:	e791      	b.n	800bf6e <__kernel_rem_pio2+0x4e6>
 800c04a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c04e:	f7f4 f93d 	bl	80002cc <__adddf3>
 800c052:	3d01      	subs	r5, #1
 800c054:	e7ed      	b.n	800c032 <__kernel_rem_pio2+0x5aa>
 800c056:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c05a:	f7f4 f937 	bl	80002cc <__adddf3>
 800c05e:	3e01      	subs	r6, #1
 800c060:	e7c0      	b.n	800bfe4 <__kernel_rem_pio2+0x55c>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	e7c5      	b.n	800bff4 <__kernel_rem_pio2+0x56c>
 800c068:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c06c:	f7f4 f92e 	bl	80002cc <__adddf3>
 800c070:	3401      	adds	r4, #1
 800c072:	e7ca      	b.n	800c00a <__kernel_rem_pio2+0x582>
 800c074:	e9da 8900 	ldrd	r8, r9, [sl]
 800c078:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c07c:	9b02      	ldr	r3, [sp, #8]
 800c07e:	3b01      	subs	r3, #1
 800c080:	9302      	str	r3, [sp, #8]
 800c082:	4632      	mov	r2, r6
 800c084:	463b      	mov	r3, r7
 800c086:	4640      	mov	r0, r8
 800c088:	4649      	mov	r1, r9
 800c08a:	f7f4 f91f 	bl	80002cc <__adddf3>
 800c08e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	4640      	mov	r0, r8
 800c098:	4649      	mov	r1, r9
 800c09a:	f7f4 f915 	bl	80002c8 <__aeabi_dsub>
 800c09e:	4632      	mov	r2, r6
 800c0a0:	463b      	mov	r3, r7
 800c0a2:	f7f4 f913 	bl	80002cc <__adddf3>
 800c0a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c0aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c0ae:	ed8a 7b00 	vstr	d7, [sl]
 800c0b2:	e76e      	b.n	800bf92 <__kernel_rem_pio2+0x50a>
 800c0b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c0b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c0bc:	4640      	mov	r0, r8
 800c0be:	4632      	mov	r2, r6
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	f7f4 f902 	bl	80002cc <__adddf3>
 800c0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	f7f4 f8f8 	bl	80002c8 <__aeabi_dsub>
 800c0d8:	4632      	mov	r2, r6
 800c0da:	463b      	mov	r3, r7
 800c0dc:	f7f4 f8f6 	bl	80002cc <__adddf3>
 800c0e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0e8:	ed84 7b00 	vstr	d7, [r4]
 800c0ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0f0:	e755      	b.n	800bf9e <__kernel_rem_pio2+0x516>
 800c0f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0f6:	f7f4 f8e9 	bl	80002cc <__adddf3>
 800c0fa:	3d01      	subs	r5, #1
 800c0fc:	e759      	b.n	800bfb2 <__kernel_rem_pio2+0x52a>
 800c0fe:	9b01      	ldr	r3, [sp, #4]
 800c100:	9a01      	ldr	r2, [sp, #4]
 800c102:	601d      	str	r5, [r3, #0]
 800c104:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c108:	605c      	str	r4, [r3, #4]
 800c10a:	609f      	str	r7, [r3, #8]
 800c10c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c110:	60d3      	str	r3, [r2, #12]
 800c112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c116:	6110      	str	r0, [r2, #16]
 800c118:	6153      	str	r3, [r2, #20]
 800c11a:	e728      	b.n	800bf6e <__kernel_rem_pio2+0x4e6>
 800c11c:	41700000 	.word	0x41700000
 800c120:	3e700000 	.word	0x3e700000
 800c124:	00000000 	.word	0x00000000

0800c128 <__kernel_sin>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	ed2d 8b04 	vpush	{d8-d9}
 800c130:	eeb0 8a41 	vmov.f32	s16, s2
 800c134:	eef0 8a61 	vmov.f32	s17, s3
 800c138:	ec55 4b10 	vmov	r4, r5, d0
 800c13c:	b083      	sub	sp, #12
 800c13e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c142:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c146:	9001      	str	r0, [sp, #4]
 800c148:	da06      	bge.n	800c158 <__kernel_sin+0x30>
 800c14a:	ee10 0a10 	vmov	r0, s0
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 fd22 	bl	8000b98 <__aeabi_d2iz>
 800c154:	2800      	cmp	r0, #0
 800c156:	d051      	beq.n	800c1fc <__kernel_sin+0xd4>
 800c158:	4622      	mov	r2, r4
 800c15a:	462b      	mov	r3, r5
 800c15c:	4620      	mov	r0, r4
 800c15e:	4629      	mov	r1, r5
 800c160:	f7f4 fa6a 	bl	8000638 <__aeabi_dmul>
 800c164:	4682      	mov	sl, r0
 800c166:	468b      	mov	fp, r1
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4620      	mov	r0, r4
 800c16e:	4629      	mov	r1, r5
 800c170:	f7f4 fa62 	bl	8000638 <__aeabi_dmul>
 800c174:	a341      	add	r3, pc, #260	; (adr r3, 800c27c <__kernel_sin+0x154>)
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	4680      	mov	r8, r0
 800c17c:	4689      	mov	r9, r1
 800c17e:	4650      	mov	r0, sl
 800c180:	4659      	mov	r1, fp
 800c182:	f7f4 fa59 	bl	8000638 <__aeabi_dmul>
 800c186:	a33f      	add	r3, pc, #252	; (adr r3, 800c284 <__kernel_sin+0x15c>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f7f4 f89c 	bl	80002c8 <__aeabi_dsub>
 800c190:	4652      	mov	r2, sl
 800c192:	465b      	mov	r3, fp
 800c194:	f7f4 fa50 	bl	8000638 <__aeabi_dmul>
 800c198:	a33c      	add	r3, pc, #240	; (adr r3, 800c28c <__kernel_sin+0x164>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	f7f4 f895 	bl	80002cc <__adddf3>
 800c1a2:	4652      	mov	r2, sl
 800c1a4:	465b      	mov	r3, fp
 800c1a6:	f7f4 fa47 	bl	8000638 <__aeabi_dmul>
 800c1aa:	a33a      	add	r3, pc, #232	; (adr r3, 800c294 <__kernel_sin+0x16c>)
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	f7f4 f88a 	bl	80002c8 <__aeabi_dsub>
 800c1b4:	4652      	mov	r2, sl
 800c1b6:	465b      	mov	r3, fp
 800c1b8:	f7f4 fa3e 	bl	8000638 <__aeabi_dmul>
 800c1bc:	a337      	add	r3, pc, #220	; (adr r3, 800c29c <__kernel_sin+0x174>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f7f4 f883 	bl	80002cc <__adddf3>
 800c1c6:	9b01      	ldr	r3, [sp, #4]
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	460f      	mov	r7, r1
 800c1cc:	b9eb      	cbnz	r3, 800c20a <__kernel_sin+0xe2>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4650      	mov	r0, sl
 800c1d4:	4659      	mov	r1, fp
 800c1d6:	f7f4 fa2f 	bl	8000638 <__aeabi_dmul>
 800c1da:	a325      	add	r3, pc, #148	; (adr r3, 800c270 <__kernel_sin+0x148>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f7f4 f872 	bl	80002c8 <__aeabi_dsub>
 800c1e4:	4642      	mov	r2, r8
 800c1e6:	464b      	mov	r3, r9
 800c1e8:	f7f4 fa26 	bl	8000638 <__aeabi_dmul>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	f7f4 f86a 	bl	80002cc <__adddf3>
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	ec45 4b10 	vmov	d0, r4, r5
 800c200:	b003      	add	sp, #12
 800c202:	ecbd 8b04 	vpop	{d8-d9}
 800c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20a:	4b1b      	ldr	r3, [pc, #108]	; (800c278 <__kernel_sin+0x150>)
 800c20c:	ec51 0b18 	vmov	r0, r1, d8
 800c210:	2200      	movs	r2, #0
 800c212:	f7f4 fa11 	bl	8000638 <__aeabi_dmul>
 800c216:	4632      	mov	r2, r6
 800c218:	ec41 0b19 	vmov	d9, r0, r1
 800c21c:	463b      	mov	r3, r7
 800c21e:	4640      	mov	r0, r8
 800c220:	4649      	mov	r1, r9
 800c222:	f7f4 fa09 	bl	8000638 <__aeabi_dmul>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	ec51 0b19 	vmov	r0, r1, d9
 800c22e:	f7f4 f84b 	bl	80002c8 <__aeabi_dsub>
 800c232:	4652      	mov	r2, sl
 800c234:	465b      	mov	r3, fp
 800c236:	f7f4 f9ff 	bl	8000638 <__aeabi_dmul>
 800c23a:	ec53 2b18 	vmov	r2, r3, d8
 800c23e:	f7f4 f843 	bl	80002c8 <__aeabi_dsub>
 800c242:	a30b      	add	r3, pc, #44	; (adr r3, 800c270 <__kernel_sin+0x148>)
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	4606      	mov	r6, r0
 800c24a:	460f      	mov	r7, r1
 800c24c:	4640      	mov	r0, r8
 800c24e:	4649      	mov	r1, r9
 800c250:	f7f4 f9f2 	bl	8000638 <__aeabi_dmul>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4630      	mov	r0, r6
 800c25a:	4639      	mov	r1, r7
 800c25c:	f7f4 f836 	bl	80002cc <__adddf3>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 f82e 	bl	80002c8 <__aeabi_dsub>
 800c26c:	e7c4      	b.n	800c1f8 <__kernel_sin+0xd0>
 800c26e:	bf00      	nop
 800c270:	55555549 	.word	0x55555549
 800c274:	3fc55555 	.word	0x3fc55555
 800c278:	3fe00000 	.word	0x3fe00000
 800c27c:	5acfd57c 	.word	0x5acfd57c
 800c280:	3de5d93a 	.word	0x3de5d93a
 800c284:	8a2b9ceb 	.word	0x8a2b9ceb
 800c288:	3e5ae5e6 	.word	0x3e5ae5e6
 800c28c:	57b1fe7d 	.word	0x57b1fe7d
 800c290:	3ec71de3 	.word	0x3ec71de3
 800c294:	19c161d5 	.word	0x19c161d5
 800c298:	3f2a01a0 	.word	0x3f2a01a0
 800c29c:	1110f8a6 	.word	0x1110f8a6
 800c2a0:	3f811111 	.word	0x3f811111

0800c2a4 <with_errno>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	460d      	mov	r5, r1
 800c2aa:	4616      	mov	r6, r2
 800c2ac:	f7fd fce2 	bl	8009c74 <__errno>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	6006      	str	r6, [r0, #0]
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}

0800c2b8 <xflow>:
 800c2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2ba:	4614      	mov	r4, r2
 800c2bc:	461d      	mov	r5, r3
 800c2be:	b108      	cbz	r0, 800c2c4 <xflow+0xc>
 800c2c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c2c4:	e9cd 2300 	strd	r2, r3, [sp]
 800c2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	f7f4 f9b2 	bl	8000638 <__aeabi_dmul>
 800c2d4:	2222      	movs	r2, #34	; 0x22
 800c2d6:	b003      	add	sp, #12
 800c2d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2dc:	f7ff bfe2 	b.w	800c2a4 <with_errno>

0800c2e0 <__math_uflow>:
 800c2e0:	b508      	push	{r3, lr}
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c2e8:	f7ff ffe6 	bl	800c2b8 <xflow>
 800c2ec:	ec41 0b10 	vmov	d0, r0, r1
 800c2f0:	bd08      	pop	{r3, pc}

0800c2f2 <__math_oflow>:
 800c2f2:	b508      	push	{r3, lr}
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c2fa:	f7ff ffdd 	bl	800c2b8 <xflow>
 800c2fe:	ec41 0b10 	vmov	d0, r0, r1
 800c302:	bd08      	pop	{r3, pc}

0800c304 <fabs>:
 800c304:	ec51 0b10 	vmov	r0, r1, d0
 800c308:	ee10 2a10 	vmov	r2, s0
 800c30c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c310:	ec43 2b10 	vmov	d0, r2, r3
 800c314:	4770      	bx	lr

0800c316 <finite>:
 800c316:	b082      	sub	sp, #8
 800c318:	ed8d 0b00 	vstr	d0, [sp]
 800c31c:	9801      	ldr	r0, [sp, #4]
 800c31e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c322:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c326:	0fc0      	lsrs	r0, r0, #31
 800c328:	b002      	add	sp, #8
 800c32a:	4770      	bx	lr
 800c32c:	0000      	movs	r0, r0
	...

0800c330 <floor>:
 800c330:	ec51 0b10 	vmov	r0, r1, d0
 800c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c33c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c340:	2e13      	cmp	r6, #19
 800c342:	ee10 5a10 	vmov	r5, s0
 800c346:	ee10 8a10 	vmov	r8, s0
 800c34a:	460c      	mov	r4, r1
 800c34c:	dc32      	bgt.n	800c3b4 <floor+0x84>
 800c34e:	2e00      	cmp	r6, #0
 800c350:	da14      	bge.n	800c37c <floor+0x4c>
 800c352:	a333      	add	r3, pc, #204	; (adr r3, 800c420 <floor+0xf0>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ffb8 	bl	80002cc <__adddf3>
 800c35c:	2200      	movs	r2, #0
 800c35e:	2300      	movs	r3, #0
 800c360:	f7f4 fbfa 	bl	8000b58 <__aeabi_dcmpgt>
 800c364:	b138      	cbz	r0, 800c376 <floor+0x46>
 800c366:	2c00      	cmp	r4, #0
 800c368:	da57      	bge.n	800c41a <floor+0xea>
 800c36a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c36e:	431d      	orrs	r5, r3
 800c370:	d001      	beq.n	800c376 <floor+0x46>
 800c372:	4c2d      	ldr	r4, [pc, #180]	; (800c428 <floor+0xf8>)
 800c374:	2500      	movs	r5, #0
 800c376:	4621      	mov	r1, r4
 800c378:	4628      	mov	r0, r5
 800c37a:	e025      	b.n	800c3c8 <floor+0x98>
 800c37c:	4f2b      	ldr	r7, [pc, #172]	; (800c42c <floor+0xfc>)
 800c37e:	4137      	asrs	r7, r6
 800c380:	ea01 0307 	and.w	r3, r1, r7
 800c384:	4303      	orrs	r3, r0
 800c386:	d01f      	beq.n	800c3c8 <floor+0x98>
 800c388:	a325      	add	r3, pc, #148	; (adr r3, 800c420 <floor+0xf0>)
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	f7f3 ff9d 	bl	80002cc <__adddf3>
 800c392:	2200      	movs	r2, #0
 800c394:	2300      	movs	r3, #0
 800c396:	f7f4 fbdf 	bl	8000b58 <__aeabi_dcmpgt>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d0eb      	beq.n	800c376 <floor+0x46>
 800c39e:	2c00      	cmp	r4, #0
 800c3a0:	bfbe      	ittt	lt
 800c3a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c3a6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c3aa:	19a4      	addlt	r4, r4, r6
 800c3ac:	ea24 0407 	bic.w	r4, r4, r7
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	e7e0      	b.n	800c376 <floor+0x46>
 800c3b4:	2e33      	cmp	r6, #51	; 0x33
 800c3b6:	dd0b      	ble.n	800c3d0 <floor+0xa0>
 800c3b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c3bc:	d104      	bne.n	800c3c8 <floor+0x98>
 800c3be:	ee10 2a10 	vmov	r2, s0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	f7f3 ff82 	bl	80002cc <__adddf3>
 800c3c8:	ec41 0b10 	vmov	d0, r0, r1
 800c3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d8:	fa23 f707 	lsr.w	r7, r3, r7
 800c3dc:	4207      	tst	r7, r0
 800c3de:	d0f3      	beq.n	800c3c8 <floor+0x98>
 800c3e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c420 <floor+0xf0>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f7f3 ff71 	bl	80002cc <__adddf3>
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f7f4 fbb3 	bl	8000b58 <__aeabi_dcmpgt>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0bf      	beq.n	800c376 <floor+0x46>
 800c3f6:	2c00      	cmp	r4, #0
 800c3f8:	da02      	bge.n	800c400 <floor+0xd0>
 800c3fa:	2e14      	cmp	r6, #20
 800c3fc:	d103      	bne.n	800c406 <floor+0xd6>
 800c3fe:	3401      	adds	r4, #1
 800c400:	ea25 0507 	bic.w	r5, r5, r7
 800c404:	e7b7      	b.n	800c376 <floor+0x46>
 800c406:	2301      	movs	r3, #1
 800c408:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c40c:	fa03 f606 	lsl.w	r6, r3, r6
 800c410:	4435      	add	r5, r6
 800c412:	4545      	cmp	r5, r8
 800c414:	bf38      	it	cc
 800c416:	18e4      	addcc	r4, r4, r3
 800c418:	e7f2      	b.n	800c400 <floor+0xd0>
 800c41a:	2500      	movs	r5, #0
 800c41c:	462c      	mov	r4, r5
 800c41e:	e7aa      	b.n	800c376 <floor+0x46>
 800c420:	8800759c 	.word	0x8800759c
 800c424:	7e37e43c 	.word	0x7e37e43c
 800c428:	bff00000 	.word	0xbff00000
 800c42c:	000fffff 	.word	0x000fffff

0800c430 <scalbn>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	ec55 4b10 	vmov	r4, r5, d0
 800c436:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c43a:	4606      	mov	r6, r0
 800c43c:	462b      	mov	r3, r5
 800c43e:	b99a      	cbnz	r2, 800c468 <scalbn+0x38>
 800c440:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c444:	4323      	orrs	r3, r4
 800c446:	d036      	beq.n	800c4b6 <scalbn+0x86>
 800c448:	4b39      	ldr	r3, [pc, #228]	; (800c530 <scalbn+0x100>)
 800c44a:	4629      	mov	r1, r5
 800c44c:	ee10 0a10 	vmov	r0, s0
 800c450:	2200      	movs	r2, #0
 800c452:	f7f4 f8f1 	bl	8000638 <__aeabi_dmul>
 800c456:	4b37      	ldr	r3, [pc, #220]	; (800c534 <scalbn+0x104>)
 800c458:	429e      	cmp	r6, r3
 800c45a:	4604      	mov	r4, r0
 800c45c:	460d      	mov	r5, r1
 800c45e:	da10      	bge.n	800c482 <scalbn+0x52>
 800c460:	a32b      	add	r3, pc, #172	; (adr r3, 800c510 <scalbn+0xe0>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	e03a      	b.n	800c4de <scalbn+0xae>
 800c468:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c46c:	428a      	cmp	r2, r1
 800c46e:	d10c      	bne.n	800c48a <scalbn+0x5a>
 800c470:	ee10 2a10 	vmov	r2, s0
 800c474:	4620      	mov	r0, r4
 800c476:	4629      	mov	r1, r5
 800c478:	f7f3 ff28 	bl	80002cc <__adddf3>
 800c47c:	4604      	mov	r4, r0
 800c47e:	460d      	mov	r5, r1
 800c480:	e019      	b.n	800c4b6 <scalbn+0x86>
 800c482:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c486:	460b      	mov	r3, r1
 800c488:	3a36      	subs	r2, #54	; 0x36
 800c48a:	4432      	add	r2, r6
 800c48c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c490:	428a      	cmp	r2, r1
 800c492:	dd08      	ble.n	800c4a6 <scalbn+0x76>
 800c494:	2d00      	cmp	r5, #0
 800c496:	a120      	add	r1, pc, #128	; (adr r1, 800c518 <scalbn+0xe8>)
 800c498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c49c:	da1c      	bge.n	800c4d8 <scalbn+0xa8>
 800c49e:	a120      	add	r1, pc, #128	; (adr r1, 800c520 <scalbn+0xf0>)
 800c4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a4:	e018      	b.n	800c4d8 <scalbn+0xa8>
 800c4a6:	2a00      	cmp	r2, #0
 800c4a8:	dd08      	ble.n	800c4bc <scalbn+0x8c>
 800c4aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4b6:	ec45 4b10 	vmov	d0, r4, r5
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
 800c4bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c4c0:	da19      	bge.n	800c4f6 <scalbn+0xc6>
 800c4c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c4c6:	429e      	cmp	r6, r3
 800c4c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c4cc:	dd0a      	ble.n	800c4e4 <scalbn+0xb4>
 800c4ce:	a112      	add	r1, pc, #72	; (adr r1, 800c518 <scalbn+0xe8>)
 800c4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1e2      	bne.n	800c49e <scalbn+0x6e>
 800c4d8:	a30f      	add	r3, pc, #60	; (adr r3, 800c518 <scalbn+0xe8>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f7f4 f8ab 	bl	8000638 <__aeabi_dmul>
 800c4e2:	e7cb      	b.n	800c47c <scalbn+0x4c>
 800c4e4:	a10a      	add	r1, pc, #40	; (adr r1, 800c510 <scalbn+0xe0>)
 800c4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d0b8      	beq.n	800c460 <scalbn+0x30>
 800c4ee:	a10e      	add	r1, pc, #56	; (adr r1, 800c528 <scalbn+0xf8>)
 800c4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f4:	e7b4      	b.n	800c460 <scalbn+0x30>
 800c4f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4fa:	3236      	adds	r2, #54	; 0x36
 800c4fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c500:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c504:	4620      	mov	r0, r4
 800c506:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <scalbn+0x108>)
 800c508:	2200      	movs	r2, #0
 800c50a:	e7e8      	b.n	800c4de <scalbn+0xae>
 800c50c:	f3af 8000 	nop.w
 800c510:	c2f8f359 	.word	0xc2f8f359
 800c514:	01a56e1f 	.word	0x01a56e1f
 800c518:	8800759c 	.word	0x8800759c
 800c51c:	7e37e43c 	.word	0x7e37e43c
 800c520:	8800759c 	.word	0x8800759c
 800c524:	fe37e43c 	.word	0xfe37e43c
 800c528:	c2f8f359 	.word	0xc2f8f359
 800c52c:	81a56e1f 	.word	0x81a56e1f
 800c530:	43500000 	.word	0x43500000
 800c534:	ffff3cb0 	.word	0xffff3cb0
 800c538:	3c900000 	.word	0x3c900000

0800c53c <_init>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	bf00      	nop
 800c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c542:	bc08      	pop	{r3}
 800c544:	469e      	mov	lr, r3
 800c546:	4770      	bx	lr

0800c548 <_fini>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	bf00      	nop
 800c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54e:	bc08      	pop	{r3}
 800c550:	469e      	mov	lr, r3
 800c552:	4770      	bx	lr
